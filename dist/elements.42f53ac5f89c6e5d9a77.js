!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=107)}([function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],r=0;r<e.length;r++){var o=e[r],l=t.base?o[0]+t.base:o[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var h=s(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(a[h].references++,a[h].updater(d)):a.push({identifier:u,updater:v(d,t),references:1}),i.push(u)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=h(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var p=null,m=0;function v(e,t){var n,i,r;if(t.singleton){var o=m++;n=p||(p=c(t)),i=d.bind(null,n,o,!1),r=d.bind(null,n,o,!0)}else n=c(t),i=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var r=s(n[i]);a[r].references--}for(var o=l(e,t),c=0;c<n.length;c++){var u=s(n[c]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=o}}}},function(e,t,n){"use strict";n(11)},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,u=o.indexOf,h={},d=h.toString,f=h.hasOwnProperty,p=f.toString,m=p.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},_=n.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||_).createElement("script");if(o.text=e,t)for(i in b)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[d.call(e)]||"object":typeof e}var x=function(e,t){return new x.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:"3.5.1",constructor:x,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},x.extend=x.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(c&&i&&(x.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[t],o=r&&!Array.isArray(n)?[]:r||x.isPlainObject(n)?n:{},r=!1,a[t]=x.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},x.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=a(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?x.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(C(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return l(a)},guid:1,support:v}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=o[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,i,r,o,a,s,l,c,u,h,d,f,p,m,v,y,g,_,b="sizzle"+1*new Date,w=e.document,E=0,x=0,C=le(),S=le(),T=le(),N=le(),k=function(e,t){return e===t&&(h=!0),0},O={}.hasOwnProperty,M=[],D=M.pop,A=M.push,L=M.push,j=M.slice,P=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+R+"*("+F+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+R+"*\\]",q=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",V=new RegExp(R+"+","g"),W=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),B=new RegExp("^"+R+"*,"+R+"*"),U=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),z=new RegExp(R+"|>"),$=new RegExp(q),G=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){d()},ae=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(M=j.call(w.childNodes),w.childNodes),M[w.childNodes.length].nodeType}catch(e){L={apply:M.length?function(e,t){A.apply(e,j.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var o,s,c,u,h,p,y,g=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&(d(t),t=t||f,m)){if(11!==w&&(h=Q.exec(e)))if(o=h[1]){if(9===w){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(g&&(c=g.getElementById(o))&&_(t,c)&&c.id===o)return i.push(c),i}else{if(h[2])return L.apply(i,t.getElementsByTagName(e)),i;if((o=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!N[e+" "]&&(!v||!v.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(y=e,g=t,1===w&&(z.test(e)||U.test(e))){for((g=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,re):t.setAttribute("id",u=b)),s=(p=a(e)).length;s--;)p[s]=(u?"#"+u:":scope")+" "+_e(p[s]);y=p.join(",")}try{return L.apply(i,g.querySelectorAll(y)),i}catch(t){N(e,!0)}finally{u===b&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ce(e){return e[b]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function he(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;return a!=f&&9===a.nodeType&&a.documentElement?(p=(f=a).documentElement,m=!o(f),w!=f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ue((function(e){return p.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(f.getElementsByClassName),n.getById=ue((function(e){return p.appendChild(e).id=b,!f.getElementsByName||!f.getElementsByName(b).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},y=[],v=[],(n.qsa=K.test(f.querySelectorAll))&&(ue((function(e){var t;p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+R+"*(?:value|"+I+")"),e.querySelectorAll("[id~="+b+"-]").length||v.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=K.test(g=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),y.push("!=",q)})),v=v.length&&new RegExp(v.join("|")),y=y.length&&new RegExp(y.join("|")),t=K.test(p.compareDocumentPosition),_=t||K.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return h=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==f||e.ownerDocument==w&&_(w,e)?-1:t==f||t.ownerDocument==w&&_(w,t)?1:u?P(u,e)-P(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e==f?-1:t==f?1:r?-1:o?1:u?P(u,e)-P(u,t):0;if(r===o)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?de(a[i],s[i]):a[i]==w?-1:s[i]==w?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&m&&!N[t+" "]&&(!y||!y.test(t))&&(!v||!v.test(t)))try{var i=g.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){N(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&d(e),_(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&d(e);var r=i.attrHandle[t.toLowerCase()],o=r&&O.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(ie,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,o=0;if(h=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(k),h){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return u=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=se.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(V," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,h,d,f,p,m=o!==a?"nextSibling":"previousSibling",v=t.parentNode,y=s&&t.nodeName.toLowerCase(),g=!l&&!s,_=!1;if(v){if(o){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?v.firstChild:v.lastChild],a&&g){for(_=(f=(c=(u=(h=(d=v)[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],d=f&&v.childNodes[f];d=++f&&d&&d[m]||(_=f=0)||p.pop();)if(1===d.nodeType&&++_&&d===t){u[e]=[E,f,_];break}}else if(g&&(_=f=(c=(u=(h=(d=t)[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===_)for(;(d=++f&&d&&d[m]||(_=f=0)||p.pop())&&((s?d.nodeName.toLowerCase()!==y:1!==d.nodeType)||!++_||(g&&((u=(h=d[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]=[E,_]),d!==t)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=P(e,o[a])]=!(n[i]=o[a])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ce((function(e){var t=[],n=[],i=s(e.replace(W,"$1"));return i[b]?ce((function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ce((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ve((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=pe(t);function ge(){}function _e(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function be(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=x++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,h,d=[E,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=(h=t[b]||(t[b]={}))[t.uniqueID]||(h[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===E&&c[1]===s)return d[2]=c[2];if(u[o]=d,d[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function Ee(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function xe(e,t,n,i,r,o){return i&&!i[b]&&(i=xe(i)),r&&!r[b]&&(r=xe(r,o)),ce((function(o,a,s,l){var c,u,h,d=[],f=[],p=a.length,m=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?m:Ee(m,d,e,s,l),y=n?r||(o?e:p||i)?[]:a:v;if(n&&n(v,y,s,l),i)for(c=Ee(y,f),i(c,[],s,l),u=c.length;u--;)(h=c[u])&&(y[f[u]]=!(v[f[u]]=h));if(o){if(r||e){if(r){for(c=[],u=y.length;u--;)(h=y[u])&&c.push(v[u]=h);r(null,y=[],c,l)}for(u=y.length;u--;)(h=y[u])&&(c=r?P(o,h):d[u])>-1&&(o[c]=!(a[c]=h))}}else y=Ee(y===a?y.splice(p,y.length):y),r?r(null,a,y,l):L.apply(a,y)}))}function Ce(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,u=be((function(e){return e===t}),s,!0),h=be((function(e){return P(t,e)>-1}),s,!0),d=[function(e,n,i){var r=!a&&(i||n!==c)||((t=n).nodeType?u(e,n,i):h(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])d=[be(we(d),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[b]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return xe(l>1&&we(d),l>1&&_e(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<r&&Ce(e.slice(l,r)),r<o&&Ce(e=e.slice(r)),r<o&&_e(e))}d.push(n)}return we(d)}return ge.prototype=i.filters=i.pseudos,i.setFilters=new ge,a=se.tokenize=function(e,t){var n,r,o,a,s,l,c,u=S[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=i.preFilter;s;){for(a in n&&!(r=B.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W," ")}),s=s.slice(n.length)),i.filter)!(r=X[a].exec(s))||c[a]&&!(r=c[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,l).slice(0)},s=se.compile=function(e,t){var n,r=[],o=[],s=T[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Ce(t[n]))[b]?r.push(s):o.push(s);(s=T(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,u){var h,p,v,y=0,g="0",_=o&&[],b=[],w=c,x=o||r&&i.find.TAG("*",u),C=E+=null==w?1:Math.random()||.1,S=x.length;for(u&&(c=a==f||a||u);g!==S&&null!=(h=x[g]);g++){if(r&&h){for(p=0,a||h.ownerDocument==f||(d(h),s=!m);v=e[p++];)if(v(h,a||f,s)){l.push(h);break}u&&(E=C)}n&&((h=!v&&h)&&y--,o&&_.push(h))}if(y+=g,n&&g!==y){for(p=0;v=t[p++];)v(_,b,a,s);if(o){if(y>0)for(;g--;)_[g]||b[g]||(b[g]=D.call(l));b=Ee(b)}L.apply(l,b),u&&!o&&b.length>0&&y+t.length>1&&se.uniqueSort(l)}return u&&(E=C,c=w),_};return n?ce(o):o}(o,r))).selector=e}return s},l=se.select=function(e,t,n,r){var o,l,c,u,h,d="function"==typeof e&&e,f=!r&&a(e=d.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=X.needsContext.test(e)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((h=i.find[u])&&(r=h(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ye(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&_e(l)))return L.apply(n,r),n;break}}return(d||s(e,f))(r,t,!m,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=b.split("").sort(k).join("")===b,n.detectDuplicates=!!h,d(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||he("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||he("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||he(I,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),se}(n);x.find=S,x.expr=S.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=S.uniqueSort,x.text=S.getText,x.isXMLDoc=S.isXML,x.contains=S.contains,x.escapeSelector=S.escape;var T=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&x(e).is(n))break;i.push(e)}return i},N=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=x.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,n){return y(t)?x.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return u.call(t,e)>-1!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?x.find.matchesSelector(i,e)?[i]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<i;t++)if(x.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)x.find(e,r[t],n);return i>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&k.test(e)?x(e):e||[],!1).length}});var A,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:_,!0)),M.test(i[1])&&x.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=_.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,A=x(_);var j=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&x(e);if(!k.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?x.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(x(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(O(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,i){var r=x.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=x.filter(i,r)),this.length>1&&(P[e]||x.uniqueSort(r),j.test(e)&&r.reverse()),this.pushStack(r)}}));var R=/[^\x20\t\r\n\f]+/g;function F(e){return e}function H(e){throw e}function q(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):x.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){x.each(n,(function(n,i){y(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==E(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;(n=x.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?x.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(n){x.each(t,(function(t,i){var r=y(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var o=0;function a(e,t,i,r){return function(){var s=this,l=arguments,c=function(){var n,c;if(!(e<o)){if((n=i.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?r?c.call(n,a(o,t,F,r),a(o,t,H,r)):(o++,c.call(n,a(o,t,F,r),a(o,t,H,r),a(o,t,F,t.notifyWith))):(i!==F&&(s=void 0,l=[n]),(r||t.resolveWith)(s,l))}},u=r?c:function(){try{c()}catch(n){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(n,u.stackTrace),e+1>=o&&(i!==H&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?u():(x.Deferred.getStackHook&&(u.stackTrace=x.Deferred.getStackHook()),n.setTimeout(u))}}return x.Deferred((function(n){t[0][3].add(a(0,n,y(r)?r:F,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:F)),t[2][3].add(a(0,n,y(i)?i:H))})).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},o={};return x.each(t,(function(e,n){var a=n[2],s=n[5];r[n[1]]=a.add,s&&a.add((function(){i=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=s.call(arguments),o=x.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(q(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(r[n]&&r[n].then)))return o.then();for(;n--;)q(r[n],a(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&V.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){n.setTimeout((function(){throw e}))};var W=x.Deferred();function B(){_.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),x.ready()}x.fn.ready=function(e){return W.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||W.resolveWith(_,[x]))}}),x.ready.then=W.then,"complete"===_.readyState||"loading"!==_.readyState&&!_.documentElement.doScroll?n.setTimeout(x.ready):(_.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var U=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===E(n))for(s in r=!0,n)U(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,y(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(x(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},z=/^-ms-/,$=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function X(e){return e.replace(z,"ms-").replace($,G)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Z(){this.expando=x.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[X(t)]=n;else for(i in t)r[X(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||x.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var J=new Z,K=new Z,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Q.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=X(i.slice(5)),te(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){K.set(this,e)})):U(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=te(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,x.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),i=n.length,r=n.shift(),o=x._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){x.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:x.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=x.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],oe=_.documentElement,ae=function(e){return x.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ae=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===x.css(e,"display")};function ce(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return x.css(e,t,"")},l=s(),c=n&&n[3]||(x.cssNumber[t]?"":"px"),u=e.nodeType&&(x.cssNumber[t]||"px"!==c&&+l)&&ie.exec(x.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)x.style(e,t,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,x.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ue={};function he(e){var t,n=e.ownerDocument,i=e.nodeName,r=ue[i];return r||(t=n.body.appendChild(n.createElement(i)),r=x.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ue[i]=r,r)}function de(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&le(i)&&(r[o]=he(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}x.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?x(this).show():x(this).hide()}))}});var fe,pe,me=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;fe=_.createDocumentFragment().appendChild(_.createElement("div")),(pe=_.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),fe.appendChild(pe),v.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",v.option=!!fe.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?x.merge([e],n):n}function be(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,v.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function Ee(e,t,n,i,r){for(var o,a,s,l,c,u,h=t.createDocumentFragment(),d=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===E(o))x.merge(d,o.nodeType?[o]:o);else if(we.test(o)){for(a=a||h.appendChild(t.createElement("div")),s=(ve.exec(o)||["",""])[1].toLowerCase(),l=ge[s]||ge._default,a.innerHTML=l[1]+x.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;x.merge(d,a.childNodes),(a=h.firstChild).textContent=""}else d.push(t.createTextNode(o));for(h.textContent="",f=0;o=d[f++];)if(i&&x.inArray(o,i)>-1)r&&r.push(o);else if(c=ae(o),a=_e(h.appendChild(o),"script"),c&&be(a),n)for(u=0;o=a[u++];)ye.test(o.type||"")&&n.push(o);return h}var xe=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ne(){return!1}function ke(e,t){return e===function(){try{return _.activeElement}catch(e){}}()==("focus"===t)}function Oe(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Oe(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ne;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return x().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=x.guid++)),e.each((function(){x.event.add(this,t,r,i,n)}))}function Me(e,t,n){n?(J.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),J.set(this,t,o),i=n(this,t),this[t](),o!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else o.length&&(J.set(this,t,{value:x.event.trigger(x.extend(o[0],x.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&x.event.add(e,t,Te)}x.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,h,d,f,p,m,v=J.get(e);if(Y(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&x.find.matchesSelector(oe,r),n.guid||(n.guid=x.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)f=m=(s=Se.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f&&(h=x.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=x.event.special[f]||{},u=x.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&x.expr.match.needsContext.test(r),namespace:p.join(".")},o),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,p,a)||e.addEventListener&&e.addEventListener(f,a)),h.add&&(h.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),x.event.global[f]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,h,d,f,p,m,v=J.hasData(e)&&J.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(f=m=(s=Se.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f){for(h=x.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)u=d[o],!r&&m!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(e,u));a&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,p,v.handle)||x.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)x.event.remove(e,f+t[c],n,i,!0);x.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=new Array(arguments.length),l=x.event.fix(e),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=x.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=x.event.handlers.call(this,l,c),t=0;(r=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((x.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?x(r,this).index(c)>-1:x.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&O(t,"input")&&Me(t,"click",Te),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&O(t,"input")&&Me(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&O(t,"input")&&J.get(t,"click")||O(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ne,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Ne,isPropagationStopped:Ne,isImmediatePropagationStopped:Ne,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return Me(this,e,ke),!1},trigger:function(){return Me(this,e),!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||x.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,i){return Oe(this,e,t,n,i)},one:function(e,t,n,i){return Oe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ne),this.each((function(){x.event.remove(this,e,n,t)}))}});var De=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Re(e,t){var n,i,r,o,a,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(r in J.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)x.event.add(t,r,s[r][n]);K.hasData(e)&&(o=K.access(e),a=x.extend({},o),K.set(t,a))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function He(e,t,n,i){t=l(t);var r,o,a,s,c,u,h=0,d=e.length,f=d-1,p=t[0],m=y(p);if(m||d>1&&"string"==typeof p&&!v.checkClone&&Ae.test(p))return e.each((function(r){var o=e.eq(r);m&&(t[0]=p.call(this,r,o.html())),He(o,t,n,i)}));if(d&&(o=(r=Ee(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=x.map(_e(r,"script"),Pe)).length;h<d;h++)c=r,h!==f&&(c=x.clone(c,!0,!0),s&&x.merge(a,_e(c,"script"))),n.call(e[h],c,h);if(s)for(u=a[a.length-1].ownerDocument,x.map(a,Ie),h=0;h<s;h++)c=a[h],ye.test(c.type||"")&&!J.access(c,"globalEval")&&x.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Le,""),c,u))}return e}function qe(e,t,n){for(var i,r=t?x.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||x.cleanData(_e(i)),i.parentNode&&(n&&ae(i)&&be(_e(i,"script")),i.parentNode.removeChild(i));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=ae(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(a=_e(s),i=0,r=(o=_e(e)).length;i<r;i++)Fe(o[i],a[i]);if(t)if(n)for(o=o||_e(e),a=a||_e(s),i=0,r=o.length;i<r;i++)Re(o[i],a[i]);else Re(e,s);return(a=_e(s,"script")).length>0&&be(a,!l&&_e(e,"script")),s},cleanData:function(e){for(var t,n,i,r=x.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),x.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return U(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return He(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return He(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return He(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return He(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(_e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!ge[(ve.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(_e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(_e(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,i=[],r=x(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),x(r[a])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var Ve=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Ue=new RegExp(re.join("|"),"i");function ze(e,t,n){var i,r,o,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=x.style(e,t)),!v.pixelBoxStyles()&&Ve.test(a)&&Ue.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(c).appendChild(u);var e=n.getComputedStyle(u);i="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),r=36===t(e.width),u.style.position="absolute",o=12===t(u.offsetWidth/3),oe.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,s,l,c=_.createElement("div"),u=_.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===u.style.backgroundClip,x.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,i,r;return null==s&&(e=_.createElement("table"),t=_.createElement("tr"),i=_.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(i),r=n.getComputedStyle(t),s=parseInt(r.height)>3,oe.removeChild(e)),s}}))}();var Ge=["Webkit","Moz","ms"],Xe=_.createElement("div").style,Ye={};function Ze(e){var t=x.cssProps[e]||Ye[e];return t||(e in Xe?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Xe)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var i=ie.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function nt(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=x.css(e,n+re[a],!0,r)),i?("content"===n&&(l-=x.css(e,"padding"+re[a],!0,r)),"margin"!==n&&(l-=x.css(e,"border"+re[a]+"Width",!0,r))):(l+=x.css(e,"padding"+re[a],!0,r),"padding"!==n?l+=x.css(e,"border"+re[a]+"Width",!0,r):s+=x.css(e,"border"+re[a]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function it(e,t,n){var i=We(e),r=(!v.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,i),o=r,a=ze(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ve.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&O(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===x.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===x.css(e,"boxSizing",!1,i),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(r?"border":"content"),o,i,a)+"px"}function rt(e,t,n,i,r){return new rt.prototype.init(e,t,n,i,r)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=X(t),l=Ke.test(t),c=e.style;if(l||(t=Ze(s)),a=x.cssHooks[t]||x.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=ie.exec(n))&&r[1]&&(n=ce(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(x.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=X(t);return Ke.test(t)||(t=Ze(s)),(a=x.cssHooks[t]||x.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=ze(e,t,i)),"normal"===r&&t in et&&(r=et[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,i){if(n)return!Je.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,i):Be(e,Qe,(function(){return it(e,t,i)}))},set:function(e,n,i){var r,o=We(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||i)&&"border-box"===x.css(e,"boxSizing",!1,o),l=i?nt(e,t,i,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),l&&(r=ie.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),tt(0,n,l)}}})),x.cssHooks.marginLeft=$e(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(ze(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+re[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(x.cssHooks[e+t].set=tt)})),x.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=We(e),r=t.length;a<r;a++)o[t[a]]=x.css(e,t[a],!1,i);return o}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=rt.prototype.init,x.fx.step={};var ot,at,st=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ct(){at&&(!1===_.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,x.fx.interval),x.fx.tick())}function ut(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function ht(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=re[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function dt(e,t,n){for(var i,r=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function ft(e,t,n){var i,r,o=0,a=ft.prefilters.length,s=x.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=ot||ut(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(i);return s.notifyWith(e,[c,i,n]),i<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var i=x.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=X(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=x.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);o<a;o++)if(i=ft.prefilters[o].call(c,e,u,c.opts))return y(i.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return x.map(u,dt,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,c,u,h="width"in t||"height"in t,d=this,f={},p=e.style,m=e.nodeType&&le(e),v=J.get(e,"fxshow");for(i in n.queue||(null==(a=x._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()}))}))),t)if(r=t[i],st.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;m=!0}f[i]=v&&v[i]||x.style(e,i)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(f))for(i in h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=v&&v.display)&&(c=J.get(e,"display")),"none"===(u=x.css(e,"display"))&&(c?u=c:(de([e],!0),c=e.style.display||c,u=x.css(e,"display"),de([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===x.css(e,"float")&&(l||(d.done((function(){p.display=c})),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,f)l||(v?"hidden"in v&&(m=v.hidden):v=J.access(e,"fxshow",{display:c}),o&&(v.hidden=!m),m&&de([e],!0),d.done((function(){for(i in m||de([e]),J.remove(e,"fxshow"),f)x.style(e,i,f[i])}))),l=dt(m?v[i]:0,i,d),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),x.speed=function(e,t,n){var i=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return x.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in x.fx.speeds?i.duration=x.fx.speeds[i.duration]:i.duration=x.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&x.dequeue(this,i.queue)},i},x.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=x.isEmptyObject(e),o=x.speed(t,n,i),a=function(){var t=ft(this,x.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=x.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&lt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=x.timers,a=i?i.length:0;for(n.finish=!0,x.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ht(t,!0),e,i,r)}})),x.each({slideDown:ht("show"),slideUp:ht("hide"),slideToggle:ht("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),ot=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){at||(at=!0,ct())},x.fx.stop=function(){at=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},function(){var e=_.createElement("input"),t=_.createElement("select").appendChild(_.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=_.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var pt,mt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return U(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?x.prop(e,t,n):(1===o&&x.isXMLDoc(e)||(r=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=x.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&O(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||x.find.attr;mt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=mt[a],mt[a]=r,r=null!=n(e,t,i)?a:null,mt[a]=o),r}}));var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function gt(e){return(e.match(R)||[]).join(" ")}function _t(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}x.fn.extend({prop:function(e,t){return U(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&x.isXMLDoc(e)||(t=x.propFix[t]||t,r=x.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(y(e))return this.each((function(t){x(this).addClass(e.call(this,t,_t(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(r=_t(n),i=1===n.nodeType&&" "+gt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=gt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(y(e))return this.each((function(t){x(this).removeClass(e.call(this,t,_t(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(r=_t(n),i=1===n.nodeType&&" "+gt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=gt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){x(this).toggleClass(e.call(this,n,_t(this),t),t)})):this.each((function(){var t,r,o,a;if(i)for(r=0,o=x(this),a=bt(e);t=a[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=_t(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+gt(_t(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;x.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=y(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,x(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=x.map(r,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=x.valHooks[r.type]||x.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(wt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:gt(x.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!O(n.parentNode,"optgroup"))){if(t=x(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=x.makeArray(t),a=r.length;a--;)((i=r[a]).selected=x.inArray(x.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},v.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var Et=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,i,r){var o,a,s,l,c,u,h,d,p=[i||_],m=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=i=i||_,3!==i.nodeType&&8!==i.nodeType&&!Et.test(m+x.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[x.expando]?e:new x.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:x.makeArray(t,[e]),h=x.event.special[m]||{},r||!h.trigger||!1!==h.trigger.apply(i,t))){if(!r&&!h.noBubble&&!g(i)){for(l=h.delegateType||m,Et.test(l+m)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(i.ownerDocument||_)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:h.bindType||m,(u=(J.get(a,"events")||Object.create(null))[e.type]&&J.get(a,"handle"))&&u.apply(a,t),(u=c&&a[c])&&u.apply&&Y(a)&&(e.result=u.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!Y(i)||c&&y(i[m])&&!g(i)&&((s=i[c])&&(i[c]=null),x.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,xt),i[m](),e.isPropagationStopped()&&d.removeEventListener(m,xt),x.event.triggered=void 0,s&&(i[c]=s)),e.result}},simulate:function(e,t,n){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(i,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),v.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var Ct=n.location,St={guid:Date.now()},Tt=/\?/;x.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),t};var Nt=/\[\]$/,kt=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,i){var r;if(Array.isArray(t))x.each(t,(function(t,r){n||Nt.test(e)?i(e,r):Dt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==E(t))i(e,t);else for(r in t)Dt(e+"["+r+"]",t[r],n,i)}x.param=function(e,t){var n,i=[],r=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){r(this.name,this.value)}));else for(n in e)Dt(n,e[n],t,r);return i.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Mt.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(kt,"\r\n")}})):{name:t.name,value:n.replace(kt,"\r\n")}})).get()}});var At=/%20/g,Lt=/#.*$/,jt=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Rt=/^\/\//,Ft={},Ht={},qt="*/".concat("*"),Vt=_.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(R)||[];if(y(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Bt(e,t,n,i){var r={},o=e===Ht;function a(s){var l;return r[s]=!0,x.each(e[s]||[],(function(e,s){var c=s(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Ut(e,t){var n,i,r=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&x.extend(!0,e,i),e}Vt.href=Ct.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,x.ajaxSettings),t):Ut(x.ajaxSettings,e)},ajaxPrefilter:Wt(Ft),ajaxTransport:Wt(Ht),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,s,l,c,u,h,d,f=x.ajaxSetup({},t),p=f.context||f,m=f.context&&(p.nodeType||p.jquery)?x(p):x.event,v=x.Deferred(),y=x.Callbacks("once memory"),g=f.statusCode||{},b={},w={},E="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Pt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||E;return i&&i.abort(t),S(0,t),this}};if(v.promise(C),f.url=((e||f.url||Ct.href)+"").replace(Rt,Ct.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(R)||[""],null==f.crossDomain){l=_.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=x.param(f.data,f.traditional)),Bt(Ft,f,t,C),c)return C;for(h in(u=x.event&&f.global)&&0==x.active++&&x.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),r=f.url.replace(Lt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(At,"+")):(d=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Tt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(jt,"$1"),d=(Tt.test(r)?"&":"?")+"_="+St.guid+++d),f.url=r+d),f.ifModified&&(x.lastModified[r]&&C.setRequestHeader("If-Modified-Since",x.lastModified[r]),x.etag[r]&&C.setRequestHeader("If-None-Match",x.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+qt+"; q=0.01":""):f.accepts["*"]),f.headers)C.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(p,C,f)||c))return C.abort();if(E="abort",y.add(f.complete),C.done(f.success),C.fail(f.error),i=Bt(Ht,f,t,C)){if(C.readyState=1,u&&m.trigger("ajaxSend",[C,f]),c)return C;f.async&&f.timeout>0&&(s=n.setTimeout((function(){C.abort("timeout")}),f.timeout));try{c=!1,i.send(b,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,l){var h,d,_,b,w,E=t;c||(c=!0,s&&n.clearTimeout(s),i=void 0,o=l||"",C.readyState=e>0?4:0,h=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,C,a)),!h&&x.inArray("script",f.dataTypes)>-1&&(f.converters["text script"]=function(){}),b=function(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,b,C,h),h?(f.ifModified&&((w=C.getResponseHeader("Last-Modified"))&&(x.lastModified[r]=w),(w=C.getResponseHeader("etag"))&&(x.etag[r]=w)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=b.state,d=b.data,h=!(_=b.error))):(_=E,!e&&E||(E="error",e<0&&(e=0))),C.status=e,C.statusText=(t||E)+"",h?v.resolveWith(p,[d,E,C]):v.rejectWith(p,[C,E,_]),C.statusCode(g),g=void 0,u&&m.trigger(h?"ajaxSuccess":"ajaxError",[C,f,h?d:_]),y.fireWith(p,[C,E]),u&&(m.trigger("ajaxComplete",[C,f]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:r,data:n,success:i},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},$t=x.ajaxSettings.xhr();v.cors=!!$t&&"withCredentials"in $t,v.ajax=$t=!!$t,x.ajaxTransport((function(e){var t,i;if(v.cors||$t&&!e.crossDomain)return{send:function(r,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(a,r[a]);t=function(e){return function(){t&&(t=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(zt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),i=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),_.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Gt,Xt=[],Yt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||x.expando+"_"+St.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,t,i){var r,o,a,s=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||x.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){a=arguments},i.always((function(){void 0===o?x(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(r)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Gt=_.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Gt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=_.implementation.createHTMLDocument("")).createElement("base")).href=_.location.href,t.head.appendChild(i)):t=_),o=!n&&[],(r=M.exec(e))?[t.createElement(r[1])]:(r=Ee([e],t,o),o&&o.length&&x(o).remove(),x.merge([],r.childNodes)));var i,r,o},x.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=gt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&x.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c=x.css(e,"position"),u=x(e),h={};"static"===c&&(e.style.position="relative"),s=u.offset(),o=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(i=u.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),y(t)&&(t=t.call(e,n,x.extend({},s))),null!=t.top&&(h.top=t.top-s.top+a),null!=t.left&&(h.left=t.left-s.left+r),"using"in t?t.using.call(e,h):("number"==typeof h.top&&(h.top+="px"),"number"==typeof h.left&&(h.left+="px"),u.css(h))}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===x.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),r.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-x.css(i,"marginTop",!0),left:t.left-r.left-x.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||oe}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(i){return U(this,(function(e,i,r){var o;if(g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=$e(v.pixelPosition,(function(e,n){if(n)return n=ze(e,t),Ve.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){x.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return U(this,(function(t,n,r){var o;return g(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?x.css(t,n,s):x.style(t,n,r,s)}),t,a?r:void 0,a)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=s.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(s.call(arguments)))}).guid=e.guid=e.guid||x.guid++,r},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=O,x.isFunction=y,x.isWindow=g,x.camelCase=X,x.type=E,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},void 0===(i=function(){return x}.apply(t,[]))||(e.exports=i);var Jt=n.jQuery,Kt=n.$;return x.noConflict=function(e){return n.$===x&&(n.$=Kt),e&&n.jQuery===x&&(n.jQuery=Jt),x},void 0===r&&(n.jQuery=n.$=x),x}))},,function(e,t,n){"use strict";(function(e){n(1),n(26);function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function o(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function a(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),P.add(this),j.add(this),L.add(this),A.add(this),D.add(this),M.add(this),O.add(this),k.add(this),N.add(this),T.add(this),S.add(this),C.add(this),x.add(this),E.add(this),w.add(this),l.set(this,{writable:!0,value:void 0}),c.set(this,{writable:!0,value:void 0}),u.set(this,{writable:!0,value:void 0}),h.set(this,{writable:!0,value:void 0}),d.set(this,{writable:!0,value:void 0}),f.set(this,{writable:!0,value:void 0}),p.set(this,{writable:!0,value:void 0}),m.set(this,{writable:!0,value:void 0}),v.set(this,{writable:!0,value:void 0}),y.set(this,{writable:!0,value:void 0}),g.set(this,{writable:!0,value:void 0}),_.set(this,{writable:!0,value:void 0}),b.set(this,{writable:!0,value:{firstItem:0,secondItem:0,thirdItem:0,isFirstItem:void 0,isSecondItem:void 0,isThirdItem:void 0}}),a(this,l,t),a(this,u,t.find(".dropdown-quantity__head")),a(this,h,t.find(".dropdown-quantity__picker-item-header")),a(this,c,t.find(".dropdown-quantity__head-out")),a(this,d,t.find(".dropdown-quantity__picker")),a(this,f,t.find(".dropdown-quantity__picker-item-quantity-minus")),a(this,p,t.find(".dropdown-quantity__picker-item-quantity-plus")),a(this,m,t.find(".dropdown-quantity__picker-item-quantity-amount")),a(this,v,t.find(".dropdown-quantity__picker-item-clear")),a(this,y,t.find(".dropdown-quantity__picker-item-submit")),o(this,v).on("click",r(this,j,Y).bind(this)),o(this,u).on("click",this.togglePicker.bind(this)),o(this,y).on("click",this.togglePicker.bind(this)),o(this,f).eq(0).on("click",r(this,O,U).bind(this)),o(this,f).eq(1).on("click",r(this,D,$).bind(this)),o(this,f).eq(2).on("click",r(this,L,X).bind(this)),o(this,p).eq(0).on("click",r(this,k,B).bind(this)),o(this,p).eq(1).on("click",r(this,M,z).bind(this)),o(this,p).eq(2).on("click",r(this,A,G).bind(this)),document.addEventListener("mouseup",r(this,P,Z).bind(this)),"room"===n?r(this,w,I).call(this):r(this,E,R).call(this),this.togglePicker()}var t,n,s;return t=e,(n=[{key:"togglePicker",value:function(){o(this,d).toggleClass("dropdown-quantity__picker_hidden")}}])&&i(t.prototype,n),s&&i(t,s),e}(),l=new WeakMap,c=new WeakMap,u=new WeakMap,h=new WeakMap,d=new WeakMap,f=new WeakMap,p=new WeakMap,m=new WeakMap,v=new WeakMap,y=new WeakMap,g=new WeakMap,_=new WeakMap,b=new WeakMap,w=new WeakSet,E=new WeakSet,x=new WeakSet,C=new WeakSet,S=new WeakSet,T=new WeakSet,N=new WeakSet,k=new WeakSet,O=new WeakSet,M=new WeakSet,D=new WeakSet,A=new WeakSet,L=new WeakSet,j=new WeakSet,P=new WeakSet,I=function(){o(this,d).find(".dropdown-quantity__picker-item:last-of-type").hide(),o(this,c).text("Ð£Ð´Ð¾Ð±ÑÑÐ²Ð° Ð½Ð¾Ð¼ÐµÑÐ°"),o(this,h).eq(0).text("Ð¡Ð¿Ð°Ð»ÑÐ½Ð¸"),o(this,h).eq(1).text("ÐÑÐ¾Ð²Ð°ÑÐ¸"),o(this,h).eq(2).text("ÐÐ°Ð½Ð½ÑÐµ ÐºÐ¾Ð¼Ð½Ð°ÑÑ"),a(this,g,r(this,x,F)),a(this,_,r(this,C,H))},R=function(){o(this,c).text("Ð¡ÐºÐ¾Ð»ÑÐºÐ¾ Ð³Ð¾ÑÑÐµÐ¹"),o(this,h).eq(0).text("ÐÐ·ÑÐ¾ÑÐ»ÑÐµ"),o(this,h).eq(1).text("ÐÐµÑÐ¸"),o(this,h).eq(2).text("ÐÐ»Ð°Ð´ÐµÐ½ÑÑ"),a(this,g,r(this,S,q)),a(this,_,r(this,T,V))},F=function(){switch(o(this,b).isFirstItem){case!0:o(this,b).firstItem<5&&o(this,b).firstItem++;break;case void 0:break;case!1:o(this,b).firstItem>0&&o(this,b).firstItem--}if(o(this,b).firstItem>0)switch(o(this,b).isSecondItem){case!0:o(this,b).secondItem<5&&o(this,b).secondItem++;break;case void 0:break;case!1:o(this,b).secondItem>0&&o(this,b).secondItem--}else o(this,b).secondItem=0,o(this,b).thirdItem=0;if(o(this,b).firstItem>0&&o(this,b).secondItem>0)switch(o(this,b).isThirdItem){case!0:o(this,b).thirdItem<5&&o(this,b).thirdItem++;break;case void 0:break;case!1:0!==o(this,b).thirdItem&&o(this,b).thirdItem--}else o(this,b).thirdItem=0;o(this,b).isFirstItem=void 0,o(this,b).isSecondItem=void 0,o(this,b).isThirdItem=void 0},H=function(){var t="";switch(e(o(this,m)[0]).text(o(this,b).firstItem),e(o(this,m)[1]).text(o(this,b).secondItem),e(o(this,m)[2]).text(o(this,b).thirdItem),o(this,b).firstItem){case 0:o(this,v).css("visibility","hidden"),t="Ð£Ð´Ð¾Ð±ÑÑÐ²Ð° Ð½Ð¾Ð¼ÐµÑÐ°";break;case 1:o(this,v).css("visibility","visible"),t="".concat(o(this,b).firstItem," ÑÐ¿Ð°Ð»ÑÐ½Ñ");break;case 2:case 3:case 4:t="".concat(o(this,b).firstItem," ÑÐ¿Ð°Ð»ÑÐ½Ð¸");break;case 5:t="".concat(o(this,b).firstItem," ÑÐ¿Ð°Ð»ÐµÐ½")}switch(o(this,b).secondItem){case 1:t+=", ".concat(o(this,b).secondItem," ÐºÑÐ¾Ð²Ð°ÑÑ");break;case 2:case 3:case 4:t+=", ".concat(o(this,b).secondItem," ÐºÑÐ¾Ð²Ð°ÑÐ¸");break;case 5:t+=", ".concat(o(this,b).secondItem," ÐºÑÐ¾Ð²Ð°ÑÐµÐ¹")}o(this,c).text(t)},q=function(){var e=o(this,b).firstItem+o(this,b).secondItem;switch(o(this,b).isFirstItem){case!0:e<5&&o(this,b).firstItem++;break;case void 0:break;case!1:o(this,b).firstItem>0&&o(this,b).firstItem--}switch(e=o(this,b).firstItem+o(this,b).secondItem,o(this,b).isSecondItem){case!0:e<5&&o(this,b).secondItem++;break;case void 0:break;case!1:o(this,b).secondItem>0&&o(this,b).secondItem--}if((e=o(this,b).firstItem+o(this,b).secondItem)>0)switch(o(this,b).isThirdItem){case!0:o(this,b).thirdItem<5&&o(this,b).thirdItem++;break;case void 0:break;case!1:0!==o(this,b).thirdItem&&o(this,b).thirdItem--}else o(this,b).thirdItem=0;o(this,b).isFirstItem=void 0,o(this,b).isSecondItem=void 0,o(this,b).isThirdItem=void 0},V=function(){var t="",n=o(this,b).firstItem+o(this,b).secondItem;switch(e(o(this,m)[0]).text(o(this,b).firstItem),e(o(this,m)[1]).text(o(this,b).secondItem),e(o(this,m)[2]).text(o(this,b).thirdItem),n){case 0:o(this,v).css("visibility","hidden"),t="Ð¡ÐºÐ¾Ð»ÑÐºÐ¾ Ð³Ð¾ÑÑÐµÐ¹";break;case 1:o(this,v).css("visibility","visible"),t="".concat(n," Ð³Ð¾ÑÑÑ");break;case 2:case 3:case 4:t="".concat(n," Ð³Ð¾ÑÑÑ");break;case 5:t="".concat(n," Ð³Ð¾ÑÑÐµÐ¹")}switch(o(this,b).thirdItem){case 1:t+=", ".concat(o(this,b).thirdItem," Ð¼Ð»Ð°Ð´ÐµÐ½ÐµÑ");break;case 2:case 3:case 4:t+=", ".concat(o(this,b).thirdItem," Ð¼Ð»Ð°Ð´ÐµÐ½ÑÐ°");break;case 5:t+=", ".concat(o(this,b).thirdItem," Ð¼Ð»Ð°Ð´ÐµÐ½ÑÐµÐ²")}o(this,c).text(t)},W=function(){switch(o(this,b).firstItem){case 0:e(o(this,f)[0]).prop("disabled",!0);break;case 1:e(o(this,f)[0]).prop("disabled",!1)}switch(o(this,b).secondItem){case 0:e(o(this,f)[1]).prop("disabled",!0);break;case 1:e(o(this,f)[1]).prop("disabled",!1)}switch(o(this,b).thirdItem){case 0:e(o(this,f)[2]).prop("disabled",!0);break;case 1:e(o(this,f)[2]).prop("disabled",!1)}},B=function(){o(this,b).isFirstItem=!0,o(this,g).call(this),o(this,_).call(this),r(this,N,W).call(this)},U=function(){o(this,b).isFirstItem=!1,o(this,g).call(this),o(this,_).call(this),r(this,N,W).call(this)},z=function(){o(this,b).isSecondItem=!0,o(this,g).call(this),o(this,_).call(this),r(this,N,W).call(this)},$=function(){o(this,b).isSecondItem=!1,o(this,g).call(this),o(this,_).call(this),r(this,N,W).call(this)},G=function(){o(this,b).isThirdItem=!0,o(this,g).call(this),o(this,_).call(this),r(this,N,W).call(this)},X=function(){o(this,b).isThirdItem=!1,o(this,g).call(this),o(this,_).call(this),r(this,N,W).call(this)},Y=function(){o(this,b).firstItem=0,o(this,b).secondItem=0,o(this,b).thirdItem=0,o(this,_).call(this),r(this,N,W).call(this)},Z=function(e){e.target.closest(".dropdown-quantity")||o(this,d).addClass("dropdown-quantity__picker_hidden")};t.a=s}).call(this,n(2))},function(e,t,n){"use strict";n(1),n(28);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function o(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}function a(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}var s=new WeakMap,l=new WeakMap,c=new WeakMap,u=new WeakMap,h=new WeakMap,d=new WeakMap,f=new WeakMap,p=new WeakMap,m=new WeakMap,v=new WeakMap,y=new WeakMap,g=new WeakMap,_=new WeakMap,b=new WeakSet,w=new WeakSet,E=new WeakSet,x=new WeakSet,C=new WeakSet,S=new WeakSet,T=new WeakSet,N=new WeakSet,k=function(){a(this,s).trigger(a(this,d))},O=function(){this.counter=0,a(this,m).setTime(a(this,_)),this.dateComeIn=void 0,this.dateCheckOut=void 0,r(this,E,M).call(this),r(this,N,P).call(this),r(this,T,j).call(this),a(this,s).trigger(a(this,h))},M=function(){a(this,l).text("".concat(a(this,v)[a(this,m).getMonth()]," ").concat(a(this,m).getFullYear()))},D=function(){a(this,m).setMonth(a(this,m).getMonth()-1),r(this,N,P).call(this)},A=function(){a(this,m).setMonth(a(this,m).getMonth()+1),r(this,N,P).call(this)},L=function(e){switch(this.counter){case 0:o(this,y,this.dateComeIn),this.dateComeIn=e.currentTarget.getAttribute("data-timestamp"),r(this,T,j).call(this),this.counter++,a(this,s).trigger(a(this,f));break;case 1:o(this,g,this.dateCheckOut),this.dateCheckOut=e.currentTarget.getAttribute("data-timestamp"),r(this,T,j).call(this),this.counter--,a(this,s).trigger(a(this,p))}},j=function(){var e=this;a(this,c).each((function(t,n){var i=n.getAttribute("data-timestamp");i>=e.dateComeIn&&i<=e.dateCheckOut&&e.dateComeIn!==e.dateCheckOut?a(e,u)[t].classList.add("date-picker__body-range"):a(e,u)[t].classList.remove("date-picker__body-range"),i===e.dateComeIn||i===e.dateCheckOut?(n.classList.add("date-picker__body-date_selected"),i===e.dateComeIn?a(e,u)[t].setAttribute("data-range","first"):a(e,u)[t].setAttribute("data-range","last")):(n.classList.remove("date-picker__body-date_selected"),a(e,u)[t].removeAttribute("data-range")),i===String(a(e,_))?n.classList.add("date-picker__body-date_current"):n.classList.remove("date-picker__body-date_current")}))},P=function(){var e=new Date(a(this,m)),t=e.getMonth();e.setDate(1);var n=e.getDay();0===n&&(n=7),e.setDate(1-n),a(this,c).each((function(n,i){e.setDate(e.getDate()+1),e.getMonth()===t?i.classList.add("date-picker__body-date_day-month"):i.classList.remove("date-picker__body-date_day-month"),i.setAttribute("data-timestamp",e.getTime()),i.value=e.getDate()})),r(this,E,M).call(this),r(this,T,j).call(this)};t.a=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),N.add(this),T.add(this),S.add(this),C.add(this),x.add(this),E.add(this),w.add(this),b.add(this),s.set(this,{writable:!0,value:void 0}),l.set(this,{writable:!0,value:void 0}),c.set(this,{writable:!0,value:void 0}),u.set(this,{writable:!0,value:void 0}),h.set(this,{writable:!0,value:"date-picker-clear"}),d.set(this,{writable:!0,value:"date-picker-submit"}),f.set(this,{writable:!0,value:"date-picker-select-in"}),p.set(this,{writable:!0,value:"date-picker-select-out"}),m.set(this,{writable:!0,value:new Date}),v.set(this,{writable:!0,value:["Ð¯Ð½Ð²Ð°ÑÑ","Ð¤ÐµÐ²ÑÐ°Ð»Ñ","ÐÐ°ÑÑ","ÐÐ¿ÑÐµÐ»Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³ÑÑÑ","Ð¡ÐµÐ½ÑÑÐ±Ñ","ÐÐºÑÑÐ±ÑÑ","ÐÐ¾ÑÐ±ÑÑ","ÐÐµÐºÐ°Ð±ÑÑ"]}),y.set(this,{writable:!0,value:void 0}),g.set(this,{writable:!0,value:void 0}),_.set(this,{writable:!0,value:a(this,m).getTime()}),i(this,"dateComeIn",a(this,_).toString()),i(this,"dateCheckOut",a(this,_).toString()),i(this,"counter",0),o(this,s,t),o(this,l,t.find(".date-picker__head-title")),o(this,u,t.find(".date-picker__body-range")),o(this,c,t.find(".date-picker__body-date").on("click",r(this,S,L).bind(this))),t.find(".date-picker__head-list-left").on("click",r(this,x,D).bind(this)),t.find(".date-picker__head-list-right").on("click",r(this,C,A).bind(this)),t.find(".date-picker__footer-clear").on("click",r(this,w,O).bind(this)),t.find(".date-picker__footer-submit").on("click",r(this,b,k).bind(this)),r(this,N,P).call(this)}},function(e,t,n){var i=n(0),r=n(7);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(9);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(6),n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n(8)},function(e,t,n){var i=n(0),r=n(12);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(14)},function(e,t,n){var i=n(0),r=n(15);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";var i=n(5);n(36);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=u(e);if(t){var r=u(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return l(this,n)}}function l(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?c(e):t}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function d(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function f(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(l,e);var t,n,i,r=s(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),t=r.call(this,e.find(".date-picker")),N.add(c(t)),T.add(c(t)),S.add(c(t)),C.add(c(t)),x.add(c(t)),E.add(c(t)),m.set(c(t),{writable:!0,value:void 0}),v.set(c(t),{writable:!0,value:void 0}),y.set(c(t),{writable:!0,value:void 0}),g.set(c(t),{writable:!0,value:void 0}),_.set(c(t),{writable:!0,value:"Ð´Ð´.Ð¼Ð¼.Ð³Ð³Ð³Ð³"}),b.set(c(t),{writable:!0,value:new Date}),w.set(c(t),{writable:!0,value:!0}),f(c(t),m,e),f(c(t),v,e.find(".date-range__picker")),f(c(t),y,e.find(".date-range__head-in-date")),f(c(t),g,e.find(".date-range__head-out-date")),e.find(".date-range__head-in").on("click",d(c(t),T,A).bind(c(t))),e.find(".date-range__head-out").on("click",d(c(t),T,A).bind(c(t))),e.on("date-picker-select-in",d(c(t),E,k).bind(c(t))),e.on("date-picker-select-out",d(c(t),x,O).bind(c(t))),e.on("date-picker-clear",d(c(t),S,D).bind(c(t))),e.on("date-picker-submit",d(c(t),T,A).bind(c(t))),document.addEventListener("mouseup",d(c(t),N,L).bind(c(t))),d(c(t),T,A).call(c(t)),t}return t=l,(n=[{key:"getDateRange",value:function(){return h(this,b).setTime(Number(this.dateCheckOut)-Number(this.dateComeIn)),h(this,b).getDate()-1}}])&&o(t.prototype,n),i&&o(t,i),l}(i.a),m=new WeakMap,v=new WeakMap,y=new WeakMap,g=new WeakMap,_=new WeakMap,b=new WeakMap,w=new WeakMap,E=new WeakSet,x=new WeakSet,C=new WeakSet,S=new WeakSet,T=new WeakSet,N=new WeakSet,k=function(){this.counter=0,h(this,b).setTime(Number(this.dateComeIn));var e="".concat(h(this,b).getDate(),".").concat(d(this,C,M).call(this,h(this,b).getMonth()),".").concat(h(this,b).getFullYear());h(this,y).text(e)},O=function(){this.counter=1,h(this,b).setTime(Number(this.dateCheckOut));var e="".concat(h(this,b).getDate(),".").concat(d(this,C,M).call(this,h(this,b).getMonth()),".").concat(h(this,b).getFullYear());h(this,g).text(e)},M=function(e){return++e<10?"0".concat(e):e},D=function(){h(this,y).text(h(this,_)),h(this,g).text(h(this,_))},A=function(e){if(e){if(e.target.closest(".date-range__head-in"))return h(this,w)&&!h(this,v).hasClass("date-range__picker_hidden")||h(this,v).toggleClass("date-range__picker_hidden"),f(this,w,!1),void(this.counter=0);if(e.target.closest(".date-range__head-out"))return(h(this,w)||h(this,v).hasClass("date-range__picker_hidden"))&&h(this,v).toggleClass("date-range__picker_hidden"),f(this,w,!0),void(this.counter=1)}h(this,v).toggleClass("date-range__picker_hidden")},L=function(e){e.target.closest(".date-range")||h(this,v).addClass("date-range__picker_hidden")};t.a=p},,,,,,,,,,function(e,t,n){var i=n(0),r=n(27);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(29);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},,,,function(e,t,n){"use strict";(function(e){n(38),n(39);e(".text-field").each((function(t,n){var i=n.getAttribute("data-mask");i&&e(n).mask(i,{placeholder:"Ð´Ð´.Ð¼Ð¼.Ð³Ð³Ð³Ð³"})}))}).call(this,n(2))},function(e,t,n){var i=n(0),r=n(35);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(37);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i,r,o;r=[n(2)],void 0===(o="function"==typeof(i=function(e){var t,n=navigator.userAgent,i=/iphone/i.test(n),r=/chrome/i.test(n),o=/android/i.test(n);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden")&&this.get(0)===document.activeElement)return"number"==typeof e?(t="number"==typeof t?t:e,this.each((function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&((n=this.createTextRange()).collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())}))):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(n,a){var s,l,c,u,h,d,f;if(!n&&this.length>0){var p=e(this[0]).data(e.mask.dataName);return p?p():void 0}return a=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},a),s=e.mask.definitions,l=[],c=d=n.length,u=null,n=String(n),e.each(n.split(""),(function(e,t){"?"==t?(d--,c=e):s[t]?(l.push(new RegExp(s[t])),null===u&&(u=l.length-1),e<c&&(h=l.length-1)):l.push(null)})),this.trigger("unmask").each((function(){var p=e(this),m=e.map(n.split(""),(function(e,t){if("?"!=e)return s[e]?_(t):e})),v=m.join(""),y=p.val();function g(){if(a.completed){for(var e=u;e<=h;e++)if(l[e]&&m[e]===_(e))return;a.completed.call(p)}}function _(e){return e<a.placeholder.length?a.placeholder.charAt(e):a.placeholder.charAt(0)}function b(e){for(;++e<d&&!l[e];);return e}function w(e,t){var n,i;if(!(e<0)){for(n=e,i=b(t);n<d;n++)if(l[n]){if(!(i<d&&l[n].test(m[i])))break;m[n]=m[i],m[i]=_(i),i=b(i)}C(),p.caret(Math.max(u,e))}}function E(e){S(),p.val()!=y&&p.change()}function x(e,t){var n;for(n=e;n<t&&n<d;n++)l[n]&&(m[n]=_(n))}function C(){p.val(m.join(""))}function S(e){var t,n,i,r=p.val(),o=-1;for(t=0,i=0;t<d;t++)if(l[t]){for(m[t]=_(t);i++<r.length;)if(n=r.charAt(i-1),l[t].test(n)){m[t]=n,o=t;break}if(i>r.length){x(t+1,d);break}}else m[t]===r.charAt(i)&&i++,t<c&&(o=t);return e?C():o+1<c?a.autoclear||m.join("")===v?(p.val()&&p.val(""),x(0,d)):C():(C(),p.val(p.val().substring(0,o+1))),c?t:u}p.data(e.mask.dataName,(function(){return e.map(m,(function(e,t){return l[t]&&e!=_(t)?e:null})).join("")})),p.one("unmask",(function(){p.off(".mask").removeData(e.mask.dataName)})).on("focus.mask",(function(){var e;p.prop("readonly")||(clearTimeout(t),y=p.val(),e=S(),t=setTimeout((function(){p.get(0)===document.activeElement&&(C(),e==n.replace("?","").length?p.caret(0,e):p.caret(e))}),10))})).on("blur.mask",E).on("keydown.mask",(function(e){if(!p.prop("readonly")){var t,n,r,o=e.which||e.keyCode;f=p.val(),8===o||46===o||i&&127===o?(n=(t=p.caret()).begin,(r=t.end)-n==0&&(n=46!==o?function(e){for(;--e>=0&&!l[e];);return e}(n):r=b(n-1),r=46===o?b(r):r),x(n,r),w(n,r-1),e.preventDefault()):13===o?E.call(this,e):27===o&&(p.val(y),p.caret(0,S()),e.preventDefault())}})).on("keypress.mask",(function(t){if(!p.prop("readonly")){var n,i,r,a=t.which||t.keyCode,s=p.caret();t.ctrlKey||t.altKey||t.metaKey||a<32||!a||13===a||(s.end-s.begin!=0&&(x(s.begin,s.end),w(s.begin,s.end-1)),(n=b(s.begin-1))<d&&(i=String.fromCharCode(a),l[n].test(i))&&(function(e){var t,n,i,r;for(t=e,n=_(e);t<d;t++)if(l[t]){if(i=b(t),r=m[t],m[t]=n,!(i<d&&l[i].test(r)))break;n=r}}(n),m[n]=i,C(),r=b(n),o?setTimeout((function(){e.proxy(e.fn.caret,p,r)()}),0):p.caret(r),s.begin<=h&&g()),t.preventDefault())}})).on("input.mask paste.mask",(function(){p.prop("readonly")||setTimeout((function(){var e=S(!0);p.caret(e),g()}),0)})),r&&o&&p.off("input.mask").on("input.mask",(function(e){var t=p.val(),n=p.caret();if(f&&f.length&&f.length>t.length){for(S(!0);n.begin>0&&!l[n.begin-1];)n.begin--;if(0===n.begin)for(;n.begin<u&&!l[n.begin];)n.begin++;p.caret(n.begin,n.begin)}else{S(!0);var i=t.charAt(n.begin);n.begin<d&&(l[n.begin]||n.begin++,l[n.begin].test(i)&&n.begin++),p.caret(n.begin,n.begin)}g()})),S()}))}})})?i.apply(t,r):i)||(e.exports=o)},function(e,t,n){var i=n(0),r=n(40);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(10),n.p,n(34)},,,function(e,t,n){"use strict";n(45)},function(e,t,n){var i=n(0),r=n(46);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(62)},function(e,t,n){"use strict";n(49)},function(e,t,n){var i=n(0),r=n(50);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(52)},function(e,t,n){var i=n(0),r=n(53);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(56),n(57);function i(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function r(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function o(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var a=new WeakMap,s=new WeakMap,l=new WeakMap,c=new WeakSet,u=new WeakSet,h=function(e){"valueFrom"===e.detail.name&&o(this,s,r(this,u,d).call(this,this.$slider.slider("valueFrom"))),"valueTo"===e.detail.name&&o(this,l,r(this,u,d).call(this,this.$slider.slider("valueTo"))),i(this,a).text("".concat(i(this,s),"ââ½ - ").concat(i(this,l),"ââ½"))},d=function(e){return e.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1 ")};t.a=function e(t){var n,f,p;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u.add(this),c.add(this),p=void 0,(f="$slider")in(n=this)?Object.defineProperty(n,f,{value:p,enumerable:!0,configurable:!0,writable:!0}):n[f]=p,a.set(this,{writable:!0,value:void 0}),s.set(this,{writable:!0,value:void 0}),l.set(this,{writable:!0,value:void 0}),this.$slider=t.find(".range-slider__plugin").slider("init"),o(this,a,t.find(".range-slider__title-range")),o(this,s,r(this,u,d).call(this,this.$slider.slider("valueFrom"))),o(this,l,r(this,u,d).call(this,this.$slider.slider("valueTo"))),i(this,a).text("".concat(i(this,s),"â½ - ").concat(i(this,l),"â½")),this.$slider.on("slider-data",r(this,c,h).bind(this))}},function(e,t,n){"use strict";var i=n(5);n(1),n(59);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=c(e);if(t){var r=c(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function h(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function d(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(n,e);var t=a(n);function n(e){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),i=t.call(this,e.find(".date-picker")),E.add(l(i)),w.add(l(i)),b.add(l(i)),p.set(l(i),{writable:!0,value:void 0}),m.set(l(i),{writable:!0,value:void 0}),v.set(l(i),{writable:!0,value:void 0}),y.set(l(i),{writable:!0,value:void 0}),g.set(l(i),{writable:!0,value:["ÑÐ½Ð²","ÑÐµÐ²","Ð¼Ð°Ñ","Ð°Ð¿Ñ","Ð¼Ð°Ð¹","Ð¸ÑÐ½","Ð¸ÑÐ»","Ð°Ð²Ð³","ÑÐµÐ½","Ð¾ÐºÑ","Ð½Ð¾Ñ","Ð´ÐµÐº"]}),_.set(l(i),{writable:!0,value:new Date}),d(l(i),p,e),d(l(i),y,e.find(".date-filter__body")),d(l(i),m,e.find(".date-filter__body-range")),d(l(i),v,e.find(".date-filter__picker")),h(l(i),y).on("click",u(l(i),w,C).bind(l(i))),h(l(i),v).on("date-picker-select-out",u(l(i),b,x).bind(l(i))),h(l(i),v).on("date-picker-submit",u(l(i),w,C).bind(l(i))),document.addEventListener("mouseup",u(l(i),E,S).bind(l(i))),u(l(i),w,C).call(l(i)),u(l(i),b,x).call(l(i)),i}return n}(i.a),p=new WeakMap,m=new WeakMap,v=new WeakMap,y=new WeakMap,g=new WeakMap,_=new WeakMap,b=new WeakSet,w=new WeakSet,E=new WeakSet,x=function(){h(this,_).setTime(Number(this.dateComeIn));var e="".concat(h(this,_).getDate()," ").concat(h(this,g)[h(this,_).getMonth()]," ");h(this,_).setTime(Number(this.dateCheckOut));var t="".concat(h(this,_).getDate()," ").concat(h(this,g)[h(this,_).getMonth()]);h(this,m).text("".concat(e," - ").concat(t))},C=function(){h(this,v).toggleClass("date-filter__picker_hidden")},S=function(e){e.target.closest(".date-filter")||h(this,v).addClass("date-filter__picker_hidden")};t.a=f},function(e,t,n){(function(e){function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){var n={};function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==t(e)&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)i.d(r,o,function(t){return e[t]}.bind(null,o));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=10)}([function(e,t,n){"use strict";var i=n(3),r=n.n(i)()(!1);r.push([e.i,".O33-ei1R727yQA9Kb5YG1{display:flex;position:relative;align-items:center;background:#fff;height:6px;border:1px solid rgba(31,32,65,.25);border-radius:3px;box-sizing:border-box;cursor:pointer}._1dCWMnXS8vbmyZqBSrYtZx{flex-direction:column;width:6px;height:100%}._3XAUvLt0Enu1jUsfafTIAj{display:flex;z-index:10;position:absolute;margin-left:-8px;margin-top:-6px;background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);border:2px solid #fff;border-radius:10px;padding:6px}._2YRaup35clJkIe3m329KvT{margin-left:-6px;margin-top:-7px}._2xx5pMSDcw1QRyeJhOqErL{position:absolute;z-index:10;display:flex;align-items:center;justify-content:center;width:30px;height:20px;top:-30px;left:-10px;border:2px solid #66d2ea;background-color:#6fcf97;opacity:.5;border-radius:5px}.sVs5s72HAvl74CswSHZTd{left:-40px;top:-5px}._3w9clh0nyZio_5gDLGl1Dd{position:absolute;background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);border-radius:3px;height:100%}._2A-xufeD3ynNsidYpLrfR0{width:100%;height:auto}._3pQhlkt4_s_HsZUtlEM2O8{display:block;margin-top:5px;cursor:pointer}._2V8liRhCgcAbMkFk-6zlKs{display:flex;height:100%;margin-left:5px;margin-top:0}.zgU06o9yZgvRzV5YPxRii{display:flex;justify-content:space-between}.VIHJ_QpDrWcgSNMe8nRhU{flex-direction:column}._2Rr9y7AuA2SjHe7Sy-wpAp{display:flex;justify-content:space-around;align-items:flex-end;width:100%;height:8px;border-bottom:2px solid #66d2ea;border-right:2px solid #66d2ea;padding-bottom:2px}.catpezZSplMi6LkZL0OdA{flex-direction:column;border-right:2px solid #66d2ea;border-top:2px solid #66d2ea;padding-right:2px;width:8px;height:100%;border-bottom:none;padding-bottom:0}._2Rr9y7AuA2SjHe7Sy-wpAp:first-child{border-left:2px solid #66d2ea}.catpezZSplMi6LkZL0OdA:last-child{border-bottom:2px solid #66d2ea}.catpezZSplMi6LkZL0OdA:first-child{border-left:none}.Ly2lMDhTDAeYyF2IPMVHf{width:100%;height:5px}._1VpZbOL-88Z6hyqyBGhuoN{width:5px;height:100%}.Ly2lMDhTDAeYyF2IPMVHf:not(:first-child){border-left:1px solid #66d2ea}._1VpZbOL-88Z6hyqyBGhuoN:not(:last-child){border-bottom:1px solid #66d2ea}._1VpZbOL-88Z6hyqyBGhuoN:not(:first-child){border-left:none}.AIgAiCSSgJXl_1ODSJM9H{display:flex;justify-content:space-between}._2JY8jz5wTD68z_QvA96q28{flex-direction:column}._1VduyRI1NyVORvFuA6CRa4{display:flex;justify-content:center;width:0;color:#6fcf97}._3IwBKLWh1i6fViGZ9Nc1qd{align-items:center;height:0;width:auto}",""]),r.locals={rail:"O33-ei1R727yQA9Kb5YG1",rail_ver:"_1dCWMnXS8vbmyZqBSrYtZx",thumb:"_3XAUvLt0Enu1jUsfafTIAj",thumb_ver:"_2YRaup35clJkIe3m329KvT",thumb__tooltip:"_2xx5pMSDcw1QRyeJhOqErL",thumb__tooltip_ver:"sVs5s72HAvl74CswSHZTd",progress:"_3w9clh0nyZio_5gDLGl1Dd",progress_ver:"_2A-xufeD3ynNsidYpLrfR0",scale:"_3pQhlkt4_s_HsZUtlEM2O8",scale_ver:"_2V8liRhCgcAbMkFk-6zlKs",scale__wrapper:"zgU06o9yZgvRzV5YPxRii",scale__wrapper_ver:"VIHJ_QpDrWcgSNMe8nRhU",scale__division:"_2Rr9y7AuA2SjHe7Sy-wpAp",scale__division_ver:"catpezZSplMi6LkZL0OdA",scale__subdivision:"Ly2lMDhTDAeYyF2IPMVHf",scale__subdivision_ver:"_1VpZbOL-88Z6hyqyBGhuoN",scale__values:"AIgAiCSSgJXl_1ODSJM9H",scale__values_ver:"_2JY8jz5wTD68z_QvA96q28",scale__valuesItem:"_1VduyRI1NyVORvFuA6CRa4",scale__valuesItem_ver:"_3IwBKLWh1i6fViGZ9Nc1qd"},t.a=r},function(t,n){t.exports=e},function(e,n){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==("undefined"==typeof window?"undefined":t(window))&&(i=window)}e.exports=i},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,i,r,o=e[1]||"",a=e[3];if(!a)return o;if(t&&"function"==typeof btoa){var s=(n=a,i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(r," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([s]).join("\n")}return[o].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);i&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";(function(e){n(5),n(6);var t,i=n(0),r=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,n)},function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}),o=function(t){function n(e){var n=t.call(this)||this;return n.rail=new a,n.scale=new c,n.styles=document.createElement("style"),n.presenter=e,n.styles.innerHTML=i.a,n.attachShadow({mode:"open"}),n.shadowRoot&&(n.shadowRoot.appendChild(n.styles),n.shadowRoot.appendChild(n.rail),n.shadowRoot.appendChild(n.scale)),n}return r(n,t),n.prototype.connectedCallback=function(){this.style.display="flex",this.style.justifyContent="center"},n.prototype.setModelData=function(t,n){switch(t){case"minValue":this.rail.setAttribute("data-min-value",n.toString()),this.scale.setAttribute("data-min-value",n.toString());break;case"maxValue":this.rail.setAttribute("data-max-value",n.toString()),this.scale.setAttribute("data-max-value",n.toString());break;case"valueFrom":this.rail.setAttribute("data-value-from",n.toString());break;case"valueTo":this.rail.setAttribute("data-value-to",n.toString());break;case"onScale":n?e(this.scale).show():e(this.scale).hide();break;case"onTooltip":this.rail.setAttribute("data-on-tooltip",n.toString());break;case"onRange":this.rail.setAttribute("data-on-range",n.toString()),this.scale.setAttribute("data-on-range",n.toString());break;case"onVertical":this.style.flexDirection=n?"row":"column",this.rail.setAttribute("data-on-vertical",n.toString()),this.scale.setAttribute("data-on-vertical",n.toString())}},n}(HTMLElement),a=function(t){function n(){var e=t.call(this)||this;return e._thumbFrom=new l("valueFrom"),e._thumbTo=new l("valueTo"),e._progress=new s,e.className=i.a.locals.rail,e.appendChild(e._thumbFrom),e.appendChild(e._thumbTo),e.appendChild(e._progress),e}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-min-value","data-max-value","data-value-from","data-value-to","data-on-tooltip","data-on-range","data-on-vertical"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-min-value":case"data-max-value":this._thumbFrom.setAttribute("data-position",this.calcThumbPosition("from").toString()),this._progress.setAttribute("data-position-from",this.calcThumbPosition("from").toString()),this._thumbTo.setAttribute("data-position",this.calcThumbPosition("to").toString()),this._progress.setAttribute("data-position-to",this.calcThumbPosition("to").toString());break;case"data-on-tooltip":this._thumbFrom.setAttribute("data-on-tooltip",this.dataset.onTooltip),this._thumbTo.setAttribute("data-on-tooltip",this.dataset.onTooltip);break;case"data-on-range":this._progress.setAttribute("data-on-range",this.dataset.onRange),"false"===this.dataset.onRange?e(this._thumbTo).hide():e(this._thumbTo).show();break;case"data-on-vertical":this._thumbFrom.setAttribute("data-on-vertical",this.dataset.onVertical),this._progress.setAttribute("data-on-vertical",this.dataset.onVertical),this._thumbTo.setAttribute("data-on-vertical",this.dataset.onVertical),"true"===this.dataset.onVertical?e(this).addClass(i.a.locals.rail_ver):e(this).removeClass(i.a.locals.rail_ver);break;case"data-value-from":this._thumbFrom.setAttribute("data-position",this.calcThumbPosition("from").toString()),this._thumbFrom.setAttribute("data-value",Number(this.dataset.valueFrom).toFixed()),this._progress.setAttribute("data-position-from",this.calcThumbPosition("from").toString());break;case"data-value-to":this._thumbTo.setAttribute("data-position",this.calcThumbPosition("to").toString()),this._thumbTo.setAttribute("data-value",Number(this.dataset.valueTo).toFixed()),this._progress.setAttribute("data-position-to",this.calcThumbPosition("to").toString())}},n.prototype.calcThumbPosition=function(e){var t=Number(this.dataset.minValue),n=Number(this.dataset.maxValue);return(Number("from"===e?this.dataset.valueFrom:this.dataset.valueTo)-t)/((n-t)/100)},n}(HTMLElement),s=function(t){function n(){var e=t.call(this)||this;return e._leftOrTop="left",e._rightOrBottom="right",e.className=i.a.locals.progress,e}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-position-from","data-position-to","data-on-range","data-on-vertical"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-position-from":this.setPosFrom();break;case"data-position-to":case"data-on-range":this.setPosTo();break;case"data-on-vertical":"true"===this.dataset.onVertical?e(this).addClass(i.a.locals.progress_ver):e(this).removeClass(i.a.locals.progress_ver),this.setDirection(),this.setPosFrom(),this.setPosTo()}},n.prototype.setPosFrom=function(){e(this).css(""+this._leftOrTop,this.dataset.positionFrom+"%")},n.prototype.setPosTo=function(){"true"===this.dataset.onRange?e(this).css(""+this._rightOrBottom,100-Number(this.dataset.positionTo)+"%"):e(this).css(""+this._rightOrBottom,"0")},n.prototype.setDirection=function(){"true"===this.dataset.onVertical?(this._leftOrTop="top",this._rightOrBottom="bottom",this.style.left="0"):(this._leftOrTop="left",this._rightOrBottom="right",this.style.top="0")},n}(HTMLElement),l=function(t){function n(e){var n=t.call(this)||this;return n._position=0,n._clientXorY="clientX",n._offsetXorY=0,n._widthOrHeight=0,n._direction="left",n._tooltip=document.createElement("div"),n._mouseMove=n.onMouseMove.bind(n),n._mouseUp=n.onMouseUp.bind(n),n._name=e,n.className=i.a.locals.thumb,n._tooltip.className=i.a.locals.thumb__tooltip,n.appendChild(n._tooltip),n.addEventListener("mousedown",n.onMouseDown.bind(n)),n}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-value","data-position","data-on-vertical","data-on-tooltip"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-value":this._tooltip.textContent=this.dataset.value;break;case"data-position":this._position=Number(this.dataset.position),this.moveToPosition(this._position);break;case"data-on-vertical":"true"===this.dataset.onVertical?(e(this).addClass(i.a.locals.thumb_ver),e(this._tooltip).addClass(i.a.locals.thumb__tooltip_ver)):(e(this).removeClass(i.a.locals.thumb_ver),e(this._tooltip).removeClass(i.a.locals.thumb__tooltip_ver)),this.setPosition(),this.moveToPosition(this._position);break;case"data-on-tooltip":"false"===this.dataset.onTooltip?e(this._tooltip).hide():e(this._tooltip).show()}},n.prototype.moveToPosition=function(t){e(this).css(""+this._direction,t+"%")},n.prototype.setPosition=function(){if(this.parentElement){var e=this.parentElement.getBoundingClientRect();"true"===this.dataset.onVertical?(this._clientXorY="clientY",this._direction="top",this._offsetXorY=e.top,this._widthOrHeight=e.height,this.style.left="0"):(this._clientXorY="clientX",this._direction="left",this._offsetXorY=e.left,this._widthOrHeight=e.width,this.style.top="0")}},n.prototype.onMouseDown=function(e){e.preventDefault(),this.setPosition(),document.addEventListener("mousemove",this._mouseMove),document.addEventListener("mouseup",this._mouseUp)},n.prototype.onMouseMove=function(e){this._position=(e[this._clientXorY]-this._offsetXorY)/(this._widthOrHeight/100),this._position<0&&(this._position=0),this._position>100&&(this._position=100),this.dispatchEvent(new CustomEvent("slider-view",{bubbles:!0,cancelable:!0,composed:!0,detail:{name:this._name,value:this._position}}))},n.prototype.onMouseUp=function(){document.removeEventListener("mousemove",this._mouseMove),document.removeEventListener("mouseup",this._mouseUp)},n}(HTMLElement),c=function(t){function n(){var e=t.call(this)||this;e._scaleValueItems=[],e._name="valueTo",e.className=i.a.locals.scale;for(var n=0;n<4;n++)e._scaleValueItems[n]=document.createElement("span"),e._scaleValueItems[n].className=i.a.locals.scale__valuesItem;var r=document.createElement("div");r.className=i.a.locals.scale__values;for(var o=0,a=e._scaleValueItems;o<a.length;o++){var s=a[o];r.appendChild(s)}return e.innerHTML='      \n      <div class="'+i.a.locals.scale__wrapper+'">\n        <div class="'+i.a.locals.scale__division+'">\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n        </div>\n        <div class="'+i.a.locals.scale__division+'">\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n        </div>\n        <div class="'+i.a.locals.scale__division+'">\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n        </div>\n      </div>',e.appendChild(r),e.addEventListener("mousedown",e.handleMouseDown.bind(e)),e}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-min-value","data-max-value","data-on-vertical"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-min-value":case"data-max-value":this.render();break;case"data-on-vertical":"true"===this.dataset.onVertical?(e(this).addClass(i.a.locals.scale_ver),e(this).find("."+i.a.locals.scale__wrapper).addClass(i.a.locals.scale__wrapper_ver),e(this).find("."+i.a.locals.scale__values).addClass(i.a.locals.scale__values_ver),e(this).find("."+i.a.locals.scale__valuesItem).addClass(i.a.locals.scale__valuesItem_ver),e(this).find("."+i.a.locals.scale__division).addClass(i.a.locals.scale__division_ver),e(this).find("."+i.a.locals.scale__subdivision).addClass(i.a.locals.scale__subdivision_ver)):(e(this).removeClass(i.a.locals.scale_ver),e(this).find("."+i.a.locals.scale__wrapper).removeClass(i.a.locals.scale__wrapper_ver),e(this).find("."+i.a.locals.scale__values).removeClass(i.a.locals.scale__values_ver),e(this).find("."+i.a.locals.scale__valuesItem).removeClass(i.a.locals.scale__valuesItem_ver),e(this).find("."+i.a.locals.scale__division).removeClass(i.a.locals.scale__division_ver),e(this).find("."+i.a.locals.scale__subdivision).removeClass(i.a.locals.scale__subdivision_ver))}},n.prototype.render=function(){var e=Number(this.dataset.minValue),t=Number(this.dataset.maxValue),n=(t-e)/3;this._scaleValueItems[0].textContent=e.toFixed(),this._scaleValueItems[1].textContent=(e+n).toFixed(),this._scaleValueItems[2].textContent=(e+n+n).toFixed(),this._scaleValueItems[3].textContent=t.toFixed()},n.prototype.handleMouseDown=function(e){var t=this.getBoundingClientRect(),n=0;e.clientX&&e.clientY&&(n="true"===this.dataset.onVertical?(e.clientY-t.top)/(t.height/100):(e.clientX-t.left)/(t.width/100)),"true"===this.dataset.onRange&&"valueFrom"===this._name?this._name="valueTo":this._name="valueFrom",this.dispatchEvent(new CustomEvent("slider-view",{bubbles:!0,cancelable:!0,composed:!0,detail:{name:this._name,value:n}}))},n}(HTMLElement);customElements.get("input-slider")||(customElements.define("input-slider",o),customElements.define("input-slider-view-thumb",l),customElements.define("input-slider-view-rail",a),customElements.define("input-slider-view-scale",c),customElements.define("input-slider-view-progress",s))}).call(this,n(1))},function(e,t){
/**
  @license @nocompile
  Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
!function(){"use strict";!function(){if(void 0!==window.Reflect&&void 0!==window.customElements&&!window.customElements.polyfillWrapFlushCallback){var e=HTMLElement;window.HTMLElement={HTMLElement:function(){return Reflect.construct(e,[],this.constructor)}}.HTMLElement,HTMLElement.prototype=e.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,e)}}()}()},function(e,n,i){(function(e,n){
/**
    @license @nocompile
    Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */
(function(){"use strict";var i;function r(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}var o="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){e!=Array.prototype&&e!=Object.prototype&&(e[t]=n.value)},a="undefined"!=typeof window&&window===this?this:void 0!==e&&null!=e?e:this;function s(){s=function(){},a.Symbol||(a.Symbol=h)}function l(e,t){this.a=e,o(this,"description",{configurable:!0,writable:!0,value:t})}l.prototype.toString=function(){return this.a};var c,u,h=(c=0,function e(t){if(this instanceof e)throw new TypeError("Symbol is not a constructor");return new l("jscomp_symbol_"+(t||"")+"_"+c++,t)});function d(){s();var e=a.Symbol.iterator;e||(e=a.Symbol.iterator=a.Symbol("Symbol.iterator")),"function"!=typeof Array.prototype[e]&&o(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return function(e){return d(),(e={next:e})[a.Symbol.iterator]=function(){return this},e}(r(this))}}),d=function(){}}function f(e){var t="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return t?t.call(e):{next:r(e)}}function p(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}if("function"==typeof Object.setPrototypeOf)u=Object.setPrototypeOf;else{var m;e:{var v={};try{v.__proto__={Pa:!0},m=v.Pa;break e}catch(nt){}m=!1}u=m?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var y=u;function g(){this.l=!1,this.b=null,this.Ea=void 0,this.a=1,this.Y=0,this.c=null}function _(e){if(e.l)throw new TypeError("Generator is already running");e.l=!0}function b(e,t){e.c={Sa:t,Wa:!0},e.a=e.Y}function w(e,t){return e.a=3,{value:t}}function E(e){this.a=new g,this.b=e}function x(e,t,n,i){try{var r=t.call(e.a.b,n);if(!(r instanceof Object))throw new TypeError("Iterator result "+r+" is not an object");if(!r.done)return e.a.l=!1,r;var o=r.value}catch(t){return e.a.b=null,b(e.a,t),C(e)}return e.a.b=null,i.call(e.a,o),C(e)}function C(e){for(;e.a.a;)try{var t=e.b(e.a);if(t)return e.a.l=!1,{value:t.value,done:!1}}catch(t){e.a.Ea=void 0,b(e.a,t)}if(e.a.l=!1,e.a.c){if(t=e.a.c,e.a.c=null,t.Wa)throw t.Sa;return{value:t.return,done:!0}}return{value:void 0,done:!0}}function S(e){this.next=function(t){return _(e.a),e.a.b?t=x(e,e.a.b.next,t,e.a.J):(e.a.J(t),t=C(e)),t},this.throw=function(t){return _(e.a),e.a.b?t=x(e,e.a.b.throw,t,e.a.J):(b(e.a,t),t=C(e)),t},this.return=function(t){return function(e,t){_(e.a);var n=e.a.b;return n?x(e,"return"in n?n.return:function(e){return{value:e,done:!0}},t,e.a.return):(e.a.return(t),C(e))}(e,t)},d(),this[Symbol.iterator]=function(){return this}}function T(e,t){return t=new S(new E(t)),y&&y(t,e.prototype),t}g.prototype.J=function(e){this.Ea=e},g.prototype.return=function(e){this.c={return:e},this.a=this.Y},Array.from||(Array.from=function(e){return[].slice.call(e)}),Object.assign||(Object.assign=function(e){for(var t,n=[].slice.call(arguments,1),i=0;i<n.length;i++)if(t=n[i])for(var r=e,o=Object.keys(t),a=0;a<o.length;a++){var s=o[a];r[s]=t[s]}return e});var N=document.createEvent("Event");if(N.initEvent("foo",!0,!0),N.preventDefault(),!N.defaultPrevented){var k=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(k.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}}var O=/Trident/.test(navigator.userAgent);if(!window.Event||O&&"function"!=typeof window.Event){var M=window.Event;if(window.Event=function(e,t){t=t||{};var n=document.createEvent("Event");return n.initEvent(e,!!t.bubbles,!!t.cancelable),n},M){for(var D in M)window.Event[D]=M[D];window.Event.prototype=M.prototype}}if((!window.CustomEvent||O&&"function"!=typeof window.CustomEvent)&&(window.CustomEvent=function(e,t){t=t||{};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!!t.bubbles,!!t.cancelable,t.detail),n},window.CustomEvent.prototype=window.Event.prototype),!window.MouseEvent||O&&"function"!=typeof window.MouseEvent){var A=window.MouseEvent;if(window.MouseEvent=function(e,t){t=t||{};var n=document.createEvent("MouseEvent");return n.initMouseEvent(e,!!t.bubbles,!!t.cancelable,t.view||window,t.detail,t.screenX,t.screenY,t.clientX,t.clientY,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,t.relatedTarget),n},A)for(var L in A)window.MouseEvent[L]=A[L];window.MouseEvent.prototype=A.prototype}!function(){function e(){}function t(e,t){if(!e.childNodes.length)return[];switch(e.nodeType){case Node.DOCUMENT_NODE:return m.call(e,t);case Node.DOCUMENT_FRAGMENT_NODE:return v.call(e,t);default:return p.call(e,t)}}var n="undefined"==typeof HTMLTemplateElement,i=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),r=!1;/Trident/.test(navigator.userAgent)&&function(){function e(e,t){if(e instanceof DocumentFragment)for(var i;i=e.firstChild;)n.call(this,i,t);else n.call(this,e,t);return e}r=!0;var t=Node.prototype.cloneNode;Node.prototype.cloneNode=function(e){return e=t.call(this,e),this instanceof DocumentFragment&&(e.__proto__=DocumentFragment.prototype),e},DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll,DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector,Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},configurable:!0},nodeName:{get:function(){return"#document-fragment"},configurable:!0}});var n=Node.prototype.insertBefore;Node.prototype.insertBefore=e;var i=Node.prototype.appendChild;Node.prototype.appendChild=function(t){return t instanceof DocumentFragment?e.call(this,t,null):i.call(this,t),t};var o=Node.prototype.removeChild,a=Node.prototype.replaceChild;Node.prototype.replaceChild=function(t,n){return t instanceof DocumentFragment?(e.call(this,t,n),o.call(this,n)):a.call(this,t,n),n},Document.prototype.createDocumentFragment=function(){var e=this.createElement("df");return e.__proto__=DocumentFragment.prototype,e};var s=Document.prototype.importNode;Document.prototype.importNode=function(e,t){return t=s.call(this,e,t||!1),e instanceof DocumentFragment&&(t.__proto__=DocumentFragment.prototype),t}}();var o=Node.prototype.cloneNode,a=Document.prototype.createElement,s=Document.prototype.importNode,l=Node.prototype.removeChild,c=Node.prototype.appendChild,u=Node.prototype.replaceChild,h=DOMParser.prototype.parseFromString,d=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML")||{get:function(){return this.innerHTML},set:function(e){this.innerHTML=e}},f=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes")||{get:function(){return this.childNodes}},p=Element.prototype.querySelectorAll,m=Document.prototype.querySelectorAll,v=DocumentFragment.prototype.querySelectorAll,y=function(){if(!n){var e=document.createElement("template"),t=document.createElement("template");return t.content.appendChild(document.createElement("div")),e.content.appendChild(t),0===(e=e.cloneNode(!0)).content.childNodes.length||0===e.content.firstChild.content.childNodes.length||i}}();if(n){var g=document.implementation.createHTMLDocument("template"),_=!0,b=document.createElement("style");b.textContent="template{display:none;}";var w=document.head;w.insertBefore(b,w.firstElementChild),e.prototype=Object.create(HTMLElement.prototype);var E=!document.createElement("div").hasOwnProperty("innerHTML");e.U=function(t){if(!t.content&&t.namespaceURI===document.documentElement.namespaceURI){t.content=g.createDocumentFragment();for(var n;n=t.firstChild;)c.call(t.content,n);if(E)t.__proto__=e.prototype;else if(t.cloneNode=function(t){return e.b(this,t)},_)try{C(t),S(t)}catch(e){_=!1}e.a(t.content)}};var x={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},C=function(t){Object.defineProperty(t,"innerHTML",{get:function(){return D(this)},set:function(t){var n=x[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(t)||["",""])[1].toLowerCase()];if(n)for(var i=0;i<n.length;i++)t="<"+n[i]+">"+t+"</"+n[i]+">";for(g.body.innerHTML=t,e.a(g);this.content.firstChild;)l.call(this.content,this.content.firstChild);if(t=g.body,n)for(i=0;i<n.length;i++)t=t.lastChild;for(;t.firstChild;)c.call(this.content,t.firstChild)},configurable:!0})},S=function(e){Object.defineProperty(e,"outerHTML",{get:function(){return"<template>"+this.innerHTML+"</template>"},set:function(e){if(!this.parentNode)throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");for(g.body.innerHTML=e,e=this.ownerDocument.createDocumentFragment();g.body.firstChild;)c.call(e,g.body.firstChild);u.call(this.parentNode,e,this)},configurable:!0})};C(e.prototype),S(e.prototype),e.a=function(n){for(var i,r=0,o=(n=t(n,"template")).length;r<o&&(i=n[r]);r++)e.U(i)},document.addEventListener("DOMContentLoaded",(function(){e.a(document)})),Document.prototype.createElement=function(){var t=a.apply(this,arguments);return"template"===t.localName&&e.U(t),t},DOMParser.prototype.parseFromString=function(){var t=h.apply(this,arguments);return e.a(t),t},Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return D(this)},set:function(t){d.set.call(this,t),e.a(this)},configurable:!0,enumerable:!0});var T=/[&\u00A0"]/g,N=/[&\u00A0<>]/g,k=function(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case"Â ":return"&nbsp;"}},O=(b=function(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t})("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),M=b("style script xmp iframe noembed noframes plaintext noscript".split(" ")),D=function e(t,n){"template"===t.localName&&(t=t.content);for(var i,r="",o=n?n(t):f.get.call(t),a=0,s=o.length;a<s&&(i=o[a]);a++){e:{var l=i,c=t,u=n;switch(l.nodeType){case Node.ELEMENT_NODE:for(var h=l.localName,d="<"+h,p=l.attributes,m=0;c=p[m];m++)d+=" "+c.name+'="'+c.value.replace(T,k)+'"';d+=">",l=O[h]?d:d+e(l,u)+"</"+h+">";break e;case Node.TEXT_NODE:l=l.data,l=c&&M[c.localName]?l:l.replace(N,k);break e;case Node.COMMENT_NODE:l="\x3c!--"+l.data+"--\x3e";break e;default:throw window.console.error(l),Error("not implemented")}}r+=l}return r}}if(n||y){e.b=function(e,t){var n=o.call(e,!1);return this.U&&this.U(n),t&&(c.call(n.content,o.call(e.content,!0)),A(n.content,e.content)),n};var A=function(n,i){if(i.querySelectorAll&&0!==(i=t(i,"template")).length)for(var r,o,a=0,s=(n=t(n,"template")).length;a<s;a++)o=i[a],r=n[a],e&&e.U&&e.U(o),u.call(r.parentNode,L.call(o,!0),r)},L=Node.prototype.cloneNode=function(t){if(!r&&i&&this instanceof DocumentFragment){if(!t)return this.ownerDocument.createDocumentFragment();var n=j.call(this.ownerDocument,this,!0)}else n=this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?e.b(this,t):o.call(this,t);return t&&A(n,this),n},j=Document.prototype.importNode=function(n,i){if(i=i||!1,"template"===n.localName)return e.b(n,i);var r=s.call(this,n,i);if(i){A(r,n),n=t(r,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');for(var o,l=0;l<n.length;l++){o=n[l],(i=a.call(document,"script")).textContent=o.textContent;for(var c,h=o.attributes,d=0;d<h.length;d++)c=h[d],i.setAttribute(c.name,c.value);u.call(o.parentNode,i,o)}}return r}}n&&(window.HTMLTemplateElement=e)}();var j=setTimeout;function P(){}function I(e){if(!(this instanceof I))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this.I=0,this.za=!1,this.C=void 0,this.W=[],W(e,this)}function R(e,t){for(;3===e.I;)e=e.C;0===e.I?e.W.push(t):(e.za=!0,U((function(){var n=1===e.I?t.Ya:t.Za;if(null===n)(1===e.I?F:H)(t.va,e.C);else{try{var i=n(e.C)}catch(e){return void H(t.va,e)}F(t.va,i)}})))}function F(e,n){try{if(n===e)throw new TypeError("A promise cannot be resolved with itself.");if(n&&("object"==t(n)||"function"==typeof n)){var i=n.then;if(n instanceof I)return e.I=3,e.C=n,void q(e);if("function"==typeof i)return void W(function(e,t){return function(){e.apply(t,arguments)}}(i,n),e)}e.I=1,e.C=n,q(e)}catch(n){H(e,n)}}function H(e,t){e.I=2,e.C=t,q(e)}function q(e){2===e.I&&0===e.W.length&&U((function(){e.za||"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e.C)}));for(var t=0,n=e.W.length;t<n;t++)R(e,e.W[t]);e.W=null}function V(e,t,n){this.Ya="function"==typeof e?e:null,this.Za="function"==typeof t?t:null,this.va=n}function W(e,t){var n=!1;try{e((function(e){n||(n=!0,F(t,e))}),(function(e){n||(n=!0,H(t,e))}))}catch(e){n||(n=!0,H(t,e))}}function B(e){return e&&"object"==t(e)&&e.constructor===I?e:new I((function(t){t(e)}))}I.prototype.catch=function(e){return this.then(null,e)},I.prototype.then=function(e,t){var n=new this.constructor(P);return R(this,new V(e,t,n)),n},I.prototype.finally=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))};var U="function"==typeof n&&function(e){n(e)}||function(e){j(e,0)};if(!window.Promise){window.Promise=I,I.prototype.then=I.prototype.then,I.all=function(e){return new I((function(n,i){function r(e,s){try{if(s&&("object"==t(s)||"function"==typeof s)){var l=s.then;if("function"==typeof l)return void l.call(s,(function(t){r(e,t)}),i)}o[e]=s,0==--a&&n(o)}catch(e){i(e)}}if(!e||void 0===e.length)return i(new TypeError("Promise.all accepts an array"));var o=Array.prototype.slice.call(e);if(0===o.length)return n([]);for(var a=o.length,s=0;s<o.length;s++)r(s,o[s])}))},I.race=function(e){return new I((function(t,n){if(!e||void 0===e.length)return n(new TypeError("Promise.race accepts an array"));for(var i=0,r=e.length;i<r;i++)B(e[i]).then(t,n)}))},I.resolve=B,I.reject=function(e){return new I((function(t,n){n(e)}))};var z=document.createTextNode(""),$=[];new MutationObserver((function(){for(var e=$.length,t=0;t<e;t++)$[t]();$.splice(0,e)})).observe(z,{characterData:!0}),U=function(e){$.push(e),z.textContent=0<z.textContent.length?"":"a"}}!function(n,i){if(!(i in n)){var r=t(e)==t(r)?window:e,o=0,a=""+Math.random(),s="__symbol@@"+a,l=n.getOwnPropertyNames,c=n.getOwnPropertyDescriptor,u=n.create,h=n.keys,d=n.freeze||n,f=n.defineProperty,p=n.defineProperties,m=c(n,"getOwnPropertyNames"),v=n.prototype,y=v.hasOwnProperty,g=v.propertyIsEnumerable,_=v.toString,b=function(e,t,n){y.call(e,s)||f(e,s,{enumerable:!1,configurable:!1,writable:!1,value:{}}),e[s]["@@"+t]=n},w=function(e,t){var n=u(e);return l(t).forEach((function(e){S.call(t,e)&&D(n,e,t[e])})),n},E=function(){},x=function(e){return e!=s&&!y.call(k,e)},C=function(e){return e!=s&&y.call(k,e)},S=function(e){var t=""+e;return C(t)?y.call(this,t)&&this[s]["@@"+t]:g.call(this,e)},T=function(e){return f(v,e,{enumerable:!1,configurable:!0,get:E,set:function(t){L(this,e,{enumerable:!1,configurable:!0,writable:!0,value:t}),b(this,e,!0)}}),d(k[e]=f(n(e),"constructor",O))},N=function e(t){if(this instanceof e)throw new TypeError("Symbol is not a constructor");return T("__symbol:".concat(t||"",a,++o))},k=u(null),O={value:N},M=function(e){return k[e]},D=function(e,t,n){var i=""+t;if(C(i)){if(t=L,n.enumerable){var r=u(n);r.enumerable=!1}else r=n;t(e,i,r),b(e,i,!!n.enumerable)}else f(e,t,n);return e},A=function(e){return l(e).filter(C).map(M)};m.value=D,f(n,"defineProperty",m),m.value=A,f(n,i,m),m.value=function(e){return l(e).filter(x)},f(n,"getOwnPropertyNames",m),m.value=function(e,t){var n=A(t);return n.length?h(t).concat(n).forEach((function(n){S.call(t,n)&&D(e,n,t[n])})):p(e,t),e},f(n,"defineProperties",m),m.value=S,f(v,"propertyIsEnumerable",m),m.value=N,f(r,"Symbol",m),m.value=function(e){return(e="__symbol:".concat("__symbol:",e,a))in v?k[e]:T(e)},f(N,"for",m),m.value=function(e){if(x(e))throw new TypeError(e+" is not a symbol");if(y.call(k,e)&&"__symbol:"===(e=e.slice(10)).slice(0,10)&&(e=e.slice(10))!==a)return 0<(e=e.slice(0,e.length-a.length)).length?e:void 0},f(N,"keyFor",m),m.value=function(e,t){var n=c(e,t);return n&&C(t)&&(n.enumerable=S.call(e,t)),n},f(n,"getOwnPropertyDescriptor",m),m.value=function(e,t){return 1===arguments.length||void 0===t?u(e):w(e,t)},f(n,"create",m),m.value=function(){var e=_.call(this);return"[object String]"===e&&C(this)?"[object Symbol]":e},f(v,"toString",m);try{if(!0!==u(f({},"__symbol:",{get:function(){return f(this,"__symbol:",{value:!0})["__symbol:"]}}))["__symbol:"])throw"IE11";var L=f}catch(e){L=function(e,t,n){var i=c(v,t);delete v[t],f(e,t,n),f(v,t,i)}}}}(Object,"getOwnPropertySymbols"),function(e,t){var n,i=e.defineProperty,r=e.prototype,o=r.toString;"iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach((function(a){if(!(a in t))switch(i(t,a,{value:t(a)}),a){case"toStringTag":(n=e.getOwnPropertyDescriptor(r,"toString")).value=function(){var e=o.call(this),n=null!=this?this[t.toStringTag]:this;return null==n?e:"[object "+n+"]"},i(r,"toString",n)}}))}(Object,Symbol),function(e,t,n){function i(){return this}t[e]||(t[e]=function(){var t=0,n=this,r={next:function(){var e=n.length<=t;return e?{done:e}:{done:e,value:n[t++]}}};return r[e]=i,r}),n[e]||(n[e]=function(){var t=String.fromCodePoint,n=this,r=0,o=n.length,a={next:function(){var e=o<=r,i=e?"":t(n.codePointAt(r));return r+=i.length,e?{done:e}:{done:e,value:i}}};return a[e]=i,a})}(Symbol.iterator,Array.prototype,String.prototype);var G=Object.prototype.toString;Object.prototype.toString=function(){return void 0===this?"[object Undefined]":null===this?"[object Null]":G.call(this)},Object.keys=function(e){return Object.getOwnPropertyNames(e).filter((function(t){return(t=Object.getOwnPropertyDescriptor(e,t))&&t.enumerable}))},s(),d(),String.prototype[Symbol.iterator]&&String.prototype.codePointAt||(s(),d(),String.prototype[Symbol.iterator]=function e(){var t,n=this;return T(e,(function(e){if(1==e.a&&(t=0),3!=e.a)return t<n.length?e=w(e,n[t]):(e.a=0,e=void 0),e;t++,e.a=2}))}),s(),d(),Set.prototype[Symbol.iterator]||(s(),d(),Set.prototype[Symbol.iterator]=function e(){var t,n,i=this;return T(e,(function(e){if(1==e.a&&(t=[],i.forEach((function(e){t.push(e)})),n=0),3!=e.a)return n<t.length?e=w(e,t[n]):(e.a=0,e=void 0),e;n++,e.a=2}))}),s(),d(),Map.prototype[Symbol.iterator]||(s(),d(),Map.prototype[Symbol.iterator]=function e(){var t,n,i=this;return T(e,(function(e){if(1==e.a&&(t=[],i.forEach((function(e,n){t.push([n,e])})),n=0),3!=e.a)return n<t.length?e=w(e,t[n]):(e.a=0,e=void 0),e;n++,e.a=2}))});var X=window;X.WebComponents=X.WebComponents||{flags:{}};var Y=document.querySelector('script[src*="webcomponents-bundle"]'),Z=/wc-(.+)/,J={};if(!J.noOpts){if(location.search.slice(1).split("&").forEach((function(e){var t;(e=e.split("="))[0]&&(t=e[0].match(Z))&&(J[t[1]]=e[1]||!0)})),Y)for(var K=0,Q=void 0;Q=Y.attributes[K];K++)"src"!==Q.name&&(J[Q.name]=Q.value||!0);var ee={};J.log&&J.log.split&&J.log.split(",").forEach((function(e){ee[e]=!0})),J.log=ee}X.WebComponents.flags=J;var te=J.shadydom;if(te){X.ShadyDOM=X.ShadyDOM||{},X.ShadyDOM.force=te;var ne=J.noPatch;X.ShadyDOM.noPatch="true"===ne||ne}var ie=J.register||J.ce;function re(){}function oe(e){return e.__shady||(e.__shady=new re),e.__shady}function ae(e){return e&&e.__shady}ie&&window.customElements&&(X.customElements.forcePolyfill=ie),re.prototype.toJSON=function(){return{}};var se=window.ShadyDOM||{};se.Ua=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var le=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");function ce(e){return(e=ae(e))&&void 0!==e.firstChild}function ue(e){return e instanceof ShadowRoot}function he(e){return(e=(e=ae(e))&&e.root)&&Wn(e)}se.B=!!(le&&le.configurable&&le.get),se.sa=se.force||!se.Ua,se.D=se.noPatch||!1,se.aa=se.preferPerformance,se.ua="on-demand"===se.D,se.Ia=navigator.userAgent.match("Trident");var de=Element.prototype,fe=de.matches||de.matchesSelector||de.mozMatchesSelector||de.msMatchesSelector||de.oMatchesSelector||de.webkitMatchesSelector,pe=document.createTextNode(""),me=0,ve=[];function ye(e){ve.push(e),pe.textContent=me++}new MutationObserver((function(){for(;ve.length;)try{ve.shift()()}catch(e){throw pe.textContent=me++,e}})).observe(pe,{characterData:!0});var ge=document.contains?function(e,t){return e.__shady_native_contains(t)}:function(e,t){return e===t||e.documentElement&&e.documentElement.__shady_native_contains(t)};function _e(e,t){for(;t;){if(t==e)return!0;t=t.__shady_parentNode}return!1}function be(e){for(var t=e.length-1;0<=t;t--){var n=e[t],i=n.getAttribute("id")||n.getAttribute("name");i&&"length"!==i&&isNaN(i)&&(e[i]=n)}return e.item=function(t){return e[t]},e.namedItem=function(t){if("length"!==t&&isNaN(t)&&e[t])return e[t];for(var n=f(e),i=n.next();!i.done;i=n.next())if(((i=i.value).getAttribute("id")||i.getAttribute("name"))==t)return i;return null},e}function we(e){var t=[];for(e=e.__shady_native_firstChild;e;e=e.__shady_native_nextSibling)t.push(e);return t}function Ee(e){var t=[];for(e=e.__shady_firstChild;e;e=e.__shady_nextSibling)t.push(e);return t}function xe(e,t,n){if(n.configurable=!0,n.value)e[t]=n.value;else try{Object.defineProperty(e,t,n)}catch(e){}}function Ce(e,t,n,i){for(var r in n=void 0===n?"":n,t)i&&0<=i.indexOf(r)||xe(e,n+r,t[r])}function Se(e,t){for(var n in t)n in e&&xe(e,n,t[n])}function Te(e){var t={};return Object.getOwnPropertyNames(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t}function Ne(e,t){for(var n,i=Object.getOwnPropertyNames(t),r=0;r<i.length;r++)e[n=i[r]]=t[n]}var ke,Oe=[];function Me(e){ke||(ke=!0,ye(De)),Oe.push(e)}function De(){ke=!1;for(var e=!!Oe.length;Oe.length;)Oe.shift()();return e}function Ae(){this.a=!1,this.addedNodes=[],this.removedNodes=[],this.ja=new Set}De.list=Oe,Ae.prototype.flush=function(){if(this.a){this.a=!1;var e=this.takeRecords();e.length&&this.ja.forEach((function(t){t(e)}))}},Ae.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var e=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];return this.addedNodes=[],this.removedNodes=[],e}return[]};var Le=/[&\u00A0"]/g,je=/[&\u00A0<>]/g;function Pe(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case"Â ":return"&nbsp;"}}function Ie(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t}var Re=Ie("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),Fe=Ie("style script xmp iframe noembed noframes plaintext noscript".split(" "));function He(e,t){"template"===e.localName&&(e=e.content);for(var n="",i=t?t(e):e.childNodes,r=0,o=i.length,a=void 0;r<o&&(a=i[r]);r++){e:{var s=a,l=e,c=t;switch(s.nodeType){case Node.ELEMENT_NODE:for(var u,h="<"+(l=s.localName),d=s.attributes,f=0;u=d[f];f++)h+=" "+u.name+'="'+u.value.replace(Le,Pe)+'"';h+=">",s=Re[l]?h:h+He(s,c)+"</"+l+">";break e;case Node.TEXT_NODE:s=s.data,s=l&&Fe[l.localName]?s:s.replace(je,Pe);break e;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break e;default:throw window.console.error(s),Error("not implemented")}}n+=s}return n}var qe=se.B,Ve={querySelector:function(e){return this.__shady_native_querySelector(e)},querySelectorAll:function(e){return this.__shady_native_querySelectorAll(e)}},We={};function Be(e){We[e]=function(t){return t["__shady_native_"+e]}}function Ue(e,t){for(var n in Ce(e,t,"__shady_native_"),t)Be(n)}function ze(e,t){t=void 0===t?[]:t;for(var n=0;n<t.length;n++){var i=t[n],r=Object.getOwnPropertyDescriptor(e,i);r&&(Object.defineProperty(e,"__shady_native_"+i,r),r.value?Ve[i]||(Ve[i]=r.value):Be(i))}}var $e=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),Ge=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1),Xe=document.implementation.createHTMLDocument("inert");function Ye(e){for(var t;t=e.__shady_native_firstChild;)e.__shady_native_removeChild(t)}var Ze=["firstElementChild","lastElementChild","children","childElementCount"],Je=["querySelector","querySelectorAll"],Ke=Te({get childNodes(){return this.__shady_childNodes},get firstChild(){return this.__shady_firstChild},get lastChild(){return this.__shady_lastChild},get childElementCount(){return this.__shady_childElementCount},get children(){return this.__shady_children},get firstElementChild(){return this.__shady_firstElementChild},get lastElementChild(){return this.__shady_lastElementChild},get shadowRoot(){return this.__shady_shadowRoot}}),Qe=Te({get textContent(){return this.__shady_textContent},set textContent(e){this.__shady_textContent=e},get innerHTML(){return this.__shady_innerHTML},set innerHTML(e){return this.__shady_innerHTML=e}}),et=Te({get parentElement(){return this.__shady_parentElement},get parentNode(){return this.__shady_parentNode},get nextSibling(){return this.__shady_nextSibling},get previousSibling(){return this.__shady_previousSibling},get nextElementSibling(){return this.__shady_nextElementSibling},get previousElementSibling(){return this.__shady_previousElementSibling},get className(){return this.__shady_className},set className(e){return this.__shady_className=e}});function tt(e){for(var t in e){var n=e[t];n&&(n.enumerable=!1)}}tt(Ke),tt(Qe),tt(et);var nt,it=se.B||!0===se.D,rt=it?function(){}:function(e){var t=oe(e);t.Ka||(t.Ka=!0,Se(e,et))},ot=it?function(){}:function(e){var t=oe(e);t.Ja||(t.Ja=!0,Se(e,Ke),window.customElements&&window.customElements.polyfillWrapFlushCallback&&!se.D||Se(e,Qe))},at="__eventWrappers"+Date.now(),st=(nt=Object.getOwnPropertyDescriptor(Event.prototype,"composed"))?function(e){return nt.get.call(e)}:null,lt=function(){function e(){}var t=!1,n={get capture(){return t=!0,!1}};return window.addEventListener("test",e,n),window.removeEventListener("test",e,n),t}();function ct(e){if(e&&"object"==t(e))var n=!!e.capture,i=!!e.once,r=!!e.passive,o=e.O;else n=!!e,r=i=!1;return{Ga:o,capture:n,once:i,passive:r,Fa:lt?e:n}}var ut={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},ht={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function dt(e){return e instanceof Node?e.__shady_getRootNode():e}function ft(e,t){var n=[],i=e;for(e=dt(e);i;)n.push(i),i=i.__shady_assignedSlot?i.__shady_assignedSlot:i.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&i.host&&(t||i!==e)?i.host:i.__shady_parentNode;return n[n.length-1]===document&&n.push(window),n}function pt(e,t){if(!ue)return e;e=ft(e,!0);for(var n,i,r=0,o=void 0,a=void 0;r<t.length;r++)if((i=dt(n=t[r]))!==o&&(a=e.indexOf(i),o=i),!ue(i)||-1<a)return n}function mt(e){function t(t,n){return(t=new e(t,n)).__composed=n&&!!n.composed,t}return t.__proto__=e,t.prototype=e.prototype,t}var vt={focus:!0,blur:!0};function yt(e){return e.__target!==e.target||e.__relatedTarget!==e.relatedTarget}function gt(e,t,n){if(n=t.__handlers&&t.__handlers[e.type]&&t.__handlers[e.type][n])for(var i,r=0;(i=n[r])&&(!yt(e)||e.target!==e.relatedTarget)&&(i.call(t,e),!e.__immediatePropagationStopped);r++);}function _t(e){var t=e.composedPath(),n=t.map((function(e){return pt(e,t)})),i=e.bubbles;Object.defineProperty(e,"currentTarget",{configurable:!0,enumerable:!0,get:function(){return a}});var r=Event.CAPTURING_PHASE;Object.defineProperty(e,"eventPhase",{configurable:!0,enumerable:!0,get:function(){return r}});for(var o=t.length-1;0<=o;o--){var a=t[o];if(r=a===n[o]?Event.AT_TARGET:Event.CAPTURING_PHASE,gt(e,a,"capture"),e.ma)return}for(o=0;o<t.length;o++){var s=(a=t[o])===n[o];if((s||i)&&(r=s?Event.AT_TARGET:Event.BUBBLING_PHASE,gt(e,a,"bubble"),e.ma))return}r=0,a=null}function bt(e,t,n,i,r,o){for(var a=0;a<e.length;a++){var s=e[a],l=s.type,c=s.capture,u=s.once,h=s.passive;if(t===s.node&&n===l&&i===c&&r===u&&o===h)return a}return-1}function wt(e){return De(),!se.aa&&this instanceof Node&&!ge(document,this)?(e.__target||St(e,this),_t(e)):this.__shady_native_dispatchEvent(e)}function Et(e,n,i){var r=ct(i),o=r.capture,a=r.once,s=r.passive,l=r.Ga;if(r=r.Fa,n){var c=t(n);if(("function"===c||"object"===c)&&("object"!==c||n.handleEvent&&"function"==typeof n.handleEvent)){if(ht[e])return this.__shady_native_addEventListener(e,n,r);var u=l||this;if(l=n[at]){if(-1<bt(l,u,e,o,a,s))return}else n[at]=[];l=function(t){if(a&&this.__shady_removeEventListener(e,n,i),t.__target||St(t),u!==this){var r=Object.getOwnPropertyDescriptor(t,"currentTarget");Object.defineProperty(t,"currentTarget",{get:function(){return u},configurable:!0});var s=Object.getOwnPropertyDescriptor(t,"eventPhase");Object.defineProperty(t,"eventPhase",{configurable:!0,enumerable:!0,get:function(){return o?Event.CAPTURING_PHASE:Event.BUBBLING_PHASE}})}if(t.__previousCurrentTarget=t.currentTarget,(!ue(u)&&"slot"!==u.localName||-1!=t.composedPath().indexOf(u))&&(t.composed||-1<t.composedPath().indexOf(u)))if(yt(t)&&t.target===t.relatedTarget)t.eventPhase===Event.BUBBLING_PHASE&&t.stopImmediatePropagation();else if(t.eventPhase===Event.CAPTURING_PHASE||t.bubbles||t.target===u||u instanceof Window){var l="function"===c?n.call(u,t):n.handleEvent&&n.handleEvent(t);return u!==this&&(r?(Object.defineProperty(t,"currentTarget",r),r=null):delete t.currentTarget,s?(Object.defineProperty(t,"eventPhase",s),s=null):delete t.eventPhase),l}},n[at].push({node:u,type:e,capture:o,once:a,passive:s,lb:l}),this.__handlers=this.__handlers||{},this.__handlers[e]=this.__handlers[e]||{capture:[],bubble:[]},this.__handlers[e][o?"capture":"bubble"].push(l),vt[e]||this.__shady_native_addEventListener(e,l,r)}}}function xt(e,t,n){if(t){var i=ct(n);n=i.capture;var r=i.once,o=i.passive,a=i.Ga;if(i=i.Fa,ht[e])return this.__shady_native_removeEventListener(e,t,i);var s=a||this;a=void 0;var l=null;try{l=t[at]}catch(e){}l&&-1<(r=bt(l,s,e,n,r,o))&&(a=l.splice(r,1)[0].lb,l.length||(t[at]=void 0)),this.__shady_native_removeEventListener(e,a||t,i),a&&this.__handlers&&this.__handlers[e]&&-1<(t=(e=this.__handlers[e][n?"capture":"bubble"]).indexOf(a))&&e.splice(t,1)}}var Ct=Te({get composed(){return void 0===this.__composed&&(st?this.__composed="focusin"===this.type||"focusout"===this.type||st(this):!1!==this.isTrusted&&(this.__composed=ut[this.type])),this.__composed||!1},composedPath:function(){return this.__composedPath||(this.__composedPath=ft(this.__target,this.composed)),this.__composedPath},get target(){return pt(this.currentTarget||this.__previousCurrentTarget,this.composedPath())},get relatedTarget(){return this.__relatedTarget?(this.__relatedTargetComposedPath||(this.__relatedTargetComposedPath=ft(this.__relatedTarget,!0)),pt(this.currentTarget||this.__previousCurrentTarget,this.__relatedTargetComposedPath)):null},stopPropagation:function(){Event.prototype.stopPropagation.call(this),this.ma=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this),this.ma=this.__immediatePropagationStopped=!0}});function St(e,t){if(t=void 0===t?e.target:t,e.__target=t,e.__relatedTarget=e.relatedTarget,se.B){if(!(t=Object.getPrototypeOf(e)).hasOwnProperty("__shady_patchedProto")){var n=Object.create(t);n.__shady_sourceProto=t,Ce(n,Ct),t.__shady_patchedProto=n}e.__proto__=t.__shady_patchedProto}else Ce(e,Ct)}var Tt=mt(Event),Nt=mt(CustomEvent),kt=mt(MouseEvent),Ot=Object.getOwnPropertyNames(Element.prototype).filter((function(e){return"on"===e.substring(0,2)})),Mt=Object.getOwnPropertyNames(HTMLElement.prototype).filter((function(e){return"on"===e.substring(0,2)}));function Dt(e){return{set:function(t){var n=oe(this),i=e.substring(2);n.N||(n.N={}),n.N[e]&&this.removeEventListener(i,n.N[e]),this.__shady_addEventListener(i,t),n.N[e]=t},get:function(){var t=ae(this);return t&&t.N&&t.N[e]},configurable:!0}}function At(e,t){return{index:e,ba:[],ia:t}}function Lt(e,t,n,i){var r=0,o=0,a=0,s=0,l=Math.min(t-r,i-o);if(0==r&&0==o)e:{for(a=0;a<l;a++)if(e[a]!==n[a])break e;a=l}if(t==e.length&&i==n.length){s=e.length;for(var c=n.length,u=0;u<l-a&&jt(e[--s],n[--c]);)u++;s=u}if(o+=a,i-=s,0==(t-=s)-(r+=a)&&0==i-o)return[];if(r==t){for(t=At(r,0);o<i;)t.ba.push(n[o++]);return[t]}if(o==i)return[At(r,t-r)];for(i=i-(a=o)+1,s=t-(l=r)+1,t=Array(i),c=0;c<i;c++)t[c]=Array(s),t[c][0]=c;for(c=0;c<s;c++)t[0][c]=c;for(c=1;c<i;c++)for(u=1;u<s;u++)if(e[l+u-1]===n[a+c-1])t[c][u]=t[c-1][u-1];else{var h=t[c-1][u]+1,d=t[c][u-1]+1;t[c][u]=h<d?h:d}for(l=t.length-1,a=t[0].length-1,i=t[l][a],e=[];0<l||0<a;)0==l?(e.push(2),a--):0==a?(e.push(3),l--):(s=t[l-1][a-1],(h=(c=t[l-1][a])<(u=t[l][a-1])?c<s?c:s:u<s?u:s)==s?(s==i?e.push(0):(e.push(1),i=s),l--,a--):h==c?(e.push(3),l--,i=c):(e.push(2),a--,i=u));for(e.reverse(),t=void 0,l=[],a=0;a<e.length;a++)switch(e[a]){case 0:t&&(l.push(t),t=void 0),r++,o++;break;case 1:t||(t=At(r,0)),t.ia++,r++,t.ba.push(n[o]),o++;break;case 2:t||(t=At(r,0)),t.ia++,r++;break;case 3:t||(t=At(r,0)),t.ba.push(n[o]),o++}return t&&l.push(t),l}function jt(e,t){return e===t}var Pt=Te({dispatchEvent:wt,addEventListener:Et,removeEventListener:xt}),It=null;function Rt(){return It||(It=window.ShadyCSS&&window.ShadyCSS.ScopingShim),It||null}function Ft(e,t,n){var i=Rt();return!(!i||"class"!==t||(i.setElementClass(e,n),0))}function Ht(e,t){var n=Rt();n&&n.unscopeNode(e,t)}function qt(e){if(e.nodeType!==Node.ELEMENT_NODE)return"";var t=Rt();return t?t.currentScopeForNode(e):""}function Vt(e,t){if(e)for(e.nodeType===Node.ELEMENT_NODE&&t(e),e=e.__shady_firstChild;e;e=e.__shady_nextSibling)e.nodeType===Node.ELEMENT_NODE&&Vt(e,t)}var Wt=window.document,Bt=se.aa,Ut=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),zt=Ut&&Ut.get;function $t(e){for(var t;t=e.__shady_firstChild;)e.__shady_removeChild(t)}function Gt(e,t,n){if(e=(e=ae(e))&&e.Z){if(t)if(t.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(var i=0,r=t.childNodes.length;i<r;i++)e.addedNodes.push(t.childNodes[i]);else e.addedNodes.push(t);n&&e.removedNodes.push(n),function(e){e.a||(e.a=!0,ye((function(){e.flush()})))}(e)}}var Xt=Te({get parentNode(){var e=ae(this);return void 0!==(e=e&&e.parentNode)?e:this.__shady_native_parentNode},get firstChild(){var e=ae(this);return void 0!==(e=e&&e.firstChild)?e:this.__shady_native_firstChild},get lastChild(){var e=ae(this);return void 0!==(e=e&&e.lastChild)?e:this.__shady_native_lastChild},get nextSibling(){var e=ae(this);return void 0!==(e=e&&e.nextSibling)?e:this.__shady_native_nextSibling},get previousSibling(){var e=ae(this);return void 0!==(e=e&&e.previousSibling)?e:this.__shady_native_previousSibling},get childNodes(){if(ce(this)){var e=ae(this);if(!e.childNodes){e.childNodes=[];for(var t=this.__shady_firstChild;t;t=t.__shady_nextSibling)e.childNodes.push(t)}var n=e.childNodes}else n=this.__shady_native_childNodes;return n.item=function(e){return n[e]},n},get parentElement(){var e=ae(this);return(e=e&&e.parentNode)&&e.nodeType!==Node.ELEMENT_NODE&&(e=null),void 0!==e?e:this.__shady_native_parentElement},get isConnected(){if(zt&&zt.call(this))return!0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return!1;var e=this.ownerDocument;if(null===e||ge(e,this))return!0;for(e=this;e&&!(e instanceof Document);)e=e.__shady_parentNode||(ue(e)?e.host:void 0);return!!(e&&e instanceof Document)},get textContent(){if(ce(this)){for(var e=[],t=this.__shady_firstChild;t;t=t.__shady_nextSibling)t.nodeType!==Node.COMMENT_NODE&&e.push(t.__shady_textContent);return e.join("")}return this.__shady_native_textContent},set textContent(e){switch(null==e&&(e=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!ce(this)&&se.B){var t=this.__shady_firstChild;(t!=this.__shady_lastChild||t&&t.nodeType!=Node.TEXT_NODE)&&$t(this),this.__shady_native_textContent=e}else $t(this),(0<e.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_insertBefore(document.createTextNode(e));break;default:this.nodeValue=e}},insertBefore:function(e,t){if(this.ownerDocument!==Wt&&e.ownerDocument!==Wt)return this.__shady_native_insertBefore(e,t),e;if(e===this)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(t){var n=ae(t);if(void 0!==(n=n&&n.parentNode)&&n!==this||void 0===n&&t.__shady_native_parentNode!==this)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.")}if(t===e)return e;Gt(this,e);var i=[],r=(n=$n(this))?n.host.localName:qt(this),o=e.__shady_parentNode;if(o){var a=qt(e),s=!!n||!$n(e)||Bt&&void 0!==this.__noInsertionPoint;o.__shady_removeChild(e,s)}o=!0;var l=(!Bt||void 0===e.__noInsertionPoint&&void 0===this.__noInsertionPoint)&&!function e(t,n){var i=Rt();if(!i)return!0;if(t.nodeType===Node.DOCUMENT_FRAGMENT_NODE){for(i=!0,t=t.__shady_firstChild;t;t=t.__shady_nextSibling)i=i&&e(t,n);return i}return t.nodeType!==Node.ELEMENT_NODE||i.currentScopeForNode(t)===n}(e,r),c=n&&!e.__noInsertionPoint&&(!Bt||e.nodeType===Node.DOCUMENT_FRAGMENT_NODE);return(c||l)&&(l&&(a=a||qt(e)),Vt(e,(function(e){if(c&&"slot"===e.localName&&i.push(e),l){var t=a;Rt()&&(t&&Ht(e,t),(t=Rt())&&t.scopeNode(e,r))}}))),i.length&&(Fn(n),n.c.push.apply(n.c,i instanceof Array?i:p(f(i))),Ln(n)),ce(this)&&(function(e,t,n){En(t,2);var i=oe(t);if(void 0!==i.firstChild&&(i.childNodes=null),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(e=e.__shady_native_firstChild;e;e=e.__shady_native_nextSibling)xn(e,t,i,n);else xn(e,t,i,n)}(e,this,t),(s=ae(this)).root?(o=!1,he(this)&&Ln(s.root)):n&&"slot"===this.localName&&(o=!1,Ln(n))),o?(n=ue(this)?this.host:this,t?(t=function e(t){var n=t;if(t&&"slot"===t.localName){var i=ae(t);(i=i&&i.V)&&(n=i.length?i[0]:e(t.__shady_nextSibling))}return n}(t),n.__shady_native_insertBefore(e,t)):n.__shady_native_appendChild(e)):e.ownerDocument!==this.ownerDocument&&this.ownerDocument.adoptNode(e),e},appendChild:function(e){if(this!=e||!ue(e))return this.__shady_insertBefore(e)},removeChild:function(e,t){if(t=void 0!==t&&t,this.ownerDocument!==Wt)return this.__shady_native_removeChild(e);if(e.__shady_parentNode!==this)throw Error("The node to be removed is not a child of this node: "+e);Gt(this,null,e);var n=$n(e),i=n&&function(e,t){if(e.a){Hn(e);var n,i=e.b;for(n in i)for(var r=i[n],o=0;o<r.length;o++){var a=r[o];if(_e(t,a)){r.splice(o,1);var s=e.a.indexOf(a);if(0<=s&&(e.a.splice(s,1),(s=ae(a.__shady_parentNode))&&s.da&&s.da--),o--,s=(a=ae(a)).V)for(var l=0;l<s.length;l++){var c=s[l],u=c.__shady_native_parentNode;u&&u.__shady_native_removeChild(c)}a.V=[],a.assignedNodes=[],s=!0}}return s}}(n,e),r=ae(this);if(ce(this)&&(function(e,t){var n=oe(e);e===(t=oe(t)).firstChild&&(t.firstChild=n.nextSibling),e===t.lastChild&&(t.lastChild=n.previousSibling),e=n.previousSibling;var i=n.nextSibling;e&&(oe(e).nextSibling=i),i&&(oe(i).previousSibling=e),n.parentNode=n.previousSibling=n.nextSibling=void 0,void 0!==t.childNodes&&(t.childNodes=null)}(e,this),he(this))){Ln(r.root);var o=!0}if(Rt()&&!t&&n&&e.nodeType!==Node.TEXT_NODE){var a=qt(e);Vt(e,(function(e){Ht(e,a)}))}return function e(t){var n=ae(t);if(n&&void 0!==n.la)for(n=t.__shady_firstChild;n;n=n.__shady_nextSibling)e(n);(t=ae(t))&&(t.la=void 0)}(e),n&&((t="slot"===this.localName)&&(o=!0),(i||t)&&Ln(n)),o||(o=ue(this)?this.host:this,(!r.root&&"slot"!==e.localName||o===e.__shady_native_parentNode)&&o.__shady_native_removeChild(e)),e},replaceChild:function(e,t){return this.__shady_insertBefore(e,t),this.__shady_removeChild(t),e},cloneNode:function(e){if("template"==this.localName)return this.__shady_native_cloneNode(e);var t=this.__shady_native_cloneNode(!1);if(e&&t.nodeType!==Node.ATTRIBUTE_NODE){e=this.__shady_firstChild;for(var n;e;e=e.__shady_nextSibling)n=e.__shady_cloneNode(!0),t.__shady_appendChild(n)}return t},getRootNode:function(e){if(this&&this.nodeType){var t=oe(this),n=t.la;return void 0===n&&(ue(this)?(n=this,t.la=n):(n=(n=this.__shady_parentNode)?n.__shady_getRootNode(e):this,document.documentElement.__shady_native_contains(this)&&(t.la=n))),n}},contains:function(e){return _e(this,e)}}),Yt=Te({get assignedSlot(){var e=this.__shady_parentNode;return(e=e&&e.__shady_shadowRoot)&&jn(e),(e=ae(this))&&e.assignedSlot||null}});function Zt(e,t,n){var i=[];return function e(t,n,i,r){for(t=t.__shady_firstChild;t;t=t.__shady_nextSibling){var o;if(o=t.nodeType===Node.ELEMENT_NODE){var a=n,s=i,l=r,c=a(o=t);c&&l.push(o),s&&s(c)?o=c:(e(o,a,s,l),o=void 0)}if(o)break}}(e,t,n,i),i}var Jt=Te({get firstElementChild(){var e=ae(this);if(e&&void 0!==e.firstChild){for(e=this.__shady_firstChild;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_nextSibling;return e}return this.__shady_native_firstElementChild},get lastElementChild(){var e=ae(this);if(e&&void 0!==e.lastChild){for(e=this.__shady_lastChild;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_previousSibling;return e}return this.__shady_native_lastElementChild},get children(){return ce(this)?be(Array.prototype.filter.call(Ee(this),(function(e){return e.nodeType===Node.ELEMENT_NODE}))):this.__shady_native_children},get childElementCount(){var e=this.__shady_children;return e?e.length:0}}),Kt=Te({querySelector:function(e){return Zt(this,(function(t){return fe.call(t,e)}),(function(e){return!!e}))[0]||null},querySelectorAll:function(e,t){if(t){t=Array.prototype.slice.call(this.__shady_native_querySelectorAll(e));var n=this.__shady_getRootNode();return be(t.filter((function(e){return e.__shady_getRootNode()==n})))}return be(Zt(this,(function(t){return fe.call(t,e)})))}}),Qt=se.aa&&!se.D?Ne({},Jt):Jt;Ne(Jt,Kt);var en=window.document;function tn(e,t){if("slot"===t)he(e=e.__shady_parentNode)&&Ln(ae(e).root);else if("slot"===e.localName&&"name"===t&&(t=$n(e))){if(t.a){Hn(t);var n=e.La,i=qn(e);if(i!==n){var r=(n=t.b[n]).indexOf(e);0<=r&&n.splice(r,1),(n=t.b[i]||(t.b[i]=[])).push(e),1<n.length&&(t.b[i]=Vn(n))}}Ln(t)}}var nn=Te({get previousElementSibling(){var e=ae(this);if(e&&void 0!==e.previousSibling){for(e=this.__shady_previousSibling;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_previousSibling;return e}return this.__shady_native_previousElementSibling},get nextElementSibling(){var e=ae(this);if(e&&void 0!==e.nextSibling){for(e=this.__shady_nextSibling;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_nextSibling;return e}return this.__shady_native_nextElementSibling},get slot(){return this.getAttribute("slot")},set slot(e){this.__shady_setAttribute("slot",e)},get className(){return this.getAttribute("class")||""},set className(e){this.__shady_setAttribute("class",e)},setAttribute:function(e,t){this.ownerDocument!==en?this.__shady_native_setAttribute(e,t):Ft(this,e,t)||(this.__shady_native_setAttribute(e,t),tn(this,e))},removeAttribute:function(e){this.ownerDocument!==en?this.__shady_native_removeAttribute(e):Ft(this,e,"")?""===this.getAttribute(e)&&this.__shady_native_removeAttribute(e):(this.__shady_native_removeAttribute(e),tn(this,e))}});se.aa||Ot.forEach((function(e){nn[e]=Dt(e)}));var rn=Te({attachShadow:function(e){if(!this)throw Error("Must provide a host.");if(!e)throw Error("Not enough arguments.");if(e.shadyUpgradeFragment&&!se.Ia){var t=e.shadyUpgradeFragment;if(t.__proto__=ShadowRoot.prototype,An(t,this,e),Cn(t,t),e=t.__noInsertionPoint?null:t.querySelectorAll("slot"),t.__noInsertionPoint=void 0,e&&e.length){var n=t;Fn(n),n.c.push.apply(n.c,e instanceof Array?e:p(f(e))),Ln(t)}t.host.__shady_native_appendChild(t)}else t=new Dn(kn,this,e);return this.__CE_shadowRoot=t},get shadowRoot(){var e=ae(this);return e&&e.bb||null}});Ne(nn,rn);var on=document.implementation.createHTMLDocument("inert"),an=Te({get innerHTML(){return ce(this)?He("template"===this.localName?this.content:this,Ee):this.__shady_native_innerHTML},set innerHTML(e){if("template"===this.localName)this.__shady_native_innerHTML=e;else{$t(this);var t=this.localName||"div";for(t=this.namespaceURI&&this.namespaceURI!==on.namespaceURI?on.createElementNS(this.namespaceURI,t):on.createElement(t),se.B?t.__shady_native_innerHTML=e:t.innerHTML=e;e=t.__shady_firstChild;)this.__shady_insertBefore(e)}}}),sn=Te({blur:function(){var e=ae(this);(e=(e=e&&e.root)&&e.activeElement)?e.__shady_blur():this.__shady_native_blur()}});se.aa||Mt.forEach((function(e){sn[e]=Dt(e)}));var ln=Te({assignedNodes:function(e){if("slot"===this.localName){var t=this.__shady_getRootNode();return t&&ue(t)&&jn(t),(t=ae(this))&&(e&&e.flatten?t.V:t.assignedNodes)||[]}},addEventListener:function(e,n,i){if("slot"!==this.localName||"slotchange"===e)Et.call(this,e,n,i);else{"object"!=t(i)&&(i={capture:!!i});var r=this.__shady_parentNode;if(!r)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");i.O=this,r.__shady_addEventListener(e,n,i)}},removeEventListener:function(e,n,i){if("slot"!==this.localName||"slotchange"===e)xt.call(this,e,n,i);else{"object"!=t(i)&&(i={capture:!!i});var r=this.__shady_parentNode;if(!r)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");i.O=this,r.__shady_removeEventListener(e,n,i)}}}),cn=Te({getElementById:function(e){return""===e?null:Zt(this,(function(t){return t.id==e}),(function(e){return!!e}))[0]||null}}),un=Te({get activeElement(){var e=se.B?document.__shady_native_activeElement:document.activeElement;if(!e||!e.nodeType)return null;var t=!!ue(this);if(!(this===document||t&&this.host!==e&&this.host.__shady_native_contains(e)))return null;for(t=$n(e);t&&t!==this;)t=$n(e=t.host);return this===document?t?null:e:t===this?e:null}}),hn=window.document,dn=Te({importNode:function(e,t){if(e.ownerDocument!==hn||"template"===e.localName)return this.__shady_native_importNode(e,t);var n=this.__shady_native_importNode(e,!1);if(t)for(e=e.__shady_firstChild;e;e=e.__shady_nextSibling)t=this.__shady_importNode(e,!0),n.__shady_appendChild(t);return n}}),fn=Te({dispatchEvent:wt,addEventListener:Et.bind(window),removeEventListener:xt.bind(window)}),pn={};Object.getOwnPropertyDescriptor(HTMLElement.prototype,"parentElement")&&(pn.parentElement=Xt.parentElement),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"contains")&&(pn.contains=Xt.contains),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"children")&&(pn.children=Jt.children),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"innerHTML")&&(pn.innerHTML=an.innerHTML),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"className")&&(pn.className=nn.className);var mn={EventTarget:[Pt],Node:[Xt,window.EventTarget?null:Pt],Text:[Yt],Comment:[Yt],CDATASection:[Yt],ProcessingInstruction:[Yt],Element:[nn,Jt,Yt,!se.B||"innerHTML"in Element.prototype?an:null,window.HTMLSlotElement?null:ln],HTMLElement:[sn,pn],HTMLSlotElement:[ln],DocumentFragment:[Qt,cn],Document:[dn,Qt,cn,un],Window:[fn]},vn=se.B?null:["innerHTML","textContent"];function yn(e,t,n,i){t.forEach((function(t){return e&&t&&Ce(e,t,n,i)}))}function gn(e){var t,n=e?null:vn;for(t in mn)yn(window[t]&&window[t].prototype,mn[t],e,n)}function _n(e){return e.__shady_protoIsPatched=!0,yn(e,mn.EventTarget),yn(e,mn.Node),yn(e,mn.Element),yn(e,mn.HTMLElement),yn(e,mn.HTMLSlotElement),e}["Text","Comment","CDATASection","ProcessingInstruction"].forEach((function(e){var t=window[e],n=Object.create(t.prototype);n.__shady_protoIsPatched=!0,yn(n,mn.EventTarget),yn(n,mn.Node),mn[e]&&yn(n,mn[e]),t.prototype.__shady_patchedProto=n}));var bn=se.ua,wn=se.B;function En(e,t){if(bn&&!e.__shady_protoIsPatched&&!ue(e)){var n=Object.getPrototypeOf(e),i=n.hasOwnProperty("__shady_patchedProto")&&n.__shady_patchedProto;i||(_n(i=Object.create(n)),n.__shady_patchedProto=i),Object.setPrototypeOf(e,i)}wn||(1===t?rt(e):2===t&&ot(e))}function xn(e,t,n,i){En(e,1),i=i||null;var r=oe(e),o=i?oe(i):null;r.previousSibling=i?o.previousSibling:t.__shady_lastChild,(o=ae(r.previousSibling))&&(o.nextSibling=e),(o=ae(r.nextSibling=i))&&(o.previousSibling=e),r.parentNode=t,i?i===n.firstChild&&(n.firstChild=e):(n.lastChild=e,n.firstChild||(n.firstChild=e)),n.childNodes=null}function Cn(e,t){var n=oe(e);if(t||void 0===n.firstChild){n.childNodes=null;var i=n.firstChild=e.__shady_native_firstChild;for(n.lastChild=e.__shady_native_lastChild,En(e,2),n=i,i=void 0;n;n=n.__shady_native_nextSibling){var r=oe(n);r.parentNode=t||e,r.nextSibling=n.__shady_native_nextSibling,r.previousSibling=i||null,i=n,En(n,1)}}}var Sn=Te({addEventListener:function(e,n,i){"object"!=t(i)&&(i={capture:!!i}),i.O=i.O||this,this.host.__shady_addEventListener(e,n,i)},removeEventListener:function(e,n,i){"object"!=t(i)&&(i={capture:!!i}),i.O=i.O||this,this.host.__shady_removeEventListener(e,n,i)}});function Tn(e,t){Ce(e,Sn,t),Ce(e,un,t),Ce(e,an,t),Ce(e,Jt,t),se.D&&!t?(Ce(e,Xt,t),Ce(e,cn,t)):se.B||(Ce(e,et),Ce(e,Ke),Ce(e,Qe))}var Nn,kn={},On=se.deferConnectionCallbacks&&"loading"===document.readyState;function Mn(e){var t=[];do{t.unshift(e)}while(e=e.__shady_parentNode);return t}function Dn(e,t,n){if(e!==kn)throw new TypeError("Illegal constructor");this.a=null,An(this,t,n)}function An(e,t,n){if(e.host=t,e.mode=n&&n.mode,Cn(e.host),(t=oe(e.host)).root=e,t.bb="closed"!==e.mode?e:null,(t=oe(e)).firstChild=t.lastChild=t.parentNode=t.nextSibling=t.previousSibling=null,se.preferPerformance)for(;t=e.host.__shady_native_firstChild;)e.host.__shady_native_removeChild(t);else Ln(e)}function Ln(e){e.T||(e.T=!0,Me((function(){return jn(e)})))}function jn(e){var t;if(t=e.T){for(var n;e;)e.T&&(n=e),ue(e=(t=e).host.__shady_getRootNode())&&(t=ae(t.host))&&0<t.da||(e=void 0);t=n}(n=t)&&n._renderSelf()}function Pn(e,t,n){var i=oe(t),r=i.oa;i.oa=null,n||(n=(e=e.b[t.__shady_slot||"__catchall"])&&e[0]),n?(oe(n).assignedNodes.push(t),i.assignedSlot=n):i.assignedSlot=void 0,r!==i.assignedSlot&&i.assignedSlot&&(oe(i.assignedSlot).ra=!0)}function In(e,t,n){for(var i=0,r=void 0;i<n.length&&(r=n[i]);i++)if("slot"==r.localName){var o=ae(r).assignedNodes;o&&o.length&&In(e,t,o)}else t.push(n[i])}function Rn(e,t){t.__shady_native_dispatchEvent(new Event("slotchange")),(t=ae(t)).assignedSlot&&Rn(e,t.assignedSlot)}function Fn(e){e.c=e.c||[],e.a=e.a||[],e.b=e.b||{}}function Hn(e){if(e.c&&e.c.length){for(var t,n=e.c,i=0;i<n.length;i++){var r=n[i];Cn(r);var o=r.__shady_parentNode;Cn(o),(o=ae(o)).da=(o.da||0)+1,o=qn(r),e.b[o]?((t=t||{})[o]=!0,e.b[o].push(r)):e.b[o]=[r],e.a.push(r)}if(t)for(var a in t)e.b[a]=Vn(e.b[a]);e.c=[]}}function qn(e){var t=e.name||e.getAttribute("name")||"__catchall";return e.La=t}function Vn(e){return e.sort((function(e,t){e=Mn(e);for(var n=Mn(t),i=0;i<e.length;i++){t=e[i];var r=n[i];if(t!==r)return(e=Ee(t.__shady_parentNode)).indexOf(t)-e.indexOf(r)}}))}function Wn(e){return Hn(e),!(!e.a||!e.a.length)}if(Dn.prototype._renderSelf=function(){var e=On;if(On=!0,this.T=!1,this.a){Hn(this);for(var t,n=0;n<this.a.length;n++){var i=ae(t=this.a[n]),r=i.assignedNodes;if(i.assignedNodes=[],i.V=[],i.Ba=r)for(i=0;i<r.length;i++){var o=ae(r[i]);o.oa=o.assignedSlot,o.assignedSlot===t&&(o.assignedSlot=null)}}for(n=this.host.__shady_firstChild;n;n=n.__shady_nextSibling)Pn(this,n);for(n=0;n<this.a.length;n++){if(!(r=ae(t=this.a[n])).assignedNodes.length)for(i=t.__shady_firstChild;i;i=i.__shady_nextSibling)Pn(this,i,t);if((i=(i=ae(t.__shady_parentNode))&&i.root)&&(Wn(i)||i.T)&&i._renderSelf(),In(this,r.V,r.assignedNodes),i=r.Ba){for(o=0;o<i.length;o++)ae(i[o]).oa=null;r.Ba=null,i.length>r.assignedNodes.length&&(r.ra=!0)}r.ra&&(r.ra=!1,Rn(this,t))}for(t=this.a,n=[],r=0;r<t.length;r++)(o=ae(i=t[r].__shady_parentNode))&&o.root||!(0>n.indexOf(i))||n.push(i);for(t=0;t<n.length;t++){for(r=(o=n[t])===this?this.host:o,i=[],o=o.__shady_firstChild;o;o=o.__shady_nextSibling)if("slot"==o.localName)for(var a=ae(o).V,s=0;s<a.length;s++)i.push(a[s]);else i.push(o);o=we(r),a=Lt(i,i.length,o,o.length);for(var l=s=0,c=void 0;s<a.length&&(c=a[s]);s++){for(var u=0,h=void 0;u<c.ba.length&&(h=c.ba[u]);u++)h.__shady_native_parentNode===r&&r.__shady_native_removeChild(h),o.splice(c.index+l,1);l-=c.ia}for(l=0,c=void 0;l<a.length&&(c=a[l]);l++)for(s=o[c.index],u=c.index;u<c.index+c.ia;u++)h=i[u],r.__shady_native_insertBefore(h,s),o.splice(u,0,h)}}if(!se.preferPerformance&&!this.Aa)for(n=this.host.__shady_firstChild;n;n=n.__shady_nextSibling)t=ae(n),n.__shady_native_parentNode!==this.host||"slot"!==n.localName&&t.assignedSlot||this.host.__shady_native_removeChild(n);this.Aa=!0,On=e,Nn&&Nn()},function(e){e.__proto__=DocumentFragment.prototype,Tn(e,"__shady_"),Tn(e),Object.defineProperties(e,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}}),["localName","namespaceURI","prefix"].forEach((function(t){Object.defineProperty(e,t,{value:void 0,configurable:!0})})),["ownerDocument","baseURI","isConnected"].forEach((function(t){Object.defineProperty(e,t,{get:function(){return this.host[t]},configurable:!0})}))}(Dn.prototype),window.customElements&&window.customElements.define&&se.sa&&!se.preferPerformance){var Bn=new Map;Nn=function(){var e=[];Bn.forEach((function(t,n){e.push([n,t])})),Bn.clear();for(var t=0;t<e.length;t++){var n=e[t][0];e[t][1]?n.__shadydom_connectedCallback():n.__shadydom_disconnectedCallback()}},On&&document.addEventListener("readystatechange",(function(){On=!1,Nn()}),{once:!0});var Un=window.customElements.define,zn=function(e,t){var n=t.prototype.connectedCallback,i=t.prototype.disconnectedCallback;Un.call(window.customElements,e,function(e,t,n){var i=0,r="__isConnected"+i++;return(t||n)&&(e.prototype.connectedCallback=e.prototype.__shadydom_connectedCallback=function(){On?Bn.set(this,!0):this[r]||(this[r]=!0,t&&t.call(this))},e.prototype.disconnectedCallback=e.prototype.__shadydom_disconnectedCallback=function(){On?this.isConnected||Bn.set(this,!1):this[r]&&(this[r]=!1,n&&n.call(this))}),e}(t,n,i)),t.prototype.connectedCallback=n,t.prototype.disconnectedCallback=i};window.customElements.define=zn,Object.defineProperty(window.CustomElementRegistry.prototype,"define",{value:zn,configurable:!0})}function $n(e){if(ue(e=e.__shady_getRootNode()))return e}function Gn(e){this.node=e}function Xn(e){Object.defineProperty(Gn.prototype,e,{get:function(){return this.node["__shady_"+e]},set:function(t){this.node["__shady_"+e]=t},configurable:!0})}(i=Gn.prototype).addEventListener=function(e,t,n){return this.node.__shady_addEventListener(e,t,n)},i.removeEventListener=function(e,t,n){return this.node.__shady_removeEventListener(e,t,n)},i.appendChild=function(e){return this.node.__shady_appendChild(e)},i.insertBefore=function(e,t){return this.node.__shady_insertBefore(e,t)},i.removeChild=function(e){return this.node.__shady_removeChild(e)},i.replaceChild=function(e,t){return this.node.__shady_replaceChild(e,t)},i.cloneNode=function(e){return this.node.__shady_cloneNode(e)},i.getRootNode=function(e){return this.node.__shady_getRootNode(e)},i.contains=function(e){return this.node.__shady_contains(e)},i.dispatchEvent=function(e){return this.node.__shady_dispatchEvent(e)},i.setAttribute=function(e,t){this.node.__shady_setAttribute(e,t)},i.getAttribute=function(e){return this.node.__shady_native_getAttribute(e)},i.hasAttribute=function(e){return this.node.__shady_native_hasAttribute(e)},i.removeAttribute=function(e){this.node.__shady_removeAttribute(e)},i.attachShadow=function(e){return this.node.__shady_attachShadow(e)},i.focus=function(){this.node.__shady_native_focus()},i.blur=function(){this.node.__shady_blur()},i.importNode=function(e,t){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_importNode(e,t)},i.getElementById=function(e){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_getElementById(e)},i.querySelector=function(e){return this.node.__shady_querySelector(e)},i.querySelectorAll=function(e,t){return this.node.__shady_querySelectorAll(e,t)},i.assignedNodes=function(e){if("slot"===this.node.localName)return this.node.__shady_assignedNodes(e)},a.Object.defineProperties(Gn.prototype,{activeElement:{configurable:!0,enumerable:!0,get:function(){if(ue(this.node)||this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_activeElement}},_activeElement:{configurable:!0,enumerable:!0,get:function(){return this.activeElement}},host:{configurable:!0,enumerable:!0,get:function(){if(ue(this.node))return this.node.host}},parentNode:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentNode}},firstChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstChild}},lastChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastChild}},nextSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextSibling}},previousSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousSibling}},childNodes:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childNodes}},parentElement:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentElement}},firstElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstElementChild}},lastElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastElementChild}},nextElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextElementSibling}},previousElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousElementSibling}},children:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_children}},childElementCount:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childElementCount}},shadowRoot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_shadowRoot}},assignedSlot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_assignedSlot}},isConnected:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_isConnected}},innerHTML:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_innerHTML},set:function(e){this.node.__shady_innerHTML=e}},textContent:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_textContent},set:function(e){this.node.__shady_textContent=e}},slot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_slot},set:function(e){this.node.__shady_slot=e}},className:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_className},set:function(e){return this.node.__shady_className=e}}}),Ot.forEach((function(e){return Xn(e)})),Mt.forEach((function(e){return Xn(e)}));var Yn=new WeakMap;function Zn(e){if(ue(e)||e instanceof Gn)return e;var t=Yn.get(e);return t||(t=new Gn(e),Yn.set(e,t)),t}if(se.sa){var Jn=se.B?function(e){return e}:function(e){return ot(e),rt(e),e},Kn={inUse:se.sa,patch:Jn,isShadyRoot:ue,enqueue:Me,flush:De,flushInitial:function(e){!e.Aa&&e.T&&jn(e)},settings:se,filterMutations:function(e,t){var n=t.getRootNode();return e.map((function(e){var t=n===e.target.getRootNode();if(t&&e.addedNodes){if((t=[].slice.call(e.addedNodes).filter((function(e){return n===e.getRootNode()}))).length)return e=Object.create(e),Object.defineProperty(e,"addedNodes",{value:t,configurable:!0}),e}else if(t)return e})).filter((function(e){return e}))},observeChildren:function(e,t){var n=oe(e);n.Z||(n.Z=new Ae),n.Z.ja.add(t);var i=n.Z;return{Ma:t,S:i,Na:e,takeRecords:function(){return i.takeRecords()}}},unobserveChildren:function(e){var t=e&&e.S;t&&(t.ja.delete(e.Ma),t.ja.size||(oe(e.Na).Z=null))},deferConnectionCallbacks:se.deferConnectionCallbacks,preferPerformance:se.preferPerformance,handlesDynamicScoping:!0,wrap:se.D?Zn:Jn,wrapIfNeeded:!0===se.D?Zn:function(e){return e},Wrapper:Gn,composedPath:function(e){return e.__composedPath||(e.__composedPath=ft(e.target,!0)),e.__composedPath},noPatch:se.D,patchOnDemand:se.ua,nativeMethods:Ve,nativeTree:We,patchElementProto:_n};window.ShadyDOM=Kn,function(){var e=["dispatchEvent","addEventListener","removeEventListener"];window.EventTarget?ze(window.EventTarget.prototype,e):(ze(Node.prototype,e),ze(Window.prototype,e)),qe?ze(Node.prototype,"parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")):Ue(Node.prototype,{parentNode:{get:function(){return $e.currentNode=this,$e.parentNode()}},firstChild:{get:function(){return $e.currentNode=this,$e.firstChild()}},lastChild:{get:function(){return $e.currentNode=this,$e.lastChild()}},previousSibling:{get:function(){return $e.currentNode=this,$e.previousSibling()}},nextSibling:{get:function(){return $e.currentNode=this,$e.nextSibling()}},childNodes:{get:function(){var e=[];$e.currentNode=this;for(var t=$e.firstChild();t;)e.push(t),t=$e.nextSibling();return e}},parentElement:{get:function(){return Ge.currentNode=this,Ge.parentNode()}},textContent:{get:function(){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(var e,t=document.createTreeWalker(this,NodeFilter.SHOW_TEXT,null,!1),n="";e=t.nextNode();)n+=e.nodeValue;return n;default:return this.nodeValue}},set:function(e){switch(null==e&&(e=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:Ye(this),(0<e.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_native_insertBefore(document.createTextNode(e),void 0);break;default:this.nodeValue=e}}}}),ze(Node.prototype,"appendChild insertBefore removeChild replaceChild cloneNode contains".split(" ")),ze(HTMLElement.prototype,["parentElement","contains"]),e={firstElementChild:{get:function(){return Ge.currentNode=this,Ge.firstChild()}},lastElementChild:{get:function(){return Ge.currentNode=this,Ge.lastChild()}},children:{get:function(){var e=[];Ge.currentNode=this;for(var t=Ge.firstChild();t;)e.push(t),t=Ge.nextSibling();return be(e)}},childElementCount:{get:function(){return this.children?this.children.length:0}}},qe?(ze(Element.prototype,Ze),ze(Element.prototype,["previousElementSibling","nextElementSibling","innerHTML","className"]),ze(HTMLElement.prototype,["children","innerHTML","className"])):(Ue(Element.prototype,e),Ue(Element.prototype,{previousElementSibling:{get:function(){return Ge.currentNode=this,Ge.previousSibling()}},nextElementSibling:{get:function(){return Ge.currentNode=this,Ge.nextSibling()}},innerHTML:{get:function(){return He(this,we)},set:function(e){var t="template"===this.localName?this.content:this;Ye(t);var n=this.localName||"div";for((n=this.namespaceURI&&this.namespaceURI!==Xe.namespaceURI?Xe.createElementNS(this.namespaceURI,n):Xe.createElement(n)).innerHTML=e,e="template"===this.localName?n.content:n;n=e.__shady_native_firstChild;)t.__shady_native_insertBefore(n,void 0)}},className:{get:function(){return this.getAttribute("class")||""},set:function(e){this.setAttribute("class",e)}}})),ze(Element.prototype,"setAttribute getAttribute hasAttribute removeAttribute focus blur".split(" ")),ze(Element.prototype,Je),ze(HTMLElement.prototype,["focus","blur"]),window.HTMLTemplateElement&&ze(window.HTMLTemplateElement.prototype,["innerHTML"]),qe?ze(DocumentFragment.prototype,Ze):Ue(DocumentFragment.prototype,e),ze(DocumentFragment.prototype,Je),qe?(ze(Document.prototype,Ze),ze(Document.prototype,["activeElement"])):Ue(Document.prototype,e),ze(Document.prototype,["importNode","getElementById"]),ze(Document.prototype,Je)}(),gn("__shady_"),Object.defineProperty(document,"_activeElement",un.activeElement),Ce(Window.prototype,fn,"__shady_"),se.D?se.ua&&Ce(Element.prototype,rn):(gn(),function(){if(!st&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var e=function(){var e=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.__shady_dispatchEvent(e)};Element.prototype.click?Element.prototype.click=e:HTMLElement.prototype.click&&(HTMLElement.prototype.click=e)}}()),function(){for(var e in vt)window.__shady_native_addEventListener(e,(function(e){e.__target||(St(e),_t(e))}),!0)}(),window.Event=Tt,window.CustomEvent=Nt,window.MouseEvent=kt,window.ShadowRoot=Dn}var Qn=window.Document.prototype.createElement,ei=window.Document.prototype.createElementNS,ti=window.Document.prototype.importNode,ni=window.Document.prototype.prepend,ii=window.Document.prototype.append,ri=window.DocumentFragment.prototype.prepend,oi=window.DocumentFragment.prototype.append,ai=window.Node.prototype.cloneNode,si=window.Node.prototype.appendChild,li=window.Node.prototype.insertBefore,ci=window.Node.prototype.removeChild,ui=window.Node.prototype.replaceChild,hi=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),di=window.Element.prototype.attachShadow,fi=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),pi=window.Element.prototype.getAttribute,mi=window.Element.prototype.setAttribute,vi=window.Element.prototype.removeAttribute,yi=window.Element.prototype.getAttributeNS,gi=window.Element.prototype.setAttributeNS,_i=window.Element.prototype.removeAttributeNS,bi=window.Element.prototype.insertAdjacentElement,wi=window.Element.prototype.insertAdjacentHTML,Ei=window.Element.prototype.prepend,xi=window.Element.prototype.append,Ci=window.Element.prototype.before,Si=window.Element.prototype.after,Ti=window.Element.prototype.replaceWith,Ni=window.Element.prototype.remove,ki=window.HTMLElement,Oi=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),Mi=window.HTMLElement.prototype.insertAdjacentElement,Di=window.HTMLElement.prototype.insertAdjacentHTML,Ai=new Set;function Li(e){var t=Ai.has(e);return e=/^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(e),!t&&e}"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach((function(e){return Ai.add(e)}));var ji=document.contains?document.contains.bind(document):document.documentElement.contains.bind(document.documentElement);function Pi(e){var t=e.isConnected;if(void 0!==t)return t;if(ji(e))return!0;for(;e&&!(e.__CE_isImportDocument||e instanceof Document);)e=e.parentNode||(window.ShadowRoot&&e instanceof ShadowRoot?e.host:void 0);return!(!e||!(e.__CE_isImportDocument||e instanceof Document))}function Ii(e){var t=e.children;if(t)return Array.prototype.slice.call(t);for(t=[],e=e.firstChild;e;e=e.nextSibling)e.nodeType===Node.ELEMENT_NODE&&t.push(e);return t}function Ri(e,t){for(;t&&t!==e&&!t.nextSibling;)t=t.parentNode;return t&&t!==e?t.nextSibling:null}function Fi(){var e=!(null==rr||!rr.noDocumentConstructionObserver),t=!(null==rr||!rr.shadyDomFastWalk);this.X=[],this.a=[],this.R=!1,this.shadyDomFastWalk=t,this.jb=!e}function Hi(e,t,n,i){var r=window.ShadyDom;if(e.shadyDomFastWalk&&r&&r.inUse){if(t.nodeType===Node.ELEMENT_NODE&&n(t),t.querySelectorAll)for(e=r.nativeMethods.querySelectorAll.call(t,"*"),t=0;t<e.length;t++)n(e[t])}else!function e(t,n,i){for(var r=t;r;){if(r.nodeType===Node.ELEMENT_NODE){var o=r;n(o);var a=o.localName;if("link"===a&&"import"===o.getAttribute("rel")){if(r=o.import,void 0===i&&(i=new Set),r instanceof Node&&!i.has(r))for(i.add(r),r=r.firstChild;r;r=r.nextSibling)e(r,n,i);r=Ri(t,o);continue}if("template"===a){r=Ri(t,o);continue}if(o=o.__CE_shadowRoot)for(o=o.firstChild;o;o=o.nextSibling)e(o,n,i)}r=r.firstChild?r.firstChild:Ri(t,r)}}(t,n,i)}function qi(e,t){e.R&&Hi(e,t,(function(t){return Vi(e,t)}))}function Vi(e,t){if(e.R&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.X.length;n++)e.X[n](t);for(n=0;n<e.a.length;n++)e.a[n](t)}}function Wi(e,t){var n=[];for(Hi(e,t,(function(e){return n.push(e)})),t=0;t<n.length;t++){var i=n[t];1===i.__CE_state?e.connectedCallback(i):zi(e,i)}}function Bi(e,t){var n=[];for(Hi(e,t,(function(e){return n.push(e)})),t=0;t<n.length;t++){var i=n[t];1===i.__CE_state&&e.disconnectedCallback(i)}}function Ui(e,t,n){var i=(n=void 0===n?{}:n).kb,r=n.upgrade||function(t){return zi(e,t)},o=[];for(Hi(e,t,(function(t){if(e.R&&Vi(e,t),"link"===t.localName&&"import"===t.getAttribute("rel")){var n=t.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_registry=document.__CE_registry),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:t.addEventListener("load",(function(){var n=t.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var o=new Set;i&&(i.forEach((function(e){return o.add(e)})),o.delete(n)),Ui(e,n,{kb:o,upgrade:r})}}))}else o.push(t)}),i),t=0;t<o.length;t++)r(o[t])}function zi(e,t){try{var n=t.ownerDocument,i=n.__CE_registry,r=i&&(n.defaultView||n.__CE_isImportDocument)?tr(i,t.localName):void 0;if(r&&void 0===t.__CE_state){r.constructionStack.push(t);try{try{if(new r.constructorFunction!==t)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{r.constructionStack.pop()}}catch(e){throw t.__CE_state=2,e}if(t.__CE_state=1,t.__CE_definition=r,r.attributeChangedCallback&&t.hasAttributes()){var o=r.observedAttributes;for(r=0;r<o.length;r++){var a=o[r],s=t.getAttribute(a);null!==s&&e.attributeChangedCallback(t,a,null,s,null)}}Pi(t)&&e.connectedCallback(t)}}catch(e){Gi(e)}}function $i(e,t,n,i){var r=t.__CE_registry;if(r&&(null===i||"http://www.w3.org/1999/xhtml"===i)&&(r=tr(r,n)))try{var o=new r.constructorFunction;if(void 0===o.__CE_state||void 0===o.__CE_definition)throw Error("Failed to construct '"+n+"': The returned value was not constructed with the HTMLElement constructor.");if("http://www.w3.org/1999/xhtml"!==o.namespaceURI)throw Error("Failed to construct '"+n+"': The constructed element's namespace must be the HTML namespace.");if(o.hasAttributes())throw Error("Failed to construct '"+n+"': The constructed element must not have any attributes.");if(null!==o.firstChild)throw Error("Failed to construct '"+n+"': The constructed element must not have any children.");if(null!==o.parentNode)throw Error("Failed to construct '"+n+"': The constructed element must not have a parent node.");if(o.ownerDocument!==t)throw Error("Failed to construct '"+n+"': The constructed element's owner document is incorrect.");if(o.localName!==n)throw Error("Failed to construct '"+n+"': The constructed element's local name is incorrect.");return o}catch(r){return Gi(r),t=null===i?Qn.call(t,n):ei.call(t,i,n),Object.setPrototypeOf(t,HTMLUnknownElement.prototype),t.__CE_state=2,t.__CE_definition=void 0,Vi(e,t),t}return Vi(e,t=null===i?Qn.call(t,n):ei.call(t,i,n)),t}function Gi(e){var t=e.message,n=e.sourceURL||e.fileName||"",i=e.line||e.lineNumber||0,r=e.column||e.columnNumber||0,o=void 0;void 0===ErrorEvent.prototype.initErrorEvent?o=new ErrorEvent("error",{cancelable:!0,message:t,filename:n,lineno:i,colno:r,error:e}):((o=document.createEvent("ErrorEvent")).initErrorEvent("error",!1,!0,t,n,i),o.preventDefault=function(){Object.defineProperty(this,"defaultPrevented",{configurable:!0,get:function(){return!0}})}),void 0===o.error&&Object.defineProperty(o,"error",{configurable:!0,enumerable:!0,get:function(){return e}}),window.dispatchEvent(o),o.defaultPrevented||console.error(e)}function Xi(){var e=this;this.C=void 0,this.Ca=new Promise((function(t){e.a=t}))}function Yi(e){var t=document;this.S=void 0,this.M=e,this.a=t,Ui(this.M,this.a),"loading"===this.a.readyState&&(this.S=new MutationObserver(this.b.bind(this)),this.S.observe(this.a,{childList:!0,subtree:!0}))}function Zi(e){e.S&&e.S.disconnect()}function Ji(e){this.fa=new Map,this.ga=new Map,this.xa=new Map,this.na=!1,this.qa=new Map,this.ea=function(e){return e()},this.P=!1,this.ha=[],this.M=e,this.ya=e.jb?new Yi(e):void 0}function Ki(e,t){if(!Li(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(tr(e,t))throw Error("A custom element with name '"+t+"' has already been defined.");if(e.na)throw Error("A custom element is already being defined.")}function Qi(e,t,n){var i;e.na=!0;try{var r=n.prototype;if(!(r instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var o=function(e){var t=r[e];if(void 0!==t&&!(t instanceof Function))throw Error("The '"+e+"' callback must be a function.");return t},a=o("connectedCallback"),s=o("disconnectedCallback"),l=o("adoptedCallback"),c=(i=o("attributeChangedCallback"))&&n.observedAttributes||[]}catch(e){throw e}finally{e.na=!1}return n={localName:t,constructorFunction:n,connectedCallback:a,disconnectedCallback:s,adoptedCallback:l,attributeChangedCallback:i,observedAttributes:c,constructionStack:[]},e.ga.set(t,n),e.xa.set(n.constructorFunction,n),n}function er(e){if(!1!==e.P){e.P=!1;for(var t=[],n=e.ha,i=new Map,r=0;r<n.length;r++)i.set(n[r],[]);for(Ui(e.M,document,{upgrade:function(n){if(void 0===n.__CE_state){var r=n.localName,o=i.get(r);o?o.push(n):e.ga.has(r)&&t.push(n)}}}),r=0;r<t.length;r++)zi(e.M,t[r]);for(r=0;r<n.length;r++){for(var o=n[r],a=i.get(o),s=0;s<a.length;s++)zi(e.M,a[s]);(o=e.qa.get(o))&&o.resolve(void 0)}n.length=0}}function tr(e,t){var n=e.ga.get(t);if(n)return n;if(n=e.fa.get(t)){e.fa.delete(t);try{return Qi(e,t,n())}catch(e){Gi(e)}}}function nr(e,t,n){function i(t){return function(n){for(var i=[],r=0;r<arguments.length;++r)i[r]=arguments[r];r=[];for(var o=[],a=0;a<i.length;a++){var s=i[a];if(s instanceof Element&&Pi(s)&&o.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)r.push(s);else r.push(s)}for(t.apply(this,i),i=0;i<o.length;i++)Bi(e,o[i]);if(Pi(this))for(i=0;i<r.length;i++)(o=r[i])instanceof Element&&Wi(e,o)}}void 0!==n.prepend&&(t.prepend=i(n.prepend)),void 0!==n.append&&(t.append=i(n.append))}Fi.prototype.connectedCallback=function(e){var t=e.__CE_definition;if(t.connectedCallback)try{t.connectedCallback.call(e)}catch(e){Gi(e)}},Fi.prototype.disconnectedCallback=function(e){var t=e.__CE_definition;if(t.disconnectedCallback)try{t.disconnectedCallback.call(e)}catch(e){Gi(e)}},Fi.prototype.attributeChangedCallback=function(e,t,n,i,r){var o=e.__CE_definition;if(o.attributeChangedCallback&&-1<o.observedAttributes.indexOf(t))try{o.attributeChangedCallback.call(e,t,n,i,r)}catch(e){Gi(e)}},Xi.prototype.resolve=function(e){if(this.C)throw Error("Already resolved.");this.C=e,this.a(e)},Yi.prototype.b=function(e){var t=this.a.readyState;for("interactive"!==t&&"complete"!==t||Zi(this),t=0;t<e.length;t++)for(var n=e[t].addedNodes,i=0;i<n.length;i++)Ui(this.M,n[i])},(i=Ji.prototype).$a=function(e,t){var n=this;if(!(t instanceof Function))throw new TypeError("Custom element constructor getters must be functions.");Ki(this,e),this.fa.set(e,t),this.ha.push(e),this.P||(this.P=!0,this.ea((function(){return er(n)})))},i.define=function(e,t){var n=this;if(!(t instanceof Function))throw new TypeError("Custom element constructors must be functions.");Ki(this,e),Qi(this,e,t),this.ha.push(e),this.P||(this.P=!0,this.ea((function(){return er(n)})))},i.upgrade=function(e){Ui(this.M,e)},i.get=function(e){if(e=tr(this,e))return e.constructorFunction},i.whenDefined=function(e){if(!Li(e))return Promise.reject(new SyntaxError("'"+e+"' is not a valid custom element name."));var t=this.qa.get(e);if(t)return t.Ca;t=new Xi,this.qa.set(e,t);var n=this.ga.has(e)||this.fa.has(e);return e=-1===this.ha.indexOf(e),n&&e&&t.resolve(void 0),t.Ca},i.polyfillWrapFlushCallback=function(e){this.ya&&Zi(this.ya);var t=this.ea;this.ea=function(n){return e((function(){return t(n)}))}},window.CustomElementRegistry=Ji,Ji.prototype.define=Ji.prototype.define,Ji.prototype.upgrade=Ji.prototype.upgrade,Ji.prototype.get=Ji.prototype.get,Ji.prototype.whenDefined=Ji.prototype.whenDefined,Ji.prototype.polyfillDefineLazy=Ji.prototype.$a,Ji.prototype.polyfillWrapFlushCallback=Ji.prototype.polyfillWrapFlushCallback;var ir={},rr=window.customElements;function or(){var e=new Fi;!function(e){function t(){var t=this.constructor,n=document.__CE_registry.xa.get(t);if(!n)throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");var i=n.constructionStack;if(0===i.length)return i=Qn.call(document,n.localName),Object.setPrototypeOf(i,t.prototype),i.__CE_state=1,i.__CE_definition=n,Vi(e,i),i;var r=i.length-1,o=i[r];if(o===ir)throw Error("Failed to construct '"+n.localName+"': This element was already constructed.");return i[r]=ir,Object.setPrototypeOf(o,t.prototype),Vi(e,o),o}t.prototype=ki.prototype,Object.defineProperty(HTMLElement.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:t}),window.HTMLElement=t}(e),function(e){Document.prototype.createElement=function(t){return $i(e,this,t,null)},Document.prototype.importNode=function(t,n){return t=ti.call(this,t,!!n),this.__CE_registry?Ui(e,t):qi(e,t),t},Document.prototype.createElementNS=function(t,n){return $i(e,this,n,t)},nr(e,Document.prototype,{prepend:ni,append:ii})}(e),nr(e,DocumentFragment.prototype,{prepend:ri,append:oi}),function(e){function t(t,n){Object.defineProperty(t,"textContent",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(t){if(this.nodeType===Node.TEXT_NODE)n.set.call(this,t);else{var i=void 0;if(this.firstChild){var r=this.childNodes,o=r.length;if(0<o&&Pi(this)){i=Array(o);for(var a=0;a<o;a++)i[a]=r[a]}}if(n.set.call(this,t),i)for(t=0;t<i.length;t++)Bi(e,i[t])}}})}Node.prototype.insertBefore=function(t,n){if(t instanceof DocumentFragment){var i=Ii(t);if(t=li.call(this,t,n),Pi(this))for(n=0;n<i.length;n++)Wi(e,i[n]);return t}return i=t instanceof Element&&Pi(t),n=li.call(this,t,n),i&&Bi(e,t),Pi(this)&&Wi(e,t),n},Node.prototype.appendChild=function(t){if(t instanceof DocumentFragment){var n=Ii(t);if(t=si.call(this,t),Pi(this))for(var i=0;i<n.length;i++)Wi(e,n[i]);return t}return n=t instanceof Element&&Pi(t),i=si.call(this,t),n&&Bi(e,t),Pi(this)&&Wi(e,t),i},Node.prototype.cloneNode=function(t){return t=ai.call(this,!!t),this.ownerDocument.__CE_registry?Ui(e,t):qi(e,t),t},Node.prototype.removeChild=function(t){var n=t instanceof Element&&Pi(t),i=ci.call(this,t);return n&&Bi(e,t),i},Node.prototype.replaceChild=function(t,n){if(t instanceof DocumentFragment){var i=Ii(t);if(t=ui.call(this,t,n),Pi(this))for(Bi(e,n),n=0;n<i.length;n++)Wi(e,i[n]);return t}i=t instanceof Element&&Pi(t);var r=ui.call(this,t,n),o=Pi(this);return o&&Bi(e,n),i&&Bi(e,t),o&&Wi(e,t),r},hi&&hi.get?t(Node.prototype,hi):function(e,t){e.R=!0,e.X.push(t)}(e,(function(e){t(e,{enumerable:!0,configurable:!0,get:function(){for(var e=[],t=this.firstChild;t;t=t.nextSibling)t.nodeType!==Node.COMMENT_NODE&&e.push(t.textContent);return e.join("")},set:function(e){for(;this.firstChild;)ci.call(this,this.firstChild);null!=e&&""!==e&&si.call(this,document.createTextNode(e))}})}))}(e),function(e){function t(t,n){Object.defineProperty(t,"innerHTML",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(t){var i=this,r=void 0;if(Pi(this)&&(r=[],Hi(e,this,(function(e){e!==i&&r.push(e)}))),n.set.call(this,t),r)for(var o=0;o<r.length;o++){var a=r[o];1===a.__CE_state&&e.disconnectedCallback(a)}return this.ownerDocument.__CE_registry?Ui(e,this):qi(e,this),t}})}function n(t,n){t.insertAdjacentElement=function(t,i){var r=Pi(i);return t=n.call(this,t,i),r&&Bi(e,i),Pi(t)&&Wi(e,i),t}}function i(t,n){function i(t,n){for(var i=[];t!==n;t=t.nextSibling)i.push(t);for(n=0;n<i.length;n++)Ui(e,i[n])}t.insertAdjacentHTML=function(e,t){if("beforebegin"===(e=e.toLowerCase())){var r=this.previousSibling;n.call(this,e,t),i(r||this.parentNode.firstChild,this)}else if("afterbegin"===e)r=this.firstChild,n.call(this,e,t),i(this.firstChild,r);else if("beforeend"===e)r=this.lastChild,n.call(this,e,t),i(r||this.firstChild,null);else{if("afterend"!==e)throw new SyntaxError("The value provided ("+String(e)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");r=this.nextSibling,n.call(this,e,t),i(this.nextSibling,r)}}}di&&(Element.prototype.attachShadow=function(t){if(t=di.call(this,t),e.R&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.X.length;n++)e.X[n](t)}return this.__CE_shadowRoot=t}),fi&&fi.get?t(Element.prototype,fi):Oi&&Oi.get?t(HTMLElement.prototype,Oi):function(e,t){e.R=!0,e.a.push(t)}(e,(function(e){t(e,{enumerable:!0,configurable:!0,get:function(){return ai.call(this,!0).innerHTML},set:function(e){var t="template"===this.localName,n=t?this.content:this,i=ei.call(document,this.namespaceURI,this.localName);for(i.innerHTML=e;0<n.childNodes.length;)ci.call(n,n.childNodes[0]);for(e=t?i.content:i;0<e.childNodes.length;)si.call(n,e.childNodes[0])}})})),Element.prototype.setAttribute=function(t,n){if(1!==this.__CE_state)return mi.call(this,t,n);var i=pi.call(this,t);mi.call(this,t,n),n=pi.call(this,t),e.attributeChangedCallback(this,t,i,n,null)},Element.prototype.setAttributeNS=function(t,n,i){if(1!==this.__CE_state)return gi.call(this,t,n,i);var r=yi.call(this,t,n);gi.call(this,t,n,i),i=yi.call(this,t,n),e.attributeChangedCallback(this,n,r,i,t)},Element.prototype.removeAttribute=function(t){if(1!==this.__CE_state)return vi.call(this,t);var n=pi.call(this,t);vi.call(this,t),null!==n&&e.attributeChangedCallback(this,t,n,null,null)},Element.prototype.removeAttributeNS=function(t,n){if(1!==this.__CE_state)return _i.call(this,t,n);var i=yi.call(this,t,n);_i.call(this,t,n);var r=yi.call(this,t,n);i!==r&&e.attributeChangedCallback(this,n,i,r,t)},Mi?n(HTMLElement.prototype,Mi):bi&&n(Element.prototype,bi),Di?i(HTMLElement.prototype,Di):wi&&i(Element.prototype,wi),nr(e,Element.prototype,{prepend:Ei,append:xi}),function(e){function t(t){return function(n){for(var i=[],r=0;r<arguments.length;++r)i[r]=arguments[r];r=[];for(var o=[],a=0;a<i.length;a++){var s=i[a];if(s instanceof Element&&Pi(s)&&o.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)r.push(s);else r.push(s)}for(t.apply(this,i),i=0;i<o.length;i++)Bi(e,o[i]);if(Pi(this))for(i=0;i<r.length;i++)(o=r[i])instanceof Element&&Wi(e,o)}}var n=Element.prototype;void 0!==Ci&&(n.before=t(Ci)),void 0!==Si&&(n.after=t(Si)),void 0!==Ti&&(n.replaceWith=function(t){for(var n=[],i=0;i<arguments.length;++i)n[i]=arguments[i];i=[];for(var r=[],o=0;o<n.length;o++){var a=n[o];if(a instanceof Element&&Pi(a)&&r.push(a),a instanceof DocumentFragment)for(a=a.firstChild;a;a=a.nextSibling)i.push(a);else i.push(a)}for(o=Pi(this),Ti.apply(this,n),n=0;n<r.length;n++)Bi(e,r[n]);if(o)for(Bi(e,this),n=0;n<i.length;n++)(r=i[n])instanceof Element&&Wi(e,r)}),void 0!==Ni&&(n.remove=function(){var t=Pi(this);Ni.call(this),t&&Bi(e,this)})}(e)}(e),e=new Ji(e),document.__CE_registry=e,Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:e})}function ar(){this.end=this.start=0,this.rules=this.parent=this.previous=null,this.cssText=this.parsedCssText="",this.atRule=!1,this.type=0,this.parsedSelector=this.selector=this.keyframesName=""}function sr(e){var t=e=e.replace(pr,"").replace(mr,""),n=new ar;n.start=0,n.end=t.length;for(var i=n,r=0,o=t.length;r<o;r++)if("{"===t[r]){i.rules||(i.rules=[]);var a=i,s=a.rules[a.rules.length-1]||null;(i=new ar).start=r+1,i.parent=a,i.previous=s,a.rules.push(i)}else"}"===t[r]&&(i.end=r+1,i=i.parent||n);return function e(t,n){var i=n.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=i.trim(),t.parent&&(i=(i=(i=function(e){return e.replace(/\\([0-9a-f]{1,6})\s/gi,(function(e,t){for(t=6-(e=t).length;t--;)e="0"+e;return"\\"+e}))}(i=n.substring(t.previous?t.previous.end:t.parent.start,t.start-1))).replace(wr," ")).substring(i.lastIndexOf(";")+1),i=t.parsedSelector=t.selector=i.trim(),t.atRule=0===i.indexOf("@"),t.atRule?0===i.indexOf("@media")?t.type=dr:i.match(br)&&(t.type=hr,t.keyframesName=t.selector.split(wr).pop()):t.type=0===i.indexOf("--")?fr:ur),i=t.rules)for(var r=0,o=i.length,a=void 0;r<o&&(a=i[r]);r++)e(a,n);return t}(n,e)}rr&&!rr.forcePolyfill&&"function"==typeof rr.define&&"function"==typeof rr.get||or(),window.__CE_installPolyfill=or;var lr,cr,ur=1,hr=7,dr=4,fr=1e3,pr=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,mr=/@import[^;]*;/gim,vr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,yr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,gr=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,_r=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,br=/^@[^\s]*keyframes/,wr=/\s+/g,Er=!(window.ShadyDOM&&window.ShadyDOM.inUse);function xr(e){lr=(!e||!e.shimcssproperties)&&(Er||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(cr=window.ShadyCSS.cssBuild);var Cr=!(!window.ShadyCSS||!window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?lr=window.ShadyCSS.nativeCss:window.ShadyCSS?(xr(window.ShadyCSS),window.ShadyCSS=void 0):xr(window.WebComponents&&window.WebComponents.flags);var Sr=lr,Tr=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,Nr=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,kr=/(--[\w-]+)\s*([:,;)]|$)/gi,Or=/(animation\s*:)|(animation-name\s*:)/,Mr=/@media\s(.*)/,Dr=/\{[^}]*\}/g,Ar=new Set;function Lr(e,t){return e?("string"==typeof e&&(e=sr(e)),t&&Ir(e,t),function e(t,n,i){i=void 0===i?"":i;var r="";if(t.cssText||t.rules){var o,a=t.rules;if((o=a)&&(o=!((o=a[0])&&o.selector&&0===o.selector.indexOf("--"))),o){o=0;for(var s=a.length,l=void 0;o<s&&(l=a[o]);o++)r=e(l,n,r)}else(r=(n=n?t.cssText:(n=(n=t.cssText).replace(vr,"").replace(yr,"")).replace(gr,"").replace(_r,"")).trim())&&(r="  "+r+"\n")}return r&&(t.selector&&(i+=t.selector+" {\n"),i+=r,t.selector&&(i+="}\n\n")),i}(e,Sr)):""}function jr(e){return!e.__cssRules&&e.textContent&&(e.__cssRules=sr(e.textContent)),e.__cssRules||null}function Pr(e){return!!e.parent&&e.parent.type===hr}function Ir(e,t,n,i){if(e){var r=!1,o=e.type;if(i&&o===dr){var a=e.selector.match(Mr);a&&(window.matchMedia(a[1]).matches||(r=!0))}if(o===ur?t(e):n&&o===hr?n(e):o===fr&&(r=!0),(e=e.rules)&&!r)for(r=0,o=e.length,a=void 0;r<o&&(a=e[r]);r++)Ir(a,t,n,i)}}function Rr(e,t,n,i){var r=document.createElement("style");return t&&r.setAttribute("scope",t),r.textContent=e,qr(r,n,i),r}var Fr=null;function Hr(e){e=document.createComment(" Shady DOM styles for "+e+" ");var t=document.head;return t.insertBefore(e,(Fr?Fr.nextSibling:null)||t.firstChild),Fr=e}function qr(e,t,n){(t=t||document.head).insertBefore(e,n&&n.nextSibling||t.firstChild),Fr?e.compareDocumentPosition(Fr)===Node.DOCUMENT_POSITION_PRECEDING&&(Fr=e):Fr=e}function Vr(e,t){for(var n=0,i=e.length;t<i;t++)if("("===e[t])n++;else if(")"===e[t]&&0==--n)return t;return-1}function Wr(e,t){Er?e.setAttribute("class",t):window.ShadyDOM.nativeMethods.setAttribute.call(e,"class",t)}var Br=window.ShadyDOM&&window.ShadyDOM.wrap||function(e){return e};function Ur(e){var t=e.localName,n="";return t?-1<t.indexOf("-")||(n=t,t=e.getAttribute&&e.getAttribute("is")||""):(t=e.is,n=e.extends),{is:t,ca:n}}function zr(e){for(var t=[],n="",i=0;0<=i&&i<e.length;i++)if("("===e[i]){var r=Vr(e,i);n+=e.slice(i,r+1),i=r}else","===e[i]?(t.push(n),n=""):n+=e[i];return n&&t.push(n),t}function $r(e){if(void 0!==cr)return cr;if(void 0===e.__cssBuild){var t=e.getAttribute("css-build");if(t)e.__cssBuild=t;else{if(""!==(t=(t="template"===e.localName?e.content.firstChild:e.firstChild)instanceof Comment&&"css-build"===(t=t.textContent.trim().split(":"))[0]?t[1]:"")){var n="template"===e.localName?e.content.firstChild:e.firstChild;n.parentNode.removeChild(n)}e.__cssBuild=t}}return e.__cssBuild||""}function Gr(e){return!(""===(e=void 0===e?"":e)||!Sr)&&(Er?"shadow"===e:"shady"===e)}function Xr(){}function Yr(e,t,n){var i;if(t.nodeType===Node.ELEMENT_NODE&&n(t),i="template"===t.localName?(t.content||t._content||t).childNodes:t.children||t.childNodes)for(t=0;t<i.length;t++)Yr(e,i[t],n)}function Zr(e,t,n){if(t)if(e.classList)n?(e.classList.remove("style-scope"),e.classList.remove(t)):(e.classList.add("style-scope"),e.classList.add(t));else if(e.getAttribute){var i=e.getAttribute("class");n?i&&Wr(e,t=i.replace("style-scope","").replace(t,"")):Wr(e,(i?i+" ":"")+"style-scope "+t)}}function Jr(e,t,n){Yr(po,e,(function(e){Zr(e,t,!0),Zr(e,n)}))}function Kr(e,t){Yr(po,e,(function(e){Zr(e,t||"",!0)}))}function Qr(e,t,n,i,r){var o=po;return""===(r=void 0===r?"":r)&&(r=Er||"shady"===(void 0===i?"":i)?Lr(t,n):function(e,t,n,i,r){var o=eo(n,i);return n=n?"."+n:"",Lr(t,(function(t){t.c||(t.selector=t.w=to(e,t,e.b,n,o),t.c=!0),r&&r(t,n,o)}))}(o,t,(e=Ur(e)).is,e.ca,n)+"\n\n"),r.trim()}function eo(e,t){return t?"[is="+e+"]":e}function to(e,t,n,i,r){var o=zr(t.selector);if(!Pr(t)){t=0;for(var a=o.length,s=void 0;t<a&&(s=o[t]);t++)o[t]=n.call(e,s,i,r)}return o.filter((function(e){return!!e})).join(",")}function no(e){return e.replace(oo,(function(e,t,n){return-1<n.indexOf("+")?n=n.replace(/\+/g,"___"):-1<n.indexOf("___")&&(n=n.replace(/___/g,"+")),":"+t+"("+n+")"}))}function io(e,t){e=e.split(/(\[.+?\])/);for(var n=[],i=0;i<e.length;i++)if(1==i%2)n.push(e[i]);else{var r=e[i];""===r&&i===e.length-1||((r=r.split(":"))[0]+=t,n.push(r.join(":")))}return n.join("")}function ro(e){":root"===e.selector&&(e.selector="html")}Xr.prototype.b=function(e,t,n){var i=!1;e=e.trim();var r=oo.test(e);r&&(e=no(e=e.replace(oo,(function(e,t,n){return":"+t+"("+n.replace(/\s/g,"")+")"}))));var o=fo.test(e);if(o){var a=function(e){for(var t,n=[];t=e.match(fo);){var i=t.index,r=Vr(e,i);if(-1===r)throw Error(t.input+" selector missing ')'");t=e.slice(i,r+1),e=e.replace(t,"î"),n.push(t)}return{wa:e,matches:n}}(e);e=a.wa,a=a.matches}return e=(e=e.replace(lo,":host $1")).replace(ao,(function(e,r,o){return i||(e=function(e,t,n,i){var r=e.indexOf("::slotted");if(0<=e.indexOf(":host")?e=function(e,t){var n=e.match(co);return(n=n&&n[2].trim()||"")?n[0].match(so)?e.replace(co,(function(e,n,i){return t+i})):n.split(so)[0]===t?n:"should_not_match":e.replace(":host",t)}(e,i):0!==r&&(e=n?io(e,n):e),n=!1,0<=r&&(t="",n=!0),n){var o=!0;n&&(e=e.replace(uo,(function(e,t){return" > "+t})))}return{value:e,Qa:t,stop:o}}(o,r,t,n),i=i||e.stop,r=e.Qa,o=e.value),r+o})),o&&(e=function(e,t){var n=e.split("î");return t.reduce((function(e,t,i){return e+t+n[i+1]}),n[0])}(e,a)),r&&(e=no(e)),e.replace(ho,(function(e,t,n,i){return'[dir="'+n+'"] '+t+i+", "+t+'[dir="'+n+'"]'+i}))},Xr.prototype.c=function(e){return e.match(":host")?"":e.match("::slotted")?this.b(e,":not(.style-scope)"):io(e.trim(),":not(.style-scope)")},a.Object.defineProperties(Xr.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"style-scope"}}});var oo=/:(nth[-\w]+)\(([^)]+)\)/,ao=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,so=/[[.:#*]/,lo=/^(::slotted)/,co=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,uo=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,ho=/(.*):dir\((?:(ltr|rtl))\)(.*)/,fo=/:(?:matches|any|-(?:webkit|moz)-any)/,po=new Xr;function mo(e,t,n,i,r){this.H=e||null,this.b=t||null,this.ta=n||[],this.F=null,this.cssBuild=r||"",this.ca=i||"",this.a=this.G=this.L=null}function vo(e){return e?e.__styleInfo:null}function yo(e,t){return e.__styleInfo=t}function go(e){var t=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return t&&t.call(this,e)}mo.prototype.c=function(){return this.H},mo.prototype._getStyleRules=mo.prototype.c;var _o=/:host\s*>\s*/,bo=navigator.userAgent.match("Trident");function wo(){}function Eo(e){if(!e.v){var t={},n={};xo(e,n)&&(t.K=n,e.rules=null),t.cssText=e.parsedCssText.replace(Dr,"").replace(Tr,""),e.v=t}}function xo(e,t){var n=e.v;if(!n){n=e.parsedCssText;for(var i;e=Tr.exec(n);)"inherit"===(i=(e[2]||e[3]).trim())&&"unset"===i||(t[e[1].trim()]=i),i=!0;return i}if(n.K)return Object.assign(t,n.K),!0}function Co(e,t,n){return t&&(t=0<=t.indexOf(";")?So(e,t,n):function e(t,n){var i=t.indexOf("var(");if(-1===i)return n(t,"","","");var r=Vr(t,i+3),o=t.substring(i+4,r);return i=t.substring(0,i),t=e(t.substring(r+1),n),-1===(r=o.indexOf(","))?n(i,o.trim(),"",t):n(i,o.substring(0,r).trim(),o.substring(r+1).trim(),t)}(t,(function(t,i,r,o){return i?((i=Co(e,n[i],n))&&"initial"!==i?"apply-shim-inherit"===i&&(i="inherit"):i=Co(e,n[r]||r,n)||r,t+(i||"")+o):t+o}))),t&&t.trim()||""}function So(e,t,n){t=t.split(";");for(var i,r,o=0;o<t.length;o++)if(i=t[o]){if(Nr.lastIndex=0,r=Nr.exec(i))i=Co(e,n[r[1]],n);else if(-1!==(r=i.indexOf(":"))){var a=i.substring(r);a=Co(e,a=a.trim(),n)||a,i=i.substring(0,r)+a}t[o]=i&&i.lastIndexOf(";")===i.length-1?i.slice(0,-1):i||""}return t.join(";")}function To(e){return function(t){return t.replace(e.l,e.a)}}function No(e,t){var n=ko,i=jr(e);e.textContent=Lr(i,(function(e){var i=e.cssText=e.parsedCssText;e.v&&e.v.cssText&&(i=i.replace(vr,"").replace(yr,""),e.cssText=So(n,i,t))}))}a.Object.defineProperties(wo.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"x-scope"}}});var ko=new wo,Oo={},Mo=window.customElements;if(Mo&&!Er&&!Cr){var Do=Mo.define;Mo.define=function(e,t,n){Oo[e]||(Oo[e]=Hr(e)),Do.call(Mo,e,t,n)}}function Ao(){this.cache={}}function Lo(){}Ao.prototype.store=function(e,t,n,i){var r=this.cache[e]||[];r.push({K:t,styleElement:n,G:i}),100<r.length&&r.shift(),this.cache[e]=r};var jo=new RegExp(po.a+"\\s*([^\\s]*)");function Po(e){return(e=(e.classList&&e.classList.value?e.classList.value:e.getAttribute("class")||"").match(jo))?e[1]:""}function Io(e){var t=Br(e).getRootNode();return t===e||t===e.ownerDocument?"":(e=t.host)?Ur(e).is:""}function Ro(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.target!==document.documentElement&&n.target!==document.head)for(var i=0;i<n.addedNodes.length;i++){var r=n.addedNodes[i];if(r.nodeType===Node.ELEMENT_NODE){var o=r.getRootNode(),a=Po(r);if(a&&o===r.ownerDocument&&("style"!==r.localName&&"template"!==r.localName||""===$r(r)))Kr(r,a);else if(o instanceof ShadowRoot)for((o=Io(r))!==a&&Jr(r,a,o),r=window.ShadyDOM.nativeMethods.querySelectorAll.call(r,":not(."+po.a+")"),a=0;a<r.length;a++){var s=Io(o=r[a]);s&&Zr(o,s)}}}}}if(!(Er||window.ShadyDOM&&window.ShadyDOM.handlesDynamicScoping)){var Fo=new MutationObserver(Ro),Ho=function(e){Fo.observe(e,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)Ho(document);else{var qo=function(){Ho(document.body)};window.HTMLImports?window.HTMLImports.whenReady(qo):requestAnimationFrame((function(){if("loading"===document.readyState){document.addEventListener("readystatechange",(function e(){qo(),document.removeEventListener("readystatechange",e)}))}else qo()}))}Lo=function(){Ro(Fo.takeRecords())}}var Vo={},Wo=Promise.resolve();function Bo(e){(e=Vo[e])&&(e._applyShimCurrentVersion=e._applyShimCurrentVersion||0,e._applyShimValidatingVersion=e._applyShimValidatingVersion||0,e._applyShimNextVersion=(e._applyShimNextVersion||0)+1)}function Uo(e){return e._applyShimCurrentVersion===e._applyShimNextVersion}var zo={},$o=new Ao;function Go(){this.Y={},this.c=document.documentElement;var e=new ar;e.rules=[],this.l=yo(this.c,new mo(e)),this.J=!1,this.a=this.b=null}function Xo(e){var t=Ur(e),n=t.is;t=t.ca;var i=Oo[n]||null,r=Vo[n];if(r)return yo(e,t=new mo(n=r._styleAst,i,r.a,t,r=$r(r))),t}function Yo(e){if(!e.b&&window.ShadyCSS&&window.ShadyCSS.ApplyShim){e.b=window.ShadyCSS.ApplyShim,e.b.invalidCallback=Bo;var t=!0}else t=!1;return function(e){!e.a&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(e.a=window.ShadyCSS.CustomStyleInterface,e.a.transformCallback=function(t){e.Ha(t)},e.a.validateCallback=function(){requestAnimationFrame((function(){(e.a.enqueued||e.J)&&e.flushCustomStyles()}))})}(e),t}function Zo(e,t,n){var i=Ur(t).is;if(n.F){var r,o=n.F;for(r in o)null===r?t.style.removeProperty(r):t.style.setProperty(r,o[r])}!(o=Vo[i])&&t!==e.c||o&&""!==$r(o)||!o||!o._style||Uo(o)||((Uo(o)||o._applyShimValidatingVersion!==o._applyShimNextVersion)&&(Yo(e),e.b&&e.b.transformRules(o._styleAst,i),o._style.textContent=Qr(t,n.H),function(e){e._applyShimValidatingVersion=e._applyShimNextVersion,e._validating||(e._validating=!0,Wo.then((function(){e._applyShimCurrentVersion=e._applyShimNextVersion,e._validating=!1})))}(o)),Er&&(e=t.shadowRoot)&&(e=e.querySelector("style"))&&(e.textContent=Qr(t,n.H)),n.H=o._styleAst)}function Jo(e,t){return(t=Br(t).getRootNode().host)?vo(t)||Xo(t)?t:Jo(e,t):e.c}function Ko(e,t,n){var i=Jo(e,t),r=vo(i),o=r.L;for(var a in i===e.c||o||(Ko(e,i,r),o=r.L),e=Object.create(o||null),i=function(e,t,n){var i={},r={};return Ir(t,(function(t){!function(e,t,n,i){if(t.v||Eo(t),t.v.K){var r=Ur(e);e=r.is,r=r.ca,r=e?eo(e,r):"html";var o=t.parsedSelector,a=!!o.match(_o)||"html"===r&&-1<o.indexOf("html"),s=0===o.indexOf(":host")&&!a;"shady"===n&&(s=!(a=o===r+" > *."+r||-1!==o.indexOf("html"))&&0===o.indexOf(r)),(a||s)&&(n=r,s&&(t.w||(t.w=to(po,t,po.b,e?"."+e:"",r)),n=t.w||r),a&&"html"===r&&(n=t.w||t.J),i({wa:n,Xa:s,mb:a}))}}(e,t,n,(function(n){go.call(e._element||e,n.wa)&&(n.Xa?xo(t,i):xo(t,r))}))}),null,!0),{cb:r,Va:i}}(t,n.H,n.cssBuild),t=function(e,t){var n={},i=[];return Ir(e,(function(e){e.v||Eo(e);var r=e.w||e.parsedSelector;t&&e.v.K&&r&&go.call(t,r)&&(xo(e,n),e=e.index,r=parseInt(e/32,10),i[r]=(i[r]||0)|1<<e%32)}),null,!0),{K:n,key:i}}(r.H,t).K,Object.assign(e,i.Va,t,i.cb),t=n.F)((r=t[a])||0===r)&&(e[a]=r);for(a=ko,t=Object.getOwnPropertyNames(e),r=0;r<t.length;r++)e[i=t[r]]=Co(a,e[i],e);n.L=e}(i=Go.prototype).flush=function(){Lo()},i.Ta=function(e){return jr(e)},i.hb=function(e){return Lr(e)},i.prepareTemplate=function(e,t,n){this.prepareTemplateDom(e,t),this.prepareTemplateStyles(e,t,n)},i.prepareTemplateStyles=function(e,t,n){if(!e._prepared&&!Cr){Er||Oo[t]||(Oo[t]=Hr(t)),e._prepared=!0,e.name=t,e.extends=n,Vo[t]=e;var i=$r(e),r=Gr(i);n={is:t,extends:n};for(var o=[],a=e.content.querySelectorAll("style"),s=0;s<a.length;s++){var l=a[s];if(l.hasAttribute("shady-unscoped")){if(!Er){var c=l.textContent;if(!Ar.has(c)){Ar.add(c);var u=document.createElement("style");u.setAttribute("shady-unscoped",""),u.textContent=c,document.head.appendChild(u)}l.parentNode.removeChild(l)}}else o.push(l.textContent),l.parentNode.removeChild(l)}o=o.join("").trim()+(zo[t]||""),Yo(this),r||((a=!i)&&(a=Nr.test(o)||Tr.test(o),Nr.lastIndex=0,Tr.lastIndex=0),s=sr(o),a&&Sr&&this.b&&this.b.transformRules(s,t),e._styleAst=s),a=[],Sr||(a=function(e){var t={},n=[],i=0;for(var r in Ir(e,(function(e){Eo(e),e.index=i++,e=e.v.cssText;for(var n;n=kr.exec(e);){var r=n[1];":"!==n[2]&&(t[r]=!0)}}),(function(e){n.push(e)})),e.b=n,e=[],t)e.push(r);return e}(e._styleAst)),a.length&&!Sr||(s=Er?e.content:null,t=Oo[t]||null,i=(i=Qr(n,e._styleAst,null,i,r?o:"")).length?Rr(i,n.is,s,t):null,e._style=i),e.a=a}},i.ab=function(e,t){zo[t]=e.join(" ")},i.prepareTemplateDom=function(e,t){if(!Cr){var n=$r(e);Er||"shady"===n||e._domPrepared||(e._domPrepared=!0,function(e,t){Yr(po,e,(function(e){Zr(e,t||"")}))}(e.content,t))}},i.flushCustomStyles=function(){if(!Cr){var e=Yo(this);if(this.a){var t=this.a.processStyles();if((e||this.a.enqueued)&&!Gr(this.l.cssBuild)){if(Sr){if(!this.l.cssBuild)for(e=0;e<t.length;e++){var n=this.a.getStyleForCustomStyle(t[e]);if(n&&Sr&&this.b){var i=jr(n);Yo(this),this.b.transformRules(i),n.textContent=Lr(i)}}}else{for(function(e,t){(t=t.map((function(t){return e.a.getStyleForCustomStyle(t)})).filter((function(e){return!!e}))).sort((function(e,t){return(e=t.compareDocumentPosition(e))&Node.DOCUMENT_POSITION_FOLLOWING?1:e&Node.DOCUMENT_POSITION_PRECEDING?-1:0})),e.l.H.rules=t.map((function(e){return jr(e)}))}(this,t),Ko(this,this.c,this.l),e=0;e<t.length;e++)(n=this.a.getStyleForCustomStyle(t[e]))&&No(n,this.l.L);this.J&&this.styleDocument()}this.a.enqueued=!1}}}},i.styleElement=function(e,t){if(Cr){if(t){vo(e)||yo(e,new mo(null));var n=vo(e);n.F=n.F||{},Object.assign(n.F,t),Zo(this,e,n)}}else if(n=vo(e)||Xo(e))if(e!==this.c&&(this.J=!0),t&&(n.F=n.F||{},Object.assign(n.F,t)),Sr)Zo(this,e,n);else if(this.flush(),Ko(this,e,n),n.ta&&n.ta.length){var i;t=Ur(e).is;e:{if(i=$o.cache[t])for(var r=i.length-1;0<=r;r--){var o=i[r];t:{for(var a=n.ta,s=0;s<a.length;s++){var l=a[s];if(o.K[l]!==n.L[l]){a=!1;break t}}a=!0}if(a){i=o;break e}}i=void 0}a=i?i.styleElement:null,r=n.G,(o=i&&i.G)||(o=t+"-"+(o=this.Y[t]=(this.Y[t]||0)+1)),n.G=o,o=n.G,s=ko,s=a?a.textContent||"":function(e,t,n,i){var r=Ur(t),o=eo(r.is,r.ca),a=new RegExp("(?:^|[^.#[:])"+(t.extends?"\\"+o.slice(0,-1)+"\\]":o)+"($|[.:[\\s>+~])"),s=vo(t);r=s.H,s=s.cssBuild;var l=function(e,t){e=e.b;var n={};if(!Er&&e)for(var i=0,r=e[i];i<e.length;r=e[++i]){var o=r,a=t;o.l=new RegExp("\\b"+o.keyframesName+"(?!\\B|-)","g"),o.a=o.keyframesName+"-"+a,o.w=o.w||o.selector,o.selector=o.w.replace(o.keyframesName,o.a),n[r.keyframesName]=To(r)}return n}(r,i);return Qr(t,r,(function(t){var r="";if(t.v||Eo(t),t.v.cssText&&(r=So(e,t.v.cssText,n)),t.cssText=r,!Er&&!Pr(t)&&t.cssText){var s=r=t.cssText;if(null==t.Da&&(t.Da=Or.test(r)),t.Da)if(null==t.ka)for(var c in t.ka=[],l)r!==(s=(s=l[c])(r))&&(r=s,t.ka.push(c));else{for(c=0;c<t.ka.length;++c)r=(s=l[t.ka[c]])(r);s=r}t.cssText=s,t.w=t.w||t.selector,r="."+i,s=0;for(var u=(c=zr(t.w)).length,h=void 0;s<u&&(h=c[s]);s++)c[s]=h.match(a)?h.replace(o,r):r+" "+h;t.selector=c.join(",")}}),s)}(s,e,n.L,o);var c=(l=vo(e)).a;c&&!Er&&c!==a&&(c._useCount--,0>=c._useCount&&c.parentNode&&c.parentNode.removeChild(c)),Er?l.a?(l.a.textContent=s,a=l.a):s&&(a=Rr(s,o,e.shadowRoot,l.b)):a?a.parentNode||(bo&&-1<s.indexOf("@media")&&(a.textContent=s),qr(a,null,l.b)):s&&(a=Rr(s,o,null,l.b)),a&&(a._useCount=a._useCount||0,l.a!=a&&a._useCount++,l.a=a),o=a,Er||(a=n.G,l=s=e.getAttribute("class")||"",r&&(l=s.replace(new RegExp("\\s*x-scope\\s*"+r+"\\s*","g")," ")),s!==(l+=(l?" ":"")+"x-scope "+a)&&Wr(e,l)),i||$o.store(t,n.L,o,n.G)}},i.styleDocument=function(e){this.styleSubtree(this.c,e)},i.styleSubtree=function(e,t){var n=Br(e),i=n.shadowRoot,r=e===this.c;if((i||r)&&this.styleElement(e,t),e=r?n:i)for(e=Array.from(e.querySelectorAll("*")).filter((function(e){return Br(e).shadowRoot})),t=0;t<e.length;t++)this.styleSubtree(e[t])},i.Ha=function(e){var t=this,n=$r(e);if(n!==this.l.cssBuild&&(this.l.cssBuild=n),!Gr(n)){var i=jr(e);Ir(i,(function(e){if(Er)ro(e);else{var i=po;e.selector=e.parsedSelector,ro(e),e.selector=e.w=to(i,e,i.c,void 0,void 0)}Sr&&""===n&&(Yo(t),t.b&&t.b.transformRule(e))})),Sr?e.textContent=Lr(i):this.l.H.rules.push(i)}},i.getComputedStyleValue=function(e,t){var n;return Sr||(n=(vo(e)||vo(Jo(this,e))).L[t]),(n=n||window.getComputedStyle(e).getPropertyValue(t))?n.trim():""},i.gb=function(e,t){var n,i=Br(e).getRootNode();if(n=t?("string"==typeof t?t:String(t)).split(/\s/):[],!(t=i.host&&i.host.localName)&&(i=e.getAttribute("class"))){i=i.split(/\s/);for(var r=0;r<i.length;r++)if(i[r]===po.a){t=i[r+1];break}}t&&n.push(po.a,t),Sr||(t=vo(e))&&t.G&&n.push(ko.a,t.G),Wr(e,n.join(" "))},i.Oa=function(e){return vo(e)},i.fb=function(e,t){Zr(e,t)},i.ib=function(e,t){Zr(e,t,!0)},i.eb=function(e){return Io(e)},i.Ra=function(e){return Po(e)},Go.prototype.flush=Go.prototype.flush,Go.prototype.prepareTemplate=Go.prototype.prepareTemplate,Go.prototype.styleElement=Go.prototype.styleElement,Go.prototype.styleDocument=Go.prototype.styleDocument,Go.prototype.styleSubtree=Go.prototype.styleSubtree,Go.prototype.getComputedStyleValue=Go.prototype.getComputedStyleValue,Go.prototype.setElementClass=Go.prototype.gb,Go.prototype._styleInfoForNode=Go.prototype.Oa,Go.prototype.transformCustomStyleForDocument=Go.prototype.Ha,Go.prototype.getStyleAst=Go.prototype.Ta,Go.prototype.styleAstToString=Go.prototype.hb,Go.prototype.flushCustomStyles=Go.prototype.flushCustomStyles,Go.prototype.scopeNode=Go.prototype.fb,Go.prototype.unscopeNode=Go.prototype.ib,Go.prototype.scopeForNode=Go.prototype.eb,Go.prototype.currentScopeForNode=Go.prototype.Ra,Go.prototype.prepareAdoptedCssText=Go.prototype.ab,Object.defineProperties(Go.prototype,{nativeShadow:{get:function(){return Er}},nativeCss:{get:function(){return Sr}}});var Qo,ea,ta=new Go;window.ShadyCSS&&(Qo=window.ShadyCSS.ApplyShim,ea=window.ShadyCSS.CustomStyleInterface),window.ShadyCSS={ScopingShim:ta,prepareTemplate:function(e,t,n){ta.flushCustomStyles(),ta.prepareTemplate(e,t,n)},prepareTemplateDom:function(e,t){ta.prepareTemplateDom(e,t)},prepareTemplateStyles:function(e,t,n){ta.flushCustomStyles(),ta.prepareTemplateStyles(e,t,n)},styleSubtree:function(e,t){ta.flushCustomStyles(),ta.styleSubtree(e,t)},styleElement:function(e){ta.flushCustomStyles(),ta.styleElement(e)},styleDocument:function(e){ta.flushCustomStyles(),ta.styleDocument(e)},flushCustomStyles:function(){ta.flushCustomStyles()},getComputedStyleValue:function(e,t){return ta.getComputedStyleValue(e,t)},nativeCss:Sr,nativeShadow:Er,cssBuild:cr,disableRuntime:Cr},Qo&&(window.ShadyCSS.ApplyShim=Qo),ea&&(window.ShadyCSS.CustomStyleInterface=ea),function(e){function t(e){return""==e&&(o.call(this),this.h=!0),e.toLowerCase()}function n(e){var t=e.charCodeAt(0);return 32<t&&127>t&&-1==[34,35,60,62,63,96].indexOf(t)?e:encodeURIComponent(e)}function i(e){var t=e.charCodeAt(0);return 32<t&&127>t&&-1==[34,35,60,62,96].indexOf(t)?e:encodeURIComponent(e)}function r(e,r,a){function s(e){y.push(e)}var l=r||"scheme start",f=0,p="",m=!1,v=!1,y=[];e:for(;(null!=e[f-1]||0==f)&&!this.h;){var g=e[f];switch(l){case"scheme start":if(!g||!h.test(g)){if(r){s("Invalid scheme.");break e}p="",l="no scheme";continue}p+=g.toLowerCase(),l="scheme";break;case"scheme":if(g&&d.test(g))p+=g.toLowerCase();else{if(":"!=g){if(r){null!=g&&s("Code point not allowed in scheme: "+g);break e}p="",f=0,l="no scheme";continue}if(this.g=p,p="",r)break e;void 0!==c[this.g]&&(this.A=!0),l="file"==this.g?"relative":this.A&&a&&a.g==this.g?"relative or authority":this.A?"authority first slash":"scheme data"}break;case"scheme data":"?"==g?(this.o="?",l="query"):"#"==g?(this.u="#",l="fragment"):null!=g&&"\t"!=g&&"\n"!=g&&"\r"!=g&&(this.pa+=n(g));break;case"no scheme":if(a&&void 0!==c[a.g]){l="relative";continue}s("Missing scheme."),o.call(this),this.h=!0;break;case"relative or authority":if("/"!=g||"/"!=e[f+1]){s("Expected /, got: "+g),l="relative";continue}l="authority ignore slashes";break;case"relative":if(this.A=!0,"file"!=this.g&&(this.g=a.g),null==g){this.i=a.i,this.m=a.m,this.j=a.j.slice(),this.o=a.o,this.s=a.s,this.f=a.f;break e}if("/"==g||"\\"==g)"\\"==g&&s("\\ is an invalid code point."),l="relative slash";else if("?"==g)this.i=a.i,this.m=a.m,this.j=a.j.slice(),this.o="?",this.s=a.s,this.f=a.f,l="query";else{if("#"!=g){l=e[f+1];var _=e[f+2];("file"!=this.g||!h.test(g)||":"!=l&&"|"!=l||null!=_&&"/"!=_&&"\\"!=_&&"?"!=_&&"#"!=_)&&(this.i=a.i,this.m=a.m,this.s=a.s,this.f=a.f,this.j=a.j.slice(),this.j.pop()),l="relative path";continue}this.i=a.i,this.m=a.m,this.j=a.j.slice(),this.o=a.o,this.u="#",this.s=a.s,this.f=a.f,l="fragment"}break;case"relative slash":if("/"!=g&&"\\"!=g){"file"!=this.g&&(this.i=a.i,this.m=a.m,this.s=a.s,this.f=a.f),l="relative path";continue}"\\"==g&&s("\\ is an invalid code point."),l="file"==this.g?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!=g){s("Expected '/', got: "+g),l="authority ignore slashes";continue}l="authority second slash";break;case"authority second slash":if(l="authority ignore slashes","/"!=g){s("Expected '/', got: "+g);continue}break;case"authority ignore slashes":if("/"!=g&&"\\"!=g){l="authority";continue}s("Expected authority, got: "+g);break;case"authority":if("@"==g){for(m&&(s("@ already seen."),p+="%40"),m=!0,g=0;g<p.length;g++)"\t"==(_=p[g])||"\n"==_||"\r"==_?s("Invalid whitespace in authority."):":"==_&&null===this.f?this.f="":(_=n(_),null!==this.f?this.f+=_:this.s+=_);p=""}else{if(null==g||"/"==g||"\\"==g||"?"==g||"#"==g){f-=p.length,p="",l="host";continue}p+=g}break;case"file host":if(null==g||"/"==g||"\\"==g||"?"==g||"#"==g){2!=p.length||!h.test(p[0])||":"!=p[1]&&"|"!=p[1]?(0!=p.length&&(this.i=t.call(this,p),p=""),l="relative path start"):l="relative path";continue}"\t"==g||"\n"==g||"\r"==g?s("Invalid whitespace in file host."):p+=g;break;case"host":case"hostname":if(":"!=g||v){if(null==g||"/"==g||"\\"==g||"?"==g||"#"==g){if(this.i=t.call(this,p),p="",l="relative path start",r)break e;continue}"\t"!=g&&"\n"!=g&&"\r"!=g?("["==g?v=!0:"]"==g&&(v=!1),p+=g):s("Invalid code point in host/hostname: "+g)}else if(this.i=t.call(this,p),p="",l="port","hostname"==r)break e;break;case"port":if(/[0-9]/.test(g))p+=g;else{if(null==g||"/"==g||"\\"==g||"?"==g||"#"==g||r){if(""!=p&&((p=parseInt(p,10))!=c[this.g]&&(this.m=p+""),p=""),r)break e;l="relative path start";continue}"\t"==g||"\n"==g||"\r"==g?s("Invalid code point in port: "+g):(o.call(this),this.h=!0)}break;case"relative path start":if("\\"==g&&s("'\\' not allowed in path."),l="relative path","/"!=g&&"\\"!=g)continue;break;case"relative path":null!=g&&"/"!=g&&"\\"!=g&&(r||"?"!=g&&"#"!=g)?"\t"!=g&&"\n"!=g&&"\r"!=g&&(p+=n(g)):("\\"==g&&s("\\ not allowed in relative path."),(_=u[p.toLowerCase()])&&(p=_),".."==p?(this.j.pop(),"/"!=g&&"\\"!=g&&this.j.push("")):"."==p&&"/"!=g&&"\\"!=g?this.j.push(""):"."!=p&&("file"==this.g&&0==this.j.length&&2==p.length&&h.test(p[0])&&"|"==p[1]&&(p=p[0]+":"),this.j.push(p)),p="","?"==g?(this.o="?",l="query"):"#"==g&&(this.u="#",l="fragment"));break;case"query":r||"#"!=g?null!=g&&"\t"!=g&&"\n"!=g&&"\r"!=g&&(this.o+=i(g)):(this.u="#",l="fragment");break;case"fragment":null!=g&&"\t"!=g&&"\n"!=g&&"\r"!=g&&(this.u+=g)}f++}}function o(){this.s=this.pa=this.g="",this.f=null,this.m=this.i="",this.j=[],this.u=this.o="",this.A=this.h=!1}function a(e,t){void 0===t||t instanceof a||(t=new a(String(t))),this.a=e,o.call(this),r.call(this,this.a.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,""),null,t)}var s=!1;try{var l=new URL("b","http://a");l.pathname="c%20d",s="http://a/c%20d"===l.href}catch(e){}if(!s){var c=Object.create(null);c.ftp=21,c.file=0,c.gopher=70,c.http=80,c.https=443,c.ws=80,c.wss=443;var u=Object.create(null);u["%2e"]=".",u[".%2e"]="..",u["%2e."]="..",u["%2e%2e"]="..";var h=/[a-zA-Z]/,d=/[a-zA-Z0-9\+\-\.]/;a.prototype={toString:function(){return this.href},get href(){if(this.h)return this.a;var e="";return""==this.s&&null==this.f||(e=this.s+(null!=this.f?":"+this.f:"")+"@"),this.protocol+(this.A?"//"+e+this.host:"")+this.pathname+this.o+this.u},set href(e){o.call(this),r.call(this,e)},get protocol(){return this.g+":"},set protocol(e){this.h||r.call(this,e+":","scheme start")},get host(){return this.h?"":this.m?this.i+":"+this.m:this.i},set host(e){!this.h&&this.A&&r.call(this,e,"host")},get hostname(){return this.i},set hostname(e){!this.h&&this.A&&r.call(this,e,"hostname")},get port(){return this.m},set port(e){!this.h&&this.A&&r.call(this,e,"port")},get pathname(){return this.h?"":this.A?"/"+this.j.join("/"):this.pa},set pathname(e){!this.h&&this.A&&(this.j=[],r.call(this,e,"relative path start"))},get search(){return this.h||!this.o||"?"==this.o?"":this.o},set search(e){!this.h&&this.A&&(this.o="?","?"==e[0]&&(e=e.slice(1)),r.call(this,e,"query"))},get hash(){return this.h||!this.u||"#"==this.u?"":this.u},set hash(e){this.h||(e?(this.u="#","#"==e[0]&&(e=e.slice(1)),r.call(this,e,"fragment")):this.u="")},get origin(){var e;if(this.h||!this.g)return"";switch(this.g){case"data":case"file":case"javascript":case"mailto":return"null"}return(e=this.host)?this.g+"://"+e:""}};var f=e.URL;f&&(a.createObjectURL=function(e){return f.createObjectURL.apply(f,arguments)},a.revokeObjectURL=function(e){f.revokeObjectURL(e)}),e.URL=a}}(window),Object.getOwnPropertyDescriptor(Node.prototype,"baseURI")||Object.defineProperty(Node.prototype,"baseURI",{get:function(){var e=(this.ownerDocument||this).querySelector("base[href]");return e&&e.href||window.location.href},configurable:!0,enumerable:!0});var na=document.createElement("style");na.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var ia=document.querySelector("head");ia.insertBefore(na,ia.firstChild);var ra=window.customElements,oa=!1,aa=null;function sa(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document),aa&&aa(),oa=!0,window.WebComponents.ready=!0,document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}))}ra.polyfillWrapFlushCallback&&ra.polyfillWrapFlushCallback((function(e){aa=e,oa&&e()})),"complete"!==document.readyState?(window.addEventListener("load",sa),window.addEventListener("DOMContentLoaded",(function(){window.removeEventListener("load",sa),sa()}))):sa()}).call(this)}).call(this,i(2),i(7).setImmediate)},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(8),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(2))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,l=1,c={},u=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){p(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}):e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(r=h.documentElement,i=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(p,0,e)},d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[l]=r,i(l),l++},d.clearImmediate=f}function f(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(2),n(9))},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var l,c=[],u=!1,h=-1;function d(){u&&l&&(u=!1,l.length?c=l.concat(c):h=-1,c.length&&f())}function f(){if(!u){var e=s(d);u=!0;for(var t=c.length;t;){for(l=c,c=[];++h<t;)l&&l[h].run();h=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||u||s(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var i=n(1),r=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},o=function(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},a=function(){function e(e){this._minValue=0,this._maxValue=100,this._valueFrom=0,this._valueTo=100,this._stepSize=1,this._onRange=!1,this._onTooltip=!1,this._onVertical=!1,this._onScale=!1,this._serverURL="http://localhost:9000/slider",this._observer=e}return e.prototype.init=function(e){return e instanceof HTMLElement?this.initModelFromElement(e):e instanceof FormData?this.initModelFromServer(e):this.initModelFromObject(e)},e.prototype.initModelFromServer=function(e){var t=this;return this.serverURL=e.get("uri"),fetch(this.serverURL,{method:"POST",body:e}).then((function(e){return e.json()})).then((function(e){return t.initModelFromObject(e)}))},e.prototype.initModelFromObject=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){return this._serverURL=e.serverURL,this._observer("serverURL",this._serverURL),this._onVertical=e.onVertical,this._observer("onVertical",this._onVertical),this._onRange=e.onRange,this._observer("onRange",this._onRange),this._onTooltip=e.onTooltip,this._observer("onTooltip",this._onTooltip),this._onScale=e.onScale,this._observer("onScale",this._onScale),e.minValue?this._minValue=e.minValue:this._minValue=0,this._observer("minValue",this._minValue),e.stepSize=Math.round(Math.abs(e.stepSize)),e.stepSize>0?this._stepSize=e.stepSize:this._stepSize=1,this._observer("stepSize",this._stepSize),e.maxValue>this._minValue+this._stepSize?this._maxValue=Math.round((e.maxValue-this._minValue)/this._stepSize)*this._stepSize+this._minValue:this._maxValue=this._stepSize+this._minValue,this._observer("maxValue",this._maxValue),e.valueFrom>this._minValue&&e.valueFrom<this._maxValue?this._valueFrom=Math.round((e.valueFrom-this._minValue)/this._stepSize)*this._stepSize+this._minValue:e.valueFrom>=this._maxValue?this._valueFrom=this._maxValue:this._valueFrom=this._minValue,this._observer("valueFrom",this._valueFrom),e.valueTo>this._valueFrom&&e.valueTo<this._maxValue?this._valueTo=Math.round((e.valueTo-this._minValue)/this._stepSize)*this._stepSize+this._minValue:e.valueTo>=this._maxValue?this._valueTo=this._maxValue:this._valueTo=this._valueFrom,this._observer("valueTo",this._valueTo),[2,!0]}))}))},e.prototype.initModelFromElement=function(e){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){return t={onVertical:"true"===e.dataset.onVertical,onRange:"true"===e.dataset.onRange,onTooltip:"true"===e.dataset.onTooltip,onScale:"true"===e.dataset.onScale,minValue:Number(e.dataset.minValue),maxValue:Number(e.dataset.maxValue),valueFrom:Number(e.dataset.valueFrom),valueTo:Number(e.dataset.valueTo),stepSize:Number(e.dataset.stepSize),serverURL:String(e.dataset.serverURL)},[2,this.initModelFromObject(t)]}))}))},Object.defineProperty(e.prototype,"minValue",{get:function(){return this._minValue},set:function(e){e<this._valueFrom?this._minValue=this._valueFrom-Math.round((this._valueFrom-e)/this._stepSize)*this._stepSize:this._minValue=this._valueFrom,this._minValue===this._maxValue&&(this._minValue=this._minValue-this._stepSize),this._observer("minValue",this._minValue)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxValue",{get:function(){return this._maxValue},set:function(e){this._onRange&&e<=this._valueTo?this._maxValue=this._valueTo:e<=this._valueFrom?this._maxValue=this._valueFrom:this._maxValue=Math.round((e-this._minValue)/this._stepSize)*this._stepSize+this._minValue,this._maxValue===this._minValue&&(this._maxValue=this._maxValue+this._stepSize),this._observer("maxValue",this._maxValue)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueFrom",{get:function(){return this._valueFrom},set:function(e){e<=this._minValue?this._valueFrom=this._minValue:this._onRange&&e>=this._valueTo?this._valueFrom=this._valueTo:e>=this._maxValue?this._valueFrom=this._maxValue:this._valueFrom=Math.round((e-this._minValue)/this._stepSize)*this._stepSize+this._minValue,this._observer("valueFrom",this._valueFrom)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueTo",{get:function(){return this._valueTo},set:function(e){this._onRange&&(e>this._valueFrom&&e<this._maxValue?this._valueTo=Math.round((e-this._valueFrom)/this._stepSize)*this._stepSize+this._valueFrom:e>=this._maxValue?this._valueTo=this._maxValue:this._valueTo=this._valueFrom,this._observer("valueTo",this._valueTo))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"stepSize",{get:function(){return this._stepSize},set:function(e){var t=Math.abs(this._maxValue-this._minValue);this._stepSize=e<t&&e>0?Math.round(e):e>=t?t:1,this._observer("stepSize",this._stepSize),this._valueFrom>this._minValue?this._valueFrom=Math.round((this._valueFrom-this._minValue)/this._stepSize)*this._stepSize+this._minValue:this._valueFrom=this._minValue,this._observer("valueFrom",this._valueFrom),this._onRange&&(this._valueTo>this._valueFrom?this._valueTo=Math.round((this._valueTo-this._minValue)/this._stepSize)*this._stepSize+this._minValue:this._valueTo=this._valueFrom,this._observer("valueTo",this._valueTo)),this.maxValue=this.maxValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onVertical",{get:function(){return this._onVertical},set:function(e){this._onVertical=e,this._observer("onVertical",this._onVertical)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onRange",{get:function(){return this._onRange},set:function(e){this._onRange=e,this._observer("onRange",this._onRange),this.valueTo=this._valueTo},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTooltip",{get:function(){return this._onTooltip},set:function(e){this._onTooltip=e,this._observer("onTooltip",this._onTooltip)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onScale",{get:function(){return this._onScale},set:function(e){this._onScale=e,this._observer("onScale",this._onScale)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverURL",{get:function(){return this._serverURL},set:function(e){this._serverURL=e,this._observer("serverURL",this._serverURL)},enumerable:!1,configurable:!0}),e}(),s=(n(4),function(){function e(){this._model=new a(this.observer.bind(this)),this.view=document.createElement("input-slider"),this.view.presenter=this,this.view.addEventListener("slider-view",this.handleViewEvents.bind(this))}return e.prototype.init=function(e){this._model.init(e).then((function(){return console.log("initialization Model successful"),!0})).catch((function(e){return console.log("Error model initialization.",e),!1}))},e.prototype.setProps=function(e,t){this._model[e]=t},e.prototype.getProps=function(e){return this._model[e]},e.prototype.handleViewEvents=function(e){switch(e.stopPropagation(),e.detail.name){case"valueFrom":case"valueTo":this.setProps(e.detail.name,this.calcFromToValues(e))}},e.prototype.calcFromToValues=function(e){var t=(this._model.maxValue-this._model.minValue)/100,n=this._model.stepSize/t;return t=t*(n=Math.round(e.detail.value/n)*n)+this._model.minValue,Math.round(t)},e.prototype.observer=function(e,t){this.view.setModelData(e,t),this.view.dispatchEvent(new CustomEvent("slider-data",{bubbles:!0,cancelable:!0,composed:!0,detail:{name:e,value:t}}))},e}());!function(e){function t(e){return"presenter"in e}e.fn.slider=function(n,i){if(0===this.length)return this;var r=[];if(void 0===n)return this.each((function(){t(this)&&r.push(this)})),e().pushStack(r);if("init"===n)return this.each((function(){if(t(this))i&&this.presenter&&this.presenter.init(i),r.push(this);else{var e=new s;e.view.className=this.className,this.replaceWith(e.view),r.push(e.view),void 0===i?e.init(this):e.init(i)}})),e().pushStack(r);if(n){if(void 0!==i||!t(this[0]))return this.each((function(){if(t(this)&&this.presenter)return this.presenter.setProps(n,i)})),this;if(this[0].presenter)return this[0].presenter.getProps(n)}}}(i)}])}).call(this,n(2))},function(e,t,n){var i=n(0),r=n(58);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(60);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(47),n(64)},function(e,t,n){var i=n(0),r=n(63);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(65);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(67)},function(e,t,n){var i=n(0),r=n(68);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(70)},function(e,t,n){var i=n(0),r=n(71);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(47),n(73)},function(e,t,n){var i=n(0),r=n(74);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(76)},function(e,t,n){var i=n(0),r=n(77);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(79);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";(function(e){n(81);e(".like").on("change",function(t){var n=e(t.currentTarget).find(".like__true").is(":checked");e(t.currentTarget).find(".like__false-quantity").each((function(){n?e(this).text(Number(e(this).text())+1):e(this).text(Number(e(this).text())-1)}))}.bind(void 0))}).call(this,n(2))},function(e,t,n){var i=n(0),r=n(82);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(84);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},,,,,,,,,,,,,,,function(e,t,n){"use strict";n.p,n.p,n.p,n(78)},function(e,t,n){"use strict";n(80),n.p,n.p,n(83)},,,,,,,function(e,t,n){"use strict";n.r(t),function(e){var t=n(54),i=n(4),r=n(16),o=n(55),a=(n(44),n(61),n(33),n(13),n(66),n(48),n(51),n(1),n(69),n(72),n(75),n(99),n(100),n(41),n(108),e(".uikit-elements")),s=a.find(".dropdown-quantity"),l=a.find(".range-slider"),c=a.find(".date-range"),u=a.find(".date-filter");new i.a(s.eq(0)),new r.a(c),new o.a(u),new t.a(l),new i.a(s.eq(1),"room"),new i.a(s.eq(2),"room").togglePicker(),new i.a(s.eq(3)).togglePicker(),new i.a(s.eq(4)).togglePicker()}.call(this,n(2))},function(e,t,n){var i=n(0),r=n(109);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9idXR0b24vYnV0dG9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2Ryb3Bkb3duLXF1YW50aXR5L2Ryb3Bkb3duLXF1YW50aXR5LmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2ZvbnRzL2ZvbnRzLnNhc3M/MjY3OSIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL3RlbXBsYXRlLW1haW4uc2Fzcz80ZGVlIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9mYXZpY29uLmljbyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL2Zhdmljb24vZmF2aWNvbi0xNngxNi5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL2Zhdmljb24tMzJ4MzIucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9hbmRyb2lkLWNocm9tZS0xOTJ4MTkyLnBuZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL2Zhdmljb24vYW5kcm9pZC1jaHJvbWUtNTEyeDUxMi5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL3RveGluLndlYm1hbmlmZXN0Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9zYWZhcmktcGlubmVkLXRhYi5zdmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL2FwcGxlLXRvdWNoLWljb24ucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9tc3RpbGUtNzB4NzAucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9tc3RpbGUtMTQ0eDE0NC5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL21zdGlsZS0xNTB4MTUwLnBuZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL2Zhdmljb24vbXN0aWxlLTMxMHgxNTAucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9tc3RpbGUtMzEweDMxMC5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL2Jyb3dzZXJjb25maWcueG1sIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2J1dHRvbi9idXR0b24uc2Fzcz9lZDdlIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3N1YnNjcmlwdGlvbi9zdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3Mvc3Vic2NyaXB0aW9uL3N1YnNjcmlwdGlvbi5zYXNzP2IzM2QiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvZGF0ZS1yYW5nZS9kYXRlLXJhbmdlLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2Ryb3Bkb3duLXF1YW50aXR5L2Ryb3Bkb3duLXF1YW50aXR5LnNhc3M/ZjY3OSIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci5zYXNzP2E2NjgiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGV4dC1maWVsZC90ZXh0LWZpZWxkLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLXVpa2l0L3RlbXBsYXRlLXVpa2l0LnNhc3M/ZjdiZiIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9kYXRlLXJhbmdlL2RhdGUtcmFuZ2Uuc2Fzcz84MmUxIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5Lm1hc2tlZGlucHV0L3NyYy9qcXVlcnkubWFza2VkaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGV4dC1maWVsZC90ZXh0LWZpZWxkLnNhc3M/OTEwOCIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS11aWtpdC90ZW1wbGF0ZS11aWtpdC1sb2dvLnN2ZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9yYXRlLWJ1dHRvbi9yYXRlLWJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9yYXRlLWJ1dHRvbi9yYXRlLWJ1dHRvbi5zYXNzP2FhZTUiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2hlY2tib3gvY2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcmFkaW8vcmFkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcmFkaW8vcmFkaW8uc2Fzcz9lMzc2Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RvZ2dsZS90b2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdG9nZ2xlL3RvZ2dsZS5zYXNzP2M4NzEiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9kYXRlLWZpbHRlci9kYXRlLWZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9yYW5nZS1zbGlkZXIvc2xpZGVyLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3JhbmdlLXNsaWRlci9yYW5nZS1zbGlkZXIuc2Fzcz83NjRiIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2RhdGUtZmlsdGVyL2RhdGUtZmlsdGVyLnNhc3M/ODg5NCIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jaGVja2JveC1saXN0L2NoZWNrYm94LWxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2hlY2tib3gvY2hlY2tib3guc2Fzcz81OTAzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdC5zYXNzPzk2ZGYiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2hlY2tib3gtZ3JvdXAvY2hlY2tib3gtZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2hlY2tib3gtZ3JvdXAvY2hlY2tib3gtZ3JvdXAuc2Fzcz8zODM1Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uc2Fzcz9mZWMwIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NoZWNrYm94LXJpY2gvY2hlY2tib3gtcmljaC5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jaGVja2JveC1yaWNoL2NoZWNrYm94LXJpY2guc2Fzcz85Y2VkIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2J1bGxldC1saXN0L2J1bGxldC1saXN0LmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2J1bGxldC1saXN0L2J1bGxldC1saXN0LnNhc3M/MTM2NSIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9pbmZvL2luZm8uc2Fzcz80NDA4Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2xpa2UvbGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9saWtlL2xpa2Uuc2Fzcz9mZTA5Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3Jldmlldy9yZXZpZXcuc2Fzcz83ZDdlIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2luZm8vaW5mby1pY28xLnN2ZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9pbmZvL2luZm8taWNvMi5zdmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvaW5mby9pbmZvLWljbzMuc3ZnIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3Jldmlldy9yZXZpZXctYXZhdGFyMS5qcGciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcmV2aWV3L3Jldmlldy1hdmF0YXIyLmpwZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9wYWdlLXVpa2l0LWVsZW1lbnRzL3BhZ2UtdWlraXQtZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcGFnZS11aWtpdC1lbGVtZW50cy9wYWdlLXVpa2l0LWVsZW1lbnRzLnNhc3M/Njk3ZCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsImxlbmd0aCIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImpvaW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInNwbGljZSIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwidGhpcyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiZmxhdCIsImFycmF5IiwiYXBwbHkiLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwiaXNBcnJheUxpa2UiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsImV4dGVuZCIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9TZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJfbmFtZSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiaGFzIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsImVyciIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiZm9jdXMiLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIkRyb3Bkb3duUXVhbnRpdHkiLCIkZHJvcGRvd24iLCJmaXJzdEl0ZW0iLCJzZWNvbmRJdGVtIiwidGhpcmRJdGVtIiwiaXNGaXJzdEl0ZW0iLCJpc1NlY29uZEl0ZW0iLCJpc1RoaXJkSXRlbSIsInRvZ2dsZVBpY2tlciIsInNlbGVjdGVkQ2FwdGlvbiIsImFkdWx0c0FuZENoaWxkcmVuIiwiY291bnRlciIsInNldFRpbWUiLCJkYXRlQ29tZUluIiwiZGF0ZUNoZWNrT3V0IiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInNldE1vbnRoIiwiZGF0ZSIsImNsYXNzTGlzdCIsImRhdGVDdXJyZW50IiwibW9udGgiLCJzZXREYXRlIiwid2Vla0RheSIsImdldERheSIsImdldERhdGUiLCJnZXRUaW1lIiwiRGF0ZVBpY2tlciIsIiRwaWNrZXIiLCJhcGkiLCJkZWZhdWx0IiwibG9jYWxzIiwiRGF0ZVJhbmdlIiwiJGRhdGVSYW5nZSIsIk51bWJlciIsInN0ciIsIm1hc2siLCJwbGFjZWhvbGRlciIsImNhcmV0VGltZW91dElkIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpUGhvbmUiLCJjaHJvbWUiLCJhbmRyb2lkIiwiZGVmaW5pdGlvbnMiLCJhdXRvY2xlYXIiLCJkYXRhTmFtZSIsImNhcmV0IiwiYmVnaW4iLCJyYW5nZSIsInNldFNlbGVjdGlvblJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwiY29sbGFwc2UiLCJtb3ZlRW5kIiwibW92ZVN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJjcmVhdGVSYW5nZSIsImR1cGxpY2F0ZSIsInVubWFzayIsImRlZnMiLCJ0ZXN0cyIsInBhcnRpYWxQb3NpdGlvbiIsImZpcnN0Tm9uTWFza1BvcyIsImxhc3RSZXF1aXJlZE5vbk1hc2tQb3MiLCJvbGRWYWwiLCJidWZmZXIiLCJnZXRQbGFjZWhvbGRlciIsImRlZmF1bHRCdWZmZXIiLCJmb2N1c1RleHQiLCJ0cnlGaXJlQ29tcGxldGVkIiwiY2hhckF0Iiwic2Vla05leHQiLCJzaGlmdEwiLCJ3cml0ZUJ1ZmZlciIsImJsdXJFdmVudCIsImNoZWNrVmFsIiwiY2hhbmdlIiwiY2xlYXJCdWZmZXIiLCJhbGxvdyIsImxhc3RNYXRjaCIsInN1YnN0cmluZyIsImsiLCJzZWVrUHJldiIsInNoaWZ0UiIsImN1clZhbCIsImxhc3RFbnRlcmVkVmFsdWUiLCIkc2xpZGVyIiwic2xpZGVyIiwiUmFuZ2VTbGlkZXIiLCIkcmFuZ2VTbGlkZXIiLCJEYXRlRmlsdGVyIiwiJGRhdGVGaWx0ZXIiLCJmcm9tRGF0ZSIsInRvRGF0ZSIsInJhaWwiLCJyYWlsX3ZlciIsInRodW1iIiwidGh1bWJfdmVyIiwidGh1bWJfX3Rvb2x0aXAiLCJ0aHVtYl9fdG9vbHRpcF92ZXIiLCJwcm9ncmVzc192ZXIiLCJzY2FsZV92ZXIiLCJzY2FsZV9fd3JhcHBlciIsInNjYWxlX193cmFwcGVyX3ZlciIsInNjYWxlX19kaXZpc2lvbiIsInNjYWxlX19kaXZpc2lvbl92ZXIiLCJzY2FsZV9fc3ViZGl2aXNpb24iLCJzY2FsZV9fc3ViZGl2aXNpb25fdmVyIiwic2NhbGVfX3ZhbHVlcyIsInNjYWxlX192YWx1ZXNfdmVyIiwic2NhbGVfX3ZhbHVlc0l0ZW0iLCJzY2FsZV9fdmFsdWVzSXRlbV92ZXIiLCJGdW5jdGlvbiIsInNvdXJjZXMiLCJzb3VyY2VSb290Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwcmVzZW50ZXIiLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290IiwiY29ubmVjdGVkQ2FsbGJhY2siLCJqdXN0aWZ5Q29udGVudCIsInNldE1vZGVsRGF0YSIsImZsZXhEaXJlY3Rpb24iLCJIVE1MRWxlbWVudCIsIl90aHVtYkZyb20iLCJfdGh1bWJUbyIsIl9wcm9ncmVzcyIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImNhbGNUaHVtYlBvc2l0aW9uIiwiZGF0YXNldCIsIm9uVG9vbHRpcCIsIm9uUmFuZ2UiLCJvblZlcnRpY2FsIiwidmFsdWVGcm9tIiwidG9GaXhlZCIsInZhbHVlVG8iLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwiX2xlZnRPclRvcCIsIl9yaWdodE9yQm90dG9tIiwic2V0UG9zRnJvbSIsInNldFBvc1RvIiwic2V0RGlyZWN0aW9uIiwicG9zaXRpb25Gcm9tIiwicG9zaXRpb25UbyIsIl9wb3NpdGlvbiIsIl9jbGllbnRYb3JZIiwiX29mZnNldFhvclkiLCJfd2lkdGhPckhlaWdodCIsIl9kaXJlY3Rpb24iLCJfdG9vbHRpcCIsIl9tb3VzZU1vdmUiLCJvbk1vdXNlTW92ZSIsIl9tb3VzZVVwIiwib25Nb3VzZVVwIiwib25Nb3VzZURvd24iLCJtb3ZlVG9Qb3NpdGlvbiIsInNldFBvc2l0aW9uIiwicGFyZW50RWxlbWVudCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsIl9zY2FsZVZhbHVlSXRlbXMiLCJoYW5kbGVNb3VzZURvd24iLCJyZW5kZXIiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsIlJlZmxlY3QiLCJwb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrIiwiY29uc3RydWN0IiwiZGVmaW5lUHJvcGVydGllcyIsInUiLCJoIiwiZiIsIlBhIiwiZWUiLCJFYSIsIlkiLCJ5IiwiZyIsIlNhIiwiV2EiLCJFIiwiTiIsInJldHVybiIsIkMiLCJKIiwidGhyb3ciLCJTIiwiZnJvbSIsImFzc2lnbiIsIlQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIk8iLCJ4IiwiTSIsIkQiLCJpbml0Q3VzdG9tRXZlbnQiLCJNb3VzZUV2ZW50IiwiTCIsImluaXRNb3VzZUV2ZW50IiwiQSIsIk5vZGUiLCJET0NVTUVOVF9OT0RFIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsIkhUTUxUZW1wbGF0ZUVsZW1lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwibG9jYWxOYW1lIiwiRG9jdW1lbnQiLCJpbXBvcnROb2RlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRWxlbWVudCIsIlUiLCJFTEVNRU5UX05PREUiLCJURVhUX05PREUiLCJDT01NRU5UX05PREUiLCJQIiwiSSIsInphIiwiVyIsIkYiLCJ6IiwiWWEiLCJaYSIsIlIiLCJWIiwidmEiLCJIIiwiQiIsImZpbmFsbHkiLCJQcm9taXNlIiwicmFjZSIsInEiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZnJlZXplIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJmcm9tQ29kZVBvaW50IiwiY29kZVBvaW50QXQiLCJHIiwiU2V0IiwiTWFwIiwiWiIsIldlYkNvbXBvbmVudHMiLCJmbGFncyIsIlgiLCJub09wdHMiLCJzZWFyY2giLCJLIiwiUSIsImxvZyIsInR0Iiwic2hhZHlkb20iLCJTaGFkeURPTSIsImZvcmNlIiwiZXQiLCJub1BhdGNoIiwibnQiLCJyZWdpc3RlciIsImNlIiwib3QiLCJpdCIsIl9fc2hhZHkiLCJydCIsImZvcmNlUG9seWZpbGwiLCJ0b0pTT04iLCJhdCIsIlVhIiwic3QiLCJsdCIsIlNoYWRvd1Jvb3QiLCJ1dCIsIlVuIiwic2EiLCJhYSIsInByZWZlclBlcmZvcm1hbmNlIiwiSWEiLCJodCIsImR0IiwiZnQiLCJwdCIsIl90IiwibXQiLCJ2dCIsIl9fc2hhZHlfbmF0aXZlX2NvbnRhaW5zIiwieXQiLCJfX3NoYWR5X3BhcmVudE5vZGUiLCJndCIsIm5hbWVkSXRlbSIsImJ0IiwiX19zaGFkeV9uYXRpdmVfZmlyc3RDaGlsZCIsIl9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nIiwid3QiLCJfX3NoYWR5X2ZpcnN0Q2hpbGQiLCJfX3NoYWR5X25leHRTaWJsaW5nIiwiRXQiLCJOdCIsIkN0IiwiU3QiLCJUdCIsIk90IiwieHQiLCJNdCIsIkR0IiwiTHQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiamEiLCJmbHVzaCIsInRha2VSZWNvcmRzIiwiQXQiLCJQdCIsImp0Iiwia3QiLCJGdCIsIlJ0IiwiVnQiLCJJdCIsIkh0IiwiX19zaGFkeV9uYXRpdmVfcXVlcnlTZWxlY3RvciIsIl9fc2hhZHlfbmF0aXZlX3F1ZXJ5U2VsZWN0b3JBbGwiLCJVdCIsIkJ0IiwienQiLCJxdCIsIld0IiwiY3JlYXRlVHJlZVdhbGtlciIsIk5vZGVGaWx0ZXIiLCJTSE9XX0FMTCIsIkd0IiwiU0hPV19FTEVNRU5UIiwiWnQiLCJZdCIsIl9fc2hhZHlfbmF0aXZlX3JlbW92ZUNoaWxkIiwiWHQiLCJKdCIsIkt0IiwiX19zaGFkeV9jaGlsZE5vZGVzIiwiX19zaGFkeV9sYXN0Q2hpbGQiLCJfX3NoYWR5X2NoaWxkRWxlbWVudENvdW50IiwiX19zaGFkeV9jaGlsZHJlbiIsIl9fc2hhZHlfZmlyc3RFbGVtZW50Q2hpbGQiLCJfX3NoYWR5X2xhc3RFbGVtZW50Q2hpbGQiLCJfX3NoYWR5X3NoYWRvd1Jvb3QiLCIkdCIsIl9fc2hhZHlfdGV4dENvbnRlbnQiLCJfX3NoYWR5X2lubmVySFRNTCIsIlF0IiwiX19zaGFkeV9wYXJlbnRFbGVtZW50IiwiX19zaGFkeV9wcmV2aW91c1NpYmxpbmciLCJfX3NoYWR5X25leHRFbGVtZW50U2libGluZyIsIl9fc2hhZHlfcHJldmlvdXNFbGVtZW50U2libGluZyIsIl9fc2hhZHlfY2xhc3NOYW1lIiwidGUiLCJuZSIsIm9lIiwiS2EiLCJpZSIsIkphIiwicmUiLCJhZSIsInNlIiwibGUiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIkdhIiwiRmEiLCJmb2N1c291dCIsImRibGNsaWNrIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2VvdXQiLCJtb3VzZW92ZXIiLCJtb3VzZXVwIiwid2hlZWwiLCJiZWZvcmVpbnB1dCIsImtleWRvd24iLCJrZXl1cCIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbnVwZGF0ZSIsImNvbXBvc2l0aW9uZW5kIiwidG91Y2hzdGFydCIsInRvdWNoZW5kIiwidG91Y2htb3ZlIiwidG91Y2hjYW5jZWwiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVyY2FuY2VsIiwicG9pbnRlcm91dCIsImdvdHBvaW50ZXJjYXB0dXJlIiwibG9zdHBvaW50ZXJjYXB0dXJlIiwiZHJhZ3N0YXJ0IiwiZHJhZyIsImRyYWdlbnRlciIsImRyYWdsZWF2ZSIsImRyYWdvdmVyIiwiZHJvcCIsImRyYWdlbmQiLCJET01BY3RpdmF0ZSIsIkRPTUZvY3VzSW4iLCJET01Gb2N1c091dCIsImtleXByZXNzIiwidWUiLCJET01BdHRyTW9kaWZpZWQiLCJET01BdHRyaWJ1dGVOYW1lQ2hhbmdlZCIsIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZCIsIkRPTUVsZW1lbnROYW1lQ2hhbmdlZCIsIkRPTU5vZGVJbnNlcnRlZCIsIkRPTU5vZGVJbnNlcnRlZEludG9Eb2N1bWVudCIsIkRPTU5vZGVSZW1vdmVkIiwiRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnQiLCJET01TdWJ0cmVlTW9kaWZpZWQiLCJoZSIsIl9fc2hhZHlfZ2V0Um9vdE5vZGUiLCJkZSIsIl9fc2hhZHlfYXNzaWduZWRTbG90IiwiZmUiLCJwZSIsIl9fY29tcG9zZWQiLCJfZSIsIm1lIiwiX190YXJnZXQiLCJfX3JlbGF0ZWRUYXJnZXQiLCJ2ZSIsIl9faGFuZGxlcnMiLCJfX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInllIiwiY29tcG9zZWRQYXRoIiwiQ0FQVFVSSU5HX1BIQVNFIiwiQVRfVEFSR0VUIiwibWEiLCJCVUJCTElOR19QSEFTRSIsImdlIiwiYmUiLCJDZSIsIl9fc2hhZHlfbmF0aXZlX2Rpc3BhdGNoRXZlbnQiLCJ3ZSIsImhhbmRsZUV2ZW50IiwiX19zaGFkeV9uYXRpdmVfYWRkRXZlbnRMaXN0ZW5lciIsIl9fc2hhZHlfcmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9fcHJldmlvdXNDdXJyZW50VGFyZ2V0IiwiV2luZG93IiwibGIiLCJidWJibGUiLCJFZSIsIl9fc2hhZHlfbmF0aXZlX3JlbW92ZUV2ZW50TGlzdGVuZXIiLCJOZSIsImlzVHJ1c3RlZCIsIl9fY29tcG9zZWRQYXRoIiwiX19yZWxhdGVkVGFyZ2V0Q29tcG9zZWRQYXRoIiwiX19zaGFkeV9zb3VyY2VQcm90byIsIl9fc2hhZHlfcGF0Y2hlZFByb3RvIiwiU2UiLCJUZSIsIk9lIiwieGUiLCJNZSIsIkRlIiwiX19zaGFkeV9hZGRFdmVudExpc3RlbmVyIiwiTGUiLCJiYSIsImlhIiwiQWUiLCJtaW4iLCJQZSIsImplIiwia2UiLCJGZSIsIlNoYWR5Q1NTIiwiU2NvcGluZ1NoaW0iLCJSZSIsInNldEVsZW1lbnRDbGFzcyIsIlZlIiwidW5zY29wZU5vZGUiLCJJZSIsImN1cnJlbnRTY29wZUZvck5vZGUiLCJIZSIsIlVlIiwiQmUiLCJ6ZSIsInFlIiwiV2UiLCJfX3NoYWR5X3JlbW92ZUNoaWxkIiwiR2UiLCJaZSIsIl9fc2hhZHlfbmF0aXZlX3BhcmVudE5vZGUiLCJfX3NoYWR5X25hdGl2ZV9sYXN0Q2hpbGQiLCJwcmV2aW91c1NpYmxpbmciLCJfX3NoYWR5X25hdGl2ZV9wcmV2aW91c1NpYmxpbmciLCJfX3NoYWR5X25hdGl2ZV9jaGlsZE5vZGVzIiwiX19zaGFkeV9uYXRpdmVfcGFyZW50RWxlbWVudCIsIl9fc2hhZHlfbmF0aXZlX3RleHRDb250ZW50IiwiX19zaGFkeV9pbnNlcnRCZWZvcmUiLCJfX3NoYWR5X25hdGl2ZV9pbnNlcnRCZWZvcmUiLCJXbiIsIl9fbm9JbnNlcnRpb25Qb2ludCIsInNjb3BlTm9kZSIsIlJuIiwiQW4iLCJ3biIsIkVuIiwiX19zaGFkeV9uYXRpdmVfYXBwZW5kQ2hpbGQiLCJhZG9wdE5vZGUiLCJWbiIsImRhIiwiYXNzaWduZWROb2RlcyIsImxhIiwiX19zaGFkeV9uYXRpdmVfY2xvbmVOb2RlIiwiQVRUUklCVVRFX05PREUiLCJfX3NoYWR5X2Nsb25lTm9kZSIsIl9fc2hhZHlfYXBwZW5kQ2hpbGQiLCJZZSIsIlBuIiwiYXNzaWduZWRTbG90IiwiWGUiLCJKZSIsIl9fc2hhZHlfbmF0aXZlX2ZpcnN0RWxlbWVudENoaWxkIiwiX19zaGFkeV9uYXRpdmVfbGFzdEVsZW1lbnRDaGlsZCIsIl9fc2hhZHlfbmF0aXZlX2NoaWxkcmVuIiwiS2UiLCIkZSIsIlFlIiwidG4iLCJMYSIsIkluIiwiSG4iLCJlbiIsIl9fc2hhZHlfbmF0aXZlX3ByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJfX3NoYWR5X25hdGl2ZV9uZXh0RWxlbWVudFNpYmxpbmciLCJfX3NoYWR5X3NldEF0dHJpYnV0ZSIsIl9fc2hhZHlfbmF0aXZlX3NldEF0dHJpYnV0ZSIsIl9fc2hhZHlfbmF0aXZlX3JlbW92ZUF0dHJpYnV0ZSIsIm5uIiwic2hhZHlVcGdyYWRlRnJhZ21lbnQiLCJMbiIsIk5uIiwiRG4iLCJPbiIsIl9fQ0Vfc2hhZG93Um9vdCIsImJiIiwicm4iLCJfX3NoYWR5X25hdGl2ZV9pbm5lckhUTUwiLCJjcmVhdGVFbGVtZW50TlMiLCJhbiIsIl9fc2hhZHlfYmx1ciIsIl9fc2hhZHlfbmF0aXZlX2JsdXIiLCJzbiIsImZsYXR0ZW4iLCJsbiIsImNuIiwiX19zaGFkeV9uYXRpdmVfYWN0aXZlRWxlbWVudCIsInVuIiwiaG4iLCJfX3NoYWR5X25hdGl2ZV9pbXBvcnROb2RlIiwiX19zaGFkeV9pbXBvcnROb2RlIiwiZG4iLCJwbiIsIkV2ZW50VGFyZ2V0IiwiVGV4dCIsIkNvbW1lbnQiLCJDREFUQVNlY3Rpb24iLCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJIVE1MU2xvdEVsZW1lbnQiLCJfbiIsIm1uIiwidm4iLCJ5biIsIl9fc2hhZHlfcHJvdG9Jc1BhdGNoZWQiLCJnbiIsImJuIiwiQ24iLCJTbiIsIlRuIiwieG4iLCJkZWZlckNvbm5lY3Rpb25DYWxsYmFja3MiLCJNbiIsIl9yZW5kZXJTZWxmIiwiam4iLCJvYSIsIl9fc2hhZHlfc2xvdCIsInJhIiwia24iLCJGbiIsIkJhIiwiQWEiLCJCbiIsImNsZWFyIiwiX19zaGFkeWRvbV9jb25uZWN0ZWRDYWxsYmFjayIsIl9fc2hhZHlkb21fZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJ6biIsInFuIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJpc0Nvbm5lY3RlZCIsIkN1c3RvbUVsZW1lbnRSZWdpc3RyeSIsIkduIiwiWm4iLCJfX3NoYWR5X3JlcGxhY2VDaGlsZCIsIl9fc2hhZHlfY29udGFpbnMiLCJfX3NoYWR5X2Rpc3BhdGNoRXZlbnQiLCJfX3NoYWR5X25hdGl2ZV9nZXRBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJfX3NoYWR5X25hdGl2ZV9oYXNBdHRyaWJ1dGUiLCJfX3NoYWR5X3JlbW92ZUF0dHJpYnV0ZSIsIl9fc2hhZHlfYXR0YWNoU2hhZG93IiwiX19zaGFkeV9uYXRpdmVfZm9jdXMiLCJfX3NoYWR5X2dldEVsZW1lbnRCeUlkIiwiX19zaGFkeV9xdWVyeVNlbGVjdG9yIiwiX19zaGFkeV9xdWVyeVNlbGVjdG9yQWxsIiwiX19zaGFkeV9hc3NpZ25lZE5vZGVzIiwiX19zaGFkeV9hY3RpdmVFbGVtZW50IiwiX2FjdGl2ZUVsZW1lbnQiLCJsYXN0RWxlbWVudENoaWxkIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImNoaWxkRWxlbWVudENvdW50IiwiX19zaGFkeV9pc0Nvbm5lY3RlZCIsInNsb3QiLCJZbiIsIldlYWtNYXAiLCJYbiIsIkpuIiwiS24iLCJpblVzZSIsInBhdGNoIiwiaXNTaGFkeVJvb3QiLCJlbnF1ZXVlIiwiZmx1c2hJbml0aWFsIiwiZmlsdGVyTXV0YXRpb25zIiwib2JzZXJ2ZUNoaWxkcmVuIiwiTWEiLCJOYSIsInVub2JzZXJ2ZUNoaWxkcmVuIiwiZGVsZXRlIiwic2l6ZSIsImhhbmRsZXNEeW5hbWljU2NvcGluZyIsIndyYXBJZk5lZWRlZCIsIldyYXBwZXIiLCJwYXRjaE9uRGVtYW5kIiwibmF0aXZlTWV0aG9kcyIsIm5hdGl2ZVRyZWUiLCJwYXRjaEVsZW1lbnRQcm90byIsImN1cnJlbnROb2RlIiwiU0hPV19URVhUIiwibmV4dE5vZGUiLCIkbiIsIlFuIiwiZW8iLCJubyIsIm9vIiwiaW8iLCJybyIsImFvIiwic28iLCJsbyIsImNvIiwidW8iLCJobyIsImZvIiwicG8iLCJfbyIsIm1vIiwidm8iLCJnZXRBdHRyaWJ1dGVOUyIsInlvIiwic2V0QXR0cmlidXRlTlMiLCJnbyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYm8iLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJ3byIsImluc2VydEFkamFjZW50SFRNTCIsIkVvIiwiTm8iLCJDbyIsIlNvIiwiVG8iLCJPbyIsInhvIiwiTW8iLCJEbyIsIkxvIiwiQW8iLCJQbyIsImpvIiwia28iLCJfX0NFX2lzSW1wb3J0RG9jdW1lbnQiLCJGbyIsIlJvIiwiVm8iLCJyaSIsIm5vRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlciIsInNoYWR5RG9tRmFzdFdhbGsiLCJqYiIsIklvIiwiU2hhZHlEb20iLCJpbXBvcnQiLCJIbyIsIlVvIiwiX19DRV9wYXRjaGVkIiwiQm8iLCJfX0NFX3N0YXRlIiwiV28iLCJ6byIsInFvIiwia2IiLCJ1cGdyYWRlIiwiX19DRV9yZWdpc3RyeSIsIl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZCIsImVpIiwiY29uc3RydWN0aW9uU3RhY2siLCJjb25zdHJ1Y3RvckZ1bmN0aW9uIiwiX19DRV9kZWZpbml0aW9uIiwiaGFzQXR0cmlidXRlcyIsIm9ic2VydmVkQXR0cmlidXRlcyIsIlpvIiwiR28iLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJzb3VyY2VVUkwiLCJmaWxlTmFtZSIsImxpbmUiLCJsaW5lTnVtYmVyIiwiY29sdW1uIiwiY29sdW1uTnVtYmVyIiwiRXJyb3JFdmVudCIsImluaXRFcnJvckV2ZW50IiwiZmlsZW5hbWUiLCJsaW5lbm8iLCJjb2xubyIsIllvIiwiQ2EiLCJYbyIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJKbyIsImRpc2Nvbm5lY3QiLCJLbyIsImZhIiwiZ2EiLCJ4YSIsIm5hIiwicWEiLCJlYSIsImhhIiwieWEiLCIkbyIsIlN5bnRheEVycm9yIiwiUW8iLCJhZG9wdGVkQ2FsbGJhY2siLCJ0aSIsIm5pIiwiJGEiLCJ3aGVuRGVmaW5lZCIsInBvbHlmaWxsRGVmaW5lTGF6eSIsImlpIiwiYWkiLCJvaSIsInNpIiwicnVsZXMiLCJwcmV2aW91cyIsInBhcnNlZENzc1RleHQiLCJhdFJ1bGUiLCJwYXJzZWRTZWxlY3RvciIsImtleWZyYW1lc05hbWUiLCJsaSIsIm1pIiwiRWkiLCJsYXN0SW5kZXhPZiIsImZpIiwid2kiLCJkaSIsInBpIiwiaGkiLCJfX0NFX2luc3RhbGxQb2x5ZmlsbCIsImNpIiwidWkiLCJ2aSIsInlpIiwiZ2kiLCJiaSIsIk5pIiwiQ2kiLCJzaGltY3NzcHJvcGVydGllcyIsIkNTUyIsInN1cHBvcnRzIiwiY3NzQnVpbGQiLCJTaSIsImRpc2FibGVSdW50aW1lIiwibmF0aXZlQ3NzIiwiVGkiLCJPaSIsInhpIiwiTWkiLCJEaSIsIkxpIiwiQWkiLCJQaSIsImppIiwiUmkiLCJraSIsIl9fY3NzUnVsZXMiLCJGaSIsIm1hdGNoTWVkaWEiLCJWaSIsIlVpIiwiSWkiLCJIaSIsIkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyIsIkJpIiwiemkiLCJxaSIsIldpIiwiZXh0ZW5kcyIsImNhIiwiR2kiLCJaaSIsIl9fY3NzQnVpbGQiLCJZaSIsIlhpIiwiSmkiLCJfY29udGVudCIsIktpIiwiJGkiLCJwciIsIlFpIiwiZXIiLCJuciIsIm9yIiwiYXIiLCJpciIsInJyIiwiZnIiLCJ3YSIsImNyIiwic3IiLCJ1ciIsImxyIiwiaHIiLCJRYSIsInJlZHVjZSIsImRyIiwiX3IiLCJ0YSIsIm1yIiwiX19zdHlsZUluZm8iLCJ2ciIsInlyIiwiX2dldFN0eWxlUnVsZXMiLCJnciIsImJyIiwid3IiLCJFciIsIk5yIiwiQ3IiLCJTciIsImxhc3RJbmRleCIsInhyIiwiTXIiLCJEciIsIkxyIiwiQXIiLCJQciIsImpyIiwia3IiLCJzdG9yZSIsInN0eWxlRWxlbWVudCIsIkZyIiwiUnIiLCJWciIsIklyIiwiSHIiLCJVciIsIkJyIiwiSFRNTEltcG9ydHMiLCJ3aGVuUmVhZHkiLCJ6ciIsInFyIiwiV3IiLCJfYXBwbHlTaGltQ3VycmVudFZlcnNpb24iLCJfYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb24iLCJfYXBwbHlTaGltTmV4dFZlcnNpb24iLCJHciIsIlpyIiwiWXIiLCJYciIsIkpyIiwiX3N0eWxlQXN0IiwiS3IiLCJBcHBseVNoaW0iLCJpbnZhbGlkQ2FsbGJhY2siLCJDdXN0b21TdHlsZUludGVyZmFjZSIsInRyYW5zZm9ybUNhbGxiYWNrIiwiSGEiLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiZW5xdWV1ZWQiLCJmbHVzaEN1c3RvbVN0eWxlcyIsIiRyIiwicmVtb3ZlUHJvcGVydHkiLCJfc3R5bGUiLCJ0cmFuc2Zvcm1SdWxlcyIsIl92YWxpZGF0aW5nIiwiUXIiLCJYYSIsIm1iIiwiX2VsZW1lbnQiLCJjYiIsIlZhIiwiVHIiLCJUYSIsImhiIiwicHJlcGFyZVRlbXBsYXRlIiwicHJlcGFyZVRlbXBsYXRlRG9tIiwicHJlcGFyZVRlbXBsYXRlU3R5bGVzIiwiX3ByZXBhcmVkIiwiYWIiLCJfZG9tUHJlcGFyZWQiLCJwcm9jZXNzU3R5bGVzIiwiZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0eWxlRG9jdW1lbnQiLCJEYSIsImthIiwiT3IiLCJfdXNlQ291bnQiLCJzdHlsZVN1YnRyZWUiLCJ0cmFuc2Zvcm1SdWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlIiwiZ2IiLCJPYSIsImZiIiwiaWIiLCJlYiIsIlJhIiwiX3N0eWxlSW5mb0Zvck5vZGUiLCJ0cmFuc2Zvcm1DdXN0b21TdHlsZUZvckRvY3VtZW50IiwiZ2V0U3R5bGVBc3QiLCJzdHlsZUFzdFRvU3RyaW5nIiwic2NvcGVGb3JOb2RlIiwicHJlcGFyZUFkb3B0ZWRDc3NUZXh0IiwibmF0aXZlU2hhZG93IiwicGEiLCJVUkwiLCJwYXRobmFtZSIsImZ0cCIsImdvcGhlciIsImh0dHAiLCJodHRwcyIsIndzIiwid3NzIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiYm9vdHN0cmFwIiwic2V0SW1tZWRpYXRlIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsIm5leHRUaWNrIiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwib25tZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiZnVuIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIl9taW5WYWx1ZSIsIl9tYXhWYWx1ZSIsIl92YWx1ZUZyb20iLCJfdmFsdWVUbyIsIl9zdGVwU2l6ZSIsIl9vblJhbmdlIiwiX29uVG9vbHRpcCIsIl9vblZlcnRpY2FsIiwiX29uU2NhbGUiLCJfc2VydmVyVVJMIiwiX29ic2VydmVyIiwiaW5pdE1vZGVsRnJvbUVsZW1lbnQiLCJGb3JtRGF0YSIsImluaXRNb2RlbEZyb21TZXJ2ZXIiLCJpbml0TW9kZWxGcm9tT2JqZWN0Iiwic2VydmVyVVJMIiwiZmV0Y2giLCJvblNjYWxlIiwic3RlcFNpemUiLCJhYnMiLCJfbW9kZWwiLCJvYnNlcnZlciIsImhhbmRsZVZpZXdFdmVudHMiLCJzZXRQcm9wcyIsImdldFByb3BzIiwiY2FsY0Zyb21Ub1ZhbHVlcyIsImlzQ2hlY2tlZCIsIiR1aWtpdEVsZW1lbnRzIiwiJGRyb3Bkb3duUXVhbnRpdHkiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEssK0JDaEZyRCxJQUNNQyxFQURGQyxFQUVLLFdBVUwsWUFUb0IsSUFBVEQsSUFNVEEsRUFBT0UsUUFBUUMsUUFBVUMsVUFBWUEsU0FBU0MsTUFBUUYsT0FBT0csT0FHeEROLEdBSVBPLEVBQVksV0FDZCxJQUFJUCxFQUFPLEdBQ1gsT0FBTyxTQUFrQlEsR0FDdkIsUUFBNEIsSUFBakJSLEVBQUtRLEdBQXlCLENBQ3ZDLElBQUlDLEVBQWNMLFNBQVNNLGNBQWNGLEdBRXpDLEdBQUlMLE9BQU9RLG1CQUFxQkYsYUFBdUJOLE9BQU9RLGtCQUM1RCxJQUdFRixFQUFjQSxFQUFZRyxnQkFBZ0JDLEtBQzFDLE1BQU9DLEdBRVBMLEVBQWMsS0FJbEJULEVBQUtRLEdBQVVDLEVBR2pCLE9BQU9ULEVBQUtRLElBcEJBLEdBd0JaTyxFQUFjLEdBRWxCLFNBQVNDLEVBQXFCQyxHQUc1QixJQUZBLElBQUlDLEdBQVUsRUFFTGxELEVBQUksRUFBR0EsRUFBSStDLEVBQVlJLE9BQVFuRCxJQUN0QyxHQUFJK0MsRUFBWS9DLEdBQUdpRCxhQUFlQSxFQUFZLENBQzVDQyxFQUFTbEQsRUFDVCxNQUlKLE9BQU9rRCxFQUdULFNBQVNFLEVBQWFDLEVBQU1DLEdBSTFCLElBSEEsSUFBSUMsRUFBYSxHQUNiQyxFQUFjLEdBRVR4RCxFQUFJLEVBQUdBLEVBQUlxRCxFQUFLRixPQUFRbkQsSUFBSyxDQUNwQyxJQUFJeUQsRUFBT0osRUFBS3JELEdBQ1owRCxFQUFLSixFQUFRSyxLQUFPRixFQUFLLEdBQUtILEVBQVFLLEtBQU9GLEVBQUssR0FDbERHLEVBQVFMLEVBQVdHLElBQU8sRUFDMUJULEVBQWEsR0FBR1ksT0FBT0gsRUFBSSxLQUFLRyxPQUFPRCxHQUMzQ0wsRUFBV0csR0FBTUUsRUFBUSxFQUN6QixJQUFJRSxFQUFRZCxFQUFxQkMsR0FDN0JjLEVBQU0sQ0FDUkMsSUFBS1AsRUFBSyxHQUNWUSxNQUFPUixFQUFLLEdBQ1pTLFVBQVdULEVBQUssS0FHSCxJQUFYSyxHQUNGZixFQUFZZSxHQUFPSyxhQUNuQnBCLEVBQVllLEdBQU9NLFFBQVFMLElBRTNCaEIsRUFBWXNCLEtBQUssQ0FDZnBCLFdBQVlBLEVBQ1ptQixRQUFTRSxFQUFTUCxFQUFLVCxHQUN2QmEsV0FBWSxJQUloQlgsRUFBWWEsS0FBS3BCLEdBR25CLE9BQU9PLEVBR1QsU0FBU2UsRUFBbUJqQixHQUMxQixJQUFJa0IsRUFBUXBDLFNBQVNxQyxjQUFjLFNBQy9CQyxFQUFhcEIsRUFBUW9CLFlBQWMsR0FFdkMsUUFBZ0MsSUFBckJBLEVBQVdDLE1BQXVCLENBQzNDLElBQUlBLEVBQW1ELEtBRW5EQSxJQUNGRCxFQUFXQyxNQUFRQSxHQVF2QixHQUpBakUsT0FBT2tFLEtBQUtGLEdBQVlHLFNBQVEsU0FBVXRELEdBQ3hDaUQsRUFBTU0sYUFBYXZELEVBQUttRCxFQUFXbkQsT0FHUCxtQkFBbkIrQixFQUFReUIsT0FDakJ6QixFQUFReUIsT0FBT1AsT0FDVixDQUNMLElBQUloQyxFQUFTRCxFQUFVZSxFQUFReUIsUUFBVSxRQUV6QyxJQUFLdkMsRUFDSCxNQUFNLElBQUl3QyxNQUFNLDJHQUdsQnhDLEVBQU95QyxZQUFZVCxHQUdyQixPQUFPQSxFQWNULElBQ01VLEVBREZDLEdBQ0VELEVBQVksR0FDVCxTQUFpQnBCLEVBQU9zQixHQUU3QixPQURBRixFQUFVcEIsR0FBU3NCLEVBQ1pGLEVBQVVHLE9BQU9uRCxTQUFTb0QsS0FBSyxRQUkxQyxTQUFTQyxFQUFvQmYsRUFBT1YsRUFBTzBCLEVBQVF6QixHQUNqRCxJQUFJQyxFQUFNd0IsRUFBUyxHQUFLekIsRUFBSUUsTUFBUSxVQUFVSixPQUFPRSxFQUFJRSxNQUFPLE1BQU1KLE9BQU9FLEVBQUlDLElBQUssS0FBT0QsRUFBSUMsSUFJakcsR0FBSVEsRUFBTWlCLFdBQ1JqQixFQUFNaUIsV0FBV0MsUUFBVVAsRUFBWXJCLEVBQU9FLE9BQ3pDLENBQ0wsSUFBSTJCLEVBQVV2RCxTQUFTd0QsZUFBZTVCLEdBQ2xDNkIsRUFBYXJCLEVBQU1xQixXQUVuQkEsRUFBVy9CLElBQ2JVLEVBQU1zQixZQUFZRCxFQUFXL0IsSUFHM0IrQixFQUFXMUMsT0FDYnFCLEVBQU11QixhQUFhSixFQUFTRSxFQUFXL0IsSUFFdkNVLEVBQU1TLFlBQVlVLElBS3hCLFNBQVNLLEVBQVd4QixFQUFPbEIsRUFBU1MsR0FDbEMsSUFBSUMsRUFBTUQsRUFBSUMsSUFDVkMsRUFBUUYsRUFBSUUsTUFDWkMsRUFBWUgsRUFBSUcsVUFlcEIsR0FiSUQsRUFDRk8sRUFBTU0sYUFBYSxRQUFTYixHQUU1Qk8sRUFBTXlCLGdCQUFnQixTQUdwQi9CLEdBQWFnQyxPQUNmbEMsR0FBTyx1REFBdURILE9BQU9xQyxLQUFLQyxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVwQyxNQUFlLFFBTWxJTSxFQUFNaUIsV0FDUmpCLEVBQU1pQixXQUFXQyxRQUFVMUIsTUFDdEIsQ0FDTCxLQUFPUSxFQUFNK0IsWUFDWC9CLEVBQU1zQixZQUFZdEIsRUFBTStCLFlBRzFCL0IsRUFBTVMsWUFBWTdDLFNBQVN3RCxlQUFlNUIsS0FJOUMsSUFBSXdDLEVBQVksS0FDWkMsRUFBbUIsRUFFdkIsU0FBU25DLEVBQVNQLEVBQUtULEdBQ3JCLElBQUlrQixFQUNBa0MsRUFDQWxCLEVBRUosR0FBSWxDLEVBQVFrRCxVQUFXLENBQ3JCLElBQUlHLEVBQWFGLElBQ2pCakMsRUFBUWdDLElBQWNBLEVBQVlqQyxFQUFtQmpCLElBQ3JEb0QsRUFBU25CLEVBQW9CL0QsS0FBSyxLQUFNZ0QsRUFBT21DLEdBQVksR0FDM0RuQixFQUFTRCxFQUFvQi9ELEtBQUssS0FBTWdELEVBQU9tQyxHQUFZLFFBRTNEbkMsRUFBUUQsRUFBbUJqQixHQUMzQm9ELEVBQVNWLEVBQVd4RSxLQUFLLEtBQU1nRCxFQUFPbEIsR0FFdENrQyxFQUFTLFlBeEZiLFNBQTRCaEIsR0FFMUIsR0FBeUIsT0FBckJBLEVBQU1vQyxXQUNSLE9BQU8sRUFHVHBDLEVBQU1vQyxXQUFXZCxZQUFZdEIsR0FtRnpCcUMsQ0FBbUJyQyxJQUt2QixPQURBa0MsRUFBTzNDLEdBQ0EsU0FBcUIrQyxHQUMxQixHQUFJQSxFQUFRLENBQ1YsR0FBSUEsRUFBTzlDLE1BQVFELEVBQUlDLEtBQU84QyxFQUFPN0MsUUFBVUYsRUFBSUUsT0FBUzZDLEVBQU81QyxZQUFjSCxFQUFJRyxVQUNuRixPQUdGd0MsRUFBTzNDLEVBQU0rQyxRQUVidEIsS0FLTnpGLEVBQU9ELFFBQVUsU0FBVXVELEVBQU1DLElBQy9CQSxFQUFVQSxHQUFXLElBR1JrRCxXQUEwQyxrQkFBdEJsRCxFQUFRa0QsWUFDdkNsRCxFQUFRa0QsVUFBWXZFLEtBSXRCLElBQUk4RSxFQUFrQjNELEVBRHRCQyxFQUFPQSxHQUFRLEdBQzBCQyxHQUN6QyxPQUFPLFNBQWdCMEQsR0FHckIsR0FGQUEsRUFBVUEsR0FBVyxHQUUyQixtQkFBNUN0RyxPQUFPa0IsVUFBVXFGLFNBQVM5RyxLQUFLNkcsR0FBbkMsQ0FJQSxJQUFLLElBQUloSCxFQUFJLEVBQUdBLEVBQUkrRyxFQUFnQjVELE9BQVFuRCxJQUFLLENBQy9DLElBQ0k4RCxFQUFRZCxFQURLK0QsRUFBZ0IvRyxJQUVqQytDLEVBQVllLEdBQU9LLGFBS3JCLElBRkEsSUFBSStDLEVBQXFCOUQsRUFBYTRELEVBQVMxRCxHQUV0QzZELEVBQUssRUFBR0EsRUFBS0osRUFBZ0I1RCxPQUFRZ0UsSUFBTSxDQUNsRCxJQUVJQyxFQUFTcEUsRUFGSytELEVBQWdCSSxJQUlLLElBQW5DcEUsRUFBWXFFLEdBQVFqRCxhQUN0QnBCLEVBQVlxRSxHQUFRaEQsVUFFcEJyQixFQUFZc0UsT0FBT0QsRUFBUSxJQUkvQkwsRUFBa0JHLE0sNkJDMVF0QixPLGdCQ0FBOzs7Ozs7Ozs7Ozs7O0lBYUEsU0FBWUksRUFBUUMsR0FFbkIsYUFFNkQsaUJBQW5CeEgsRUFBT0QsUUFTaERDLEVBQU9ELFFBQVV3SCxFQUFPbEYsU0FDdkJtRixFQUFTRCxHQUFRLEdBQ2pCLFNBQVVFLEdBQ1QsSUFBTUEsRUFBRXBGLFNBQ1AsTUFBTSxJQUFJNEMsTUFBTyw0Q0FFbEIsT0FBT3VDLEVBQVNDLElBR2xCRCxFQUFTRCxHQXRCWCxDQTBCdUIsb0JBQVhuRixPQUF5QkEsT0FBU3NGLE1BQU0sU0FBVXRGLEVBQVF1RixHQU10RSxhQUVBLElBQUlDLEVBQU0sR0FFTkMsRUFBV2xILE9BQU9tSCxlQUVsQkMsRUFBUUgsRUFBSUcsTUFFWkMsRUFBT0osRUFBSUksS0FBTyxTQUFVQyxHQUMvQixPQUFPTCxFQUFJSSxLQUFLNUgsS0FBTTZILElBQ25CLFNBQVVBLEdBQ2IsT0FBT0wsRUFBSTlELE9BQU9vRSxNQUFPLEdBQUlELElBSTFCM0QsRUFBT3NELEVBQUl0RCxLQUVYNkQsRUFBVVAsRUFBSU8sUUFFZEMsRUFBYSxHQUVibEIsRUFBV2tCLEVBQVdsQixTQUV0Qm1CLEVBQVNELEVBQVd0RyxlQUVwQndHLEVBQWFELEVBQU9uQixTQUVwQnFCLEVBQXVCRCxFQUFXbEksS0FBTU8sUUFFeEM2SCxFQUFVLEdBRVZDLEVBQWEsU0FBcUJ6RSxHQU1oQyxNQUFzQixtQkFBUkEsR0FBOEMsaUJBQWpCQSxFQUFJMEUsVUFJakRDLEVBQVcsU0FBbUIzRSxHQUNoQyxPQUFjLE1BQVBBLEdBQWVBLElBQVFBLEVBQUk1QixRQUloQ0MsRUFBV0QsRUFBT0MsU0FJakJ1RyxFQUE0QixDQUMvQkMsTUFBTSxFQUNOQyxLQUFLLEVBQ0xsRSxPQUFPLEVBQ1BtRSxVQUFVLEdBR1gsU0FBU0MsRUFBU0MsRUFBTUMsRUFBTUMsR0FHN0IsSUFBSWxKLEVBQUdtSixFQUNOQyxHQUhERixFQUFNQSxHQUFPOUcsR0FHQ3FDLGNBQWUsVUFHN0IsR0FEQTJFLEVBQU9DLEtBQU9MLEVBQ1RDLEVBQ0osSUFBTWpKLEtBQUsySSxHQVlWUSxFQUFNRixFQUFNakosSUFBT2lKLEVBQUtLLGNBQWdCTCxFQUFLSyxhQUFjdEosS0FFMURvSixFQUFPdEUsYUFBYzlFLEVBQUdtSixHQUkzQkQsRUFBSXJHLEtBQUtvQyxZQUFhbUUsR0FBU3hDLFdBQVdkLFlBQWFzRCxHQUl6RCxTQUFTRyxFQUFReEYsR0FDaEIsT0FBWSxNQUFQQSxFQUNHQSxFQUFNLEdBSVEsaUJBQVJBLEdBQW1DLG1CQUFSQSxFQUN4Q29FLEVBQVlsQixFQUFTOUcsS0FBTTRELEtBQVcsZ0JBQy9CQSxFQVFULElBSUN5RixFQUFTLFNBQVVDLEVBQVVDLEdBSTVCLE9BQU8sSUFBSUYsRUFBT0csR0FBR0MsS0FBTUgsRUFBVUMsSUEwVnZDLFNBQVNHLEVBQWE5RixHQU1yQixJQUFJWixJQUFXWSxHQUFPLFdBQVlBLEdBQU9BLEVBQUlaLE9BQzVDeUYsRUFBT1csRUFBUXhGLEdBRWhCLE9BQUt5RSxFQUFZekUsS0FBUzJFLEVBQVUzRSxLQUlwQixVQUFUNkUsR0FBK0IsSUFBWHpGLEdBQ1IsaUJBQVhBLEdBQXVCQSxFQUFTLEdBQU9BLEVBQVMsS0FBT1ksR0FyV2hFeUYsRUFBT0csR0FBS0gsRUFBTzVILFVBQVksQ0FHOUJrSSxPQWJVLFFBZVZDLFlBQWFQLEVBR2JyRyxPQUFRLEVBRVI2RyxRQUFTLFdBQ1IsT0FBT2xDLEVBQU0zSCxLQUFNc0gsT0FLcEI1RyxJQUFLLFNBQVVvSixHQUdkLE9BQVksTUFBUEEsRUFDR25DLEVBQU0zSCxLQUFNc0gsTUFJYndDLEVBQU0sRUFBSXhDLEtBQU13QyxFQUFNeEMsS0FBS3RFLFFBQVdzRSxLQUFNd0MsSUFLcERDLFVBQVcsU0FBVUMsR0FHcEIsSUFBSUMsRUFBTVosRUFBT2EsTUFBTzVDLEtBQUtzQyxjQUFlSSxHQU01QyxPQUhBQyxFQUFJRSxXQUFhN0MsS0FHVjJDLEdBSVJHLEtBQU0sU0FBVUMsR0FDZixPQUFPaEIsRUFBT2UsS0FBTTlDLEtBQU0rQyxJQUczQkMsSUFBSyxTQUFVRCxHQUNkLE9BQU8vQyxLQUFLeUMsVUFBV1YsRUFBT2lCLElBQUtoRCxNQUFNLFNBQVVpRCxFQUFNMUssR0FDeEQsT0FBT3dLLEVBQVNySyxLQUFNdUssRUFBTTFLLEVBQUcwSyxRQUlqQzVDLE1BQU8sV0FDTixPQUFPTCxLQUFLeUMsVUFBV3BDLEVBQU1HLE1BQU9SLEtBQU1rRCxhQUczQ0MsTUFBTyxXQUNOLE9BQU9uRCxLQUFLb0QsR0FBSSxJQUdqQkMsS0FBTSxXQUNMLE9BQU9yRCxLQUFLb0QsSUFBSyxJQUdsQkUsS0FBTSxXQUNMLE9BQU90RCxLQUFLeUMsVUFBV1YsRUFBT3dCLEtBQU12RCxNQUFNLFNBQVV3RCxFQUFPakwsR0FDMUQsT0FBU0EsRUFBSSxHQUFNLE9BSXJCa0wsSUFBSyxXQUNKLE9BQU96RCxLQUFLeUMsVUFBV1YsRUFBT3dCLEtBQU12RCxNQUFNLFNBQVV3RCxFQUFPakwsR0FDMUQsT0FBT0EsRUFBSSxPQUliNkssR0FBSSxTQUFVN0ssR0FDYixJQUFJbUwsRUFBTTFELEtBQUt0RSxPQUNkaUksR0FBS3BMLEdBQU1BLEVBQUksRUFBSW1MLEVBQU0sR0FDMUIsT0FBTzFELEtBQUt5QyxVQUFXa0IsR0FBSyxHQUFLQSxFQUFJRCxFQUFNLENBQUUxRCxLQUFNMkQsSUFBUSxLQUc1REMsSUFBSyxXQUNKLE9BQU81RCxLQUFLNkMsWUFBYzdDLEtBQUtzQyxlQUtoQzFGLEtBQU1BLEVBQ05pSCxLQUFNM0QsRUFBSTJELEtBQ1ZqRSxPQUFRTSxFQUFJTixRQUdibUMsRUFBTytCLE9BQVMvQixFQUFPRyxHQUFHNEIsT0FBUyxXQUNsQyxJQUFJakksRUFBUy9DLEVBQU1zSSxFQUFLMkMsRUFBTUMsRUFBYUMsRUFDMUNsSixFQUFTbUksVUFBVyxJQUFPLEdBQzNCM0ssRUFBSSxFQUNKbUQsRUFBU3dILFVBQVV4SCxPQUNuQndJLEdBQU8sRUFzQlIsSUFuQnVCLGtCQUFYbkosSUFDWG1KLEVBQU9uSixFQUdQQSxFQUFTbUksVUFBVzNLLElBQU8sR0FDM0JBLEtBSXNCLGlCQUFYd0MsR0FBd0JnRyxFQUFZaEcsS0FDL0NBLEVBQVMsSUFJTHhDLElBQU1tRCxJQUNWWCxFQUFTaUYsS0FDVHpILEtBR09BLEVBQUltRCxFQUFRbkQsSUFHbkIsR0FBcUMsT0FBOUJzRCxFQUFVcUgsVUFBVzNLLElBRzNCLElBQU1PLEtBQVErQyxFQUNia0ksRUFBT2xJLEVBQVMvQyxHQUlGLGNBQVRBLEdBQXdCaUMsSUFBV2dKLElBS25DRyxHQUFRSCxJQUFVaEMsRUFBT29DLGNBQWVKLEtBQzFDQyxFQUFjSSxNQUFNQyxRQUFTTixNQUMvQjNDLEVBQU1yRyxFQUFRakMsR0FJYm1MLEVBRElELElBQWdCSSxNQUFNQyxRQUFTakQsR0FDM0IsR0FDSTRDLEdBQWdCakMsRUFBT29DLGNBQWUvQyxHQUcxQ0EsRUFGQSxHQUlUNEMsR0FBYyxFQUdkakosRUFBUWpDLEdBQVNpSixFQUFPK0IsT0FBUUksRUFBTUQsRUFBT0YsU0FHekJPLElBQVRQLElBQ1hoSixFQUFRakMsR0FBU2lMLElBT3JCLE9BQU9oSixHQUdSZ0gsRUFBTytCLE9BQVEsQ0FHZFMsUUFBUyxVQWxMQyxRQWtMc0JDLEtBQUtDLFVBQVdDLFFBQVMsTUFBTyxJQUdoRUMsU0FBUyxFQUVUQyxNQUFPLFNBQVVDLEdBQ2hCLE1BQU0sSUFBSXRILE1BQU9zSCxJQUdsQkMsS0FBTSxhQUVOWCxjQUFlLFNBQVU3SCxHQUN4QixJQUFJeUksRUFBT0MsRUFJWCxTQUFNMUksR0FBZ0Msb0JBQXpCa0QsRUFBUzlHLEtBQU00RCxRQUk1QnlJLEVBQVE1RSxFQUFVN0QsS0FTSyxtQkFEdkIwSSxFQUFPckUsRUFBT2pJLEtBQU1xTSxFQUFPLGdCQUFtQkEsRUFBTXpDLGNBQ2YxQixFQUFXbEksS0FBTXNNLEtBQVduRSxJQUdsRW9FLGNBQWUsU0FBVTNJLEdBQ3hCLElBQUl4RCxFQUVKLElBQU1BLEtBQVF3RCxFQUNiLE9BQU8sRUFFUixPQUFPLEdBS1I0SSxXQUFZLFNBQVUzRCxFQUFNMUYsRUFBUzRGLEdBQ3BDSCxFQUFTQyxFQUFNLENBQUVyRSxNQUFPckIsR0FBV0EsRUFBUXFCLE9BQVN1RSxJQUdyRHFCLEtBQU0sU0FBVXhHLEVBQUt5RyxHQUNwQixJQUFJckgsRUFBUW5ELEVBQUksRUFFaEIsR0FBSzZKLEVBQWE5RixHQUVqQixJQURBWixFQUFTWSxFQUFJWixPQUNMbkQsRUFBSW1ELElBQ3FDLElBQTNDcUgsRUFBU3JLLEtBQU00RCxFQUFLL0QsR0FBS0EsRUFBRytELEVBQUsvRCxJQURuQkEsVUFNcEIsSUFBTUEsS0FBSytELEVBQ1YsSUFBZ0QsSUFBM0N5RyxFQUFTckssS0FBTTRELEVBQUsvRCxHQUFLQSxFQUFHK0QsRUFBSy9ELElBQ3JDLE1BS0gsT0FBTytELEdBSVI2SSxVQUFXLFNBQVVqRixFQUFLa0YsR0FDekIsSUFBSXpDLEVBQU15QyxHQUFXLEdBYXJCLE9BWFksTUFBUGxGLElBQ0NrQyxFQUFhbkosT0FBUWlILElBQ3pCNkIsRUFBT2EsTUFBT0QsRUFDRSxpQkFBUnpDLEVBQ1AsQ0FBRUEsR0FBUUEsR0FHWHRELEVBQUtsRSxLQUFNaUssRUFBS3pDLElBSVh5QyxHQUdSMEMsUUFBUyxTQUFVcEMsRUFBTS9DLEVBQUszSCxHQUM3QixPQUFjLE1BQVAySCxHQUFlLEVBQUlPLEVBQVEvSCxLQUFNd0gsRUFBSytDLEVBQU0xSyxJQUtwRHFLLE1BQU8sU0FBVU8sRUFBT21DLEdBS3ZCLElBSkEsSUFBSTVCLEdBQU80QixFQUFPNUosT0FDakJpSSxFQUFJLEVBQ0pwTCxFQUFJNEssRUFBTXpILE9BRUhpSSxFQUFJRCxFQUFLQyxJQUNoQlIsRUFBTzVLLEtBQVErTSxFQUFRM0IsR0FLeEIsT0FGQVIsRUFBTXpILE9BQVNuRCxFQUVSNEssR0FHUkksS0FBTSxTQUFVYixFQUFPSyxFQUFVd0MsR0FTaEMsSUFSQSxJQUNDQyxFQUFVLEdBQ1ZqTixFQUFJLEVBQ0ptRCxFQUFTZ0gsRUFBTWhILE9BQ2YrSixHQUFrQkYsRUFJWGhOLEVBQUltRCxFQUFRbkQsS0FDQXdLLEVBQVVMLEVBQU9uSyxHQUFLQSxLQUNoQmtOLEdBQ3hCRCxFQUFRNUksS0FBTThGLEVBQU9uSyxJQUl2QixPQUFPaU4sR0FJUnhDLElBQUssU0FBVU4sRUFBT0ssRUFBVTJDLEdBQy9CLElBQUloSyxFQUFRbEMsRUFDWGpCLEVBQUksRUFDSm9LLEVBQU0sR0FHUCxHQUFLUCxFQUFhTSxHQUVqQixJQURBaEgsRUFBU2dILEVBQU1oSCxPQUNQbkQsRUFBSW1ELEVBQVFuRCxJQUdMLE9BRmRpQixFQUFRdUosRUFBVUwsRUFBT25LLEdBQUtBLEVBQUdtTixLQUdoQy9DLEVBQUkvRixLQUFNcEQsUUFNWixJQUFNakIsS0FBS21LLEVBR0ksT0FGZGxKLEVBQVF1SixFQUFVTCxFQUFPbkssR0FBS0EsRUFBR21OLEtBR2hDL0MsRUFBSS9GLEtBQU1wRCxHQU1iLE9BQU84RyxFQUFNcUMsSUFJZGdELEtBQU0sRUFJTjdFLFFBQVNBLElBR2EsbUJBQVh4SCxTQUNYeUksRUFBT0csR0FBSTVJLE9BQU9zTSxVQUFhMUYsRUFBSzVHLE9BQU9zTSxXQUk1QzdELEVBQU9lLEtBQU0sdUVBQXVFK0MsTUFBTyxNQUMzRixTQUFVbkcsRUFBSTVHLEdBQ2I0SCxFQUFZLFdBQWE1SCxFQUFPLEtBQVFBLEVBQUtnTixpQkFtQjlDLElBQUlDOzs7Ozs7Ozs7OztBQVdKLFNBQVlyTCxHQUNaLElBQUluQyxFQUNIdUksRUFDQWtGLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBR0FDLEVBQ0E5TCxFQUNBK0wsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQXJCLEVBQ0FzQixFQUdBdkMsRUFBVSxTQUFXLEVBQUksSUFBSXdDLEtBQzdCQyxFQUFldE0sRUFBT0MsU0FDdEJzTSxFQUFVLEVBQ1ZDLEVBQU8sRUFDUEMsRUFBYUMsS0FDYkMsRUFBYUQsS0FDYkUsRUFBZ0JGLEtBQ2hCRyxFQUF5QkgsS0FDekJJLEVBQVksU0FBVUMsRUFBR0MsR0FJeEIsT0FIS0QsSUFBTUMsSUFDVmxCLEdBQWUsR0FFVCxHQUlSN0YsRUFBUyxHQUFPdkcsZUFDaEI4RixFQUFNLEdBQ055SCxFQUFNekgsRUFBSXlILElBQ1ZDLEVBQWExSCxFQUFJdEQsS0FDakJBLEVBQU9zRCxFQUFJdEQsS0FDWHlELEVBQVFILEVBQUlHLE1BSVpJLEVBQVUsU0FBVTdFLEVBQU1xSCxHQUd6QixJQUZBLElBQUkxSyxFQUFJLEVBQ1BtTCxFQUFNOUgsRUFBS0YsT0FDSm5ELEVBQUltTCxFQUFLbkwsSUFDaEIsR0FBS3FELEVBQU1yRCxLQUFRMEssRUFDbEIsT0FBTzFLLEVBR1QsT0FBUSxHQUdUc1AsRUFBVyw2SEFNWEMsRUFBYSxzQkFHYnRNLEVBQWEsMEJBQTRCc00sRUFDeEMsMENBR0Q3SyxFQUFhLE1BQVE2SyxFQUFhLEtBQU90TSxFQUFhLE9BQVNzTSxFQUc5RCxnQkFBa0JBLEVBSWxCLDJEQUE2RHRNLEVBQWEsT0FDMUVzTSxFQUFhLE9BRWRDLEVBQVUsS0FBT3ZNLEVBQVAsd0ZBT29CeUIsRUFQcEIsZUFjVitLLEVBQWMsSUFBSUMsT0FBUUgsRUFBYSxJQUFLLEtBQzVDSSxFQUFRLElBQUlELE9BQVEsSUFBTUgsRUFBYSw4QkFDdENBLEVBQWEsS0FBTSxLQUVwQkssRUFBUyxJQUFJRixPQUFRLElBQU1ILEVBQWEsS0FBT0EsRUFBYSxLQUM1RE0sRUFBZSxJQUFJSCxPQUFRLElBQU1ILEVBQWEsV0FBYUEsRUFBYSxJQUFNQSxFQUM3RSxLQUNETyxFQUFXLElBQUlKLE9BQVFILEVBQWEsTUFFcENRLEVBQVUsSUFBSUwsT0FBUUYsR0FDdEJRLEVBQWMsSUFBSU4sT0FBUSxJQUFNek0sRUFBYSxLQUU3Q2dOLEVBQVksQ0FDWCxHQUFNLElBQUlQLE9BQVEsTUFBUXpNLEVBQWEsS0FDdkMsTUFBUyxJQUFJeU0sT0FBUSxRQUFVek0sRUFBYSxLQUM1QyxJQUFPLElBQUl5TSxPQUFRLEtBQU96TSxFQUFhLFNBQ3ZDLEtBQVEsSUFBSXlNLE9BQVEsSUFBTWhMLEdBQzFCLE9BQVUsSUFBSWdMLE9BQVEsSUFBTUYsR0FDNUIsTUFBUyxJQUFJRSxPQUFRLHlEQUNwQkgsRUFBYSwrQkFBaUNBLEVBQWEsY0FDM0RBLEVBQWEsYUFBZUEsRUFBYSxTQUFVLEtBQ3BELEtBQVEsSUFBSUcsT0FBUSxPQUFTSixFQUFXLEtBQU0sS0FJOUMsYUFBZ0IsSUFBSUksT0FBUSxJQUFNSCxFQUNqQyxtREFBcURBLEVBQ3JELG1CQUFxQkEsRUFBYSxtQkFBb0IsTUFHeERXLEVBQVEsU0FDUkMsRUFBVSxzQ0FDVkMsRUFBVSxTQUVWQyxFQUFVLHlCQUdWQyxFQUFhLG1DQUViQyxHQUFXLE9BSVhDLEdBQVksSUFBSWQsT0FBUSx1QkFBeUJILEVBQWEsdUJBQXdCLEtBQ3RGa0IsR0FBWSxTQUFVQyxFQUFRQyxHQUM3QixJQUFJQyxFQUFPLEtBQU9GLEVBQU81SSxNQUFPLEdBQU0sTUFFdEMsT0FBTzZJLElBU05DLEVBQU8sRUFDTkMsT0FBT0MsYUFBY0YsRUFBTyxPQUM1QkMsT0FBT0MsYUFBY0YsR0FBUSxHQUFLLE1BQWUsS0FBUEEsRUFBZSxTQUs1REcsR0FBYSxzREFDYkMsR0FBYSxTQUFVQyxFQUFJQyxHQUMxQixPQUFLQSxFQUdRLE9BQVBELEVBQ0csSUFJREEsRUFBR25KLE1BQU8sR0FBSSxHQUFNLEtBQzFCbUosRUFBR0UsV0FBWUYsRUFBRzlOLE9BQVMsR0FBSThELFNBQVUsSUFBTyxJQUkzQyxLQUFPZ0ssR0FPZkcsR0FBZ0IsV0FDZmxELEtBR0RtRCxHQUFxQkMsSUFDcEIsU0FBVTVHLEdBQ1QsT0FBeUIsSUFBbEJBLEVBQUs2RyxVQUFxRCxhQUFoQzdHLEVBQUs4RyxTQUFTakUsZ0JBRWhELENBQUVrRSxJQUFLLGFBQWNDLEtBQU0sV0FJN0IsSUFDQ3JOLEVBQUs0RCxNQUNGTixFQUFNRyxFQUFNM0gsS0FBTXNPLEVBQWE1SSxZQUNqQzRJLEVBQWE1SSxZQU1kOEIsRUFBSzhHLEVBQWE1SSxXQUFXMUMsUUFBU3NGLFNBQ3JDLE1BQVEzRixHQUNUdUIsRUFBTyxDQUFFNEQsTUFBT04sRUFBSXhFLE9BR25CLFNBQVVYLEVBQVFtUCxHQUNqQnRDLEVBQVdwSCxNQUFPekYsRUFBUXNGLEVBQU0zSCxLQUFNd1IsS0FLdkMsU0FBVW5QLEVBQVFtUCxHQUtqQixJQUpBLElBQUl2RyxFQUFJNUksRUFBT1csT0FDZG5ELEVBQUksRUFHS3dDLEVBQVE0SSxLQUFRdUcsRUFBSzNSLE9BQy9Cd0MsRUFBT1csT0FBU2lJLEVBQUksSUFLdkIsU0FBU29DLEdBQVEvRCxFQUFVQyxFQUFTbUQsRUFBUytFLEdBQzVDLElBQUl4UixFQUFHSixFQUFHMEssRUFBTW1ILEVBQUtDLEVBQU9DLEVBQVFDLEVBQ25DQyxFQUFhdkksR0FBV0EsRUFBUXdJLGNBR2hDekosRUFBV2lCLEVBQVVBLEVBQVFqQixTQUFXLEVBS3pDLEdBSEFvRSxFQUFVQSxHQUFXLEdBR0ksaUJBQWJwRCxJQUEwQkEsR0FDeEIsSUFBYmhCLEdBQStCLElBQWJBLEdBQStCLEtBQWJBLEVBRXBDLE9BQU9vRSxFQUlSLElBQU0rRSxJQUNMMUQsRUFBYXhFLEdBQ2JBLEVBQVVBLEdBQVd0SCxFQUVoQmdNLEdBQWlCLENBSXJCLEdBQWtCLEtBQWIzRixJQUFxQnFKLEVBQVF4QixFQUFXNkIsS0FBTTFJLElBR2xELEdBQU9ySixFQUFJMFIsRUFBTyxJQUdqQixHQUFrQixJQUFickosRUFBaUIsQ0FDckIsS0FBT2lDLEVBQU9oQixFQUFRMEksZUFBZ0JoUyxJQVVyQyxPQUFPeU0sRUFMUCxHQUFLbkMsRUFBS2hILEtBQU90RCxFQUVoQixPQURBeU0sRUFBUXhJLEtBQU1xRyxHQUNQbUMsT0FZVCxHQUFLb0YsSUFBZ0J2SCxFQUFPdUgsRUFBV0csZUFBZ0JoUyxLQUN0RG1PLEVBQVU3RSxFQUFTZ0IsSUFDbkJBLEVBQUtoSCxLQUFPdEQsRUFHWixPQURBeU0sRUFBUXhJLEtBQU1xRyxHQUNQbUMsTUFLSCxJQUFLaUYsRUFBTyxHQUVsQixPQURBek4sRUFBSzRELE1BQU80RSxFQUFTbkQsRUFBUTJJLHFCQUFzQjVJLElBQzVDb0QsRUFHRCxJQUFPek0sRUFBSTBSLEVBQU8sS0FBU3ZKLEVBQVErSix3QkFDekM1SSxFQUFRNEksdUJBR1IsT0FEQWpPLEVBQUs0RCxNQUFPNEUsRUFBU25ELEVBQVE0SSx1QkFBd0JsUyxJQUM5Q3lNLEVBS1QsR0FBS3RFLEVBQVFnSyxNQUNYdkQsRUFBd0J2RixFQUFXLFFBQ2pDNEUsSUFBY0EsRUFBVW1FLEtBQU0vSSxNQUlsQixJQUFiaEIsR0FBcUQsV0FBbkNpQixFQUFROEgsU0FBU2pFLGVBQStCLENBWXBFLEdBVkF5RSxFQUFjdkksRUFDZHdJLEVBQWF2SSxFQVNLLElBQWJqQixJQUNGcUgsRUFBUzBDLEtBQU0vSSxJQUFjb0csRUFBYTJDLEtBQU0vSSxJQUFlLENBcUJqRSxLQWxCQXdJLEVBQWExQixHQUFTaUMsS0FBTS9JLElBQWNnSixHQUFhL0ksRUFBUTlDLGFBQzlEOEMsS0FJbUJBLEdBQVluQixFQUFRbUssU0FHaENiLEVBQU1uSSxFQUFRSixhQUFjLE9BQ2xDdUksRUFBTUEsRUFBSTFGLFFBQVM0RSxHQUFZQyxJQUUvQnRILEVBQVE1RSxhQUFjLEtBQVErTSxFQUFNN0YsSUFNdENoTSxHQURBK1IsRUFBU25FLEVBQVVuRSxJQUNSdEcsT0FDSG5ELEtBQ1ArUixFQUFRL1IsSUFBUTZSLEVBQU0sSUFBTUEsRUFBTSxVQUFhLElBQzlDYyxHQUFZWixFQUFRL1IsSUFFdEJnUyxFQUFjRCxFQUFPek0sS0FBTSxLQUc1QixJQUlDLE9BSEFqQixFQUFLNEQsTUFBTzRFLEVBQ1hvRixFQUFXVyxpQkFBa0JaLElBRXZCbkYsRUFDTixNQUFRZ0csR0FDVDdELEVBQXdCdkYsR0FBVSxHQUNqQyxRQUNJb0ksSUFBUTdGLEdBQ1p0QyxFQUFRekQsZ0JBQWlCLFFBUTlCLE9BQU82SCxFQUFRckUsRUFBUzBDLFFBQVN3RCxFQUFPLE1BQVFqRyxFQUFTbUQsRUFBUytFLEdBU25FLFNBQVMvQyxLQUNSLElBQUlqSyxFQUFPLEdBWVgsT0FWQSxTQUFTa08sRUFBT3ZSLEVBQUtOLEdBUXBCLE9BTEsyRCxFQUFLUCxLQUFNOUMsRUFBTSxLQUFRa00sRUFBS3NGLG9CQUczQkQsRUFBT2xPLEVBQUtvTyxTQUVYRixFQUFPdlIsRUFBTSxLQUFRTixHQVNoQyxTQUFTZ1MsR0FBY3RKLEdBRXRCLE9BREFBLEVBQUlxQyxJQUFZLEVBQ1RyQyxFQU9SLFNBQVN1SixHQUFRdkosR0FDaEIsSUFBSXdKLEVBQUsvUSxFQUFTcUMsY0FBZSxZQUVqQyxJQUNDLFFBQVNrRixFQUFJd0osR0FDWixNQUFRclEsR0FDVCxPQUFPLEVBQ04sUUFHSXFRLEVBQUd2TSxZQUNQdU0sRUFBR3ZNLFdBQVdkLFlBQWFxTixHQUk1QkEsRUFBSyxNQVNQLFNBQVNDLEdBQVdDLEVBQU9DLEdBSTFCLElBSEEsSUFBSTNMLEVBQU0wTCxFQUFNL0YsTUFBTyxLQUN0QnROLEVBQUkySCxFQUFJeEUsT0FFRG5ELEtBQ1B5TixFQUFLOEYsV0FBWTVMLEVBQUszSCxJQUFRc1QsRUFVaEMsU0FBU0UsR0FBY3RFLEVBQUdDLEdBQ3pCLElBQUlzRSxFQUFNdEUsR0FBS0QsRUFDZHdFLEVBQU9ELEdBQXNCLElBQWZ2RSxFQUFFekcsVUFBaUMsSUFBZjBHLEVBQUUxRyxVQUNuQ3lHLEVBQUV5RSxZQUFjeEUsRUFBRXdFLFlBR3BCLEdBQUtELEVBQ0osT0FBT0EsRUFJUixHQUFLRCxFQUNKLEtBQVVBLEVBQU1BLEVBQUlHLGFBQ25CLEdBQUtILElBQVF0RSxFQUNaLE9BQVEsRUFLWCxPQUFPRCxFQUFJLEdBQUssRUFPakIsU0FBUzJFLEdBQW1CakwsR0FDM0IsT0FBTyxTQUFVOEIsR0FFaEIsTUFBZ0IsVUFETEEsRUFBSzhHLFNBQVNqRSxlQUNFN0MsRUFBSzlCLE9BQVNBLEdBUTNDLFNBQVNrTCxHQUFvQmxMLEdBQzVCLE9BQU8sU0FBVThCLEdBQ2hCLElBQUluSyxFQUFPbUssRUFBSzhHLFNBQVNqRSxjQUN6QixPQUFrQixVQUFUaE4sR0FBNkIsV0FBVEEsSUFBdUJtSyxFQUFLOUIsT0FBU0EsR0FRcEUsU0FBU21MLEdBQXNCeEMsR0FHOUIsT0FBTyxTQUFVN0csR0FLaEIsTUFBSyxTQUFVQSxFQVNUQSxFQUFLOUQsYUFBZ0MsSUFBbEI4RCxFQUFLNkcsU0FHdkIsVUFBVzdHLEVBQ1YsVUFBV0EsRUFBSzlELFdBQ2I4RCxFQUFLOUQsV0FBVzJLLFdBQWFBLEVBRTdCN0csRUFBSzZHLFdBQWFBLEVBTXBCN0csRUFBS3NKLGFBQWV6QyxHQUkxQjdHLEVBQUtzSixjQUFnQnpDLEdBQ3JCRixHQUFvQjNHLEtBQVc2RyxFQUcxQjdHLEVBQUs2RyxXQUFhQSxFQUtkLFVBQVc3RyxHQUNmQSxFQUFLNkcsV0FBYUEsR0FZNUIsU0FBUzBDLEdBQXdCdEssR0FDaEMsT0FBT3NKLElBQWMsU0FBVWlCLEdBRTlCLE9BREFBLEdBQVlBLEVBQ0xqQixJQUFjLFNBQVVyQixFQUFNM0UsR0FNcEMsSUFMQSxJQUFJN0IsRUFDSCtJLEVBQWV4SyxFQUFJLEdBQUlpSSxFQUFLek8sT0FBUStRLEdBQ3BDbFUsRUFBSW1VLEVBQWFoUixPQUdWbkQsS0FDRjRSLEVBQVF4RyxFQUFJK0ksRUFBY25VLE1BQzlCNFIsRUFBTXhHLEtBQVM2QixFQUFTN0IsR0FBTXdHLEVBQU14RyxXQVl6QyxTQUFTcUgsR0FBYS9JLEdBQ3JCLE9BQU9BLFFBQW1ELElBQWpDQSxFQUFRMkksc0JBQXdDM0ksRUFrckMxRSxJQUFNMUosS0E5cUNOdUksRUFBVWlGLEdBQU9qRixRQUFVLEdBTzNCb0YsRUFBUUgsR0FBT0csTUFBUSxTQUFVakQsR0FDaEMsSUFBSTBKLEVBQVkxSixFQUFLMkosYUFDcEJsRyxHQUFZekQsRUFBS3dILGVBQWlCeEgsR0FBTzRKLGdCQUsxQyxPQUFRcEUsRUFBTXNDLEtBQU00QixHQUFhakcsR0FBV0EsRUFBUXFELFVBQVksU0FRakV0RCxFQUFjVixHQUFPVSxZQUFjLFNBQVVqRixHQUM1QyxJQUFJc0wsRUFBWUMsRUFDZnRMLEVBQU1ELEVBQU9BLEVBQUtpSixlQUFpQmpKLEVBQU93RixFQU8zQyxPQUFLdkYsR0FBTzlHLEdBQTZCLElBQWpCOEcsRUFBSVQsVUFBbUJTLEVBQUlvTCxpQkFNbkRuRyxHQURBL0wsRUFBVzhHLEdBQ1FvTCxnQkFDbkJsRyxHQUFrQlQsRUFBT3ZMLEdBUXBCcU0sR0FBZ0JyTSxJQUNsQm9TLEVBQVlwUyxFQUFTcVMsY0FBaUJELEVBQVVFLE1BQVFGLElBR3JEQSxFQUFVRyxpQkFDZEgsRUFBVUcsaUJBQWtCLFNBQVV2RCxJQUFlLEdBRzFDb0QsRUFBVUksYUFDckJKLEVBQVVJLFlBQWEsV0FBWXhELEtBU3JDN0ksRUFBUW1LLE1BQVFRLElBQVEsU0FBVUMsR0FFakMsT0FEQWhGLEVBQVFsSixZQUFha08sR0FBS2xPLFlBQWE3QyxFQUFTcUMsY0FBZSxhQUN6QixJQUF4QjBPLEVBQUdQLG1CQUNmTyxFQUFHUCxpQkFBa0IsdUJBQXdCelAsVUFTaERvRixFQUFRN0QsV0FBYXdPLElBQVEsU0FBVUMsR0FFdEMsT0FEQUEsRUFBRzBCLFVBQVksS0FDUDFCLEVBQUc3SixhQUFjLGdCQU8xQmYsRUFBUThKLHFCQUF1QmEsSUFBUSxTQUFVQyxHQUVoRCxPQURBQSxFQUFHbE8sWUFBYTdDLEVBQVMwUyxjQUFlLE1BQ2hDM0IsRUFBR2QscUJBQXNCLEtBQU1sUCxVQUl4Q29GLEVBQVErSix1QkFBeUJqQyxFQUFRbUMsS0FBTXBRLEVBQVNrUSx3QkFNeEQvSixFQUFRd00sUUFBVTdCLElBQVEsU0FBVUMsR0FFbkMsT0FEQWhGLEVBQVFsSixZQUFha08sR0FBS3pQLEdBQUtzSSxHQUN2QjVKLEVBQVM0UyxvQkFBc0I1UyxFQUFTNFMsa0JBQW1CaEosR0FBVTdJLFVBSXpFb0YsRUFBUXdNLFNBQ1p0SCxFQUFLcEksT0FBYSxHQUFJLFNBQVUzQixHQUMvQixJQUFJdVIsRUFBU3ZSLEVBQUd5SSxRQUFTcUUsR0FBV0MsSUFDcEMsT0FBTyxTQUFVL0YsR0FDaEIsT0FBT0EsRUFBS3BCLGFBQWMsUUFBVzJMLElBR3ZDeEgsRUFBS3lILEtBQVcsR0FBSSxTQUFVeFIsRUFBSWdHLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFRMEksZ0JBQWtDaEUsRUFBaUIsQ0FDdEUsSUFBSTFELEVBQU9oQixFQUFRMEksZUFBZ0IxTyxHQUNuQyxPQUFPZ0gsRUFBTyxDQUFFQSxHQUFTLE9BSTNCK0MsRUFBS3BJLE9BQWEsR0FBSyxTQUFVM0IsR0FDaEMsSUFBSXVSLEVBQVN2UixFQUFHeUksUUFBU3FFLEdBQVdDLElBQ3BDLE9BQU8sU0FBVS9GLEdBQ2hCLElBQUl6QixPQUF3QyxJQUExQnlCLEVBQUt5SyxrQkFDdEJ6SyxFQUFLeUssaUJBQWtCLE1BQ3hCLE9BQU9sTSxHQUFRQSxFQUFLaEksUUFBVWdVLElBTWhDeEgsRUFBS3lILEtBQVcsR0FBSSxTQUFVeFIsRUFBSWdHLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFRMEksZ0JBQWtDaEUsRUFBaUIsQ0FDdEUsSUFBSW5GLEVBQU1qSixFQUFHbUssRUFDWk8sRUFBT2hCLEVBQVEwSSxlQUFnQjFPLEdBRWhDLEdBQUtnSCxFQUFPLENBSVgsSUFEQXpCLEVBQU95QixFQUFLeUssaUJBQWtCLFFBQ2pCbE0sRUFBS2hJLFFBQVV5QyxFQUMzQixNQUFPLENBQUVnSCxHQU1WLElBRkFQLEVBQVFULEVBQVFzTCxrQkFBbUJ0UixHQUNuQzFELEVBQUksRUFDTTBLLEVBQU9QLEVBQU9uSyxNQUV2QixJQURBaUosRUFBT3lCLEVBQUt5SyxpQkFBa0IsUUFDakJsTSxFQUFLaEksUUFBVXlDLEVBQzNCLE1BQU8sQ0FBRWdILEdBS1osTUFBTyxNQU1WK0MsRUFBS3lILEtBQVksSUFBSTNNLEVBQVE4SixxQkFDNUIsU0FBVStDLEVBQUsxTCxHQUNkLFlBQTZDLElBQWpDQSxFQUFRMkkscUJBQ1ozSSxFQUFRMkkscUJBQXNCK0MsR0FHMUI3TSxFQUFRZ0ssSUFDWjdJLEVBQVFrSixpQkFBa0J3QyxRQUQzQixHQUtSLFNBQVVBLEVBQUsxTCxHQUNkLElBQUlnQixFQUNIMkssRUFBTSxHQUNOclYsRUFBSSxFQUdKNk0sRUFBVW5ELEVBQVEySSxxQkFBc0IrQyxHQUd6QyxHQUFhLE1BQVJBLEVBQWMsQ0FDbEIsS0FBVTFLLEVBQU9tQyxFQUFTN00sTUFDRixJQUFsQjBLLEVBQUtqQyxVQUNUNE0sRUFBSWhSLEtBQU1xRyxHQUlaLE9BQU8ySyxFQUVSLE9BQU94SSxHQUlUWSxFQUFLeUgsS0FBYyxNQUFJM00sRUFBUStKLHdCQUEwQixTQUFVdUMsRUFBV25MLEdBQzdFLFFBQStDLElBQW5DQSxFQUFRNEksd0JBQTBDbEUsRUFDN0QsT0FBTzFFLEVBQVE0SSx1QkFBd0J1QyxJQVV6Q3ZHLEVBQWdCLEdBT2hCRCxFQUFZLElBRUw5RixFQUFRZ0ssSUFBTWxDLEVBQVFtQyxLQUFNcFEsRUFBU3dRLHFCQUkzQ00sSUFBUSxTQUFVQyxHQUVqQixJQUFJbUMsRUFPSm5ILEVBQVFsSixZQUFha08sR0FBS29DLFVBQVksVUFBWXZKLEVBQVoscUJBQ3BCQSxFQURvQixrRUFRakNtSCxFQUFHUCxpQkFBa0Isd0JBQXlCelAsUUFDbERrTCxFQUFVaEssS0FBTSxTQUFXa0wsRUFBYSxnQkFLbkM0RCxFQUFHUCxpQkFBa0IsY0FBZXpQLFFBQ3pDa0wsRUFBVWhLLEtBQU0sTUFBUWtMLEVBQWEsYUFBZUQsRUFBVyxLQUkxRDZELEVBQUdQLGlCQUFrQixRQUFVNUcsRUFBVSxNQUFPN0ksUUFDckRrTCxFQUFVaEssS0FBTSxPQVFqQmlSLEVBQVFsVCxFQUFTcUMsY0FBZSxVQUMxQkssYUFBYyxPQUFRLElBQzVCcU8sRUFBR2xPLFlBQWFxUSxHQUNWbkMsRUFBR1AsaUJBQWtCLGFBQWN6UCxRQUN4Q2tMLEVBQVVoSyxLQUFNLE1BQVFrTCxFQUFhLFFBQVVBLEVBQWEsS0FDM0RBLEVBQWEsZ0JBTVQ0RCxFQUFHUCxpQkFBa0IsWUFBYXpQLFFBQ3ZDa0wsRUFBVWhLLEtBQU0sWUFNWDhPLEVBQUdQLGlCQUFrQixLQUFPNUcsRUFBVSxNQUFPN0ksUUFDbERrTCxFQUFVaEssS0FBTSxZQUtqQjhPLEVBQUdQLGlCQUFrQixRQUNyQnZFLEVBQVVoSyxLQUFNLGtCQUdqQjZPLElBQVEsU0FBVUMsR0FDakJBLEVBQUdvQyxVQUFZLG9GQUtmLElBQUlELEVBQVFsVCxFQUFTcUMsY0FBZSxTQUNwQzZRLEVBQU14USxhQUFjLE9BQVEsVUFDNUJxTyxFQUFHbE8sWUFBYXFRLEdBQVF4USxhQUFjLE9BQVEsS0FJekNxTyxFQUFHUCxpQkFBa0IsWUFBYXpQLFFBQ3RDa0wsRUFBVWhLLEtBQU0sT0FBU2tMLEVBQWEsZUFLVyxJQUE3QzRELEVBQUdQLGlCQUFrQixZQUFhelAsUUFDdENrTCxFQUFVaEssS0FBTSxXQUFZLGFBSzdCOEosRUFBUWxKLFlBQWFrTyxHQUFLNUIsVUFBVyxFQUNjLElBQTlDNEIsRUFBR1AsaUJBQWtCLGFBQWN6UCxRQUN2Q2tMLEVBQVVoSyxLQUFNLFdBQVksYUFLN0I4TyxFQUFHUCxpQkFBa0IsUUFDckJ2RSxFQUFVaEssS0FBTSxhQUlYa0UsRUFBUWlOLGdCQUFrQm5GLEVBQVFtQyxLQUFRdkYsRUFBVWtCLEVBQVFsQixTQUNsRWtCLEVBQVFzSCx1QkFDUnRILEVBQVF1SCxvQkFDUnZILEVBQVF3SCxrQkFDUnhILEVBQVF5SCxxQkFFUjFDLElBQVEsU0FBVUMsR0FJakI1SyxFQUFRc04sa0JBQW9CNUksRUFBUTlNLEtBQU1nVCxFQUFJLEtBSTlDbEcsRUFBUTlNLEtBQU1nVCxFQUFJLGFBQ2xCN0UsRUFBY2pLLEtBQU0sS0FBTW1MLE1BSTVCbkIsRUFBWUEsRUFBVWxMLFFBQVUsSUFBSXVNLE9BQVFyQixFQUFVL0ksS0FBTSxNQUM1RGdKLEVBQWdCQSxFQUFjbkwsUUFBVSxJQUFJdU0sT0FBUXBCLEVBQWNoSixLQUFNLE1BSXhFaVAsRUFBYWxFLEVBQVFtQyxLQUFNckUsRUFBUTJILHlCQUtuQ3ZILEVBQVdnRyxHQUFjbEUsRUFBUW1DLEtBQU1yRSxFQUFRSSxVQUM5QyxTQUFVVyxFQUFHQyxHQUNaLElBQUk0RyxFQUF1QixJQUFmN0csRUFBRXpHLFNBQWlCeUcsRUFBRW9GLGdCQUFrQnBGLEVBQ2xEOEcsRUFBTTdHLEdBQUtBLEVBQUV2SSxXQUNkLE9BQU9zSSxJQUFNOEcsTUFBV0EsR0FBd0IsSUFBakJBLEVBQUl2TixZQUNsQ3NOLEVBQU14SCxTQUNMd0gsRUFBTXhILFNBQVV5SCxHQUNoQjlHLEVBQUU0Ryx5QkFBOEQsR0FBbkM1RyxFQUFFNEcsd0JBQXlCRSxNQUczRCxTQUFVOUcsRUFBR0MsR0FDWixHQUFLQSxFQUNKLEtBQVVBLEVBQUlBLEVBQUV2SSxZQUNmLEdBQUt1SSxJQUFNRCxFQUNWLE9BQU8sRUFJVixPQUFPLEdBT1RELEVBQVlzRixFQUNaLFNBQVVyRixFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWxCLEdBQWUsRUFDUixFQUlSLElBQUlnSSxHQUFXL0csRUFBRTRHLHlCQUEyQjNHLEVBQUUyRyx3QkFDOUMsT0FBS0csSUFnQlUsR0FQZkEsR0FBWS9HLEVBQUVnRCxlQUFpQmhELEtBQVNDLEVBQUUrQyxlQUFpQi9DLEdBQzFERCxFQUFFNEcsd0JBQXlCM0csR0FHM0IsS0FJRzVHLEVBQVEyTixjQUFnQi9HLEVBQUUyRyx3QkFBeUI1RyxLQUFRK0csRUFPekQvRyxHQUFLOU0sR0FBWThNLEVBQUVnRCxlQUFpQnpELEdBQ3hDRixFQUFVRSxFQUFjUyxJQUNoQixFQU9KQyxHQUFLL00sR0FBWStNLEVBQUUrQyxlQUFpQnpELEdBQ3hDRixFQUFVRSxFQUFjVSxHQUNqQixFQUlEbkIsRUFDSjlGLEVBQVM4RixFQUFXa0IsR0FBTWhILEVBQVM4RixFQUFXbUIsR0FDaEQsRUFHZSxFQUFWOEcsR0FBZSxFQUFJLElBRTNCLFNBQVUvRyxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWxCLEdBQWUsRUFDUixFQUdSLElBQUl3RixFQUNIelQsRUFBSSxFQUNKbVcsRUFBTWpILEVBQUV0SSxXQUNSb1AsRUFBTTdHLEVBQUV2SSxXQUNSd1AsRUFBSyxDQUFFbEgsR0FDUG1ILEVBQUssQ0FBRWxILEdBR1IsSUFBTWdILElBQVFILEVBTWIsT0FBTzlHLEdBQUs5TSxHQUFZLEVBQ3ZCK00sR0FBSy9NLEVBQVcsRUFFaEIrVCxHQUFPLEVBQ1BILEVBQU0sRUFDTmhJLEVBQ0U5RixFQUFTOEYsRUFBV2tCLEdBQU1oSCxFQUFTOEYsRUFBV21CLEdBQ2hELEVBR0ssR0FBS2dILElBQVFILEVBQ25CLE9BQU94QyxHQUFjdEUsRUFBR0MsR0FLekIsSUFEQXNFLEVBQU12RSxFQUNJdUUsRUFBTUEsRUFBSTdNLFlBQ25Cd1AsRUFBR0UsUUFBUzdDLEdBR2IsSUFEQUEsRUFBTXRFLEVBQ0lzRSxFQUFNQSxFQUFJN00sWUFDbkJ5UCxFQUFHQyxRQUFTN0MsR0FJYixLQUFRMkMsRUFBSXBXLEtBQVFxVyxFQUFJclcsSUFDdkJBLElBR0QsT0FBT0EsRUFHTndULEdBQWM0QyxFQUFJcFcsR0FBS3FXLEVBQUlyVyxJQU8zQm9XLEVBQUlwVyxJQUFPeU8sR0FBZ0IsRUFDM0I0SCxFQUFJclcsSUFBT3lPLEVBQWUsRUFFMUIsR0FHS3JNLEdBL2NDQSxHQWtkVG9MLEdBQU9QLFFBQVUsU0FBVXNKLEVBQU1DLEdBQ2hDLE9BQU9oSixHQUFRK0ksRUFBTSxLQUFNLEtBQU1DLElBR2xDaEosR0FBT2dJLGdCQUFrQixTQUFVOUssRUFBTTZMLEdBR3hDLEdBRkFySSxFQUFheEQsR0FFUm5DLEVBQVFpTixpQkFBbUJwSCxJQUM5QlksRUFBd0J1SCxFQUFPLFFBQzdCakksSUFBa0JBLEVBQWNrRSxLQUFNK0QsT0FDdENsSSxJQUFrQkEsRUFBVW1FLEtBQU0rRCxJQUVyQyxJQUNDLElBQUluTSxFQUFNNkMsRUFBUTlNLEtBQU11SyxFQUFNNkwsR0FHOUIsR0FBS25NLEdBQU83QixFQUFRc04sbUJBSW5CbkwsRUFBS3RJLFVBQXVDLEtBQTNCc0ksRUFBS3RJLFNBQVNxRyxTQUMvQixPQUFPMkIsRUFFUCxNQUFRdEgsR0FDVGtNLEVBQXdCdUgsR0FBTSxHQUloQyxPQUFPL0ksR0FBUStJLEVBQU1uVSxFQUFVLEtBQU0sQ0FBRXNJLElBQVN2SCxPQUFTLEdBRzFEcUssR0FBT2UsU0FBVyxTQUFVN0UsRUFBU2dCLEdBVXBDLE9BSE9oQixFQUFRd0ksZUFBaUJ4SSxJQUFhdEgsR0FDNUM4TCxFQUFheEUsR0FFUDZFLEVBQVU3RSxFQUFTZ0IsSUFHM0I4QyxHQUFPaUosS0FBTyxTQUFVL0wsRUFBTW5LLElBT3RCbUssRUFBS3dILGVBQWlCeEgsSUFBVXRJLEdBQ3RDOEwsRUFBYXhELEdBR2QsSUFBSWYsRUFBSzhELEVBQUs4RixXQUFZaFQsRUFBS2dOLGVBRzlCcEUsRUFBTVEsR0FBTXZCLEVBQU9qSSxLQUFNc04sRUFBSzhGLFdBQVloVCxFQUFLZ04sZUFDOUM1RCxFQUFJZSxFQUFNbkssR0FBTzZOLFFBQ2pCckMsRUFFRixZQUFlQSxJQUFSNUMsRUFDTkEsRUFDQVosRUFBUTdELGFBQWUwSixFQUN0QjFELEVBQUtwQixhQUFjL0ksSUFDakI0SSxFQUFNdUIsRUFBS3lLLGlCQUFrQjVVLEtBQVk0SSxFQUFJdU4sVUFDOUN2TixFQUFJbEksTUFDSixNQUdKdU0sR0FBT2tELE9BQVMsU0FBVWlHLEdBQ3pCLE9BQVNBLEVBQU0sSUFBS3hLLFFBQVM0RSxHQUFZQyxLQUcxQ3hELEdBQU9uQixNQUFRLFNBQVVDLEdBQ3hCLE1BQU0sSUFBSXRILE1BQU8sMENBQTRDc0gsSUFPOURrQixHQUFPb0osV0FBYSxTQUFVL0osR0FDN0IsSUFBSW5DLEVBQ0htTSxFQUFhLEdBQ2J6TCxFQUFJLEVBQ0pwTCxFQUFJLEVBT0wsR0FKQWlPLEdBQWdCMUYsRUFBUXVPLGlCQUN4QjlJLEdBQWF6RixFQUFRd08sWUFBY2xLLEVBQVEvRSxNQUFPLEdBQ2xEK0UsRUFBUXZCLEtBQU0yRCxHQUVUaEIsRUFBZSxDQUNuQixLQUFVdkQsRUFBT21DLEVBQVM3TSxNQUNwQjBLLElBQVNtQyxFQUFTN00sS0FDdEJvTCxFQUFJeUwsRUFBV3hTLEtBQU1yRSxJQUd2QixLQUFRb0wsS0FDUHlCLEVBQVF4RixPQUFRd1AsRUFBWXpMLEdBQUssR0FRbkMsT0FGQTRDLEVBQVksS0FFTG5CLEdBT1JhLEVBQVVGLEdBQU9FLFFBQVUsU0FBVWhELEdBQ3BDLElBQUl6QixFQUNIbUIsRUFBTSxHQUNOcEssRUFBSSxFQUNKeUksRUFBV2lDLEVBQUtqQyxTQUVqQixHQUFNQSxHQVFDLEdBQWtCLElBQWJBLEdBQStCLElBQWJBLEdBQStCLEtBQWJBLEVBQWtCLENBSWpFLEdBQWlDLGlCQUFyQmlDLEVBQUtzTSxZQUNoQixPQUFPdE0sRUFBS3NNLFlBSVosSUFBTXRNLEVBQU9BLEVBQUtuRSxXQUFZbUUsRUFBTUEsRUFBT0EsRUFBS2tKLFlBQy9DeEosR0FBT3NELEVBQVNoRCxRQUdaLEdBQWtCLElBQWJqQyxHQUErQixJQUFiQSxFQUM3QixPQUFPaUMsRUFBS3VNLGVBbkJaLEtBQVVoTyxFQUFPeUIsRUFBTTFLLE1BR3RCb0ssR0FBT3NELEVBQVN6RSxHQXFCbEIsT0FBT21CLElBR1JxRCxFQUFPRCxHQUFPMEosVUFBWSxDQUd6Qm5FLFlBQWEsR0FFYm9FLGFBQWNsRSxHQUVkbkIsTUFBTzdCLEVBRVBzRCxXQUFZLEdBRVoyQixLQUFNLEdBRU5rQyxTQUFVLENBQ1QsSUFBSyxDQUFFM0YsSUFBSyxhQUFjN0csT0FBTyxHQUNqQyxJQUFLLENBQUU2RyxJQUFLLGNBQ1osSUFBSyxDQUFFQSxJQUFLLGtCQUFtQjdHLE9BQU8sR0FDdEMsSUFBSyxDQUFFNkcsSUFBSyxvQkFHYjRGLFVBQVcsQ0FDVixLQUFRLFNBQVV2RixHQVdqQixPQVZBQSxFQUFPLEdBQU1BLEVBQU8sR0FBSTNGLFFBQVNxRSxHQUFXQyxJQUc1Q3FCLEVBQU8sSUFBUUEsRUFBTyxJQUFPQSxFQUFPLElBQ25DQSxFQUFPLElBQU8sSUFBSzNGLFFBQVNxRSxHQUFXQyxJQUVwQixPQUFmcUIsRUFBTyxLQUNYQSxFQUFPLEdBQU0sSUFBTUEsRUFBTyxHQUFNLEtBRzFCQSxFQUFNaEssTUFBTyxFQUFHLElBR3hCLE1BQVMsU0FBVWdLLEdBaUNsQixPQXJCQUEsRUFBTyxHQUFNQSxFQUFPLEdBQUl2RSxjQUVVLFFBQTdCdUUsRUFBTyxHQUFJaEssTUFBTyxFQUFHLElBR25CZ0ssRUFBTyxJQUNadEUsR0FBT25CLE1BQU95RixFQUFPLElBS3RCQSxFQUFPLEtBQVNBLEVBQU8sR0FDdEJBLEVBQU8sSUFBUUEsRUFBTyxJQUFPLEdBQzdCLEdBQXFCLFNBQWZBLEVBQU8sSUFBaUMsUUFBZkEsRUFBTyxLQUN2Q0EsRUFBTyxLQUFXQSxFQUFPLEdBQU1BLEVBQU8sSUFBd0IsUUFBZkEsRUFBTyxLQUczQ0EsRUFBTyxJQUNsQnRFLEdBQU9uQixNQUFPeUYsRUFBTyxJQUdmQSxHQUdSLE9BQVUsU0FBVUEsR0FDbkIsSUFBSXdGLEVBQ0hDLEdBQVl6RixFQUFPLElBQU9BLEVBQU8sR0FFbEMsT0FBSzdCLEVBQW1CLE1BQUV1QyxLQUFNVixFQUFPLElBQy9CLE1BSUhBLEVBQU8sR0FDWEEsRUFBTyxHQUFNQSxFQUFPLElBQU9BLEVBQU8sSUFBTyxHQUc5QnlGLEdBQVl4SCxFQUFReUMsS0FBTStFLEtBR25DRCxFQUFTMUosRUFBVTJKLEdBQVUsTUFHN0JELEVBQVNDLEVBQVNyUCxRQUFTLElBQUtxUCxFQUFTcFUsT0FBU21VLEdBQVdDLEVBQVNwVSxVQUd4RTJPLEVBQU8sR0FBTUEsRUFBTyxHQUFJaEssTUFBTyxFQUFHd1AsR0FDbEN4RixFQUFPLEdBQU15RixFQUFTelAsTUFBTyxFQUFHd1AsSUFJMUJ4RixFQUFNaEssTUFBTyxFQUFHLE1BSXpCekMsT0FBUSxDQUVQLElBQU8sU0FBVW1TLEdBQ2hCLElBQUloRyxFQUFXZ0csRUFBaUJyTCxRQUFTcUUsR0FBV0MsSUFBWWxELGNBQ2hFLE1BQTRCLE1BQXJCaUssRUFDTixXQUNDLE9BQU8sR0FFUixTQUFVOU0sR0FDVCxPQUFPQSxFQUFLOEcsVUFBWTlHLEVBQUs4RyxTQUFTakUsZ0JBQWtCaUUsSUFJM0QsTUFBUyxTQUFVcUQsR0FDbEIsSUFBSTRDLEVBQVU3SSxFQUFZaUcsRUFBWSxLQUV0QyxPQUFPNEMsSUFDSkEsRUFBVSxJQUFJL0gsT0FBUSxNQUFRSCxFQUMvQixJQUFNc0YsRUFBWSxJQUFNdEYsRUFBYSxTQUFhWCxFQUNqRGlHLEdBQVcsU0FBVW5LLEdBQ3BCLE9BQU8rTSxFQUFRakYsS0FDWSxpQkFBbkI5SCxFQUFLbUssV0FBMEJuSyxFQUFLbUssZ0JBQ2QsSUFBdEJuSyxFQUFLcEIsY0FDWG9CLEVBQUtwQixhQUFjLFVBQ3BCLFFBS04sS0FBUSxTQUFVL0ksRUFBTW1YLEVBQVVDLEdBQ2pDLE9BQU8sU0FBVWpOLEdBQ2hCLElBQUl4SCxFQUFTc0ssR0FBT2lKLEtBQU0vTCxFQUFNbkssR0FFaEMsT0FBZSxNQUFWMkMsRUFDZ0IsT0FBYndVLEdBRUZBLElBSU54VSxHQUFVLEdBSVUsTUFBYndVLEVBQW1CeFUsSUFBV3lVLEVBQ3ZCLE9BQWJELEVBQW9CeFUsSUFBV3lVLEVBQ2xCLE9BQWJELEVBQW9CQyxHQUFxQyxJQUE1QnpVLEVBQU9nRixRQUFTeVAsR0FDaEMsT0FBYkQsRUFBb0JDLEdBQVN6VSxFQUFPZ0YsUUFBU3lQLElBQVcsRUFDM0MsT0FBYkQsRUFBb0JDLEdBQVN6VSxFQUFPNEUsT0FBUTZQLEVBQU14VSxVQUFhd1UsRUFDbEQsT0FBYkQsR0FBc0IsSUFBTXhVLEVBQU9pSixRQUFTc0QsRUFBYSxLQUFRLEtBQU12SCxRQUFTeVAsSUFBVyxFQUM5RSxPQUFiRCxJQUFvQnhVLElBQVd5VSxHQUFTelUsRUFBTzRFLE1BQU8sRUFBRzZQLEVBQU14VSxPQUFTLEtBQVF3VSxFQUFRLFFBTzNGLE1BQVMsU0FBVS9PLEVBQU1nUCxFQUFNQyxFQUFXak4sRUFBT0UsR0FDaEQsSUFBSWdOLEVBQWdDLFFBQXZCbFAsRUFBS2QsTUFBTyxFQUFHLEdBQzNCaVEsRUFBK0IsU0FBckJuUCxFQUFLZCxPQUFRLEdBQ3ZCa1EsRUFBa0IsWUFBVEosRUFFVixPQUFpQixJQUFWaE4sR0FBd0IsSUFBVEUsRUFHckIsU0FBVUosR0FDVCxRQUFTQSxFQUFLOUQsWUFHZixTQUFVOEQsRUFBTXVOLEVBQVVDLEdBQ3pCLElBQUlwRixFQUFPcUYsRUFBYUMsRUFBWW5QLEVBQU1vUCxFQUFXQyxFQUNwRDdHLEVBQU1xRyxJQUFXQyxFQUFVLGNBQWdCLGtCQUMzQ1EsRUFBUzdOLEVBQUs5RCxXQUNkckcsRUFBT3lYLEdBQVV0TixFQUFLOEcsU0FBU2pFLGNBQy9CaUwsR0FBWU4sSUFBUUYsRUFDcEJ0RSxHQUFPLEVBRVIsR0FBSzZFLEVBQVMsQ0FHYixHQUFLVCxFQUFTLENBQ2IsS0FBUXJHLEdBQU0sQ0FFYixJQURBeEksRUFBT3lCLEVBQ0d6QixFQUFPQSxFQUFNd0ksSUFDdEIsR0FBS3VHLEVBQ0ovTyxFQUFLdUksU0FBU2pFLGdCQUFrQmhOLEVBQ2QsSUFBbEIwSSxFQUFLUixTQUVMLE9BQU8sRUFLVDZQLEVBQVE3RyxFQUFlLFNBQVQ3SSxJQUFvQjBQLEdBQVMsY0FFNUMsT0FBTyxFQU1SLEdBSEFBLEVBQVEsQ0FBRVAsRUFBVVEsRUFBT2hTLFdBQWFnUyxFQUFPRSxXQUcxQ1YsR0FBV1MsR0FrQmYsSUFIQTlFLEdBREEyRSxHQURBdkYsR0FIQXFGLEdBSkFDLEdBREFuUCxFQUFPc1AsR0FDWXZNLEtBQWUvQyxFQUFNK0MsR0FBWSxLQUkxQi9DLEVBQUt5UCxZQUM1Qk4sRUFBWW5QLEVBQUt5UCxVQUFhLEtBRVo5UCxJQUFVLElBQ1osS0FBUThGLEdBQVdvRSxFQUFPLEtBQ3pCQSxFQUFPLEdBQzNCN0osRUFBT29QLEdBQWFFLEVBQU8xUyxXQUFZd1MsR0FFN0JwUCxJQUFTb1AsR0FBYXBQLEdBQVFBLEVBQU13SSxLQUczQ2lDLEVBQU8yRSxFQUFZLElBQU9DLEVBQU1sSixPQUdsQyxHQUF1QixJQUFsQm5HLEVBQUtSLFlBQW9CaUwsR0FBUXpLLElBQVN5QixFQUFPLENBQ3JEeU4sRUFBYXZQLEdBQVMsQ0FBRThGLEVBQVMySixFQUFXM0UsR0FDNUMsWUF5QkYsR0FsQks4RSxJQWFKOUUsRUFEQTJFLEdBREF2RixHQUhBcUYsR0FKQUMsR0FEQW5QLEVBQU95QixHQUNZc0IsS0FBZS9DLEVBQU0rQyxHQUFZLEtBSTFCL0MsRUFBS3lQLFlBQzVCTixFQUFZblAsRUFBS3lQLFVBQWEsS0FFWjlQLElBQVUsSUFDWixLQUFROEYsR0FBV29FLEVBQU8sS0FNaEMsSUFBVFksRUFHSixNQUFVekssSUFBU29QLEdBQWFwUCxHQUFRQSxFQUFNd0ksS0FDM0NpQyxFQUFPMkUsRUFBWSxJQUFPQyxFQUFNbEosVUFFM0I0SSxFQUNOL08sRUFBS3VJLFNBQVNqRSxnQkFBa0JoTixFQUNkLElBQWxCMEksRUFBS1IsY0FDSGlMLElBR0c4RSxLQU1KTCxHQUxBQyxFQUFhblAsRUFBTStDLEtBQ2hCL0MsRUFBTStDLEdBQVksS0FJSy9DLEVBQUt5UCxZQUM1Qk4sRUFBWW5QLEVBQUt5UCxVQUFhLEtBRXBCOVAsR0FBUyxDQUFFOEYsRUFBU2dGLElBRzdCekssSUFBU3lCLE1BVWxCLE9BREFnSixHQUFRNUksS0FDUUYsR0FBVzhJLEVBQU85SSxHQUFVLEdBQUs4SSxFQUFPOUksR0FBUyxLQUtyRSxPQUFVLFNBQVUrTixFQUFRekUsR0FNM0IsSUFBSTBFLEVBQ0hqUCxFQUFLOEQsRUFBSytCLFFBQVNtSixJQUFZbEwsRUFBS29MLFdBQVlGLEVBQU9wTCxnQkFDdERDLEdBQU9uQixNQUFPLHVCQUF5QnNNLEdBS3pDLE9BQUtoUCxFQUFJcUMsR0FDRHJDLEVBQUl1SyxHQUlQdkssRUFBR3hHLE9BQVMsR0FDaEJ5VixFQUFPLENBQUVELEVBQVFBLEVBQVEsR0FBSXpFLEdBQ3RCekcsRUFBS29MLFdBQVdoWCxlQUFnQjhXLEVBQU9wTCxlQUM3QzBGLElBQWMsU0FBVXJCLEVBQU0zRSxHQUk3QixJQUhBLElBQUk2TCxFQUNIQyxFQUFVcFAsRUFBSWlJLEVBQU1zQyxHQUNwQmxVLEVBQUkrWSxFQUFRNVYsT0FDTG5ELEtBRVA0UixFQURBa0gsRUFBTTVRLEVBQVMwSixFQUFNbUgsRUFBUy9ZLE9BQ2JpTixFQUFTNkwsR0FBUUMsRUFBUy9ZLE9BRzdDLFNBQVUwSyxHQUNULE9BQU9mLEVBQUllLEVBQU0sRUFBR2tPLEtBSWhCalAsSUFJVDZGLFFBQVMsQ0FHUixJQUFPeUQsSUFBYyxTQUFVeEosR0FLOUIsSUFBSTZMLEVBQVEsR0FDWHpJLEVBQVUsR0FDVm1NLEVBQVVuTCxFQUFTcEUsRUFBUzBDLFFBQVN3RCxFQUFPLE9BRTdDLE9BQU9xSixFQUFTaE4sR0FDZmlILElBQWMsU0FBVXJCLEVBQU0zRSxFQUFTZ0wsRUFBVUMsR0FNaEQsSUFMQSxJQUFJeE4sRUFDSHVPLEVBQVlELEVBQVNwSCxFQUFNLEtBQU1zRyxFQUFLLElBQ3RDbFksRUFBSTRSLEVBQUt6TyxPQUdGbkQsTUFDQTBLLEVBQU91TyxFQUFXalosTUFDeEI0UixFQUFNNVIsS0FBU2lOLEVBQVNqTixHQUFNMEssT0FJakMsU0FBVUEsRUFBTXVOLEVBQVVDLEdBTXpCLE9BTEE1QyxFQUFPLEdBQU01SyxFQUNic08sRUFBUzFELEVBQU8sS0FBTTRDLEVBQUtyTCxHQUczQnlJLEVBQU8sR0FBTSxNQUNMekksRUFBUXVDLFVBSW5CLElBQU82RCxJQUFjLFNBQVV4SixHQUM5QixPQUFPLFNBQVVpQixHQUNoQixPQUFPOEMsR0FBUS9ELEVBQVVpQixHQUFPdkgsT0FBUyxNQUkzQyxTQUFZOFAsSUFBYyxTQUFVNUosR0FFbkMsT0FEQUEsRUFBT0EsRUFBSzhDLFFBQVNxRSxHQUFXQyxJQUN6QixTQUFVL0YsR0FDaEIsT0FBU0EsRUFBS3NNLGFBQWV0SixFQUFTaEQsSUFBU3hDLFFBQVNtQixJQUFVLE1BV3BFLEtBQVE0SixJQUFjLFNBQVVpRyxHQU8vQixPQUpNbEosRUFBWXdDLEtBQU0wRyxHQUFRLEtBQy9CMUwsR0FBT25CLE1BQU8scUJBQXVCNk0sR0FFdENBLEVBQU9BLEVBQUsvTSxRQUFTcUUsR0FBV0MsSUFBWWxELGNBQ3JDLFNBQVU3QyxHQUNoQixJQUFJeU8sRUFDSixHQUNDLEdBQU9BLEVBQVcvSyxFQUNqQjFELEVBQUt3TyxLQUNMeE8sRUFBS3BCLGFBQWMsYUFBZ0JvQixFQUFLcEIsYUFBYyxRQUd0RCxPQURBNlAsRUFBV0EsRUFBUzVMLGlCQUNBMkwsR0FBMkMsSUFBbkNDLEVBQVNqUixRQUFTZ1IsRUFBTyxZQUUzQ3hPLEVBQU9BLEVBQUs5RCxhQUFrQyxJQUFsQjhELEVBQUtqQyxVQUM3QyxPQUFPLE1BS1QsT0FBVSxTQUFVaUMsR0FDbkIsSUFBSTBPLEVBQU9qWCxFQUFPa1gsVUFBWWxYLEVBQU9rWCxTQUFTRCxLQUM5QyxPQUFPQSxHQUFRQSxFQUFLdFIsTUFBTyxLQUFRNEMsRUFBS2hILElBR3pDLEtBQVEsU0FBVWdILEdBQ2pCLE9BQU9BLElBQVN5RCxHQUdqQixNQUFTLFNBQVV6RCxHQUNsQixPQUFPQSxJQUFTdEksRUFBU2tYLGlCQUNyQmxYLEVBQVNtWCxVQUFZblgsRUFBU21YLGdCQUM3QjdPLEVBQUs5QixNQUFROEIsRUFBSzhPLE9BQVM5TyxFQUFLK08sV0FJdEMsUUFBVzFGLElBQXNCLEdBQ2pDLFNBQVlBLElBQXNCLEdBRWxDLFFBQVcsU0FBVXJKLEdBSXBCLElBQUk4RyxFQUFXOUcsRUFBSzhHLFNBQVNqRSxjQUM3QixNQUFzQixVQUFiaUUsS0FBMEI5RyxFQUFLZ1AsU0FDeEIsV0FBYmxJLEtBQTJCOUcsRUFBS2lQLFVBR3BDLFNBQVksU0FBVWpQLEdBU3JCLE9BTEtBLEVBQUs5RCxZQUVUOEQsRUFBSzlELFdBQVdnVCxlQUdRLElBQWxCbFAsRUFBS2lQLFVBSWIsTUFBUyxTQUFValAsR0FNbEIsSUFBTUEsRUFBT0EsRUFBS25FLFdBQVltRSxFQUFNQSxFQUFPQSxFQUFLa0osWUFDL0MsR0FBS2xKLEVBQUtqQyxTQUFXLEVBQ3BCLE9BQU8sRUFHVCxPQUFPLEdBR1IsT0FBVSxTQUFVaUMsR0FDbkIsT0FBUStDLEVBQUsrQixRQUFpQixNQUFHOUUsSUFJbEMsT0FBVSxTQUFVQSxHQUNuQixPQUFPMEYsRUFBUW9DLEtBQU05SCxFQUFLOEcsV0FHM0IsTUFBUyxTQUFVOUcsR0FDbEIsT0FBT3lGLEVBQVFxQyxLQUFNOUgsRUFBSzhHLFdBRzNCLE9BQVUsU0FBVTlHLEdBQ25CLElBQUluSyxFQUFPbUssRUFBSzhHLFNBQVNqRSxjQUN6QixNQUFnQixVQUFUaE4sR0FBa0MsV0FBZG1LLEVBQUs5QixNQUE4QixXQUFUckksR0FHdEQsS0FBUSxTQUFVbUssR0FDakIsSUFBSStMLEVBQ0osTUFBdUMsVUFBaEMvTCxFQUFLOEcsU0FBU2pFLGVBQ04sU0FBZDdDLEVBQUs5QixPQUl1QyxPQUF4QzZOLEVBQU8vTCxFQUFLcEIsYUFBYyxVQUNOLFNBQXZCbU4sRUFBS2xKLGdCQUlSLE1BQVMwRyxJQUF3QixXQUNoQyxNQUFPLENBQUUsTUFHVixLQUFRQSxJQUF3QixTQUFVNEYsRUFBZTFXLEdBQ3hELE1BQU8sQ0FBRUEsRUFBUyxNQUduQixHQUFNOFEsSUFBd0IsU0FBVTRGLEVBQWUxVyxFQUFRK1EsR0FDOUQsTUFBTyxDQUFFQSxFQUFXLEVBQUlBLEVBQVcvUSxFQUFTK1EsTUFHN0MsS0FBUUQsSUFBd0IsU0FBVUUsRUFBY2hSLEdBRXZELElBREEsSUFBSW5ELEVBQUksRUFDQUEsRUFBSW1ELEVBQVFuRCxHQUFLLEVBQ3hCbVUsRUFBYTlQLEtBQU1yRSxHQUVwQixPQUFPbVUsS0FHUixJQUFPRixJQUF3QixTQUFVRSxFQUFjaFIsR0FFdEQsSUFEQSxJQUFJbkQsRUFBSSxFQUNBQSxFQUFJbUQsRUFBUW5ELEdBQUssRUFDeEJtVSxFQUFhOVAsS0FBTXJFLEdBRXBCLE9BQU9tVSxLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWNoUixFQUFRK1EsR0FNN0QsSUFMQSxJQUFJbFUsRUFBSWtVLEVBQVcsRUFDbEJBLEVBQVcvUSxFQUNYK1EsRUFBVy9RLEVBQ1ZBLEVBQ0ErUSxJQUNRbFUsR0FBSyxHQUNkbVUsRUFBYTlQLEtBQU1yRSxHQUVwQixPQUFPbVUsS0FHUixHQUFNRixJQUF3QixTQUFVRSxFQUFjaFIsRUFBUStRLEdBRTdELElBREEsSUFBSWxVLEVBQUlrVSxFQUFXLEVBQUlBLEVBQVcvUSxFQUFTK1EsSUFDakNsVSxFQUFJbUQsR0FDYmdSLEVBQWE5UCxLQUFNckUsR0FFcEIsT0FBT21VLFFBS0wzRSxRQUFlLElBQUkvQixFQUFLK0IsUUFBYyxHQUdoQyxDQUFFc0ssT0FBTyxFQUFNQyxVQUFVLEVBQU1DLE1BQU0sRUFBTUMsVUFBVSxFQUFNQyxPQUFPLEdBQzVFek0sRUFBSytCLFFBQVN4UCxHQUFNNlQsR0FBbUI3VCxHQUV4QyxJQUFNQSxJQUFLLENBQUVtYSxRQUFRLEVBQU1DLE9BQU8sR0FDakMzTSxFQUFLK0IsUUFBU3hQLEdBQU04VCxHQUFvQjlULEdBSXpDLFNBQVM2WSxNQTBFVCxTQUFTbEcsR0FBWTBILEdBSXBCLElBSEEsSUFBSXJhLEVBQUksRUFDUG1MLEVBQU1rUCxFQUFPbFgsT0FDYnNHLEVBQVcsR0FDSnpKLEVBQUltTCxFQUFLbkwsSUFDaEJ5SixHQUFZNFEsRUFBUXJhLEdBQUlpQixNQUV6QixPQUFPd0ksRUFHUixTQUFTNkgsR0FBZTBILEVBQVNzQixFQUFZM1csR0FDNUMsSUFBSThOLEVBQU02SSxFQUFXN0ksSUFDcEI4SSxFQUFPRCxFQUFXNUksS0FDbEJuUSxFQUFNZ1osR0FBUTlJLEVBQ2QrSSxFQUFtQjdXLEdBQWdCLGVBQVJwQyxFQUMzQmtaLEVBQVc5TCxJQUVaLE9BQU8yTCxFQUFXMVAsTUFHakIsU0FBVUYsRUFBTWhCLEVBQVN3TyxHQUN4QixLQUFVeE4sRUFBT0EsRUFBTStHLElBQ3RCLEdBQXVCLElBQWxCL0csRUFBS2pDLFVBQWtCK1IsRUFDM0IsT0FBT3hCLEVBQVN0TyxFQUFNaEIsRUFBU3dPLEdBR2pDLE9BQU8sR0FJUixTQUFVeE4sRUFBTWhCLEVBQVN3TyxHQUN4QixJQUFJd0MsRUFBVXZDLEVBQWFDLEVBQzFCdUMsRUFBVyxDQUFFak0sRUFBUytMLEdBR3ZCLEdBQUt2QyxHQUNKLEtBQVV4TixFQUFPQSxFQUFNK0csSUFDdEIsSUFBdUIsSUFBbEIvRyxFQUFLakMsVUFBa0IrUixJQUN0QnhCLEVBQVN0TyxFQUFNaEIsRUFBU3dPLEdBQzVCLE9BQU8sT0FLVixLQUFVeE4sRUFBT0EsRUFBTStHLElBQ3RCLEdBQXVCLElBQWxCL0csRUFBS2pDLFVBQWtCK1IsRUFRM0IsR0FIQXJDLEdBSkFDLEVBQWExTixFQUFNc0IsS0FBZXRCLEVBQU1zQixHQUFZLEtBSTFCdEIsRUFBS2dPLFlBQzVCTixFQUFZMU4sRUFBS2dPLFVBQWEsSUFFNUI2QixHQUFRQSxJQUFTN1AsRUFBSzhHLFNBQVNqRSxjQUNuQzdDLEVBQU9BLEVBQU0rRyxJQUFTL0csTUFDaEIsS0FBT2dRLEVBQVd2QyxFQUFhNVcsS0FDckNtWixFQUFVLEtBQVFoTSxHQUFXZ00sRUFBVSxLQUFRRCxFQUcvQyxPQUFTRSxFQUFVLEdBQU1ELEVBQVUsR0FPbkMsR0FIQXZDLEVBQWE1VyxHQUFRb1osRUFHZEEsRUFBVSxHQUFNM0IsRUFBU3RPLEVBQU1oQixFQUFTd08sR0FDOUMsT0FBTyxFQU1aLE9BQU8sR0FJVixTQUFTMEMsR0FBZ0JDLEdBQ3hCLE9BQU9BLEVBQVMxWCxPQUFTLEVBQ3hCLFNBQVV1SCxFQUFNaEIsRUFBU3dPLEdBRXhCLElBREEsSUFBSWxZLEVBQUk2YSxFQUFTMVgsT0FDVG5ELEtBQ1AsSUFBTTZhLEVBQVU3YSxHQUFLMEssRUFBTWhCLEVBQVN3TyxHQUNuQyxPQUFPLEVBR1QsT0FBTyxHQUVSMkMsRUFBVSxHQVlaLFNBQVNDLEdBQVU3QixFQUFXeE8sRUFBS3BGLEVBQVFxRSxFQUFTd08sR0FPbkQsSUFOQSxJQUFJeE4sRUFDSHFRLEVBQWUsR0FDZi9hLEVBQUksRUFDSm1MLEVBQU04TixFQUFVOVYsT0FDaEI2WCxFQUFnQixNQUFQdlEsRUFFRnpLLEVBQUltTCxFQUFLbkwsS0FDVDBLLEVBQU91TyxFQUFXalosTUFDbEJxRixJQUFVQSxFQUFRcUYsRUFBTWhCLEVBQVN3TyxLQUN0QzZDLEVBQWExVyxLQUFNcUcsR0FDZHNRLEdBQ0p2USxFQUFJcEcsS0FBTXJFLEtBTWQsT0FBTythLEVBR1IsU0FBU0UsR0FBWTVELEVBQVc1TixFQUFVdVAsRUFBU2tDLEVBQVlDLEVBQVlDLEdBTzFFLE9BTktGLElBQWVBLEVBQVlsUCxLQUMvQmtQLEVBQWFELEdBQVlDLElBRXJCQyxJQUFlQSxFQUFZblAsS0FDL0JtUCxFQUFhRixHQUFZRSxFQUFZQyxJQUUvQm5JLElBQWMsU0FBVXJCLEVBQU0vRSxFQUFTbkQsRUFBU3dPLEdBQ3RELElBQUltRCxFQUFNcmIsRUFBRzBLLEVBQ1o0USxFQUFTLEdBQ1RDLEVBQVUsR0FDVkMsRUFBYzNPLEVBQVExSixPQUd0QmdILEVBQVF5SCxHQTVDWCxTQUEyQm5JLEVBQVVnUyxFQUFVNU8sR0FHOUMsSUFGQSxJQUFJN00sRUFBSSxFQUNQbUwsRUFBTXNRLEVBQVN0WSxPQUNSbkQsRUFBSW1MLEVBQUtuTCxJQUNoQndOLEdBQVEvRCxFQUFVZ1MsRUFBVXpiLEdBQUs2TSxHQUVsQyxPQUFPQSxFQXNDVzZPLENBQ2ZqUyxHQUFZLElBQ1pDLEVBQVFqQixTQUFXLENBQUVpQixHQUFZQSxFQUNqQyxJQUlEaVMsR0FBWXRFLElBQWV6RixHQUFTbkksRUFFbkNVLEVBREEyUSxHQUFVM1EsRUFBT21SLEVBQVFqRSxFQUFXM04sRUFBU3dPLEdBRzlDMEQsRUFBYTVDLEVBR1ptQyxJQUFnQnZKLEVBQU95RixFQUFZbUUsR0FBZU4sR0FHakQsR0FHQXJPLEVBQ0Q4TyxFQVFGLEdBTEszQyxHQUNKQSxFQUFTMkMsRUFBV0MsRUFBWWxTLEVBQVN3TyxHQUlyQ2dELEVBTUosSUFMQUcsRUFBT1AsR0FBVWMsRUFBWUwsR0FDN0JMLEVBQVlHLEVBQU0sR0FBSTNSLEVBQVN3TyxHQUcvQmxZLEVBQUlxYixFQUFLbFksT0FDRG5ELE1BQ0EwSyxFQUFPMlEsRUFBTXJiLE1BQ25CNGIsRUFBWUwsRUFBU3ZiLE1BQVcyYixFQUFXSixFQUFTdmIsSUFBUTBLLElBSy9ELEdBQUtrSCxHQUNKLEdBQUt1SixHQUFjOUQsRUFBWSxDQUM5QixHQUFLOEQsRUFBYSxDQUtqQixJQUZBRSxFQUFPLEdBQ1ByYixFQUFJNGIsRUFBV3pZLE9BQ1BuRCxNQUNBMEssRUFBT2tSLEVBQVk1YixLQUd6QnFiLEVBQUtoWCxLQUFRc1gsRUFBVzNiLEdBQU0wSyxHQUdoQ3lRLEVBQVksS0FBUVMsRUFBYSxHQUFNUCxFQUFNbkQsR0FLOUMsSUFEQWxZLEVBQUk0YixFQUFXelksT0FDUG5ELE1BQ0EwSyxFQUFPa1IsRUFBWTViLE1BQ3ZCcWIsRUFBT0YsRUFBYWpULEVBQVMwSixFQUFNbEgsR0FBUzRRLEVBQVF0YixLQUFTLElBRS9ENFIsRUFBTXlKLEtBQVl4TyxFQUFTd08sR0FBUzNRLFVBT3ZDa1IsRUFBYWQsR0FDWmMsSUFBZS9PLEVBQ2QrTyxFQUFXdlUsT0FBUW1VLEVBQWFJLEVBQVd6WSxRQUMzQ3lZLEdBRUdULEVBQ0pBLEVBQVksS0FBTXRPLEVBQVMrTyxFQUFZMUQsR0FFdkM3VCxFQUFLNEQsTUFBTzRFLEVBQVMrTyxNQU16QixTQUFTQyxHQUFtQnhCLEdBeUIzQixJQXhCQSxJQUFJeUIsRUFBYzlDLEVBQVM1TixFQUMxQkQsRUFBTWtQLEVBQU9sWCxPQUNiNFksRUFBa0J0TyxFQUFLMkosU0FBVWlELEVBQVEsR0FBSXpSLE1BQzdDb1QsRUFBbUJELEdBQW1CdE8sRUFBSzJKLFNBQVUsS0FDckRwWCxFQUFJK2IsRUFBa0IsRUFBSSxFQUcxQkUsRUFBZTNLLElBQWUsU0FBVTVHLEdBQ3ZDLE9BQU9BLElBQVNvUixJQUNkRSxHQUFrQixHQUNyQkUsRUFBa0I1SyxJQUFlLFNBQVU1RyxHQUMxQyxPQUFPeEMsRUFBUzRULEVBQWNwUixJQUFVLElBQ3RDc1IsR0FBa0IsR0FDckJuQixFQUFXLENBQUUsU0FBVW5RLEVBQU1oQixFQUFTd08sR0FDckMsSUFBSTlOLEdBQVMyUixJQUFxQjdELEdBQU94TyxJQUFZcUUsTUFDbEQrTixFQUFlcFMsR0FBVWpCLFNBQzFCd1QsRUFBY3ZSLEVBQU1oQixFQUFTd08sR0FDN0JnRSxFQUFpQnhSLEVBQU1oQixFQUFTd08sSUFJbEMsT0FEQTRELEVBQWUsS0FDUjFSLElBR0RwSyxFQUFJbUwsRUFBS25MLElBQ2hCLEdBQU9nWixFQUFVdkwsRUFBSzJKLFNBQVVpRCxFQUFRcmEsR0FBSTRJLE1BQzNDaVMsRUFBVyxDQUFFdkosR0FBZXNKLEdBQWdCQyxHQUFZN0IsUUFDbEQsQ0FJTixJQUhBQSxFQUFVdkwsRUFBS3BJLE9BQVFnVixFQUFRcmEsR0FBSTRJLE1BQU9YLE1BQU8sS0FBTW9TLEVBQVFyYSxHQUFJaU4sVUFHckRqQixHQUFZLENBSXpCLElBREFaLElBQU1wTCxFQUNFb0wsRUFBSUQsSUFDTnNDLEVBQUsySixTQUFVaUQsRUFBUWpQLEdBQUl4QyxNQURoQndDLEtBS2pCLE9BQU82UCxHQUNOamIsRUFBSSxHQUFLNGEsR0FBZ0JDLEdBQ3pCN2EsRUFBSSxHQUFLMlMsR0FHVDBILEVBQ0V2UyxNQUFPLEVBQUc5SCxFQUFJLEdBQ2Q2RCxPQUFRLENBQUU1QyxNQUFnQyxNQUF6Qm9aLEVBQVFyYSxFQUFJLEdBQUk0SSxLQUFlLElBQU0sTUFDdER1RCxRQUFTd0QsRUFBTyxNQUNsQnFKLEVBQ0FoWixFQUFJb0wsR0FBS3lRLEdBQW1CeEIsRUFBT3ZTLE1BQU85SCxFQUFHb0wsSUFDN0NBLEVBQUlELEdBQU8wUSxHQUFxQnhCLEVBQVNBLEVBQU92UyxNQUFPc0QsSUFDdkRBLEVBQUlELEdBQU93SCxHQUFZMEgsSUFHekJRLEVBQVN4VyxLQUFNMlUsR0FJakIsT0FBTzRCLEdBQWdCQyxHQW9UeEIsT0F0cEJBaEMsR0FBV2pYLFVBQVk2TCxFQUFLME8sUUFBVTFPLEVBQUsrQixRQUMzQy9CLEVBQUtvTCxXQUFhLElBQUlBLEdBRXRCakwsRUFBV0osR0FBT0ksU0FBVyxTQUFVbkUsRUFBVTJTLEdBQ2hELElBQUlyRCxFQUFTakgsRUFBT3VJLEVBQVF6UixFQUMzQnlULEVBQU90SyxFQUFRdUssRUFDZkMsRUFBU3pOLEVBQVlyRixFQUFXLEtBRWpDLEdBQUs4UyxFQUNKLE9BQU9ILEVBQVksRUFBSUcsRUFBT3pVLE1BQU8sR0FPdEMsSUFKQXVVLEVBQVE1UyxFQUNSc0ksRUFBUyxHQUNUdUssRUFBYTdPLEVBQUs0SixVQUVWZ0YsR0FBUSxDQTJCZixJQUFNelQsS0F4QkFtUSxLQUFhakgsRUFBUWxDLEVBQU91QyxLQUFNa0ssTUFDbEN2SyxJQUdKdUssRUFBUUEsRUFBTXZVLE1BQU9nSyxFQUFPLEdBQUkzTyxTQUFZa1osR0FFN0N0SyxFQUFPMU4sS0FBUWdXLEVBQVMsS0FHekJ0QixHQUFVLEdBR0hqSCxFQUFRakMsRUFBYXNDLEtBQU1rSyxNQUNqQ3RELEVBQVVqSCxFQUFNa0IsUUFDaEJxSCxFQUFPaFcsS0FBTSxDQUNacEQsTUFBTzhYLEVBR1BuUSxLQUFNa0osRUFBTyxHQUFJM0YsUUFBU3dELEVBQU8sT0FFbEMwTSxFQUFRQSxFQUFNdlUsTUFBT2lSLEVBQVE1VixTQUloQnNLLEVBQUtwSSxTQUNYeU0sRUFBUTdCLEVBQVdySCxHQUFPdUosS0FBTWtLLEtBQWdCQyxFQUFZMVQsTUFDaEVrSixFQUFRd0ssRUFBWTFULEdBQVFrSixNQUM5QmlILEVBQVVqSCxFQUFNa0IsUUFDaEJxSCxFQUFPaFcsS0FBTSxDQUNacEQsTUFBTzhYLEVBQ1BuUSxLQUFNQSxFQUNOcUUsUUFBUzZFLElBRVZ1SyxFQUFRQSxFQUFNdlUsTUFBT2lSLEVBQVE1VixTQUkvQixJQUFNNFYsRUFDTCxNQU9GLE9BQU9xRCxFQUNOQyxFQUFNbFosT0FDTmtaLEVBQ0M3TyxHQUFPbkIsTUFBTzVDLEdBR2RxRixFQUFZckYsRUFBVXNJLEdBQVNqSyxNQUFPLElBNFp6QytGLEVBQVVMLEdBQU9LLFFBQVUsU0FBVXBFLEVBQVVxSSxHQUM5QyxJQUFJOVIsRUFDSHdjLEVBQWMsR0FDZEMsRUFBa0IsR0FDbEJGLEVBQVN4TixFQUFldEYsRUFBVyxLQUVwQyxJQUFNOFMsRUFBUyxDQU9kLElBSk16SyxJQUNMQSxFQUFRbEUsRUFBVW5FLElBRW5CekosRUFBSThSLEVBQU0zTyxPQUNGbkQsTUFDUHVjLEVBQVNWLEdBQW1CL0osRUFBTzlSLEtBQ3RCZ00sR0FDWndRLEVBQVluWSxLQUFNa1ksR0FFbEJFLEVBQWdCcFksS0FBTWtZLElBS3hCQSxFQUFTeE4sRUFDUnRGLEVBckpILFNBQW1DZ1QsRUFBaUJELEdBQ25ELElBQUlFLEVBQVFGLEVBQVlyWixPQUFTLEVBQ2hDd1osRUFBWUYsRUFBZ0J0WixPQUFTLEVBQ3JDeVosRUFBZSxTQUFVaEwsRUFBTWxJLEVBQVN3TyxFQUFLckwsRUFBU2dRLEdBQ3JELElBQUluUyxFQUFNVSxFQUFHNE4sRUFDWjhELEVBQWUsRUFDZjljLEVBQUksSUFDSmlaLEVBQVlySCxHQUFRLEdBQ3BCbUwsRUFBYSxHQUNiQyxFQUFnQmpQLEVBR2hCNUQsRUFBUXlILEdBQVErSyxHQUFhbFAsRUFBS3lILEtBQVksSUFBRyxJQUFLMkgsR0FHdERJLEVBQWtCdk8sR0FBNEIsTUFBakJzTyxFQUF3QixFQUFJL1EsS0FBS0MsVUFBWSxHQUMxRWYsRUFBTWhCLEVBQU1oSCxPQWNiLElBWkswWixJQU1KOU8sRUFBbUJyRSxHQUFXdEgsR0FBWXNILEdBQVdtVCxHQU05QzdjLElBQU1tTCxHQUFnQyxPQUF2QlQsRUFBT1AsRUFBT25LLElBQWVBLElBQU0sQ0FDekQsR0FBSzJjLEdBQWFqUyxFQUFPLENBV3hCLElBVkFVLEVBQUksRUFNRTFCLEdBQVdnQixFQUFLd0gsZUFBaUI5UCxJQUN0QzhMLEVBQWF4RCxHQUNid04sR0FBTzlKLEdBRUU0SyxFQUFVeUQsRUFBaUJyUixNQUNwQyxHQUFLNE4sRUFBU3RPLEVBQU1oQixHQUFXdEgsRUFBVThWLEdBQVEsQ0FDaERyTCxFQUFReEksS0FBTXFHLEdBQ2QsTUFHR21TLElBQ0puTyxFQUFVdU8sR0FLUFAsS0FHR2hTLEdBQVFzTyxHQUFXdE8sSUFDekJvUyxJQUlJbEwsR0FDSnFILEVBQVU1VSxLQUFNcUcsSUFnQm5CLEdBVEFvUyxHQUFnQjljLEVBU1gwYyxHQUFTMWMsSUFBTThjLEVBQWUsQ0FFbEMsSUFEQTFSLEVBQUksRUFDTTROLEVBQVV3RCxFQUFhcFIsTUFDaEM0TixFQUFTQyxFQUFXOEQsRUFBWXJULEVBQVN3TyxHQUcxQyxHQUFLdEcsRUFBTyxDQUdYLEdBQUtrTCxFQUFlLEVBQ25CLEtBQVE5YyxLQUNDaVosRUFBV2paLElBQU8rYyxFQUFZL2MsS0FDckMrYyxFQUFZL2MsR0FBTW9QLEVBQUlqUCxLQUFNME0sSUFNL0JrUSxFQUFhakMsR0FBVWlDLEdBSXhCMVksRUFBSzRELE1BQU80RSxFQUFTa1EsR0FHaEJGLElBQWNqTCxHQUFRbUwsRUFBVzVaLE9BQVMsR0FDNUMyWixFQUFlTixFQUFZclosT0FBVyxHQUV4Q3FLLEdBQU9vSixXQUFZL0osR0FVckIsT0FMS2dRLElBQ0puTyxFQUFVdU8sRUFDVmxQLEVBQW1CaVAsR0FHYi9ELEdBR1QsT0FBT3lELEVBQ056SixHQUFjMkosR0FDZEEsRUE0QkNNLENBQTBCVCxFQUFpQkQsS0FJckMvUyxTQUFXQSxFQUVuQixPQUFPOFMsR0FZUnpPLEVBQVNOLEdBQU9NLE9BQVMsU0FBVXJFLEVBQVVDLEVBQVNtRCxFQUFTK0UsR0FDOUQsSUFBSTVSLEVBQUdxYSxFQUFROEMsRUFBT3ZVLEVBQU1zTSxFQUMzQmtJLEVBQStCLG1CQUFiM1QsR0FBMkJBLEVBQzdDcUksR0FBU0YsR0FBUWhFLEVBQVluRSxFQUFXMlQsRUFBUzNULFVBQVlBLEdBTTlELEdBSkFvRCxFQUFVQSxHQUFXLEdBSUMsSUFBakJpRixFQUFNM08sT0FBZSxDQUl6QixJQURBa1gsRUFBU3ZJLEVBQU8sR0FBTUEsRUFBTyxHQUFJaEssTUFBTyxJQUM1QjNFLE9BQVMsR0FBc0MsUUFBL0JnYSxFQUFROUMsRUFBUSxJQUFNelIsTUFDNUIsSUFBckJjLEVBQVFqQixVQUFrQjJGLEdBQWtCWCxFQUFLMkosU0FBVWlELEVBQVEsR0FBSXpSLE1BQVMsQ0FJaEYsS0FGQWMsR0FBWStELEVBQUt5SCxLQUFXLEdBQUdpSSxFQUFNbFEsUUFBUyxHQUM1Q2QsUUFBU3FFLEdBQVdDLElBQWEvRyxJQUFhLElBQU0sSUFFckQsT0FBT21ELEVBR0l1USxJQUNYMVQsRUFBVUEsRUFBUTlDLFlBR25CNkMsRUFBV0EsRUFBUzNCLE1BQU91UyxFQUFPckgsUUFBUS9SLE1BQU1rQyxRQUtqRCxJQURBbkQsRUFBSWlRLEVBQTBCLGFBQUV1QyxLQUFNL0ksR0FBYSxFQUFJNFEsRUFBT2xYLE9BQ3REbkQsTUFDUG1kLEVBQVE5QyxFQUFRcmEsSUFHWHlOLEVBQUsySixTQUFZeE8sRUFBT3VVLEVBQU12VSxRQUduQyxJQUFPc00sRUFBT3pILEVBQUt5SCxLQUFNdE0sTUFHakJnSixFQUFPc0QsRUFDYmlJLEVBQU1sUSxRQUFTLEdBQUlkLFFBQVNxRSxHQUFXQyxJQUN2Q0YsR0FBU2lDLEtBQU02SCxFQUFRLEdBQUl6UixPQUFVNkosR0FBYS9JLEVBQVE5QyxhQUN6RDhDLElBQ0ksQ0FLTCxHQUZBMlEsRUFBT2hULE9BQVFySCxFQUFHLEtBQ2xCeUosRUFBV21JLEVBQUt6TyxRQUFVd1AsR0FBWTBILElBR3JDLE9BREFoVyxFQUFLNEQsTUFBTzRFLEVBQVMrRSxHQUNkL0UsRUFHUixPQWVKLE9BUEV1USxHQUFZdlAsRUFBU3BFLEVBQVVxSSxJQUNoQ0YsRUFDQWxJLEdBQ0MwRSxFQUNEdkIsR0FDQ25ELEdBQVc2RyxHQUFTaUMsS0FBTS9JLElBQWNnSixHQUFhL0ksRUFBUTlDLGFBQWdCOEMsR0FFeEVtRCxHQU1SdEUsRUFBUXdPLFdBQWEvSyxFQUFRc0IsTUFBTyxJQUFLaEMsS0FBTTJELEdBQVkzSixLQUFNLE1BQVMwRyxFQUkxRXpELEVBQVF1TyxtQkFBcUI3SSxFQUc3QkMsSUFJQTNGLEVBQVEyTixhQUFlaEQsSUFBUSxTQUFVQyxHQUd4QyxPQUE0RSxFQUFyRUEsRUFBRzJDLHdCQUF5QjFULEVBQVNxQyxjQUFlLGdCQU10RHlPLElBQVEsU0FBVUMsR0FFdkIsT0FEQUEsRUFBR29DLFVBQVksbUJBQ2lDLE1BQXpDcEMsRUFBRzVNLFdBQVcrQyxhQUFjLFlBRW5DOEosR0FBVywwQkFBMEIsU0FBVTFJLEVBQU1uSyxFQUFNb04sR0FDMUQsSUFBTUEsRUFDTCxPQUFPakQsRUFBS3BCLGFBQWMvSSxFQUE2QixTQUF2QkEsRUFBS2dOLGNBQTJCLEVBQUksTUFPakVoRixFQUFRN0QsWUFBZXdPLElBQVEsU0FBVUMsR0FHOUMsT0FGQUEsRUFBR29DLFVBQVksV0FDZnBDLEVBQUc1TSxXQUFXekIsYUFBYyxRQUFTLElBQ1ksS0FBMUNxTyxFQUFHNU0sV0FBVytDLGFBQWMsYUFFbkM4SixHQUFXLFNBQVMsU0FBVTFJLEVBQU0yUyxFQUFPMVAsR0FDMUMsSUFBTUEsR0FBeUMsVUFBaENqRCxFQUFLOEcsU0FBU2pFLGNBQzVCLE9BQU83QyxFQUFLNFMsZ0JBT1RwSyxJQUFRLFNBQVVDLEdBQ3ZCLE9BQXdDLE1BQWpDQSxFQUFHN0osYUFBYyxnQkFFeEI4SixHQUFXOUQsR0FBVSxTQUFVNUUsRUFBTW5LLEVBQU1vTixHQUMxQyxJQUFJeEUsRUFDSixJQUFNd0UsRUFDTCxPQUF3QixJQUFqQmpELEVBQU1uSyxHQUFrQkEsRUFBS2dOLGVBQ2pDcEUsRUFBTXVCLEVBQUt5SyxpQkFBa0I1VSxLQUFZNEksRUFBSXVOLFVBQzlDdk4sRUFBSWxJLE1BQ0osUUFLRXVNLEdBMTRFUCxDQTQ0RUtyTCxHQUlMcUgsRUFBTzBMLEtBQU8xSCxFQUNkaEUsRUFBTytNLEtBQU8vSSxFQUFPMEosVUFHckIxTixFQUFPK00sS0FBTSxLQUFRL00sRUFBTytNLEtBQUsvRyxRQUNqQ2hHLEVBQU9vTixXQUFhcE4sRUFBTytULE9BQVMvUCxFQUFPb0osV0FDM0NwTixFQUFPSCxLQUFPbUUsRUFBT0UsUUFDckJsRSxFQUFPZ1UsU0FBV2hRLEVBQU9HLE1BQ3pCbkUsRUFBTytFLFNBQVdmLEVBQU9lLFNBQ3pCL0UsRUFBT2lVLGVBQWlCalEsRUFBT2tELE9BSy9CLElBQUllLEVBQU0sU0FBVS9HLEVBQU0rRyxFQUFLaU0sR0FJOUIsSUFIQSxJQUFJM0UsRUFBVSxHQUNiNEUsT0FBcUI1UixJQUFWMlIsR0FFRmhULEVBQU9BLEVBQU0rRyxLQUE2QixJQUFsQi9HLEVBQUtqQyxVQUN0QyxHQUF1QixJQUFsQmlDLEVBQUtqQyxTQUFpQixDQUMxQixHQUFLa1YsR0FBWW5VLEVBQVFrQixHQUFPa1QsR0FBSUYsR0FDbkMsTUFFRDNFLEVBQVExVSxLQUFNcUcsR0FHaEIsT0FBT3FPLEdBSUo4RSxFQUFXLFNBQVVwYyxFQUFHaUosR0FHM0IsSUFGQSxJQUFJcU8sRUFBVSxHQUVOdFgsRUFBR0EsRUFBSUEsRUFBRW1TLFlBQ0ksSUFBZm5TLEVBQUVnSCxVQUFrQmhILElBQU1pSixHQUM5QnFPLEVBQVExVSxLQUFNNUMsR0FJaEIsT0FBT3NYLEdBSUorRSxFQUFnQnRVLEVBQU8rTSxLQUFLekUsTUFBTWlNLGFBSXRDLFNBQVN2TSxFQUFVOUcsRUFBTW5LLEdBRXZCLE9BQU9tSyxFQUFLOEcsVUFBWTlHLEVBQUs4RyxTQUFTakUsZ0JBQWtCaE4sRUFBS2dOLGNBRy9ELElBQUl5USxFQUFhLGtFQUtqQixTQUFTQyxFQUFRekgsRUFBVTBILEVBQVdDLEdBQ3JDLE9BQUszVixFQUFZMFYsR0FDVDFVLEVBQU93QixLQUFNd0wsR0FBVSxTQUFVOUwsRUFBTTFLLEdBQzdDLFFBQVNrZSxFQUFVL2QsS0FBTXVLLEVBQU0xSyxFQUFHMEssS0FBV3lULEtBSzFDRCxFQUFVelYsU0FDUGUsRUFBT3dCLEtBQU13TCxHQUFVLFNBQVU5TCxHQUN2QyxPQUFTQSxJQUFTd1QsSUFBZ0JDLEtBS1YsaUJBQWRELEVBQ0oxVSxFQUFPd0IsS0FBTXdMLEdBQVUsU0FBVTlMLEdBQ3ZDLE9BQVN4QyxFQUFRL0gsS0FBTStkLEVBQVd4VCxJQUFVLElBQVF5VCxLQUsvQzNVLEVBQU9uRSxPQUFRNlksRUFBVzFILEVBQVUySCxHQUc1QzNVLEVBQU9uRSxPQUFTLFNBQVVrUixFQUFNcE0sRUFBT2dVLEdBQ3RDLElBQUl6VCxFQUFPUCxFQUFPLEdBTWxCLE9BSktnVSxJQUNKNUgsRUFBTyxRQUFVQSxFQUFPLEtBR0gsSUFBakJwTSxFQUFNaEgsUUFBa0MsSUFBbEJ1SCxFQUFLakMsU0FDeEJlLEVBQU8wTCxLQUFLTSxnQkFBaUI5SyxFQUFNNkwsR0FBUyxDQUFFN0wsR0FBUyxHQUd4RGxCLEVBQU8wTCxLQUFLakksUUFBU3NKLEVBQU0vTSxFQUFPd0IsS0FBTWIsR0FBTyxTQUFVTyxHQUMvRCxPQUF5QixJQUFsQkEsRUFBS2pDLGNBSWRlLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCMkosS0FBTSxTQUFVekwsR0FDZixJQUFJekosRUFBR29LLEVBQ05lLEVBQU0xRCxLQUFLdEUsT0FDWGliLEVBQU8zVyxLQUVSLEdBQXlCLGlCQUFiZ0MsRUFDWCxPQUFPaEMsS0FBS3lDLFVBQVdWLEVBQVFDLEdBQVdwRSxRQUFRLFdBQ2pELElBQU1yRixFQUFJLEVBQUdBLEVBQUltTCxFQUFLbkwsSUFDckIsR0FBS3dKLEVBQU8rRSxTQUFVNlAsRUFBTXBlLEdBQUt5SCxNQUNoQyxPQUFPLE1BUVgsSUFGQTJDLEVBQU0zQyxLQUFLeUMsVUFBVyxJQUVoQmxLLEVBQUksRUFBR0EsRUFBSW1MLEVBQUtuTCxJQUNyQndKLEVBQU8wTCxLQUFNekwsRUFBVTJVLEVBQU1wZSxHQUFLb0ssR0FHbkMsT0FBT2UsRUFBTSxFQUFJM0IsRUFBT29OLFdBQVl4TSxHQUFRQSxHQUU3Qy9FLE9BQVEsU0FBVW9FLEdBQ2pCLE9BQU9oQyxLQUFLeUMsVUFBVytULEVBQVF4VyxLQUFNZ0MsR0FBWSxJQUFJLEtBRXREMFUsSUFBSyxTQUFVMVUsR0FDZCxPQUFPaEMsS0FBS3lDLFVBQVcrVCxFQUFReFcsS0FBTWdDLEdBQVksSUFBSSxLQUV0RG1VLEdBQUksU0FBVW5VLEdBQ2IsUUFBU3dVLEVBQ1J4VyxLQUlvQixpQkFBYmdDLEdBQXlCcVUsRUFBY3RMLEtBQU0vSSxHQUNuREQsRUFBUUMsR0FDUkEsR0FBWSxJQUNiLEdBQ0N0RyxVQVNKLElBQUlrYixFQU1IL04sRUFBYSx1Q0FFTjlHLEVBQU9HLEdBQUdDLEtBQU8sU0FBVUgsRUFBVUMsRUFBUzRVLEdBQ3BELElBQUl4TSxFQUFPcEgsRUFHWCxJQUFNakIsRUFDTCxPQUFPaEMsS0FRUixHQUhBNlcsRUFBT0EsR0FBUUQsRUFHVSxpQkFBYjVVLEVBQXdCLENBYW5DLEtBUENxSSxFQUxzQixNQUFsQnJJLEVBQVUsSUFDc0IsTUFBcENBLEVBQVVBLEVBQVN0RyxPQUFTLElBQzVCc0csRUFBU3RHLFFBQVUsRUFHWCxDQUFFLEtBQU1zRyxFQUFVLE1BR2xCNkcsRUFBVzZCLEtBQU0xSSxNQUlWcUksRUFBTyxJQUFRcEksRUE2Q3hCLE9BQU1BLEdBQVdBLEVBQVFJLFFBQ3RCSixHQUFXNFUsR0FBT3BKLEtBQU16TCxHQUsxQmhDLEtBQUtzQyxZQUFhTCxHQUFVd0wsS0FBTXpMLEdBaER6QyxHQUFLcUksRUFBTyxHQUFNLENBWWpCLEdBWEFwSSxFQUFVQSxhQUFtQkYsRUFBU0UsRUFBUyxHQUFNQSxFQUlyREYsRUFBT2EsTUFBTzVDLEtBQU0rQixFQUFPK1UsVUFDMUJ6TSxFQUFPLEdBQ1BwSSxHQUFXQSxFQUFRakIsU0FBV2lCLEVBQVF3SSxlQUFpQnhJLEVBQVV0SCxHQUNqRSxJQUlJNGIsRUFBV3hMLEtBQU1WLEVBQU8sS0FBU3RJLEVBQU9vQyxjQUFlbEMsR0FDM0QsSUFBTW9JLEtBQVNwSSxFQUdUbEIsRUFBWWYsS0FBTXFLLElBQ3RCckssS0FBTXFLLEdBQVNwSSxFQUFTb0ksSUFJeEJySyxLQUFLZ1AsS0FBTTNFLEVBQU9wSSxFQUFTb0ksSUFLOUIsT0FBT3JLLEtBWVAsT0FSQWlELEVBQU90SSxFQUFTZ1EsZUFBZ0JOLEVBQU8sT0FLdENySyxLQUFNLEdBQU1pRCxFQUNaakQsS0FBS3RFLE9BQVMsR0FFUnNFLEtBY0gsT0FBS2dDLEVBQVNoQixVQUNwQmhCLEtBQU0sR0FBTWdDLEVBQ1poQyxLQUFLdEUsT0FBUyxFQUNQc0UsTUFJSWUsRUFBWWlCLFFBQ0RzQyxJQUFmdVMsRUFBS0UsTUFDWEYsRUFBS0UsTUFBTy9VLEdBR1pBLEVBQVVELEdBR0xBLEVBQU9vRCxVQUFXbkQsRUFBVWhDLFFBSWhDN0YsVUFBWTRILEVBQU9HLEdBR3hCMFUsRUFBYTdVLEVBQVFwSCxHQUdyQixJQUFJcWMsRUFBZSxpQ0FHbEJDLEVBQW1CLENBQ2xCQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVmxOLE1BQU0sRUFDTm1OLE1BQU0sR0FvRlIsU0FBU0MsRUFBU3JMLEVBQUtoQyxHQUN0QixNQUFVZ0MsRUFBTUEsRUFBS2hDLEtBQTRCLElBQWpCZ0MsRUFBSWhMLFdBQ3BDLE9BQU9nTCxFQW5GUmpLLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCd1QsSUFBSyxTQUFVdmMsR0FDZCxJQUFJd2MsRUFBVXhWLEVBQVFoSCxFQUFRaUYsTUFDN0J4SCxFQUFJK2UsRUFBUTdiLE9BRWIsT0FBT3NFLEtBQUtwQyxRQUFRLFdBRW5CLElBREEsSUFBSXJGLEVBQUksRUFDQUEsRUFBSUMsRUFBR0QsSUFDZCxHQUFLd0osRUFBTytFLFNBQVU5RyxLQUFNdVgsRUFBU2hmLElBQ3BDLE9BQU8sTUFNWGlmLFFBQVMsU0FBVS9ILEVBQVd4TixHQUM3QixJQUFJK0osRUFDSHpULEVBQUksRUFDSkMsRUFBSXdILEtBQUt0RSxPQUNUNFYsRUFBVSxHQUNWaUcsRUFBK0IsaUJBQWQ5SCxHQUEwQjFOLEVBQVEwTixHQUdwRCxJQUFNNEcsRUFBY3RMLEtBQU0wRSxHQUN6QixLQUFRbFgsRUFBSUMsRUFBR0QsSUFDZCxJQUFNeVQsRUFBTWhNLEtBQU16SCxHQUFLeVQsR0FBT0EsSUFBUS9KLEVBQVMrSixFQUFNQSxFQUFJN00sV0FHeEQsR0FBSzZNLEVBQUloTCxTQUFXLEtBQVF1VyxFQUMzQkEsRUFBUWxiLE1BQU8yUCxJQUFTLEVBR1AsSUFBakJBLEVBQUloTCxVQUNIZSxFQUFPMEwsS0FBS00sZ0JBQWlCL0IsRUFBS3lELElBQWdCLENBRW5ENkIsRUFBUTFVLEtBQU1vUCxHQUNkLE1BTUosT0FBT2hNLEtBQUt5QyxVQUFXNk8sRUFBUTVWLE9BQVMsRUFBSXFHLEVBQU9vTixXQUFZbUMsR0FBWUEsSUFJNUVqVixNQUFPLFNBQVU0RyxHQUdoQixPQUFNQSxFQUtlLGlCQUFUQSxFQUNKeEMsRUFBUS9ILEtBQU1xSixFQUFRa0IsR0FBUWpELEtBQU0sSUFJckNTLEVBQVEvSCxLQUFNc0gsS0FHcEJpRCxFQUFLWixPQUFTWSxFQUFNLEdBQU1BLEdBWmpCakQsS0FBTSxJQUFPQSxLQUFNLEdBQUliLFdBQWVhLEtBQUttRCxRQUFRc1UsVUFBVS9iLFFBQVUsR0FnQmxGZ2MsSUFBSyxTQUFVMVYsRUFBVUMsR0FDeEIsT0FBT2pDLEtBQUt5QyxVQUNYVixFQUFPb04sV0FDTnBOLEVBQU9hLE1BQU81QyxLQUFLNUcsTUFBTzJJLEVBQVFDLEVBQVVDLE9BSy9DMFYsUUFBUyxTQUFVM1YsR0FDbEIsT0FBT2hDLEtBQUswWCxJQUFpQixNQUFaMVYsRUFDaEJoQyxLQUFLNkMsV0FBYTdDLEtBQUs2QyxXQUFXakYsT0FBUW9FLE9BVTdDRCxFQUFPZSxLQUFNLENBQ1pnTyxPQUFRLFNBQVU3TixHQUNqQixJQUFJNk4sRUFBUzdOLEVBQUs5RCxXQUNsQixPQUFPMlIsR0FBOEIsS0FBcEJBLEVBQU85UCxTQUFrQjhQLEVBQVMsTUFFcEQ4RyxRQUFTLFNBQVUzVSxHQUNsQixPQUFPK0csRUFBSy9HLEVBQU0sZUFFbkI0VSxhQUFjLFNBQVU1VSxFQUFNdkQsRUFBSXVXLEdBQ2pDLE9BQU9qTSxFQUFLL0csRUFBTSxhQUFjZ1QsSUFFakNoTSxLQUFNLFNBQVVoSCxHQUNmLE9BQU9vVSxFQUFTcFUsRUFBTSxnQkFFdkJtVSxLQUFNLFNBQVVuVSxHQUNmLE9BQU9vVSxFQUFTcFUsRUFBTSxvQkFFdkI2VSxRQUFTLFNBQVU3VSxHQUNsQixPQUFPK0csRUFBSy9HLEVBQU0sZ0JBRW5Cd1UsUUFBUyxTQUFVeFUsR0FDbEIsT0FBTytHLEVBQUsvRyxFQUFNLG9CQUVuQjhVLFVBQVcsU0FBVTlVLEVBQU12RCxFQUFJdVcsR0FDOUIsT0FBT2pNLEVBQUsvRyxFQUFNLGNBQWVnVCxJQUVsQytCLFVBQVcsU0FBVS9VLEVBQU12RCxFQUFJdVcsR0FDOUIsT0FBT2pNLEVBQUsvRyxFQUFNLGtCQUFtQmdULElBRXRDRyxTQUFVLFNBQVVuVCxHQUNuQixPQUFPbVQsR0FBWW5ULEVBQUs5RCxZQUFjLElBQUtMLFdBQVltRSxJQUV4RGlVLFNBQVUsU0FBVWpVLEdBQ25CLE9BQU9tVCxFQUFVblQsRUFBS25FLGFBRXZCcVksU0FBVSxTQUFVbFUsR0FDbkIsT0FBNkIsTUFBeEJBLEVBQUs5SCxpQkFLVGdGLEVBQVU4QyxFQUFLOUgsaUJBRVI4SCxFQUFLOUgsaUJBTVI0TyxFQUFVOUcsRUFBTSxjQUNwQkEsRUFBT0EsRUFBS2dWLFNBQVdoVixHQUdqQmxCLEVBQU9hLE1BQU8sR0FBSUssRUFBSzdFLGdCQUU3QixTQUFVdEYsRUFBTW9KLEdBQ2xCSCxFQUFPRyxHQUFJcEosR0FBUyxTQUFVbWQsRUFBT2pVLEdBQ3BDLElBQUlzUCxFQUFVdlAsRUFBT2lCLElBQUtoRCxLQUFNa0MsRUFBSStULEdBdUJwQyxNQXJCMEIsVUFBckJuZCxFQUFLdUgsT0FBUSxLQUNqQjJCLEVBQVdpVSxHQUdQalUsR0FBZ0MsaUJBQWJBLElBQ3ZCc1AsRUFBVXZQLEVBQU9uRSxPQUFRb0UsRUFBVXNQLElBRy9CdFIsS0FBS3RFLE9BQVMsSUFHWnViLEVBQWtCbmUsSUFDdkJpSixFQUFPb04sV0FBWW1DLEdBSWYwRixFQUFhak0sS0FBTWpTLElBQ3ZCd1ksRUFBUTRHLFdBSUhsWSxLQUFLeUMsVUFBVzZPLE9BR3pCLElBQUk2RyxFQUFnQixvQkFzT3BCLFNBQVNDLEVBQVVDLEdBQ2xCLE9BQU9BLEVBRVIsU0FBU0MsRUFBU0MsR0FDakIsTUFBTUEsRUFHUCxTQUFTQyxFQUFZaGYsRUFBT2lmLEVBQVNDLEVBQVFDLEdBQzVDLElBQUlDLEVBRUosSUFHTXBmLEdBQVN1SCxFQUFjNlgsRUFBU3BmLEVBQU1xZixTQUMxQ0QsRUFBT2xnQixLQUFNYyxHQUFRME4sS0FBTXVSLEdBQVVLLEtBQU1KLEdBR2hDbGYsR0FBU3VILEVBQWM2WCxFQUFTcGYsRUFBTXVmLE1BQ2pESCxFQUFPbGdCLEtBQU1jLEVBQU9pZixFQUFTQyxHQVE3QkQsRUFBUWpZLFdBQU84RCxFQUFXLENBQUU5SyxHQUFRNkcsTUFBT3NZLElBTTNDLE1BQVFuZixHQUlUa2YsRUFBT2xZLFdBQU84RCxFQUFXLENBQUU5SyxLQXZPN0J1SSxFQUFPaVgsVUFBWSxTQUFVbmQsR0FJNUJBLEVBQTZCLGlCQUFaQSxFQWxDbEIsU0FBd0JBLEdBQ3ZCLElBQUk1QixFQUFTLEdBSWIsT0FIQThILEVBQU9lLEtBQU1qSCxFQUFRd08sTUFBTzhOLElBQW1CLElBQUksU0FBVWMsRUFBR0MsR0FDL0RqZixFQUFRaWYsSUFBUyxLQUVYamYsRUE4Qk5rZixDQUFldGQsR0FDZmtHLEVBQU8rQixPQUFRLEdBQUlqSSxHQUVwQixJQUNDdWQsRUFHQUMsRUFHQUMsRUFHQUMsRUFHQTNkLEVBQU8sR0FHUDRkLEVBQVEsR0FHUkMsR0FBZSxFQUdmQyxFQUFPLFdBUU4sSUFMQUgsRUFBU0EsR0FBVTFkLEVBQVE4ZCxLQUkzQkwsRUFBUUYsR0FBUyxFQUNUSSxFQUFNOWQsT0FBUStkLEdBQWUsRUFFcEMsSUFEQUosRUFBU0csRUFBTWpPLFVBQ0xrTyxFQUFjN2QsRUFBS0YsU0FHbUMsSUFBMURFLEVBQU02ZCxHQUFjalosTUFBTzZZLEVBQVEsR0FBS0EsRUFBUSxLQUNwRHhkLEVBQVErZCxjQUdSSCxFQUFjN2QsRUFBS0YsT0FDbkIyZCxHQUFTLEdBTU54ZCxFQUFRd2QsU0FDYkEsR0FBUyxHQUdWRCxHQUFTLEVBR0pHLElBSUgzZCxFQURJeWQsRUFDRyxHQUlBLEtBTVYxQyxFQUFPLENBR05lLElBQUssV0EyQkosT0ExQks5YixJQUdDeWQsSUFBV0QsSUFDZkssRUFBYzdkLEVBQUtGLE9BQVMsRUFDNUI4ZCxFQUFNNWMsS0FBTXljLElBR2IsU0FBVzNCLEVBQUt2RyxHQUNmcFAsRUFBT2UsS0FBTXFPLEdBQU0sU0FBVThILEVBQUd2VCxHQUMxQjNFLEVBQVkyRSxHQUNWN0osRUFBUWlhLFFBQVdhLEVBQUtXLElBQUs1UixJQUNsQzlKLEVBQUtnQixLQUFNOEksR0FFREEsR0FBT0EsRUFBSWhLLFFBQTRCLFdBQWxCb0csRUFBUTRELElBR3hDZ1MsRUFBS2hTLE1BVFIsQ0FZS3hDLFdBRUFtVyxJQUFXRCxHQUNmTSxLQUdLMVosTUFJUmpDLE9BQVEsV0FZUCxPQVhBZ0UsRUFBT2UsS0FBTUksV0FBVyxTQUFVK1YsRUFBR3ZULEdBRXBDLElBREEsSUFBSXJKLEdBQ01BLEVBQVEwRixFQUFPc0QsUUFBU0ssRUFBSzlKLEVBQU1TLEtBQWEsR0FDekRULEVBQUtnRSxPQUFRdkQsRUFBTyxHQUdmQSxHQUFTb2QsR0FDYkEsT0FJSXpaLE1BS1JzWCxJQUFLLFNBQVVwVixHQUNkLE9BQU9BLEVBQ05ILEVBQU9zRCxRQUFTbkQsRUFBSXRHLElBQVUsRUFDOUJBLEVBQUtGLE9BQVMsR0FJaEJtZSxNQUFPLFdBSU4sT0FIS2plLElBQ0pBLEVBQU8sSUFFRG9FLE1BTVI4WixRQUFTLFdBR1IsT0FGQVAsRUFBU0MsRUFBUSxHQUNqQjVkLEVBQU95ZCxFQUFTLEdBQ1RyWixNQUVSOEosU0FBVSxXQUNULE9BQVFsTyxHQU1UbWUsS0FBTSxXQUtMLE9BSkFSLEVBQVNDLEVBQVEsR0FDWEgsR0FBV0QsSUFDaEJ4ZCxFQUFPeWQsRUFBUyxJQUVWclosTUFFUnVaLE9BQVEsV0FDUCxRQUFTQSxHQUlWUyxTQUFVLFNBQVUvWCxFQUFTa1AsR0FTNUIsT0FSTW9JLElBRUxwSSxFQUFPLENBQUVsUCxHQURUa1AsRUFBT0EsR0FBUSxJQUNROVEsTUFBUThRLEVBQUs5USxRQUFVOFEsR0FDOUNxSSxFQUFNNWMsS0FBTXVVLEdBQ05pSSxHQUNMTSxLQUdLMVosTUFJUjBaLEtBQU0sV0FFTCxPQURBL0MsRUFBS3FELFNBQVVoYSxLQUFNa0QsV0FDZGxELE1BSVJzWixNQUFPLFdBQ04sUUFBU0EsSUFJWixPQUFPM0MsR0E0Q1I1VSxFQUFPK0IsT0FBUSxDQUVkbVcsU0FBVSxTQUFVQyxHQUNuQixJQUFJQyxFQUFTLENBSVgsQ0FBRSxTQUFVLFdBQVlwWSxFQUFPaVgsVUFBVyxVQUN6Q2pYLEVBQU9pWCxVQUFXLFVBQVksR0FDL0IsQ0FBRSxVQUFXLE9BQVFqWCxFQUFPaVgsVUFBVyxlQUN0Q2pYLEVBQU9pWCxVQUFXLGVBQWlCLEVBQUcsWUFDdkMsQ0FBRSxTQUFVLE9BQVFqWCxFQUFPaVgsVUFBVyxlQUNyQ2pYLEVBQU9pWCxVQUFXLGVBQWlCLEVBQUcsYUFFeENvQixFQUFRLFVBQ1J2QixFQUFVLENBQ1R1QixNQUFPLFdBQ04sT0FBT0EsR0FFUkMsT0FBUSxXQUVQLE9BREFDLEVBQVNwVCxLQUFNaEUsV0FBWTRWLEtBQU01VixXQUMxQmxELE1BRVIsTUFBUyxTQUFVa0MsR0FDbEIsT0FBTzJXLEVBQVFFLEtBQU0sS0FBTTdXLElBSTVCcVksS0FBTSxXQUNMLElBQUlDLEVBQU10WCxVQUVWLE9BQU9uQixFQUFPa1ksVUFBVSxTQUFVUSxHQUNqQzFZLEVBQU9lLEtBQU1xWCxHQUFRLFNBQVV6YSxFQUFJZ2IsR0FHbEMsSUFBSXhZLEVBQUtuQixFQUFZeVosRUFBS0UsRUFBTyxNQUFXRixFQUFLRSxFQUFPLElBS3hESixFQUFVSSxFQUFPLEtBQU8sV0FDdkIsSUFBSUMsRUFBV3pZLEdBQU1BLEVBQUcxQixNQUFPUixLQUFNa0QsV0FDaEN5WCxHQUFZNVosRUFBWTRaLEVBQVM5QixTQUNyQzhCLEVBQVM5QixVQUNQK0IsU0FBVUgsRUFBU0ksUUFDbkIzVCxLQUFNdVQsRUFBU2hDLFNBQ2ZLLEtBQU0yQixFQUFTL0IsUUFFakIrQixFQUFVQyxFQUFPLEdBQU0sUUFDdEIxYSxLQUNBa0MsRUFBSyxDQUFFeVksR0FBYXpYLGlCQUt4QnNYLEVBQU0sUUFDSDNCLFdBRUxFLEtBQU0sU0FBVStCLEVBQWFDLEVBQVlDLEdBQ3hDLElBQUlDLEVBQVcsRUFDZixTQUFTeEMsRUFBU3lDLEVBQU9aLEVBQVV6TyxFQUFTc1AsR0FDM0MsT0FBTyxXQUNOLElBQUlDLEVBQU9wYixLQUNWbVIsRUFBT2pPLFVBQ1BtWSxFQUFhLFdBQ1osSUFBSVYsRUFBVTVCLEVBS2QsS0FBS21DLEVBQVFELEdBQWIsQ0FRQSxJQUpBTixFQUFXOU8sRUFBUXJMLE1BQU80YSxFQUFNakssTUFJZG1KLEVBQVN6QixVQUMxQixNQUFNLElBQUl5QyxVQUFXLDRCQU90QnZDLEVBQU80QixJQUtnQixpQkFBYkEsR0FDWSxtQkFBYkEsSUFDUkEsRUFBUzVCLEtBR0xoWSxFQUFZZ1ksR0FHWG9DLEVBQ0pwQyxFQUFLcmdCLEtBQ0ppaUIsRUFDQWxDLEVBQVN3QyxFQUFVWCxFQUFVbEMsRUFBVStDLEdBQ3ZDMUMsRUFBU3dDLEVBQVVYLEVBQVVoQyxFQUFTNkMsS0FPdkNGLElBRUFsQyxFQUFLcmdCLEtBQ0ppaUIsRUFDQWxDLEVBQVN3QyxFQUFVWCxFQUFVbEMsRUFBVStDLEdBQ3ZDMUMsRUFBU3dDLEVBQVVYLEVBQVVoQyxFQUFTNkMsR0FDdEMxQyxFQUFTd0MsRUFBVVgsRUFBVWxDLEVBQzVCa0MsRUFBU2lCLGVBU1AxUCxJQUFZdU0sSUFDaEJnRCxPQUFPOVcsRUFDUDZNLEVBQU8sQ0FBRXdKLEtBS1JRLEdBQVdiLEVBQVNrQixhQUFlSixFQUFNakssTUFLN0NzSyxFQUFVTixFQUNURSxFQUNBLFdBQ0MsSUFDQ0EsSUFDQyxNQUFRaGdCLEdBRUowRyxFQUFPa1ksU0FBU3lCLGVBQ3BCM1osRUFBT2tZLFNBQVN5QixjQUFlcmdCLEVBQzlCb2dCLEVBQVFFLFlBTUxULEVBQVEsR0FBS0QsSUFJWnBQLElBQVl5TSxJQUNoQjhDLE9BQU85VyxFQUNQNk0sRUFBTyxDQUFFOVYsSUFHVmlmLEVBQVNzQixXQUFZUixFQUFNakssTUFTM0IrSixFQUNKTyxLQUtLMVosRUFBT2tZLFNBQVM0QixlQUNwQkosRUFBUUUsV0FBYTVaLEVBQU9rWSxTQUFTNEIsZ0JBRXRDbmhCLEVBQU9vaEIsV0FBWUwsS0FLdEIsT0FBTzFaLEVBQU9rWSxVQUFVLFNBQVVRLEdBR2pDTixFQUFRLEdBQUssR0FBSXpDLElBQ2hCZSxFQUNDLEVBQ0FnQyxFQUNBMVosRUFBWWlhLEdBQ1hBLEVBQ0E1QyxFQUNEcUMsRUFBU2MsYUFLWHBCLEVBQVEsR0FBSyxHQUFJekMsSUFDaEJlLEVBQ0MsRUFDQWdDLEVBQ0ExWixFQUFZK1osR0FDWEEsRUFDQTFDLElBS0grQixFQUFRLEdBQUssR0FBSXpDLElBQ2hCZSxFQUNDLEVBQ0FnQyxFQUNBMVosRUFBWWdhLEdBQ1hBLEVBQ0F6QyxPQUdBTyxXQUtMQSxRQUFTLFNBQVV2YyxHQUNsQixPQUFjLE1BQVBBLEVBQWN5RixFQUFPK0IsT0FBUXhILEVBQUt1YyxHQUFZQSxJQUd2RHlCLEVBQVcsR0FrRVosT0EvREF2WSxFQUFPZSxLQUFNcVgsR0FBUSxTQUFVNWhCLEVBQUdtaUIsR0FDakMsSUFBSTllLEVBQU84ZSxFQUFPLEdBQ2pCcUIsRUFBY3JCLEVBQU8sR0FLdEI3QixFQUFTNkIsRUFBTyxJQUFROWUsRUFBSzhiLElBR3hCcUUsR0FDSm5nQixFQUFLOGIsS0FDSixXQUlDMEMsRUFBUTJCLElBS1Q1QixFQUFRLEVBQUk1aEIsR0FBSyxHQUFJdWhCLFFBSXJCSyxFQUFRLEVBQUk1aEIsR0FBSyxHQUFJdWhCLFFBR3JCSyxFQUFRLEdBQUssR0FBSUosS0FHakJJLEVBQVEsR0FBSyxHQUFJSixNQU9uQm5lLEVBQUs4YixJQUFLZ0QsRUFBTyxHQUFJaEIsTUFLckJZLEVBQVVJLEVBQU8sSUFBUSxXQUV4QixPQURBSixFQUFVSSxFQUFPLEdBQU0sUUFBVTFhLE9BQVNzYSxPQUFXaFcsRUFBWXRFLEtBQU1rRCxXQUNoRWxELE1BTVJzYSxFQUFVSSxFQUFPLEdBQU0sUUFBVzllLEVBQUtvZSxZQUl4Q25CLEVBQVFBLFFBQVN5QixHQUdaSixHQUNKQSxFQUFLeGhCLEtBQU00aEIsRUFBVUEsR0FJZkEsR0FJUjBCLEtBQU0sU0FBVUMsR0FDZixJQUdDQyxFQUFZaFosVUFBVXhILE9BR3RCbkQsRUFBSTJqQixFQUdKQyxFQUFrQi9YLE1BQU83TCxHQUN6QjZqQixFQUFnQi9iLEVBQU0zSCxLQUFNd0ssV0FHNUJtWixFQUFTdGEsRUFBT2tZLFdBR2hCcUMsRUFBYSxTQUFVL2pCLEdBQ3RCLE9BQU8sU0FBVWlCLEdBQ2hCMmlCLEVBQWlCNWpCLEdBQU15SCxLQUN2Qm9jLEVBQWU3akIsR0FBTTJLLFVBQVV4SCxPQUFTLEVBQUkyRSxFQUFNM0gsS0FBTXdLLFdBQWMxSixJQUM1RDBpQixHQUNURyxFQUFPYixZQUFhVyxFQUFpQkMsS0FNekMsR0FBS0YsR0FBYSxJQUNqQjFELEVBQVl5RCxFQUFhSSxFQUFPblYsS0FBTW9WLEVBQVkvakIsSUFBTWtnQixRQUFTNEQsRUFBTzNELFFBQ3RFd0QsR0FHc0IsWUFBbkJHLEVBQU9qQyxTQUNYclosRUFBWXFiLEVBQWU3akIsSUFBTzZqQixFQUFlN2pCLEdBQUl3Z0IsT0FFckQsT0FBT3NELEVBQU90RCxPQUtoQixLQUFReGdCLEtBQ1BpZ0IsRUFBWTRELEVBQWU3akIsR0FBSytqQixFQUFZL2pCLEdBQUs4akIsRUFBTzNELFFBR3pELE9BQU8yRCxFQUFPeEQsYUFPaEIsSUFBSTBELEVBQWMseURBRWxCeGEsRUFBT2tZLFNBQVN5QixjQUFnQixTQUFVOVcsRUFBTzRYLEdBSTNDOWhCLEVBQU8raEIsU0FBVy9oQixFQUFPK2hCLFFBQVFDLE1BQVE5WCxHQUFTMlgsRUFBWXhSLEtBQU1uRyxFQUFNOUwsT0FDOUU0QixFQUFPK2hCLFFBQVFDLEtBQU0sOEJBQWdDOVgsRUFBTStYLFFBQVMvWCxFQUFNNFgsTUFBT0EsSUFPbkZ6YSxFQUFPNmEsZUFBaUIsU0FBVWhZLEdBQ2pDbEssRUFBT29oQixZQUFZLFdBQ2xCLE1BQU1sWCxNQVFSLElBQUlpWSxFQUFZOWEsRUFBT2tZLFdBa0R2QixTQUFTNkMsSUFDUm5pQixFQUFTb2lCLG9CQUFxQixtQkFBb0JELEdBQ2xEcGlCLEVBQU9xaUIsb0JBQXFCLE9BQVFELEdBQ3BDL2EsRUFBT2dWLFFBbkRSaFYsRUFBT0csR0FBRzZVLE1BQVEsU0FBVTdVLEdBWTNCLE9BVkEyYSxFQUNFOUQsS0FBTTdXLEdBS044YSxPQUFPLFNBQVVwWSxHQUNqQjdDLEVBQU82YSxlQUFnQmhZLE1BR2xCNUUsTUFHUitCLEVBQU8rQixPQUFRLENBR2RhLFNBQVMsRUFJVHNZLFVBQVcsRUFHWGxHLE1BQU8sU0FBVW1HLEtBR0YsSUFBVEEsSUFBa0JuYixFQUFPa2IsVUFBWWxiLEVBQU80QyxXQUtqRDVDLEVBQU80QyxTQUFVLEdBR0gsSUFBVHVZLEtBQW1CbmIsRUFBT2tiLFVBQVksR0FLM0NKLEVBQVVyQixZQUFhN2dCLEVBQVUsQ0FBRW9ILFFBSXJDQSxFQUFPZ1YsTUFBTWdDLEtBQU84RCxFQUFVOUQsS0FhRCxhQUF4QnBlLEVBQVN3aUIsWUFDYSxZQUF4QnhpQixFQUFTd2lCLGFBQTZCeGlCLEVBQVNrUyxnQkFBZ0J1USxTQUdqRTFpQixFQUFPb2hCLFdBQVkvWixFQUFPZ1YsUUFLMUJwYyxFQUFTdVMsaUJBQWtCLG1CQUFvQjRQLEdBRy9DcGlCLEVBQU93UyxpQkFBa0IsT0FBUTRQLElBUWxDLElBQUlPLEVBQVMsU0FBVTNhLEVBQU9SLEVBQUlwSSxFQUFLTixFQUFPOGpCLEVBQVdDLEVBQVVDLEdBQ2xFLElBQUlqbEIsRUFBSSxFQUNQbUwsRUFBTWhCLEVBQU1oSCxPQUNaK2hCLEVBQWMsTUFBUDNqQixFQUdSLEdBQXVCLFdBQWxCZ0ksRUFBUWhJLEdBRVosSUFBTXZCLEtBRE4ra0IsR0FBWSxFQUNEeGpCLEVBQ1Z1akIsRUFBUTNhLEVBQU9SLEVBQUkzSixFQUFHdUIsRUFBS3ZCLElBQUssRUFBTWdsQixFQUFVQyxRQUkzQyxRQUFlbFosSUFBVjlLLElBQ1g4akIsR0FBWSxFQUVOdmMsRUFBWXZILEtBQ2pCZ2tCLEdBQU0sR0FHRkMsSUFHQ0QsR0FDSnRiLEVBQUd4SixLQUFNZ0ssRUFBT2xKLEdBQ2hCMEksRUFBSyxPQUlMdWIsRUFBT3ZiLEVBQ1BBLEVBQUssU0FBVWUsRUFBTXlhLEVBQU1sa0IsR0FDMUIsT0FBT2lrQixFQUFLL2tCLEtBQU1xSixFQUFRa0IsR0FBUXpKLE1BS2hDMEksR0FDSixLQUFRM0osRUFBSW1MLEVBQUtuTCxJQUNoQjJKLEVBQ0NRLEVBQU9uSyxHQUFLdUIsRUFBSzBqQixFQUNqQmhrQixFQUNBQSxFQUFNZCxLQUFNZ0ssRUFBT25LLEdBQUtBLEVBQUcySixFQUFJUSxFQUFPbkssR0FBS3VCLEtBTS9DLE9BQUt3akIsRUFDRzVhLEVBSUgrYSxFQUNHdmIsRUFBR3hKLEtBQU1nSyxHQUdWZ0IsRUFBTXhCLEVBQUlRLEVBQU8sR0FBSzVJLEdBQVF5akIsR0FLbENJLEVBQVksUUFDZkMsRUFBYSxZQUdkLFNBQVNDLEVBQVlDLEVBQU1DLEdBQzFCLE9BQU9BLEVBQU9DLGNBTWYsU0FBU0MsRUFBV0MsR0FDbkIsT0FBT0EsRUFBT3haLFFBQVNpWixFQUFXLE9BQVFqWixRQUFTa1osRUFBWUMsR0FFaEUsSUFBSU0sRUFBYSxTQUFVQyxHQVExQixPQUEwQixJQUFuQkEsRUFBTXBkLFVBQXFDLElBQW5Cb2QsRUFBTXBkLFlBQXNCb2QsRUFBTXBkLFVBTWxFLFNBQVNxZCxJQUNScmUsS0FBS3VFLFFBQVV4QyxFQUFPd0MsUUFBVThaLEVBQUtDLE1BR3RDRCxFQUFLQyxJQUFNLEVBRVhELEVBQUtsa0IsVUFBWSxDQUVoQmtSLE1BQU8sU0FBVStTLEdBR2hCLElBQUk1a0IsRUFBUTRrQixFQUFPcGUsS0FBS3VFLFNBNEJ4QixPQXpCTS9LLElBQ0xBLEVBQVEsR0FLSDJrQixFQUFZQyxLQUlYQSxFQUFNcGQsU0FDVm9kLEVBQU9wZSxLQUFLdUUsU0FBWS9LLEVBTXhCUCxPQUFPQyxlQUFnQmtsQixFQUFPcGUsS0FBS3VFLFFBQVMsQ0FDM0MvSyxNQUFPQSxFQUNQK2tCLGNBQWMsTUFNWC9rQixHQUVSZ2xCLElBQUssU0FBVUosRUFBT0ssRUFBTWpsQixHQUMzQixJQUFJa2xCLEVBQ0hyVCxFQUFRckwsS0FBS3FMLE1BQU8rUyxHQUlyQixHQUFxQixpQkFBVEssRUFDWHBULEVBQU80UyxFQUFXUSxJQUFXamxCLE9BTTdCLElBQU1rbEIsS0FBUUQsRUFDYnBULEVBQU80UyxFQUFXUyxJQUFXRCxFQUFNQyxHQUdyQyxPQUFPclQsR0FFUmpTLElBQUssU0FBVWdsQixFQUFPdGtCLEdBQ3JCLFlBQWV3SyxJQUFSeEssRUFDTmtHLEtBQUtxTCxNQUFPK1MsR0FHWkEsRUFBT3BlLEtBQUt1RSxVQUFhNlosRUFBT3BlLEtBQUt1RSxTQUFXMFosRUFBV25rQixLQUU3RHVqQixPQUFRLFNBQVVlLEVBQU90a0IsRUFBS04sR0FhN0IsWUFBYThLLElBQVJ4SyxHQUNDQSxHQUFzQixpQkFBUkEsUUFBZ0N3SyxJQUFWOUssRUFFbEN3RyxLQUFLNUcsSUFBS2dsQixFQUFPdGtCLElBU3pCa0csS0FBS3dlLElBQUtKLEVBQU90a0IsRUFBS04sUUFJTDhLLElBQVY5SyxFQUFzQkEsRUFBUU0sSUFFdENpRSxPQUFRLFNBQVVxZ0IsRUFBT3RrQixHQUN4QixJQUFJdkIsRUFDSDhTLEVBQVErUyxFQUFPcGUsS0FBS3VFLFNBRXJCLFFBQWVELElBQVYrRyxFQUFMLENBSUEsUUFBYS9HLElBQVJ4SyxFQUFvQixDQWtCeEJ2QixHQVhDdUIsRUFKSXNLLE1BQU1DLFFBQVN2SyxHQUliQSxFQUFJa0osSUFBS2liLElBRWZua0IsRUFBTW1rQixFQUFXbmtCLE1BSUp1UixFQUNaLENBQUV2UixHQUNBQSxFQUFJdVEsTUFBTzhOLElBQW1CLElBRzFCemMsT0FFUixLQUFRbkQsWUFDQThTLEVBQU92UixFQUFLdkIsVUFLUitMLElBQVJ4SyxHQUFxQmlJLEVBQU9rRCxjQUFlb0csTUFNMUMrUyxFQUFNcGQsU0FDVm9kLEVBQU9wZSxLQUFLdUUsY0FBWUQsU0FFakI4WixFQUFPcGUsS0FBS3VFLFlBSXRCb2EsUUFBUyxTQUFVUCxHQUNsQixJQUFJL1MsRUFBUStTLEVBQU9wZSxLQUFLdUUsU0FDeEIsWUFBaUJELElBQVYrRyxJQUF3QnRKLEVBQU9rRCxjQUFlb0csS0FHdkQsSUFBSXVULEVBQVcsSUFBSVAsRUFFZlEsRUFBVyxJQUFJUixFQWNmUyxFQUFTLGdDQUNaQyxHQUFhLFNBMkJkLFNBQVNDLEdBQVUvYixFQUFNbkosRUFBSzJrQixHQUM3QixJQUFJM2xCLEVBSUosUUFBY3dMLElBQVRtYSxHQUF3QyxJQUFsQnhiLEVBQUtqQyxTQUkvQixHQUhBbEksRUFBTyxRQUFVZ0IsRUFBSTRLLFFBQVNxYSxHQUFZLE9BQVFqWixjQUc3QixpQkFGckIyWSxFQUFPeGIsRUFBS3BCLGFBQWMvSSxJQUVNLENBQy9CLElBQ0MybEIsRUFwQ0osU0FBa0JBLEdBQ2pCLE1BQWMsU0FBVEEsR0FJUyxVQUFUQSxJQUlTLFNBQVRBLEVBQ0csS0FJSEEsS0FBVUEsRUFBTyxJQUNiQSxFQUdKSyxFQUFPL1QsS0FBTTBULEdBQ1Y3ZixLQUFLcWdCLE1BQU9SLEdBR2JBLEdBY0dTLENBQVNULEdBQ2YsTUFBUXBqQixJQUdWd2pCLEVBQVNMLElBQUt2YixFQUFNbkosRUFBSzJrQixRQUV6QkEsT0FBT25hLEVBR1QsT0FBT21hLEVBR1IxYyxFQUFPK0IsT0FBUSxDQUNkNmEsUUFBUyxTQUFVMWIsR0FDbEIsT0FBTzRiLEVBQVNGLFFBQVMxYixJQUFVMmIsRUFBU0QsUUFBUzFiLElBR3REd2IsS0FBTSxTQUFVeGIsRUFBTW5LLEVBQU0ybEIsR0FDM0IsT0FBT0ksRUFBU3hCLE9BQVFwYSxFQUFNbkssRUFBTTJsQixJQUdyQ1UsV0FBWSxTQUFVbGMsRUFBTW5LLEdBQzNCK2xCLEVBQVM5Z0IsT0FBUWtGLEVBQU1uSyxJQUt4QnNtQixNQUFPLFNBQVVuYyxFQUFNbkssRUFBTTJsQixHQUM1QixPQUFPRyxFQUFTdkIsT0FBUXBhLEVBQU1uSyxFQUFNMmxCLElBR3JDWSxZQUFhLFNBQVVwYyxFQUFNbkssR0FDNUI4bEIsRUFBUzdnQixPQUFRa0YsRUFBTW5LLE1BSXpCaUosRUFBT0csR0FBRzRCLE9BQVEsQ0FDakIyYSxLQUFNLFNBQVUza0IsRUFBS04sR0FDcEIsSUFBSWpCLEVBQUdPLEVBQU0ybEIsRUFDWnhiLEVBQU9qRCxLQUFNLEdBQ2I0TCxFQUFRM0ksR0FBUUEsRUFBS2hHLFdBR3RCLFFBQWFxSCxJQUFSeEssRUFBb0IsQ0FDeEIsR0FBS2tHLEtBQUt0RSxTQUNUK2lCLEVBQU9JLEVBQVN6bEIsSUFBSzZKLEdBRUUsSUFBbEJBLEVBQUtqQyxXQUFtQjRkLEVBQVN4bEIsSUFBSzZKLEVBQU0saUJBQW1CLENBRW5FLElBREExSyxFQUFJcVQsRUFBTWxRLE9BQ0ZuRCxLQUlGcVQsRUFBT3JULElBRXNCLEtBRGpDTyxFQUFPOFMsRUFBT3JULEdBQUlPLE1BQ1IySCxRQUFTLFdBQ2xCM0gsRUFBT21sQixFQUFXbmxCLEVBQUt1SCxNQUFPLElBQzlCMmUsR0FBVS9iLEVBQU1uSyxFQUFNMmxCLEVBQU0zbEIsS0FJL0I4bEIsRUFBU0osSUFBS3ZiLEVBQU0sZ0JBQWdCLEdBSXRDLE9BQU93YixFQUlSLE1BQW9CLGlCQUFSM2tCLEVBQ0prRyxLQUFLOEMsTUFBTSxXQUNqQitiLEVBQVNMLElBQUt4ZSxLQUFNbEcsTUFJZnVqQixFQUFRcmQsTUFBTSxTQUFVeEcsR0FDOUIsSUFBSWlsQixFQU9KLEdBQUt4YixRQUFrQnFCLElBQVY5SyxFQUtaLFlBQWM4SyxLQURkbWEsRUFBT0ksRUFBU3psQixJQUFLNkosRUFBTW5KLFVBUWJ3SyxLQURkbWEsRUFBT08sR0FBVS9iLEVBQU1uSixJQUxmMmtCLE9BV1IsRUFJRHplLEtBQUs4QyxNQUFNLFdBR1YrYixFQUFTTCxJQUFLeGUsS0FBTWxHLEVBQUtOLFFBRXhCLEtBQU1BLEVBQU8wSixVQUFVeEgsT0FBUyxFQUFHLE1BQU0sSUFHN0N5akIsV0FBWSxTQUFVcmxCLEdBQ3JCLE9BQU9rRyxLQUFLOEMsTUFBTSxXQUNqQitiLEVBQVM5Z0IsT0FBUWlDLEtBQU1sRyxTQU0xQmlJLEVBQU8rQixPQUFRLENBQ2QwVixNQUFPLFNBQVV2VyxFQUFNOUIsRUFBTXNkLEdBQzVCLElBQUlqRixFQUVKLEdBQUt2VyxFQVlKLE9BWEE5QixHQUFTQSxHQUFRLE1BQVMsUUFDMUJxWSxFQUFRb0YsRUFBU3hsQixJQUFLNkosRUFBTTlCLEdBR3ZCc2QsS0FDRWpGLEdBQVNwVixNQUFNQyxRQUFTb2EsR0FDN0JqRixFQUFRb0YsRUFBU3ZCLE9BQVFwYSxFQUFNOUIsRUFBTVksRUFBT29ELFVBQVdzWixJQUV2RGpGLEVBQU01YyxLQUFNNmhCLElBR1BqRixHQUFTLElBSWxCOEYsUUFBUyxTQUFVcmMsRUFBTTlCLEdBQ3hCQSxFQUFPQSxHQUFRLEtBRWYsSUFBSXFZLEVBQVF6WCxFQUFPeVgsTUFBT3ZXLEVBQU05QixHQUMvQm9lLEVBQWMvRixFQUFNOWQsT0FDcEJ3RyxFQUFLc1gsRUFBTWpPLFFBQ1hpVSxFQUFRemQsRUFBTzBkLFlBQWF4YyxFQUFNOUIsR0FNdkIsZUFBUGUsSUFDSkEsRUFBS3NYLEVBQU1qTyxRQUNYZ1UsS0FHSXJkLElBSVUsT0FBVGYsR0FDSnFZLEVBQU0zSyxRQUFTLHFCQUlUMlEsRUFBTUUsS0FDYnhkLEVBQUd4SixLQUFNdUssR0FwQkYsV0FDTmxCLEVBQU91ZCxRQUFTcmMsRUFBTTlCLEtBbUJGcWUsS0FHaEJELEdBQWVDLEdBQ3BCQSxFQUFNM0YsTUFBTUgsUUFLZCtGLFlBQWEsU0FBVXhjLEVBQU05QixHQUM1QixJQUFJckgsRUFBTXFILEVBQU8sYUFDakIsT0FBT3lkLEVBQVN4bEIsSUFBSzZKLEVBQU1uSixJQUFTOGtCLEVBQVN2QixPQUFRcGEsRUFBTW5KLEVBQUssQ0FDL0QrZixNQUFPOVgsRUFBT2lYLFVBQVcsZUFBZ0J0QixLQUFLLFdBQzdDa0gsRUFBUzdnQixPQUFRa0YsRUFBTSxDQUFFOUIsRUFBTyxRQUFTckgsWUFNN0NpSSxFQUFPRyxHQUFHNEIsT0FBUSxDQUNqQjBWLE1BQU8sU0FBVXJZLEVBQU1zZCxHQUN0QixJQUFJa0IsRUFBUyxFQVFiLE1BTnFCLGlCQUFUeGUsSUFDWHNkLEVBQU90ZCxFQUNQQSxFQUFPLEtBQ1B3ZSxLQUdJemMsVUFBVXhILE9BQVNpa0IsRUFDaEI1ZCxFQUFPeVgsTUFBT3haLEtBQU0sR0FBS21CLFFBR2pCbUQsSUFBVG1hLEVBQ056ZSxLQUNBQSxLQUFLOEMsTUFBTSxXQUNWLElBQUkwVyxFQUFRelgsRUFBT3lYLE1BQU94WixLQUFNbUIsRUFBTXNkLEdBR3RDMWMsRUFBTzBkLFlBQWF6ZixLQUFNbUIsR0FFWixPQUFUQSxHQUFnQyxlQUFmcVksRUFBTyxJQUM1QnpYLEVBQU91ZCxRQUFTdGYsS0FBTW1CLE9BSTFCbWUsUUFBUyxTQUFVbmUsR0FDbEIsT0FBT25CLEtBQUs4QyxNQUFNLFdBQ2pCZixFQUFPdWQsUUFBU3RmLEtBQU1tQixPQUd4QnllLFdBQVksU0FBVXplLEdBQ3JCLE9BQU9uQixLQUFLd1osTUFBT3JZLEdBQVEsS0FBTSxLQUtsQzBYLFFBQVMsU0FBVTFYLEVBQU03RSxHQUN4QixJQUFJc1IsRUFDSHpSLEVBQVEsRUFDUjBqQixFQUFROWQsRUFBT2tZLFdBQ2ZsTCxFQUFXL08sS0FDWHpILEVBQUl5SCxLQUFLdEUsT0FDVCtjLEVBQVUsYUFDQ3RjLEdBQ1QwakIsRUFBTXJFLFlBQWF6TSxFQUFVLENBQUVBLEtBVWxDLElBTnFCLGlCQUFUNU4sSUFDWDdFLEVBQU02RSxFQUNOQSxPQUFPbUQsR0FFUm5ELEVBQU9BLEdBQVEsS0FFUDVJLE1BQ1BxVixFQUFNZ1IsRUFBU3hsQixJQUFLMlYsRUFBVXhXLEdBQUs0SSxFQUFPLGdCQUM5QnlNLEVBQUlpTSxRQUNmMWQsSUFDQXlSLEVBQUlpTSxNQUFNbkMsSUFBS2UsSUFJakIsT0FEQUEsSUFDT29ILEVBQU1oSCxRQUFTdmMsTUFHeEIsSUFBSXdqQixHQUFPLHNDQUEwQ0MsT0FFakRDLEdBQVUsSUFBSS9YLE9BQVEsaUJBQW1CNlgsR0FBTyxjQUFlLEtBRy9ERyxHQUFZLENBQUUsTUFBTyxRQUFTLFNBQVUsUUFFeENwVCxHQUFrQmxTLEVBQVNrUyxnQkFJMUJxVCxHQUFhLFNBQVVqZCxHQUN6QixPQUFPbEIsRUFBTytFLFNBQVU3RCxFQUFLd0gsY0FBZXhILElBRTdDa2QsR0FBVyxDQUFFQSxVQUFVLEdBT25CdFQsR0FBZ0J1VCxjQUNwQkYsR0FBYSxTQUFVamQsR0FDdEIsT0FBT2xCLEVBQU8rRSxTQUFVN0QsRUFBS3dILGNBQWV4SCxJQUMzQ0EsRUFBS21kLFlBQWFELE1BQWVsZCxFQUFLd0gsZ0JBRzFDLElBQUk0VixHQUFxQixTQUFVcGQsRUFBTXlJLEdBT3ZDLE1BQThCLFVBSDlCekksRUFBT3lJLEdBQU16SSxHQUdEbEcsTUFBTXVqQixTQUNNLEtBQXZCcmQsRUFBS2xHLE1BQU11akIsU0FNWEosR0FBWWpkLElBRXNCLFNBQWxDbEIsRUFBT3hGLElBQUswRyxFQUFNLFlBS3JCLFNBQVNzZCxHQUFXdGQsRUFBTXliLEVBQU04QixFQUFZQyxHQUMzQyxJQUFJQyxFQUFVQyxFQUNiQyxFQUFnQixHQUNoQkMsRUFBZUosRUFDZCxXQUNDLE9BQU9BLEVBQU16VSxPQUVkLFdBQ0MsT0FBT2pLLEVBQU94RixJQUFLMEcsRUFBTXliLEVBQU0sS0FFakNvQyxFQUFVRCxJQUNWRSxFQUFPUCxHQUFjQSxFQUFZLEtBQVN6ZSxFQUFPaWYsVUFBV3RDLEdBQVMsR0FBSyxNQUcxRXVDLEVBQWdCaGUsRUFBS2pDLFdBQ2xCZSxFQUFPaWYsVUFBV3RDLElBQW1CLE9BQVRxQyxJQUFrQkQsSUFDaERkLEdBQVF0VixLQUFNM0ksRUFBT3hGLElBQUswRyxFQUFNeWIsSUFFbEMsR0FBS3VDLEdBQWlCQSxFQUFlLEtBQVFGLEVBQU8sQ0FZbkQsSUFSQUQsR0FBb0IsRUFHcEJDLEVBQU9BLEdBQVFFLEVBQWUsR0FHOUJBLEdBQWlCSCxHQUFXLEVBRXBCRixLQUlQN2UsRUFBT2hGLE1BQU9rRyxFQUFNeWIsRUFBTXVDLEVBQWdCRixJQUNuQyxFQUFJSixJQUFZLEdBQU1BLEVBQVFFLElBQWlCQyxHQUFXLE1BQVcsSUFDM0VGLEVBQWdCLEdBRWpCSyxHQUFnQ04sRUFJakNNLEdBQWdDLEVBQ2hDbGYsRUFBT2hGLE1BQU9rRyxFQUFNeWIsRUFBTXVDLEVBQWdCRixHQUcxQ1AsRUFBYUEsR0FBYyxHQWdCNUIsT0FiS0EsSUFDSlMsR0FBaUJBLElBQWtCSCxHQUFXLEVBRzlDSixFQUFXRixFQUFZLEdBQ3RCUyxHQUFrQlQsRUFBWSxHQUFNLEdBQU1BLEVBQVksSUFDckRBLEVBQVksR0FDVEMsSUFDSkEsRUFBTU0sS0FBT0EsRUFDYk4sRUFBTTVQLE1BQVFvUSxFQUNkUixFQUFNN2MsSUFBTThjLElBR1BBLEVBSVIsSUFBSVEsR0FBb0IsR0FFeEIsU0FBU0MsR0FBbUJsZSxHQUMzQixJQUFJMlEsRUFDSG5TLEVBQU13QixFQUFLd0gsY0FDWFYsRUFBVzlHLEVBQUs4RyxTQUNoQnVXLEVBQVVZLEdBQW1CblgsR0FFOUIsT0FBS3VXLElBSUwxTSxFQUFPblMsRUFBSTJmLEtBQUs1akIsWUFBYWlFLEVBQUl6RSxjQUFlK00sSUFDaER1VyxFQUFVdmUsRUFBT3hGLElBQUtxWCxFQUFNLFdBRTVCQSxFQUFLelUsV0FBV2QsWUFBYXVWLEdBRVosU0FBWjBNLElBQ0pBLEVBQVUsU0FFWFksR0FBbUJuWCxHQUFhdVcsRUFFekJBLEdBR1IsU0FBU2UsR0FBVXRTLEVBQVV1UyxHQU81QixJQU5BLElBQUloQixFQUFTcmQsRUFDWnNlLEVBQVMsR0FDVGxsQixFQUFRLEVBQ1JYLEVBQVNxVCxFQUFTclQsT0FHWFcsRUFBUVgsRUFBUVcsS0FDdkI0RyxFQUFPOEwsRUFBVTFTLElBQ05VLFFBSVh1akIsRUFBVXJkLEVBQUtsRyxNQUFNdWpCLFFBQ2hCZ0IsR0FLYSxTQUFaaEIsSUFDSmlCLEVBQVFsbEIsR0FBVXVpQixFQUFTeGxCLElBQUs2SixFQUFNLFlBQWUsS0FDL0NzZSxFQUFRbGxCLEtBQ2I0RyxFQUFLbEcsTUFBTXVqQixRQUFVLEtBR0ssS0FBdkJyZCxFQUFLbEcsTUFBTXVqQixTQUFrQkQsR0FBb0JwZCxLQUNyRHNlLEVBQVFsbEIsR0FBVThrQixHQUFtQmxlLEtBR3JCLFNBQVpxZCxJQUNKaUIsRUFBUWxsQixHQUFVLE9BR2xCdWlCLEVBQVNKLElBQUt2YixFQUFNLFVBQVdxZCxLQU1sQyxJQUFNamtCLEVBQVEsRUFBR0EsRUFBUVgsRUFBUVcsSUFDUixNQUFuQmtsQixFQUFRbGxCLEtBQ1owUyxFQUFVMVMsR0FBUVUsTUFBTXVqQixRQUFVaUIsRUFBUWxsQixJQUk1QyxPQUFPMFMsRUFHUmhOLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCd2QsS0FBTSxXQUNMLE9BQU9ELEdBQVVyaEIsTUFBTSxJQUV4QndoQixLQUFNLFdBQ0wsT0FBT0gsR0FBVXJoQixPQUVsQnloQixPQUFRLFNBQVVySCxHQUNqQixNQUFzQixrQkFBVkEsRUFDSkEsRUFBUXBhLEtBQUtzaEIsT0FBU3RoQixLQUFLd2hCLE9BRzVCeGhCLEtBQUs4QyxNQUFNLFdBQ1p1ZCxHQUFvQnJnQixNQUN4QitCLEVBQVEvQixNQUFPc2hCLE9BRWZ2ZixFQUFRL0IsTUFBT3doQixhQUtuQixJQVVFRSxHQUNBN1QsR0FYRThULEdBQWlCLHdCQUVqQkMsR0FBVyxpQ0FFWEMsR0FBYyxxQ0FNaEJILEdBRGMvbUIsRUFBU21uQix5QkFDUnRrQixZQUFhN0MsRUFBU3FDLGNBQWUsU0FDcEQ2USxHQUFRbFQsRUFBU3FDLGNBQWUsVUFNM0JLLGFBQWMsT0FBUSxTQUM1QndRLEdBQU14USxhQUFjLFVBQVcsV0FDL0J3USxHQUFNeFEsYUFBYyxPQUFRLEtBRTVCcWtCLEdBQUlsa0IsWUFBYXFRLElBSWpCL00sRUFBUWloQixXQUFhTCxHQUFJTSxXQUFXLEdBQU9BLFdBQVcsR0FBT2hSLFVBQVVpQixRQUl2RXlQLEdBQUk1VCxVQUFZLHlCQUNoQmhOLEVBQVFtaEIsaUJBQW1CUCxHQUFJTSxXQUFXLEdBQU9oUixVQUFVNkUsYUFLM0Q2TCxHQUFJNVQsVUFBWSxvQkFDaEJoTixFQUFRb2hCLFNBQVdSLEdBQUkxUSxVQUt4QixJQUFJbVIsR0FBVSxDQUtiQyxNQUFPLENBQUUsRUFBRyxVQUFXLFlBQ3ZCQyxJQUFLLENBQUUsRUFBRyxvQkFBcUIsdUJBQy9CQyxHQUFJLENBQUUsRUFBRyxpQkFBa0Isb0JBQzNCQyxHQUFJLENBQUUsRUFBRyxxQkFBc0IseUJBRS9CQyxTQUFVLENBQUUsRUFBRyxHQUFJLEtBWXBCLFNBQVNDLEdBQVF4Z0IsRUFBUzBMLEdBSXpCLElBQUloTCxFQVlKLE9BVENBLE9BRDRDLElBQWpDVixFQUFRMkkscUJBQ2IzSSxFQUFRMkkscUJBQXNCK0MsR0FBTyxVQUVJLElBQTdCMUwsRUFBUWtKLGlCQUNwQmxKLEVBQVFrSixpQkFBa0J3QyxHQUFPLEtBR2pDLFFBR01ySixJQUFScUosR0FBcUJBLEdBQU81RCxFQUFVOUgsRUFBUzBMLEdBQzVDNUwsRUFBT2EsTUFBTyxDQUFFWCxHQUFXVSxHQUc1QkEsRUFLUixTQUFTK2YsR0FBZWhnQixFQUFPaWdCLEdBSTlCLElBSEEsSUFBSXBxQixFQUFJLEVBQ1BDLEVBQUlrSyxFQUFNaEgsT0FFSG5ELEVBQUlDLEVBQUdELElBQ2RxbUIsRUFBU0osSUFDUjliLEVBQU9uSyxHQUNQLGNBQ0NvcUIsR0FBZS9ELEVBQVN4bEIsSUFBS3VwQixFQUFhcHFCLEdBQUssZUExQ25ENHBCLEdBQVFTLE1BQVFULEdBQVFVLE1BQVFWLEdBQVFXLFNBQVdYLEdBQVFZLFFBQVVaLEdBQVFDLE1BQzdFRCxHQUFRYSxHQUFLYixHQUFRSSxHQUdmemhCLEVBQVFvaEIsU0FDYkMsR0FBUWMsU0FBV2QsR0FBUUQsT0FBUyxDQUFFLEVBQUcsK0JBQWdDLGNBMkMxRSxJQUFJelosR0FBUSxZQUVaLFNBQVN5YSxHQUFleGdCLEVBQU9ULEVBQVNraEIsRUFBU0MsRUFBV0MsR0FPM0QsSUFOQSxJQUFJcGdCLEVBQU0ySyxFQUFLRCxFQUFLMlYsRUFBTUMsRUFBVTVmLEVBQ25DNmYsRUFBV3ZoQixFQUFRNmYseUJBQ25CMkIsRUFBUSxHQUNSbHJCLEVBQUksRUFDSkMsRUFBSWtLLEVBQU1oSCxPQUVIbkQsRUFBSUMsRUFBR0QsSUFHZCxJQUZBMEssRUFBT1AsRUFBT25LLEtBRVEsSUFBVDBLLEVBR1osR0FBd0IsV0FBbkJuQixFQUFRbUIsR0FJWmxCLEVBQU9hLE1BQU82Z0IsRUFBT3hnQixFQUFLakMsU0FBVyxDQUFFaUMsR0FBU0EsUUFHMUMsR0FBTXdGLEdBQU1zQyxLQUFNOUgsR0FJbEIsQ0FVTixJQVRBMkssRUFBTUEsR0FBTzRWLEVBQVNobUIsWUFBYXlFLEVBQVFqRixjQUFlLFFBRzFEMlEsR0FBUWlVLEdBQVNsWCxLQUFNekgsSUFBVSxDQUFFLEdBQUksS0FBUSxHQUFJNkMsY0FDbkR3ZCxFQUFPbkIsR0FBU3hVLElBQVN3VSxHQUFRSyxTQUNqQzVVLEVBQUlFLFVBQVl3VixFQUFNLEdBQU12aEIsRUFBTzJoQixjQUFlemdCLEdBQVNxZ0IsRUFBTSxHQUdqRTNmLEVBQUkyZixFQUFNLEdBQ0YzZixLQUNQaUssRUFBTUEsRUFBSW9ELFVBS1hqUCxFQUFPYSxNQUFPNmdCLEVBQU83VixFQUFJeFAsYUFHekJ3UCxFQUFNNFYsRUFBUzFrQixZQUdYeVEsWUFBYyxRQXpCbEJrVSxFQUFNN21CLEtBQU1xRixFQUFROUQsZUFBZ0I4RSxJQWtDdkMsSUFIQXVnQixFQUFTalUsWUFBYyxHQUV2QmhYLEVBQUksRUFDTTBLLEVBQU93Z0IsRUFBT2xyQixNQUd2QixHQUFLNnFCLEdBQWFyaEIsRUFBT3NELFFBQVNwQyxFQUFNbWdCLElBQWUsRUFDakRDLEdBQ0pBLEVBQVF6bUIsS0FBTXFHLFFBZ0JoQixHQVhBc2dCLEVBQVdyRCxHQUFZamQsR0FHdkIySyxFQUFNNlUsR0FBUWUsRUFBU2htQixZQUFheUYsR0FBUSxVQUd2Q3NnQixHQUNKYixHQUFlOVUsR0FJWHVWLEVBRUosSUFEQXhmLEVBQUksRUFDTVYsRUFBTzJLLEVBQUtqSyxNQUNoQmtlLEdBQVk5VyxLQUFNOUgsRUFBSzlCLE1BQVEsS0FDbkNnaUIsRUFBUXZtQixLQUFNcUcsR0FNbEIsT0FBT3VnQixFQUlSLElBQ0NHLEdBQVksT0FDWkMsR0FBYyxpREFDZEMsR0FBaUIsc0JBRWxCLFNBQVNDLEtBQ1IsT0FBTyxFQUdSLFNBQVNDLEtBQ1IsT0FBTyxFQVNSLFNBQVNDLEdBQVkvZ0IsRUFBTTlCLEdBQzFCLE9BQVM4QixJQU1WLFdBQ0MsSUFDQyxPQUFPdEksRUFBU2tYLGNBQ2YsTUFBUW9TLEtBVFFDLEtBQXFDLFVBQVQvaUIsR0FZL0MsU0FBU2dqQixHQUFJbGhCLEVBQU1taEIsRUFBT3BpQixFQUFVeWMsRUFBTXZjLEVBQUltaUIsR0FDN0MsSUFBSUMsRUFBUW5qQixFQUdaLEdBQXNCLGlCQUFWaWpCLEVBQXFCLENBU2hDLElBQU1qakIsSUFObUIsaUJBQWJhLElBR1h5YyxFQUFPQSxHQUFRemMsRUFDZkEsT0FBV3NDLEdBRUU4ZixFQUNiRCxHQUFJbGhCLEVBQU05QixFQUFNYSxFQUFVeWMsRUFBTTJGLEVBQU9qakIsR0FBUWtqQixHQUVoRCxPQUFPcGhCLEVBc0JSLEdBbkJhLE1BQVJ3YixHQUFzQixNQUFOdmMsR0FHcEJBLEVBQUtGLEVBQ0x5YyxFQUFPemMsT0FBV3NDLEdBQ0QsTUFBTnBDLElBQ2MsaUJBQWJGLEdBR1hFLEVBQUt1YyxFQUNMQSxPQUFPbmEsSUFJUHBDLEVBQUt1YyxFQUNMQSxFQUFPemMsRUFDUEEsT0FBV3NDLEtBR0QsSUFBUHBDLEVBQ0pBLEVBQUs2aEIsUUFDQyxJQUFNN2hCLEVBQ1osT0FBT2UsRUFlUixPQVphLElBQVJvaEIsSUFDSkMsRUFBU3BpQixHQUNUQSxFQUFLLFNBQVVxaUIsR0FJZCxPQURBeGlCLElBQVN5aUIsSUFBS0QsR0FDUEQsRUFBTzlqQixNQUFPUixLQUFNa0QsYUFJekJ5QyxLQUFPMmUsRUFBTzNlLE9BQVUyZSxFQUFPM2UsS0FBTzVELEVBQU80RCxTQUUxQzFDLEVBQUtILE1BQU0sV0FDakJmLEVBQU93aUIsTUFBTTdNLElBQUsxWCxLQUFNb2tCLEVBQU9saUIsRUFBSXVjLEVBQU16YyxNQSthM0MsU0FBU3lpQixHQUFnQi9ZLEVBQUl2SyxFQUFNNmlCLEdBRzVCQSxHQVFOcEYsRUFBU0osSUFBSzlTLEVBQUl2SyxHQUFNLEdBQ3hCWSxFQUFPd2lCLE1BQU03TSxJQUFLaE0sRUFBSXZLLEVBQU0sQ0FDM0J3TCxXQUFXLEVBQ1hkLFFBQVMsU0FBVTBZLEdBQ2xCLElBQUlHLEVBQVVqcEIsRUFDYmtwQixFQUFRL0YsRUFBU3hsQixJQUFLNEcsS0FBTW1CLEdBRTdCLEdBQXlCLEVBQWxCb2pCLEVBQU1LLFdBQW1CNWtCLEtBQU1tQixJQUtyQyxHQUFNd2pCLEVBQU1qcEIsUUFpQ0VxRyxFQUFPd2lCLE1BQU1wSixRQUFTaGEsSUFBVSxJQUFLMGpCLGNBQ2xETixFQUFNTyx1QkFmTixHQWRBSCxFQUFRdGtCLEVBQU0zSCxLQUFNd0ssV0FDcEIwYixFQUFTSixJQUFLeGUsS0FBTW1CLEVBQU13akIsR0FLMUJELEVBQVdWLEVBQVloa0IsS0FBTW1CLEdBQzdCbkIsS0FBTW1CLEtBRUR3akIsS0FETGxwQixFQUFTbWpCLEVBQVN4bEIsSUFBSzRHLEtBQU1tQixLQUNKdWpCLEVBQ3hCOUYsRUFBU0osSUFBS3hlLEtBQU1tQixHQUFNLEdBRTFCMUYsRUFBUyxHQUVMa3BCLElBQVVscEIsRUFLZCxPQUZBOG9CLEVBQU1RLDJCQUNOUixFQUFNUyxpQkFDQ3ZwQixFQUFPakMsV0FlTG1yQixFQUFNanBCLFNBR2pCa2pCLEVBQVNKLElBQUt4ZSxLQUFNbUIsRUFBTSxDQUN6QjNILE1BQU91SSxFQUFPd2lCLE1BQU1VLFFBSW5CbGpCLEVBQU8rQixPQUFRNmdCLEVBQU8sR0FBSzVpQixFQUFPbWpCLE1BQU0vcUIsV0FDeEN3cUIsRUFBTXRrQixNQUFPLEdBQ2JMLFFBS0Z1a0IsRUFBTVEscUNBekUwQnpnQixJQUE3QnNhLEVBQVN4bEIsSUFBS3NTLEVBQUl2SyxJQUN0QlksRUFBT3dpQixNQUFNN00sSUFBS2hNLEVBQUl2SyxFQUFNMmlCLElBNWEvQi9oQixFQUFPd2lCLE1BQVEsQ0FFZDFrQixPQUFRLEdBRVI2WCxJQUFLLFNBQVV6VSxFQUFNbWhCLEVBQU92WSxFQUFTNFMsRUFBTXpjLEdBRTFDLElBQUltakIsRUFBYUMsRUFBYXhYLEVBQzdCeVgsRUFBUTVyQixFQUFHNnJCLEVBQ1huSyxFQUFTb0ssRUFBVXBrQixFQUFNcWtCLEVBQVlDLEVBQ3JDQyxFQUFXOUcsRUFBU3hsQixJQUFLNkosR0FHMUIsR0FBTWtiLEVBQVlsYixHQXVDbEIsSUFsQ0s0SSxFQUFRQSxVQUVaQSxHQURBc1osRUFBY3RaLEdBQ1FBLFFBQ3RCN0osRUFBV21qQixFQUFZbmpCLFVBS25CQSxHQUNKRCxFQUFPMEwsS0FBS00sZ0JBQWlCbEIsR0FBaUI3SyxHQUl6QzZKLEVBQVFsRyxPQUNia0csRUFBUWxHLEtBQU81RCxFQUFPNEQsU0FJZjBmLEVBQVNLLEVBQVNMLFVBQ3pCQSxFQUFTSyxFQUFTTCxPQUFTcHNCLE9BQU9ZLE9BQVEsUUFFbkN1ckIsRUFBY00sRUFBU0MsVUFDOUJQLEVBQWNNLEVBQVNDLE9BQVMsU0FBVXRxQixHQUl6QyxZQUF5QixJQUFYMEcsR0FBMEJBLEVBQU93aUIsTUFBTXFCLFlBQWN2cUIsRUFBRThGLEtBQ3BFWSxFQUFPd2lCLE1BQU1zQixTQUFTcmxCLE1BQU95QyxFQUFNQyxnQkFBY29CLElBTXBEN0ssR0FEQTJxQixHQUFVQSxHQUFTLElBQUsvWixNQUFPOE4sSUFBbUIsQ0FBRSxLQUMxQ3pjLE9BQ0ZqQyxLQUVQMEgsRUFBT3NrQixHQURQN1gsRUFBTWlXLEdBQWVuWixLQUFNMFosRUFBTzNxQixLQUFTLElBQ3BCLEdBQ3ZCK3JCLEdBQWU1WCxFQUFLLElBQU8sSUFBSy9ILE1BQU8sS0FBTWhDLE9BR3ZDMUMsSUFLTmdhLEVBQVVwWixFQUFPd2lCLE1BQU1wSixRQUFTaGEsSUFBVSxHQUcxQ0EsR0FBU2EsRUFBV21aLEVBQVEwSixhQUFlMUosRUFBUTJLLFdBQWMza0IsRUFHakVnYSxFQUFVcFosRUFBT3dpQixNQUFNcEosUUFBU2hhLElBQVUsR0FHMUNta0IsRUFBWXZqQixFQUFPK0IsT0FBUSxDQUMxQjNDLEtBQU1BLEVBQ05za0IsU0FBVUEsRUFDVmhILEtBQU1BLEVBQ041UyxRQUFTQSxFQUNUbEcsS0FBTWtHLEVBQVFsRyxLQUNkM0QsU0FBVUEsRUFDVnNVLGFBQWN0VSxHQUFZRCxFQUFPK00sS0FBS3pFLE1BQU1pTSxhQUFhdkwsS0FBTS9JLEdBQy9EMkssVUFBVzZZLEVBQVczbkIsS0FBTSxNQUMxQnNuQixJQUdLSSxFQUFXRixFQUFRbGtCLE9BQzFCb2tCLEVBQVdGLEVBQVFsa0IsR0FBUyxJQUNuQjRrQixjQUFnQixFQUduQjVLLEVBQVE2SyxRQUNpRCxJQUE5RDdLLEVBQVE2SyxNQUFNdHRCLEtBQU11SyxFQUFNd2IsRUFBTStHLEVBQVlKLElBRXZDbmlCLEVBQUtpSyxrQkFDVGpLLEVBQUtpSyxpQkFBa0IvTCxFQUFNaWtCLElBSzNCakssRUFBUXpELE1BQ1p5RCxFQUFRekQsSUFBSWhmLEtBQU11SyxFQUFNcWlCLEdBRWxCQSxFQUFVelosUUFBUWxHLE9BQ3ZCMmYsRUFBVXpaLFFBQVFsRyxLQUFPa0csRUFBUWxHLE9BSzlCM0QsRUFDSnVqQixFQUFTM2xCLE9BQVEybEIsRUFBU1EsZ0JBQWlCLEVBQUdULEdBRTlDQyxFQUFTM29CLEtBQU0wb0IsR0FJaEJ2akIsRUFBT3dpQixNQUFNMWtCLE9BQVFzQixJQUFTLElBTWhDcEQsT0FBUSxTQUFVa0YsRUFBTW1oQixFQUFPdlksRUFBUzdKLEVBQVVpa0IsR0FFakQsSUFBSXRpQixFQUFHdWlCLEVBQVd0WSxFQUNqQnlYLEVBQVE1ckIsRUFBRzZyQixFQUNYbkssRUFBU29LLEVBQVVwa0IsRUFBTXFrQixFQUFZQyxFQUNyQ0MsRUFBVzlHLEVBQVNELFFBQVMxYixJQUFVMmIsRUFBU3hsQixJQUFLNkosR0FFdEQsR0FBTXlpQixJQUFlTCxFQUFTSyxFQUFTTCxRQUF2QyxDQU9BLElBREE1ckIsR0FEQTJxQixHQUFVQSxHQUFTLElBQUsvWixNQUFPOE4sSUFBbUIsQ0FBRSxLQUMxQ3pjLE9BQ0ZqQyxLQU1QLEdBSkEwSCxFQUFPc2tCLEdBRFA3WCxFQUFNaVcsR0FBZW5aLEtBQU0wWixFQUFPM3FCLEtBQVMsSUFDcEIsR0FDdkIrckIsR0FBZTVYLEVBQUssSUFBTyxJQUFLL0gsTUFBTyxLQUFNaEMsT0FHdkMxQyxFQUFOLENBZUEsSUFSQWdhLEVBQVVwWixFQUFPd2lCLE1BQU1wSixRQUFTaGEsSUFBVSxHQUUxQ29rQixFQUFXRixFQURYbGtCLEdBQVNhLEVBQVdtWixFQUFRMEosYUFBZTFKLEVBQVEySyxXQUFjM2tCLElBQ3BDLEdBQzdCeU0sRUFBTUEsRUFBSyxJQUNWLElBQUkzRixPQUFRLFVBQVl1ZCxFQUFXM25CLEtBQU0saUJBQW9CLFdBRzlEcW9CLEVBQVl2aUIsRUFBSTRoQixFQUFTN3BCLE9BQ2pCaUksS0FDUDJoQixFQUFZQyxFQUFVNWhCLElBRWZzaUIsR0FBZVIsSUFBYUgsRUFBVUcsVUFDekM1WixHQUFXQSxFQUFRbEcsT0FBUzJmLEVBQVUzZixNQUN0Q2lJLElBQU9BLEVBQUk3QyxLQUFNdWEsRUFBVTNZLFlBQzNCM0ssR0FBWUEsSUFBYXNqQixFQUFVdGpCLFdBQ3hCLE9BQWJBLElBQXFCc2pCLEVBQVV0akIsWUFDaEN1akIsRUFBUzNsQixPQUFRK0QsRUFBRyxHQUVmMmhCLEVBQVV0akIsVUFDZHVqQixFQUFTUSxnQkFFTDVLLEVBQVFwZCxRQUNab2QsRUFBUXBkLE9BQU9yRixLQUFNdUssRUFBTXFpQixJQU96QlksSUFBY1gsRUFBUzdwQixTQUNyQnlmLEVBQVFnTCxXQUNrRCxJQUEvRGhMLEVBQVFnTCxTQUFTenRCLEtBQU11SyxFQUFNdWlCLEVBQVlFLEVBQVNDLFNBRWxENWpCLEVBQU9xa0IsWUFBYW5qQixFQUFNOUIsRUFBTXVrQixFQUFTQyxlQUduQ04sRUFBUWxrQixTQTFDZixJQUFNQSxLQUFRa2tCLEVBQ2J0akIsRUFBT3dpQixNQUFNeG1CLE9BQVFrRixFQUFNOUIsRUFBT2lqQixFQUFPM3FCLEdBQUtvUyxFQUFTN0osR0FBVSxHQThDL0RELEVBQU9rRCxjQUFlb2dCLElBQzFCekcsRUFBUzdnQixPQUFRa0YsRUFBTSxtQkFJekI0aUIsU0FBVSxTQUFVUSxHQUVuQixJQUFJOXRCLEVBQUdvTCxFQUFHaEIsRUFBSzJPLEVBQVNnVSxFQUFXZ0IsRUFDbENuVixFQUFPLElBQUkvTSxNQUFPbEIsVUFBVXhILFFBRzVCNm9CLEVBQVF4aUIsRUFBT3dpQixNQUFNZ0MsSUFBS0YsR0FFMUJkLEdBQ0UzRyxFQUFTeGxCLElBQUs0RyxLQUFNLFdBQWMvRyxPQUFPWSxPQUFRLE9BQy9DMHFCLEVBQU1wakIsT0FBVSxHQUNwQmdhLEVBQVVwWixFQUFPd2lCLE1BQU1wSixRQUFTb0osRUFBTXBqQixPQUFVLEdBS2pELElBRkFnUSxFQUFNLEdBQU1vVCxFQUVOaHNCLEVBQUksRUFBR0EsRUFBSTJLLFVBQVV4SCxPQUFRbkQsSUFDbEM0WSxFQUFNNVksR0FBTTJLLFVBQVczSyxHQU14QixHQUhBZ3NCLEVBQU1pQyxlQUFpQnhtQixNQUdsQm1iLEVBQVFzTCxjQUEyRCxJQUE1Q3RMLEVBQVFzTCxZQUFZL3RCLEtBQU1zSCxLQUFNdWtCLEdBQTVELENBU0EsSUFKQStCLEVBQWV2a0IsRUFBT3dpQixNQUFNZ0IsU0FBUzdzQixLQUFNc0gsS0FBTXVrQixFQUFPZ0IsR0FHeERodEIsRUFBSSxHQUNNK1ksRUFBVWdWLEVBQWMvdEIsUUFBWWdzQixFQUFNbUMsd0JBSW5ELElBSEFuQyxFQUFNb0MsY0FBZ0JyVixFQUFRck8sS0FFOUJVLEVBQUksR0FDTTJoQixFQUFZaFUsRUFBUWlVLFNBQVU1aEIsUUFDdEM0Z0IsRUFBTXFDLGlDQUlEckMsRUFBTXNDLGFBQXNDLElBQXhCdkIsRUFBVTNZLFlBQ25DNFgsRUFBTXNDLFdBQVc5YixLQUFNdWEsRUFBVTNZLGFBRWpDNFgsRUFBTWUsVUFBWUEsRUFDbEJmLEVBQU05RixLQUFPNkcsRUFBVTdHLFVBS1ZuYSxLQUhiM0IsSUFBVVosRUFBT3dpQixNQUFNcEosUUFBU21LLEVBQVVHLFdBQWMsSUFBS0UsUUFDNURMLEVBQVV6WixTQUFVckwsTUFBTzhRLEVBQVFyTyxLQUFNa08sTUFHVCxLQUF6Qm9ULEVBQU05b0IsT0FBU2tILEtBQ3JCNGhCLEVBQU1TLGlCQUNOVCxFQUFNTyxvQkFZWCxPQUpLM0osRUFBUTJMLGNBQ1ozTCxFQUFRMkwsYUFBYXB1QixLQUFNc0gsS0FBTXVrQixHQUczQkEsRUFBTTlvQixTQUdkOHBCLFNBQVUsU0FBVWhCLEVBQU9nQixHQUMxQixJQUFJaHRCLEVBQUcrc0IsRUFBV3BXLEVBQUs2WCxFQUFpQkMsRUFDdkNWLEVBQWUsR0FDZlAsRUFBZ0JSLEVBQVNRLGNBQ3pCL1osRUFBTXVZLEVBQU14cEIsT0FHYixHQUFLZ3JCLEdBSUovWixFQUFJaEwsWUFPYyxVQUFmdWpCLEVBQU1wakIsTUFBb0JvakIsRUFBTTBDLFFBQVUsR0FFN0MsS0FBUWpiLElBQVFoTSxLQUFNZ00sRUFBTUEsRUFBSTdNLFlBQWNhLEtBSTdDLEdBQXNCLElBQWpCZ00sRUFBSWhMLFdBQW9DLFVBQWZ1akIsRUFBTXBqQixPQUFxQyxJQUFqQjZLLEVBQUlsQyxVQUFzQixDQUdqRixJQUZBaWQsRUFBa0IsR0FDbEJDLEVBQW1CLEdBQ2J6dUIsRUFBSSxFQUFHQSxFQUFJd3RCLEVBQWV4dEIsU0FNRStMLElBQTVCMGlCLEVBRkw5WCxHQUhBb1csRUFBWUMsRUFBVWh0QixJQUdOeUosU0FBVyxPQUcxQmdsQixFQUFrQjlYLEdBQVFvVyxFQUFVaFAsYUFDbkN2VSxFQUFRbU4sRUFBS2xQLE1BQU8zRCxNQUFPMlAsSUFBUyxFQUNwQ2pLLEVBQU8wTCxLQUFNeUIsRUFBS2xQLEtBQU0sS0FBTSxDQUFFZ00sSUFBUXRRLFFBRXJDc3JCLEVBQWtCOVgsSUFDdEI2WCxFQUFnQm5xQixLQUFNMG9CLEdBR25CeUIsRUFBZ0JyckIsUUFDcEI0cUIsRUFBYTFwQixLQUFNLENBQUVxRyxLQUFNK0ksRUFBS3VaLFNBQVV3QixJQVk5QyxPQUxBL2EsRUFBTWhNLEtBQ0QrbEIsRUFBZ0JSLEVBQVM3cEIsUUFDN0I0cUIsRUFBYTFwQixLQUFNLENBQUVxRyxLQUFNK0ksRUFBS3VaLFNBQVVBLEVBQVNsbEIsTUFBTzBsQixLQUdwRE8sR0FHUlksUUFBUyxTQUFVcHVCLEVBQU1xdUIsR0FDeEJsdUIsT0FBT0MsZUFBZ0I2SSxFQUFPbWpCLE1BQU0vcUIsVUFBV3JCLEVBQU0sQ0FDcERLLFlBQVksRUFDWm9sQixjQUFjLEVBRWRubEIsSUFBSzJILEVBQVlvbUIsR0FDaEIsV0FDQyxHQUFLbm5CLEtBQUtvbkIsY0FDUixPQUFPRCxFQUFNbm5CLEtBQUtvbkIsZ0JBR3JCLFdBQ0MsR0FBS3BuQixLQUFLb25CLGNBQ1IsT0FBT3BuQixLQUFLb25CLGNBQWV0dUIsSUFJL0IwbEIsSUFBSyxTQUFVaGxCLEdBQ2RQLE9BQU9DLGVBQWdCOEcsS0FBTWxILEVBQU0sQ0FDbENLLFlBQVksRUFDWm9sQixjQUFjLEVBQ2Q4SSxVQUFVLEVBQ1Y3dEIsTUFBT0EsUUFNWCtzQixJQUFLLFNBQVVhLEdBQ2QsT0FBT0EsRUFBZXJsQixFQUFPd0MsU0FDNUI2aUIsRUFDQSxJQUFJcmxCLEVBQU9takIsTUFBT2tDLElBR3BCak0sUUFBUyxDQUNSbU0sS0FBTSxDQUdMQyxVQUFVLEdBRVhDLE1BQU8sQ0FHTnhCLE1BQU8sU0FBVXZILEdBSWhCLElBQUkvUyxFQUFLMUwsTUFBUXllLEVBV2pCLE9BUktrRCxHQUFlNVcsS0FBTVcsRUFBR3ZLLE9BQzVCdUssRUFBRzhiLE9BQVN6ZCxFQUFVMkIsRUFBSSxVQUcxQitZLEdBQWdCL1ksRUFBSSxRQUFTb1ksS0FJdkIsR0FFUm1CLFFBQVMsU0FBVXhHLEdBSWxCLElBQUkvUyxFQUFLMUwsTUFBUXllLEVBVWpCLE9BUEtrRCxHQUFlNVcsS0FBTVcsRUFBR3ZLLE9BQzVCdUssRUFBRzhiLE9BQVN6ZCxFQUFVMkIsRUFBSSxVQUUxQitZLEdBQWdCL1ksRUFBSSxVQUlkLEdBS1I4VyxTQUFVLFNBQVUrQixHQUNuQixJQUFJeHBCLEVBQVN3cEIsRUFBTXhwQixPQUNuQixPQUFPNG1CLEdBQWU1VyxLQUFNaFEsRUFBT29HLE9BQ2xDcEcsRUFBT3lzQixPQUFTemQsRUFBVWhQLEVBQVEsVUFDbEM2akIsRUFBU3hsQixJQUFLMkIsRUFBUSxVQUN0QmdQLEVBQVVoUCxFQUFRLE9BSXJCMHNCLGFBQWMsQ0FDYlgsYUFBYyxTQUFVdkMsUUFJRGpnQixJQUFqQmlnQixFQUFNOW9CLFFBQXdCOG9CLEVBQU02QyxnQkFDeEM3QyxFQUFNNkMsY0FBY00sWUFBY25ELEVBQU05b0IsWUE4RjdDc0csRUFBT3FrQixZQUFjLFNBQVVuakIsRUFBTTlCLEVBQU13a0IsR0FHckMxaUIsRUFBSzhaLHFCQUNUOVosRUFBSzhaLG9CQUFxQjViLEVBQU13a0IsSUFJbEM1akIsRUFBT21qQixNQUFRLFNBQVU5akIsRUFBS3VtQixHQUc3QixLQUFRM25CLGdCQUFnQitCLEVBQU9takIsT0FDOUIsT0FBTyxJQUFJbmpCLEVBQU9takIsTUFBTzlqQixFQUFLdW1CLEdBSTFCdm1CLEdBQU9BLEVBQUlELE1BQ2ZuQixLQUFLb25CLGNBQWdCaG1CLEVBQ3JCcEIsS0FBS21CLEtBQU9DLEVBQUlELEtBSWhCbkIsS0FBSzRuQixtQkFBcUJ4bUIsRUFBSXltQix1QkFDSHZqQixJQUF6QmxELEVBQUl5bUIsbUJBR2dCLElBQXBCem1CLEVBQUlzbUIsWUFDTDVELEdBQ0FDLEdBS0QvakIsS0FBS2pGLE9BQVdxRyxFQUFJckcsUUFBa0MsSUFBeEJxRyxFQUFJckcsT0FBT2lHLFNBQ3hDSSxFQUFJckcsT0FBT29FLFdBQ1hpQyxFQUFJckcsT0FFTGlGLEtBQUsybUIsY0FBZ0J2bEIsRUFBSXVsQixjQUN6QjNtQixLQUFLOG5CLGNBQWdCMW1CLEVBQUkwbUIsZUFJekI5bkIsS0FBS21CLEtBQU9DLEVBSVJ1bUIsR0FDSjVsQixFQUFPK0IsT0FBUTlELEtBQU0ybkIsR0FJdEIzbkIsS0FBSytuQixVQUFZM21CLEdBQU9BLEVBQUkybUIsV0FBYWhoQixLQUFLaWhCLE1BRzlDaG9CLEtBQU0rQixFQUFPd0MsVUFBWSxHQUsxQnhDLEVBQU9takIsTUFBTS9xQixVQUFZLENBQ3hCbUksWUFBYVAsRUFBT21qQixNQUNwQjBDLG1CQUFvQjdELEdBQ3BCMkMscUJBQXNCM0MsR0FDdEI2Qyw4QkFBK0I3QyxHQUMvQmtFLGFBQWEsRUFFYmpELGVBQWdCLFdBQ2YsSUFBSTNwQixFQUFJMkUsS0FBS29uQixjQUVicG5CLEtBQUs0bkIsbUJBQXFCOUQsR0FFckJ6b0IsSUFBTTJFLEtBQUtpb0IsYUFDZjVzQixFQUFFMnBCLGtCQUdKRixnQkFBaUIsV0FDaEIsSUFBSXpwQixFQUFJMkUsS0FBS29uQixjQUVicG5CLEtBQUswbUIscUJBQXVCNUMsR0FFdkJ6b0IsSUFBTTJFLEtBQUtpb0IsYUFDZjVzQixFQUFFeXBCLG1CQUdKQyx5QkFBMEIsV0FDekIsSUFBSTFwQixFQUFJMkUsS0FBS29uQixjQUVicG5CLEtBQUs0bUIsOEJBQWdDOUMsR0FFaEN6b0IsSUFBTTJFLEtBQUtpb0IsYUFDZjVzQixFQUFFMHBCLDJCQUdIL2tCLEtBQUs4a0Isb0JBS1AvaUIsRUFBT2UsS0FBTSxDQUNab2xCLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxZQUFZLEVBQ1pDLGdCQUFnQixFQUNoQkMsU0FBUyxFQUNUQyxRQUFRLEVBQ1JDLFlBQVksRUFDWkMsU0FBUyxFQUNUQyxPQUFPLEVBQ1BDLE9BQU8sRUFDUEMsVUFBVSxFQUNWQyxNQUFNLEVBQ04sTUFBUSxFQUNSdG5CLE1BQU0sRUFDTnVuQixVQUFVLEVBQ1ZodkIsS0FBSyxFQUNMaXZCLFNBQVMsRUFDVDlCLFFBQVEsRUFDUitCLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLGVBQWUsRUFDZkMsV0FBVyxFQUNYQyxTQUFTLEVBRVRDLE1BQU8sU0FBVXJGLEdBQ2hCLElBQUkwQyxFQUFTMUMsRUFBTTBDLE9BR25CLE9BQW9CLE1BQWYxQyxFQUFNcUYsT0FBaUJqRyxHQUFVNVksS0FBTXdaLEVBQU1wakIsTUFDeEIsTUFBbEJvakIsRUFBTXVFLFNBQW1CdkUsRUFBTXVFLFNBQVd2RSxFQUFNd0UsU0FJbER4RSxFQUFNcUYsWUFBb0J0bEIsSUFBWDJpQixHQUF3QnJELEdBQVk3WSxLQUFNd1osRUFBTXBqQixNQUN0RCxFQUFUOGxCLEVBQ0csRUFHTSxFQUFUQSxFQUNHLEVBR00sRUFBVEEsRUFDRyxFQUdELEVBR0QxQyxFQUFNcUYsUUFFWjduQixFQUFPd2lCLE1BQU0yQyxTQUVoQm5sQixFQUFPZSxLQUFNLENBQUUrbUIsTUFBTyxVQUFXQyxLQUFNLGFBQWMsU0FBVTNvQixFQUFNMGpCLEdBQ3BFOWlCLEVBQU93aUIsTUFBTXBKLFFBQVNoYSxHQUFTLENBRzlCNmtCLE1BQU8sV0FRTixPQUhBdkIsR0FBZ0J6a0IsS0FBTW1CLEVBQU02aUIsS0FHckIsR0FFUmlCLFFBQVMsV0FNUixPQUhBUixHQUFnQnprQixLQUFNbUIsSUFHZixHQUdSMGpCLGFBQWNBLE1BWWhCOWlCLEVBQU9lLEtBQU0sQ0FDWmluQixXQUFZLFlBQ1pDLFdBQVksV0FDWkMsYUFBYyxjQUNkQyxhQUFjLGVBQ1osU0FBVUMsRUFBTTVELEdBQ2xCeGtCLEVBQU93aUIsTUFBTXBKLFFBQVNnUCxHQUFTLENBQzlCdEYsYUFBYzBCLEVBQ2RULFNBQVVTLEVBRVZaLE9BQVEsU0FBVXBCLEdBQ2pCLElBQUk1aEIsRUFDSDVILEVBQVNpRixLQUNUb3FCLEVBQVU3RixFQUFNdUQsY0FDaEJ4QyxFQUFZZixFQUFNZSxVQVNuQixPQUxNOEUsSUFBYUEsSUFBWXJ2QixHQUFXZ0gsRUFBTytFLFNBQVUvTCxFQUFRcXZCLE1BQ2xFN0YsRUFBTXBqQixLQUFPbWtCLEVBQVVHLFNBQ3ZCOWlCLEVBQU0yaUIsRUFBVXpaLFFBQVFyTCxNQUFPUixLQUFNa0QsV0FDckNxaEIsRUFBTXBqQixLQUFPb2xCLEdBRVA1akIsT0FLVlosRUFBT0csR0FBRzRCLE9BQVEsQ0FFakJxZ0IsR0FBSSxTQUFVQyxFQUFPcGlCLEVBQVV5YyxFQUFNdmMsR0FDcEMsT0FBT2lpQixHQUFJbmtCLEtBQU1va0IsRUFBT3BpQixFQUFVeWMsRUFBTXZjLElBRXpDbWlCLElBQUssU0FBVUQsRUFBT3BpQixFQUFVeWMsRUFBTXZjLEdBQ3JDLE9BQU9paUIsR0FBSW5rQixLQUFNb2tCLEVBQU9waUIsRUFBVXljLEVBQU12YyxFQUFJLElBRTdDc2lCLElBQUssU0FBVUosRUFBT3BpQixFQUFVRSxHQUMvQixJQUFJb2pCLEVBQVdua0IsRUFDZixHQUFLaWpCLEdBQVNBLEVBQU1ZLGdCQUFrQlosRUFBTWtCLFVBVzNDLE9BUkFBLEVBQVlsQixFQUFNa0IsVUFDbEJ2akIsRUFBUXFpQixFQUFNb0MsZ0JBQWlCaEMsSUFDOUJjLEVBQVUzWSxVQUNUMlksRUFBVUcsU0FBVyxJQUFNSCxFQUFVM1ksVUFDckMyWSxFQUFVRyxTQUNYSCxFQUFVdGpCLFNBQ1ZzakIsRUFBVXpaLFNBRUo3TCxLQUVSLEdBQXNCLGlCQUFWb2tCLEVBQXFCLENBR2hDLElBQU1qakIsS0FBUWlqQixFQUNicGtCLEtBQUt3a0IsSUFBS3JqQixFQUFNYSxFQUFVb2lCLEVBQU9qakIsSUFFbEMsT0FBT25CLEtBV1IsT0FUa0IsSUFBYmdDLEdBQTBDLG1CQUFiQSxJQUdqQ0UsRUFBS0YsRUFDTEEsT0FBV3NDLElBRUEsSUFBUHBDLElBQ0pBLEVBQUs2aEIsSUFFQy9qQixLQUFLOEMsTUFBTSxXQUNqQmYsRUFBT3dpQixNQUFNeG1CLE9BQVFpQyxLQUFNb2tCLEVBQU9saUIsRUFBSUYsU0FNekMsSUFLQ3FvQixHQUFlLHdCQUdmQyxHQUFXLG9DQUNYQyxHQUFlLDJDQUdoQixTQUFTQyxHQUFvQnZuQixFQUFNZ1YsR0FDbEMsT0FBS2xPLEVBQVU5RyxFQUFNLFVBQ3BCOEcsRUFBK0IsS0FBckJrTyxFQUFRalgsU0FBa0JpWCxFQUFVQSxFQUFRblosV0FBWSxPQUUzRGlELEVBQVFrQixHQUFPaVUsU0FBVSxTQUFXLElBR3JDalUsRUFJUixTQUFTd25CLEdBQWV4bkIsR0FFdkIsT0FEQUEsRUFBSzlCLE1BQXlDLE9BQWhDOEIsRUFBS3BCLGFBQWMsU0FBc0IsSUFBTW9CLEVBQUs5QixLQUMzRDhCLEVBRVIsU0FBU3luQixHQUFlem5CLEdBT3ZCLE1BTjJDLFdBQXBDQSxFQUFLOUIsTUFBUSxJQUFLZCxNQUFPLEVBQUcsR0FDbEM0QyxFQUFLOUIsS0FBTzhCLEVBQUs5QixLQUFLZCxNQUFPLEdBRTdCNEMsRUFBS3pFLGdCQUFpQixRQUdoQnlFLEVBR1IsU0FBUzBuQixHQUFnQnZwQixFQUFLd3BCLEdBQzdCLElBQUlyeUIsRUFBR0MsRUFBRzJJLEVBQWdCMHBCLEVBQVVDLEVBQVV6RixFQUU5QyxHQUF1QixJQUFsQnVGLEVBQUs1cEIsU0FBVixDQUtBLEdBQUs0ZCxFQUFTRCxRQUFTdmQsS0FFdEJpa0IsRUFEV3pHLEVBQVN4bEIsSUFBS2dJLEdBQ1Bpa0IsUUFLakIsSUFBTWxrQixLQUZOeWQsRUFBUzdnQixPQUFRNnNCLEVBQU0saUJBRVR2RixFQUNiLElBQU05c0IsRUFBSSxFQUFHQyxFQUFJNnNCLEVBQVFsa0IsR0FBT3pGLE9BQVFuRCxFQUFJQyxFQUFHRCxJQUM5Q3dKLEVBQU93aUIsTUFBTTdNLElBQUtrVCxFQUFNenBCLEVBQU1ra0IsRUFBUWxrQixHQUFRNUksSUFPN0NzbUIsRUFBU0YsUUFBU3ZkLEtBQ3RCeXBCLEVBQVdoTSxFQUFTeEIsT0FBUWpjLEdBQzVCMHBCLEVBQVcvb0IsRUFBTytCLE9BQVEsR0FBSSttQixHQUU5QmhNLEVBQVNMLElBQUtvTSxFQUFNRSxLQUt0QixTQUFTQyxHQUFVM3BCLEVBQUt3cEIsR0FDdkIsSUFBSTdnQixFQUFXNmdCLEVBQUs3Z0IsU0FBU2pFLGNBR1gsVUFBYmlFLEdBQXdCNFgsR0FBZTVXLEtBQU0zSixFQUFJRCxNQUNyRHlwQixFQUFLM1ksUUFBVTdRLEVBQUk2USxRQUdLLFVBQWJsSSxHQUFxQyxhQUFiQSxJQUNuQzZnQixFQUFLL1UsYUFBZXpVLEVBQUl5VSxjQUkxQixTQUFTbVYsR0FBVUMsRUFBWTlaLEVBQU1wTyxFQUFVc2dCLEdBRzlDbFMsRUFBTzdRLEVBQU02USxHQUViLElBQUlxUyxFQUFVcmdCLEVBQU9nZ0IsRUFBUytILEVBQVkxcEIsRUFBTUMsRUFDL0NsSixFQUFJLEVBQ0pDLEVBQUl5eUIsRUFBV3Z2QixPQUNmeXZCLEVBQVczeUIsRUFBSSxFQUNmZ0IsRUFBUTJYLEVBQU0sR0FDZGlhLEVBQWtCcnFCLEVBQVl2SCxHQUcvQixHQUFLNHhCLEdBQ0Q1eUIsRUFBSSxHQUFzQixpQkFBVmdCLElBQ2hCc0gsRUFBUWloQixZQUFjdUksR0FBU3ZmLEtBQU12UixHQUN4QyxPQUFPeXhCLEVBQVdub0IsTUFBTSxTQUFVekcsR0FDakMsSUFBSXNhLEVBQU9zVSxFQUFXN25CLEdBQUkvRyxHQUNyQit1QixJQUNKamEsRUFBTSxHQUFNM1gsRUFBTWQsS0FBTXNILEtBQU0zRCxFQUFPc2EsRUFBSzBVLFNBRTNDTCxHQUFVclUsRUFBTXhGLEVBQU1wTyxFQUFVc2dCLE1BSWxDLEdBQUs3cUIsSUFFSjJLLEdBREFxZ0IsRUFBV04sR0FBZS9SLEVBQU04WixFQUFZLEdBQUl4Z0IsZUFBZSxFQUFPd2dCLEVBQVk1SCxJQUNqRXZrQixXQUVtQixJQUEvQjBrQixFQUFTcGxCLFdBQVcxQyxTQUN4QjhuQixFQUFXcmdCLEdBSVBBLEdBQVNrZ0IsR0FBVSxDQU92QixJQUxBNkgsR0FEQS9ILEVBQVVwaEIsRUFBT2lCLElBQUt5ZixHQUFRZSxFQUFVLFVBQVlpSCxLQUMvQi91QixPQUtibkQsRUFBSUMsRUFBR0QsSUFDZGlKLEVBQU9naUIsRUFFRmpyQixJQUFNNHlCLElBQ1YzcEIsRUFBT08sRUFBT2tDLE1BQU96QyxHQUFNLEdBQU0sR0FHNUIwcEIsR0FJSm5wQixFQUFPYSxNQUFPdWdCLEVBQVNWLEdBQVFqaEIsRUFBTSxZQUl2Q3VCLEVBQVNySyxLQUFNdXlCLEVBQVkxeUIsR0FBS2lKLEVBQU1qSixHQUd2QyxHQUFLMnlCLEVBT0osSUFOQXpwQixFQUFNMGhCLEVBQVNBLEVBQVF6bkIsT0FBUyxHQUFJK08sY0FHcEMxSSxFQUFPaUIsSUFBS21nQixFQUFTdUgsSUFHZm55QixFQUFJLEVBQUdBLEVBQUkyeUIsRUFBWTN5QixJQUM1QmlKLEVBQU8yaEIsRUFBUzVxQixHQUNYc3BCLEdBQVk5VyxLQUFNdkosRUFBS0wsTUFBUSxNQUNsQ3lkLEVBQVN2QixPQUFRN2IsRUFBTSxlQUN4Qk8sRUFBTytFLFNBQVVyRixFQUFLRCxLQUVqQkEsRUFBS0osS0FBOEMsWUFBckNJLEVBQUtMLE1BQVEsSUFBSzJFLGNBRy9CL0QsRUFBT3VwQixXQUFhOXBCLEVBQUtILFVBQzdCVSxFQUFPdXBCLFNBQVU5cEIsRUFBS0osSUFBSyxDQUMxQmxFLE1BQU9zRSxFQUFLdEUsT0FBU3NFLEVBQUtLLGFBQWMsVUFDdENKLEdBR0pILEVBQVNFLEVBQUsrTixZQUFZN0ssUUFBUzZsQixHQUFjLElBQU0vb0IsRUFBTUMsSUFRbkUsT0FBT3dwQixFQUdSLFNBQVNsdEIsR0FBUWtGLEVBQU1qQixFQUFVdXBCLEdBS2hDLElBSkEsSUFBSS9wQixFQUNIaWlCLEVBQVF6aEIsRUFBV0QsRUFBT25FLE9BQVFvRSxFQUFVaUIsR0FBU0EsRUFDckQxSyxFQUFJLEVBRTRCLE9BQXZCaUosRUFBT2lpQixFQUFPbHJCLElBQWVBLElBQ2hDZ3pCLEdBQThCLElBQWxCL3BCLEVBQUtSLFVBQ3RCZSxFQUFPeXBCLFVBQVcvSSxHQUFRamhCLElBR3RCQSxFQUFLckMsYUFDSm9zQixHQUFZckwsR0FBWTFlLElBQzVCa2hCLEdBQWVELEdBQVFqaEIsRUFBTSxXQUU5QkEsRUFBS3JDLFdBQVdkLFlBQWFtRCxJQUkvQixPQUFPeUIsRUFHUmxCLEVBQU8rQixPQUFRLENBQ2Q0ZixjQUFlLFNBQVUySCxHQUN4QixPQUFPQSxHQUdScG5CLE1BQU8sU0FBVWhCLEVBQU13b0IsRUFBZUMsR0FDckMsSUFBSW56QixFQUFHQyxFQUFHbXpCLEVBQWFDLEVBQ3RCM25CLEVBQVFoQixFQUFLK2UsV0FBVyxHQUN4QjZKLEVBQVMzTCxHQUFZamQsR0FHdEIsS0FBTW5DLEVBQVFtaEIsZ0JBQXNDLElBQWxCaGYsRUFBS2pDLFVBQW9DLEtBQWxCaUMsRUFBS2pDLFVBQzNEZSxFQUFPZ1UsU0FBVTlTLElBTW5CLElBSEEyb0IsRUFBZW5KLEdBQVF4ZSxHQUdqQjFMLEVBQUksRUFBR0MsR0FGYm16QixFQUFjbEosR0FBUXhmLElBRU92SCxPQUFRbkQsRUFBSUMsRUFBR0QsSUFDM0N3eUIsR0FBVVksRUFBYXB6QixHQUFLcXpCLEVBQWNyekIsSUFLNUMsR0FBS2t6QixFQUNKLEdBQUtDLEVBSUosSUFIQUMsRUFBY0EsR0FBZWxKLEdBQVF4ZixHQUNyQzJvQixFQUFlQSxHQUFnQm5KLEdBQVF4ZSxHQUVqQzFMLEVBQUksRUFBR0MsRUFBSW16QixFQUFZandCLE9BQVFuRCxFQUFJQyxFQUFHRCxJQUMzQ295QixHQUFnQmdCLEVBQWFwekIsR0FBS3F6QixFQUFjcnpCLFNBR2pEb3lCLEdBQWdCMW5CLEVBQU1nQixHQVd4QixPQU5BMm5CLEVBQWVuSixHQUFReGUsRUFBTyxXQUNadkksT0FBUyxHQUMxQmduQixHQUFla0osR0FBZUMsR0FBVXBKLEdBQVF4ZixFQUFNLFdBSWhEZ0IsR0FHUnVuQixVQUFXLFNBQVU5b0IsR0FLcEIsSUFKQSxJQUFJK2IsRUFBTXhiLEVBQU05QixFQUNmZ2EsRUFBVXBaLEVBQU93aUIsTUFBTXBKLFFBQ3ZCNWlCLEVBQUksT0FFNkIrTCxLQUF4QnJCLEVBQU9QLEVBQU9uSyxJQUFxQkEsSUFDNUMsR0FBSzRsQixFQUFZbGIsR0FBUyxDQUN6QixHQUFPd2IsRUFBT3hiLEVBQU0yYixFQUFTcmEsU0FBYyxDQUMxQyxHQUFLa2EsRUFBSzRHLE9BQ1QsSUFBTWxrQixLQUFRc2QsRUFBSzRHLE9BQ2JsSyxFQUFTaGEsR0FDYlksRUFBT3dpQixNQUFNeG1CLE9BQVFrRixFQUFNOUIsR0FJM0JZLEVBQU9xa0IsWUFBYW5qQixFQUFNOUIsRUFBTXNkLEVBQUtrSCxRQU94QzFpQixFQUFNMmIsRUFBU3JhLGNBQVlELEVBRXZCckIsRUFBTTRiLEVBQVN0YSxXQUluQnRCLEVBQU00YixFQUFTdGEsY0FBWUQsT0FPaEN2QyxFQUFPRyxHQUFHNEIsT0FBUSxDQUNqQmdvQixPQUFRLFNBQVU5cEIsR0FDakIsT0FBT2pFLEdBQVFpQyxLQUFNZ0MsR0FBVSxJQUdoQ2pFLE9BQVEsU0FBVWlFLEdBQ2pCLE9BQU9qRSxHQUFRaUMsS0FBTWdDLElBR3RCSixLQUFNLFNBQVVwSSxHQUNmLE9BQU82akIsRUFBUXJkLE1BQU0sU0FBVXhHLEdBQzlCLFlBQWlCOEssSUFBVjlLLEVBQ051SSxFQUFPSCxLQUFNNUIsTUFDYkEsS0FBSzZaLFFBQVEvVyxNQUFNLFdBQ0ssSUFBbEI5QyxLQUFLZ0IsVUFBb0MsS0FBbEJoQixLQUFLZ0IsVUFBcUMsSUFBbEJoQixLQUFLZ0IsV0FDeERoQixLQUFLdVAsWUFBYy9WLFFBR3BCLEtBQU1BLEVBQU8wSixVQUFVeEgsU0FHM0Jxd0IsT0FBUSxXQUNQLE9BQU9mLEdBQVVockIsS0FBTWtELFdBQVcsU0FBVUQsR0FDcEIsSUFBbEJqRCxLQUFLZ0IsVUFBb0MsS0FBbEJoQixLQUFLZ0IsVUFBcUMsSUFBbEJoQixLQUFLZ0IsVUFDM0N3cEIsR0FBb0J4cUIsS0FBTWlELEdBQ2hDekYsWUFBYXlGLE9BS3ZCK29CLFFBQVMsV0FDUixPQUFPaEIsR0FBVWhyQixLQUFNa0QsV0FBVyxTQUFVRCxHQUMzQyxHQUF1QixJQUFsQmpELEtBQUtnQixVQUFvQyxLQUFsQmhCLEtBQUtnQixVQUFxQyxJQUFsQmhCLEtBQUtnQixTQUFpQixDQUN6RSxJQUFJakcsRUFBU3l2QixHQUFvQnhxQixLQUFNaUQsR0FDdkNsSSxFQUFPdUQsYUFBYzJFLEVBQU1sSSxFQUFPK0QsaUJBS3JDbXRCLE9BQVEsV0FDUCxPQUFPakIsR0FBVWhyQixLQUFNa0QsV0FBVyxTQUFVRCxHQUN0Q2pELEtBQUtiLFlBQ1RhLEtBQUtiLFdBQVdiLGFBQWMyRSxFQUFNakQsVUFLdkNrc0IsTUFBTyxXQUNOLE9BQU9sQixHQUFVaHJCLEtBQU1rRCxXQUFXLFNBQVVELEdBQ3RDakQsS0FBS2IsWUFDVGEsS0FBS2IsV0FBV2IsYUFBYzJFLEVBQU1qRCxLQUFLbU0saUJBSzVDME4sTUFBTyxXQUlOLElBSEEsSUFBSTVXLEVBQ0gxSyxFQUFJLEVBRTJCLE9BQXRCMEssRUFBT2pELEtBQU16SCxJQUFlQSxJQUNkLElBQWxCMEssRUFBS2pDLFdBR1RlLEVBQU95cEIsVUFBVy9JLEdBQVF4ZixHQUFNLElBR2hDQSxFQUFLc00sWUFBYyxJQUlyQixPQUFPdlAsTUFHUmlFLE1BQU8sU0FBVXduQixFQUFlQyxHQUkvQixPQUhBRCxFQUFpQyxNQUFqQkEsR0FBZ0NBLEVBQ2hEQyxFQUF5QyxNQUFyQkEsRUFBNEJELEVBQWdCQyxFQUV6RDFyQixLQUFLZ0QsS0FBSyxXQUNoQixPQUFPakIsRUFBT2tDLE1BQU9qRSxLQUFNeXJCLEVBQWVDLE9BSTVDTCxLQUFNLFNBQVU3eEIsR0FDZixPQUFPNmpCLEVBQVFyZCxNQUFNLFNBQVV4RyxHQUM5QixJQUFJeUosRUFBT2pELEtBQU0sSUFBTyxHQUN2QnpILEVBQUksRUFDSkMsRUFBSXdILEtBQUt0RSxPQUVWLFFBQWU0SSxJQUFWOUssR0FBeUMsSUFBbEJ5SixFQUFLakMsU0FDaEMsT0FBT2lDLEVBQUs2SyxVQUliLEdBQXNCLGlCQUFWdFUsSUFBdUI2d0IsR0FBYXRmLEtBQU12UixLQUNwRDJvQixJQUFXUCxHQUFTbFgsS0FBTWxSLElBQVcsQ0FBRSxHQUFJLEtBQVEsR0FBSXNNLGVBQWtCLENBRTFFdE0sRUFBUXVJLEVBQU8yaEIsY0FBZWxxQixHQUU5QixJQUNDLEtBQVFqQixFQUFJQyxFQUFHRCxJQUlTLEtBSHZCMEssRUFBT2pELEtBQU16SCxJQUFPLElBR1Z5SSxXQUNUZSxFQUFPeXBCLFVBQVcvSSxHQUFReGYsR0FBTSxJQUNoQ0EsRUFBSzZLLFVBQVl0VSxHQUluQnlKLEVBQU8sRUFHTixNQUFRNUgsS0FHTjRILEdBQ0pqRCxLQUFLNlosUUFBUWtTLE9BQVF2eUIsS0FFcEIsS0FBTUEsRUFBTzBKLFVBQVV4SCxTQUczQnl3QixZQUFhLFdBQ1osSUFBSTlJLEVBQVUsR0FHZCxPQUFPMkgsR0FBVWhyQixLQUFNa0QsV0FBVyxTQUFVRCxHQUMzQyxJQUFJNk4sRUFBUzlRLEtBQUtiLFdBRWI0QyxFQUFPc0QsUUFBU3JGLEtBQU1xakIsR0FBWSxJQUN0Q3RoQixFQUFPeXBCLFVBQVcvSSxHQUFRemlCLE9BQ3JCOFEsR0FDSkEsRUFBT3NiLGFBQWNucEIsRUFBTWpELFNBSzNCcWpCLE1BSUx0aEIsRUFBT2UsS0FBTSxDQUNadXBCLFNBQVUsU0FDVkMsVUFBVyxVQUNYaHVCLGFBQWMsU0FDZGl1QixZQUFhLFFBQ2JDLFdBQVksZ0JBQ1YsU0FBVTF6QixFQUFNMnpCLEdBQ2xCMXFCLEVBQU9HLEdBQUlwSixHQUFTLFNBQVVrSixHQU83QixJQU5BLElBQUlVLEVBQ0hDLEVBQU0sR0FDTnJGLEVBQVN5RSxFQUFRQyxHQUNqQnFCLEVBQU8vRixFQUFPNUIsT0FBUyxFQUN2Qm5ELEVBQUksRUFFR0EsR0FBSzhLLEVBQU05SyxJQUNsQm1LLEVBQVFuSyxJQUFNOEssRUFBT3JELEtBQU9BLEtBQUtpRSxPQUFPLEdBQ3hDbEMsRUFBUXpFLEVBQVEvRSxJQUFPazBCLEdBQVkvcEIsR0FJbkM5RixFQUFLNEQsTUFBT21DLEVBQUtELEVBQU10SixPQUd4QixPQUFPNEcsS0FBS3lDLFVBQVdFLE9BR3pCLElBQUkrcEIsR0FBWSxJQUFJemtCLE9BQVEsS0FBTzZYLEdBQU8sa0JBQW1CLEtBRXpENk0sR0FBWSxTQUFVMXBCLEdBS3hCLElBQUk0bEIsRUFBTzVsQixFQUFLd0gsY0FBY3VDLFlBTTlCLE9BSk02YixHQUFTQSxFQUFLK0QsU0FDbkIvRCxFQUFPbnVCLEdBR0RtdUIsRUFBS2dFLGlCQUFrQjVwQixJQUc1QjZwQixHQUFPLFNBQVU3cEIsRUFBTXBILEVBQVNrSCxHQUNuQyxJQUFJSixFQUFLN0osRUFDUmkwQixFQUFNLEdBR1AsSUFBTWowQixLQUFRK0MsRUFDYmt4QixFQUFLajBCLEdBQVNtSyxFQUFLbEcsTUFBT2pFLEdBQzFCbUssRUFBS2xHLE1BQU9qRSxHQUFTK0MsRUFBUy9DLEdBTS9CLElBQU1BLEtBSE42SixFQUFNSSxFQUFTckssS0FBTXVLLEdBR1BwSCxFQUNib0gsRUFBS2xHLE1BQU9qRSxHQUFTaTBCLEVBQUtqMEIsR0FHM0IsT0FBTzZKLEdBSUpxcUIsR0FBWSxJQUFJL2tCLE9BQVFnWSxHQUFVcGlCLEtBQU0sS0FBTyxLQThIbkQsU0FBU292QixHQUFRaHFCLEVBQU1uSyxFQUFNbzBCLEdBQzVCLElBQUlDLEVBQU9DLEVBQVVDLEVBQVUxcUIsRUFNOUI1RixFQUFRa0csRUFBS2xHLE1BcUNkLE9BbkNBbXdCLEVBQVdBLEdBQVlQLEdBQVcxcEIsTUFRcEIsTUFGYk4sRUFBTXVxQixFQUFTSSxpQkFBa0J4MEIsSUFBVW8wQixFQUFVcDBCLEtBRWpDb25CLEdBQVlqZCxLQUMvQk4sRUFBTVosRUFBT2hGLE1BQU9rRyxFQUFNbkssS0FRckJnSSxFQUFReXNCLGtCQUFvQmIsR0FBVTNoQixLQUFNcEksSUFBU3FxQixHQUFVamlCLEtBQU1qUyxLQUcxRXEwQixFQUFRcHdCLEVBQU1vd0IsTUFDZEMsRUFBV3J3QixFQUFNcXdCLFNBQ2pCQyxFQUFXdHdCLEVBQU1zd0IsU0FHakJ0d0IsRUFBTXF3QixTQUFXcndCLEVBQU1zd0IsU0FBV3R3QixFQUFNb3dCLE1BQVF4cUIsRUFDaERBLEVBQU11cUIsRUFBU0MsTUFHZnB3QixFQUFNb3dCLE1BQVFBLEVBQ2Rwd0IsRUFBTXF3QixTQUFXQSxFQUNqQnJ3QixFQUFNc3dCLFNBQVdBLFNBSUovb0IsSUFBUjNCLEVBSU5BLEVBQU0sR0FDTkEsRUFJRixTQUFTNnFCLEdBQWNDLEVBQWFDLEdBR25DLE1BQU8sQ0FDTnQwQixJQUFLLFdBQ0osSUFBS3EwQixJQVNMLE9BQVN6dEIsS0FBSzVHLElBQU1zMEIsR0FBU2x0QixNQUFPUixLQUFNa0Qsa0JBTGxDbEQsS0FBSzVHLE9BeExoQixXQUlDLFNBQVN1MEIsSUFHUixHQUFNak0sRUFBTixDQUlBa00sRUFBVTd3QixNQUFNa0IsUUFBVSwrRUFFMUJ5akIsRUFBSTNrQixNQUFNa0IsUUFDVCw0SEFHRDRPLEdBQWdCclAsWUFBYW93QixHQUFZcHdCLFlBQWFra0IsR0FFdEQsSUFBSW1NLEVBQVduekIsRUFBT215QixpQkFBa0JuTCxHQUN4Q29NLEVBQW9DLE9BQWpCRCxFQUFTNWdCLElBRzVCOGdCLEVBQXNFLEtBQTlDQyxFQUFvQkgsRUFBU0ksWUFJckR2TSxFQUFJM2tCLE1BQU1teEIsTUFBUSxNQUNsQkMsRUFBNkQsS0FBekNILEVBQW9CSCxFQUFTSyxPQUlqREUsRUFBZ0UsS0FBekNKLEVBQW9CSCxFQUFTVixPQU1wRHpMLEVBQUkza0IsTUFBTXN4QixTQUFXLFdBQ3JCQyxFQUFpRSxLQUE5Q04sRUFBb0J0TSxFQUFJNk0sWUFBYyxHQUV6RDFoQixHQUFnQnhPLFlBQWF1dkIsR0FJN0JsTSxFQUFNLE1BR1AsU0FBU3NNLEVBQW9CUSxHQUM1QixPQUFPaHFCLEtBQUtpcUIsTUFBT0MsV0FBWUYsSUFHaEMsSUFBSVYsRUFBa0JNLEVBQXNCRSxFQUFrQkgsRUFDN0RRLEVBQXlCWixFQUN6QkgsRUFBWWp6QixFQUFTcUMsY0FBZSxPQUNwQzBrQixFQUFNL21CLEVBQVNxQyxjQUFlLE9BR3pCMGtCLEVBQUkza0IsUUFNVjJrQixFQUFJM2tCLE1BQU02eEIsZUFBaUIsY0FDM0JsTixFQUFJTSxXQUFXLEdBQU9qbEIsTUFBTTZ4QixlQUFpQixHQUM3Qzl0QixFQUFRK3RCLGdCQUErQyxnQkFBN0JuTixFQUFJM2tCLE1BQU02eEIsZUFFcEM3c0IsRUFBTytCLE9BQVFoRCxFQUFTLENBQ3ZCZ3VCLGtCQUFtQixXQUVsQixPQURBbkIsSUFDT1MsR0FFUmIsZUFBZ0IsV0FFZixPQURBSSxJQUNPUSxHQUVSWSxjQUFlLFdBRWQsT0FEQXBCLElBQ09HLEdBRVJrQixtQkFBb0IsV0FFbkIsT0FEQXJCLElBQ09JLEdBRVJrQixjQUFlLFdBRWQsT0FEQXRCLElBQ09XLEdBUVJZLHFCQUFzQixXQUNyQixJQUFJQyxFQUFPN00sRUFBSThNLEVBQVNDLEVBb0J4QixPQW5CZ0MsTUFBM0JWLElBQ0pRLEVBQVF4MEIsRUFBU3FDLGNBQWUsU0FDaENzbEIsRUFBSzNuQixFQUFTcUMsY0FBZSxNQUM3Qm95QixFQUFVejBCLEVBQVNxQyxjQUFlLE9BRWxDbXlCLEVBQU1weUIsTUFBTWtCLFFBQVUsa0NBQ3RCcWtCLEVBQUd2bEIsTUFBTXV5QixPQUFTLE1BQ2xCRixFQUFRcnlCLE1BQU11eUIsT0FBUyxNQUV2QnppQixHQUNFclAsWUFBYTJ4QixHQUNiM3hCLFlBQWE4a0IsR0FDYjlrQixZQUFhNHhCLEdBRWZDLEVBQVUzMEIsRUFBT215QixpQkFBa0J2SyxHQUNuQ3FNLEVBQTBCWSxTQUFVRixFQUFRQyxRQUFXLEVBRXZEemlCLEdBQWdCeE8sWUFBYTh3QixJQUV2QlIsTUFwSFYsR0FtTUEsSUFBSWEsR0FBYyxDQUFFLFNBQVUsTUFBTyxNQUNwQ0MsR0FBYTkwQixFQUFTcUMsY0FBZSxPQUFRRCxNQUM3QzJ5QixHQUFjLEdBa0JmLFNBQVNDLEdBQWU3MkIsR0FDdkIsSUFBSTgyQixFQUFRN3RCLEVBQU84dEIsU0FBVS8yQixJQUFVNDJCLEdBQWE1MkIsR0FFcEQsT0FBSzgyQixJQUdBOTJCLEtBQVEyMkIsR0FDTDMyQixFQUVENDJCLEdBQWE1MkIsR0F4QnJCLFNBQXlCQSxHQU14QixJQUhBLElBQUlnM0IsRUFBVWgzQixFQUFNLEdBQUlrbEIsY0FBZ0JsbEIsRUFBS3VILE1BQU8sR0FDbkQ5SCxFQUFJaTNCLEdBQVk5ekIsT0FFVG5ELEtBRVAsSUFEQU8sRUFBTzAyQixHQUFhajNCLEdBQU11M0IsS0FDYkwsR0FDWixPQUFPMzJCLEVBZW9CaTNCLENBQWdCajNCLElBQVVBLEdBSXhELElBS0NrM0IsR0FBZSw0QkFDZkMsR0FBYyxNQUNkQyxHQUFVLENBQUU3QixTQUFVLFdBQVk4QixXQUFZLFNBQVU3UCxRQUFTLFNBQ2pFOFAsR0FBcUIsQ0FDcEJDLGNBQWUsSUFDZkMsV0FBWSxPQUdkLFNBQVNDLEdBQW1CL3NCLEVBQU9oSyxFQUFPZzNCLEdBSXpDLElBQUlockIsRUFBVXdhLEdBQVF0VixLQUFNbFIsR0FDNUIsT0FBT2dNLEVBR05oQixLQUFLaXNCLElBQUssRUFBR2pyQixFQUFTLElBQVFnckIsR0FBWSxLQUFVaHJCLEVBQVMsSUFBTyxNQUNwRWhNLEVBR0YsU0FBU2szQixHQUFvQnp0QixFQUFNMHRCLEVBQVdDLEVBQUtDLEVBQWFDLEVBQVFDLEdBQ3ZFLElBQUl4NEIsRUFBa0IsVUFBZG80QixFQUF3QixFQUFJLEVBQ25DSyxFQUFRLEVBQ1JDLEVBQVEsRUFHVCxHQUFLTCxLQUFVQyxFQUFjLFNBQVcsV0FDdkMsT0FBTyxFQUdSLEtBQVF0NEIsRUFBSSxFQUFHQSxHQUFLLEVBR04sV0FBUnE0QixJQUNKSyxHQUFTbHZCLEVBQU94RixJQUFLMEcsRUFBTTJ0QixFQUFNM1EsR0FBVzFuQixJQUFLLEVBQU11NEIsSUFJbERELEdBbUJRLFlBQVJELElBQ0pLLEdBQVNsdkIsRUFBT3hGLElBQUswRyxFQUFNLFVBQVlnZCxHQUFXMW5CLElBQUssRUFBTXU0QixJQUlqRCxXQUFSRixJQUNKSyxHQUFTbHZCLEVBQU94RixJQUFLMEcsRUFBTSxTQUFXZ2QsR0FBVzFuQixHQUFNLFNBQVMsRUFBTXU0QixNQXRCdkVHLEdBQVNsdkIsRUFBT3hGLElBQUswRyxFQUFNLFVBQVlnZCxHQUFXMW5CLElBQUssRUFBTXU0QixHQUdoRCxZQUFSRixFQUNKSyxHQUFTbHZCLEVBQU94RixJQUFLMEcsRUFBTSxTQUFXZ2QsR0FBVzFuQixHQUFNLFNBQVMsRUFBTXU0QixHQUl0RUUsR0FBU2p2QixFQUFPeEYsSUFBSzBHLEVBQU0sU0FBV2dkLEdBQVcxbkIsR0FBTSxTQUFTLEVBQU11NEIsSUFvQ3pFLE9BaEJNRCxHQUFlRSxHQUFlLElBSW5DRSxHQUFTenNCLEtBQUtpc0IsSUFBSyxFQUFHanNCLEtBQUswc0IsS0FDMUJqdUIsRUFBTSxTQUFXMHRCLEVBQVcsR0FBSTNTLGNBQWdCMlMsRUFBVXR3QixNQUFPLElBQ2pFMHdCLEVBQ0FFLEVBQ0FELEVBQ0EsTUFJTSxHQUdEQyxFQUdSLFNBQVNFLEdBQWtCbHVCLEVBQU0wdEIsRUFBV0ssR0FHM0MsSUFBSUYsRUFBU25FLEdBQVcxcEIsR0FLdkI0dEIsSUFEbUIvdkIsRUFBUWd1QixxQkFBdUJrQyxJQUVFLGVBQW5EanZCLEVBQU94RixJQUFLMEcsRUFBTSxhQUFhLEVBQU82dEIsR0FDdkNNLEVBQW1CUCxFQUVuQm52QixFQUFNdXJCLEdBQVFocUIsRUFBTTB0QixFQUFXRyxHQUMvQk8sRUFBYSxTQUFXVixFQUFXLEdBQUkzUyxjQUFnQjJTLEVBQVV0d0IsTUFBTyxHQUl6RSxHQUFLcXNCLEdBQVUzaEIsS0FBTXJKLEdBQVEsQ0FDNUIsSUFBTXN2QixFQUNMLE9BQU90dkIsRUFFUkEsRUFBTSxPQXlDUCxRQWxDUVosRUFBUWd1QixxQkFBdUIrQixJQU1yQy92QixFQUFRb3VCLHdCQUEwQm5sQixFQUFVOUcsRUFBTSxPQUkzQyxTQUFSdkIsSUFJQ2d0QixXQUFZaHRCLElBQTBELFdBQWpESyxFQUFPeEYsSUFBSzBHLEVBQU0sV0FBVyxFQUFPNnRCLEtBRzFEN3RCLEVBQUtxdUIsaUJBQWlCNTFCLFNBRXRCbTFCLEVBQWlFLGVBQW5EOXVCLEVBQU94RixJQUFLMEcsRUFBTSxhQUFhLEVBQU82dEIsSUFLcERNLEVBQW1CQyxLQUFjcHVCLEtBRWhDdkIsRUFBTXVCLEVBQU1vdUIsTUFLZDN2QixFQUFNZ3RCLFdBQVlodEIsSUFBUyxHQUkxQmd2QixHQUNDenRCLEVBQ0EwdEIsRUFDQUssSUFBV0gsRUFBYyxTQUFXLFdBQ3BDTyxFQUNBTixFQUdBcHZCLEdBRUUsS0ErU0wsU0FBUzZ2QixHQUFPdHVCLEVBQU1wSCxFQUFTNmlCLEVBQU05YSxFQUFLNHRCLEdBQ3pDLE9BQU8sSUFBSUQsR0FBTXAzQixVQUFVZ0ksS0FBTWMsRUFBTXBILEVBQVM2aUIsRUFBTTlhLEVBQUs0dEIsR0E3UzVEenZCLEVBQU8rQixPQUFRLENBSWQydEIsU0FBVSxDQUNUQyxRQUFTLENBQ1J0NEIsSUFBSyxTQUFVNkosRUFBTWlxQixHQUNwQixHQUFLQSxFQUFXLENBR2YsSUFBSXZxQixFQUFNc3FCLEdBQVFocUIsRUFBTSxXQUN4QixNQUFlLEtBQVJOLEVBQWEsSUFBTUEsTUFPOUJxZSxVQUFXLENBQ1YseUJBQTJCLEVBQzNCLGFBQWUsRUFDZixhQUFlLEVBQ2YsVUFBWSxFQUNaLFlBQWMsRUFDZCxZQUFjLEVBQ2QsVUFBWSxFQUNaLFlBQWMsRUFDZCxlQUFpQixFQUNqQixpQkFBbUIsRUFDbkIsU0FBVyxFQUNYLFlBQWMsRUFDZCxjQUFnQixFQUNoQixZQUFjLEVBQ2QsU0FBVyxFQUNYLE9BQVMsRUFDVCxTQUFXLEVBQ1gsUUFBVSxFQUNWLFFBQVUsRUFDVixNQUFRLEdBS1Q2TyxTQUFVLEdBR1Y5eUIsTUFBTyxTQUFVa0csRUFBTW5LLEVBQU1VLEVBQU93M0IsR0FHbkMsR0FBTS90QixHQUEwQixJQUFsQkEsRUFBS2pDLFVBQW9DLElBQWxCaUMsRUFBS2pDLFVBQW1CaUMsRUFBS2xHLE1BQWxFLENBS0EsSUFBSTRGLEVBQUt4QixFQUFNcWUsRUFDZG1TLEVBQVcxVCxFQUFXbmxCLEdBQ3RCODRCLEVBQWUzQixHQUFZbGxCLEtBQU1qUyxHQUNqQ2lFLEVBQVFrRyxFQUFLbEcsTUFhZCxHQVJNNjBCLElBQ0w5NEIsRUFBTzYyQixHQUFlZ0MsSUFJdkJuUyxFQUFRemQsRUFBTzB2QixTQUFVMzRCLElBQVVpSixFQUFPMHZCLFNBQVVFLFFBR3JDcnRCLElBQVY5SyxFQTBDSixPQUFLZ21CLEdBQVMsUUFBU0EsUUFDd0JsYixLQUE1QzNCLEVBQU02YyxFQUFNcG1CLElBQUs2SixHQUFNLEVBQU8rdEIsSUFFekJydUIsRUFJRDVGLEVBQU9qRSxHQTdDQSxZQUhkcUksU0FBYzNILEtBR2NtSixFQUFNcWQsR0FBUXRWLEtBQU1sUixLQUFhbUosRUFBSyxLQUNqRW5KLEVBQVErbUIsR0FBV3RkLEVBQU1uSyxFQUFNNkosR0FHL0J4QixFQUFPLFVBSU0sTUFBVDNILEdBQWlCQSxHQUFVQSxJQU9sQixXQUFUMkgsR0FBc0J5d0IsSUFDMUJwNEIsR0FBU21KLEdBQU9BLEVBQUssS0FBU1osRUFBT2lmLFVBQVcyUSxHQUFhLEdBQUssT0FJN0Q3d0IsRUFBUSt0QixpQkFBNkIsS0FBVnIxQixHQUFpRCxJQUFqQ1YsRUFBSzJILFFBQVMsZ0JBQzlEMUQsRUFBT2pFLEdBQVMsV0FJWDBtQixHQUFZLFFBQVNBLFFBQ3NCbGIsS0FBOUM5SyxFQUFRZ21CLEVBQU1oQixJQUFLdmIsRUFBTXpKLEVBQU93M0IsTUFFN0JZLEVBQ0o3MEIsRUFBTTgwQixZQUFhLzRCLEVBQU1VLEdBRXpCdUQsRUFBT2pFLEdBQVNVLE1Ba0JwQitDLElBQUssU0FBVTBHLEVBQU1uSyxFQUFNazRCLEVBQU9GLEdBQ2pDLElBQUlwdkIsRUFBS2MsRUFBS2dkLEVBQ2JtUyxFQUFXMVQsRUFBV25sQixHQTZCdkIsT0E1QmdCbTNCLEdBQVlsbEIsS0FBTWpTLEtBTWpDQSxFQUFPNjJCLEdBQWVnQyxLQUl2Qm5TLEVBQVF6ZCxFQUFPMHZCLFNBQVUzNEIsSUFBVWlKLEVBQU8wdkIsU0FBVUUsS0FHdEMsUUFBU25TLElBQ3RCOWQsRUFBTThkLEVBQU1wbUIsSUFBSzZKLEdBQU0sRUFBTSt0QixTQUlqQjFzQixJQUFSNUMsSUFDSkEsRUFBTXVyQixHQUFRaHFCLEVBQU1uSyxFQUFNZzRCLElBSWQsV0FBUnB2QixHQUFvQjVJLEtBQVFzM0IsS0FDaEMxdUIsRUFBTTB1QixHQUFvQnQzQixJQUlaLEtBQVZrNEIsR0FBZ0JBLEdBQ3BCeHVCLEVBQU1rc0IsV0FBWWh0QixJQUNELElBQVZzdkIsR0FBa0JjLFNBQVV0dkIsR0FBUUEsR0FBTyxFQUFJZCxHQUdoREEsS0FJVEssRUFBT2UsS0FBTSxDQUFFLFNBQVUsVUFBVyxTQUFVcEQsRUFBSWl4QixHQUNqRDV1QixFQUFPMHZCLFNBQVVkLEdBQWMsQ0FDOUJ2M0IsSUFBSyxTQUFVNkosRUFBTWlxQixFQUFVOEQsR0FDOUIsR0FBSzlELEVBSUosT0FBTzhDLEdBQWFqbEIsS0FBTWhKLEVBQU94RixJQUFLMEcsRUFBTSxhQVF4Q0EsRUFBS3F1QixpQkFBaUI1MUIsUUFBV3VILEVBQUs4dUIsd0JBQXdCNUUsTUFJaEVnRSxHQUFrQmx1QixFQUFNMHRCLEVBQVdLLEdBSG5DbEUsR0FBTTdwQixFQUFNaXRCLElBQVMsV0FDcEIsT0FBT2lCLEdBQWtCbHVCLEVBQU0wdEIsRUFBV0ssT0FNL0N4UyxJQUFLLFNBQVV2YixFQUFNekosRUFBT3czQixHQUMzQixJQUFJeHJCLEVBQ0hzckIsRUFBU25FLEdBQVcxcEIsR0FJcEIrdUIsR0FBc0JseEIsRUFBUW11QixpQkFDVCxhQUFwQjZCLEVBQU96QyxTQUlSd0MsR0FEa0JtQixHQUFzQmhCLElBRVksZUFBbkRqdkIsRUFBT3hGLElBQUswRyxFQUFNLGFBQWEsRUFBTzZ0QixHQUN2Q04sRUFBV1EsRUFDVk4sR0FDQ3p0QixFQUNBMHRCLEVBQ0FLLEVBQ0FILEVBQ0FDLEdBRUQsRUFxQkYsT0FqQktELEdBQWVtQixJQUNuQnhCLEdBQVloc0IsS0FBSzBzQixLQUNoQmp1QixFQUFNLFNBQVcwdEIsRUFBVyxHQUFJM1MsY0FBZ0IyUyxFQUFVdHdCLE1BQU8sSUFDakVxdUIsV0FBWW9DLEVBQVFILElBQ3BCRCxHQUFvQnp0QixFQUFNMHRCLEVBQVcsVUFBVSxFQUFPRyxHQUN0RCxLQUtHTixJQUFjaHJCLEVBQVV3YSxHQUFRdFYsS0FBTWxSLEtBQ2IsUUFBM0JnTSxFQUFTLElBQU8sUUFFbEJ2QyxFQUFLbEcsTUFBTzR6QixHQUFjbjNCLEVBQzFCQSxFQUFRdUksRUFBT3hGLElBQUswRyxFQUFNMHRCLElBR3BCSixHQUFtQnR0QixFQUFNekosRUFBT2czQixRQUsxQ3p1QixFQUFPMHZCLFNBQVN4RCxXQUFhVCxHQUFjMXNCLEVBQVFrdUIsb0JBQ2xELFNBQVUvckIsRUFBTWlxQixHQUNmLEdBQUtBLEVBQ0osT0FBU3dCLFdBQVl6QixHQUFRaHFCLEVBQU0sZ0JBQ2xDQSxFQUFLOHVCLHdCQUF3QkUsS0FDNUJuRixHQUFNN3BCLEVBQU0sQ0FBRWdyQixXQUFZLElBQUssV0FDOUIsT0FBT2hyQixFQUFLOHVCLHdCQUF3QkUsU0FFbEMsUUFNUmx3QixFQUFPZSxLQUFNLENBQ1pvdkIsT0FBUSxHQUNSQyxRQUFTLEdBQ1RDLE9BQVEsVUFDTixTQUFVQyxFQUFRQyxHQUNwQnZ3QixFQUFPMHZCLFNBQVVZLEVBQVNDLEdBQVcsQ0FDcENDLE9BQVEsU0FBVS80QixHQU9qQixJQU5BLElBQUlqQixFQUFJLEVBQ1BpNkIsRUFBVyxHQUdYQyxFQUF5QixpQkFBVmo1QixFQUFxQkEsRUFBTXFNLE1BQU8sS0FBUSxDQUFFck0sR0FFcERqQixFQUFJLEVBQUdBLElBQ2RpNkIsRUFBVUgsRUFBU3BTLEdBQVcxbkIsR0FBTSs1QixHQUNuQ0csRUFBT2w2QixJQUFPazZCLEVBQU9sNkIsRUFBSSxJQUFPazZCLEVBQU8sR0FHekMsT0FBT0QsSUFJTyxXQUFYSCxJQUNKdHdCLEVBQU8wdkIsU0FBVVksRUFBU0MsR0FBUzlULElBQU0rUixPQUkzQ3h1QixFQUFPRyxHQUFHNEIsT0FBUSxDQUNqQnZILElBQUssU0FBVXpELEVBQU1VLEdBQ3BCLE9BQU82akIsRUFBUXJkLE1BQU0sU0FBVWlELEVBQU1uSyxFQUFNVSxHQUMxQyxJQUFJczNCLEVBQVFwdEIsRUFDWFYsRUFBTSxHQUNOekssRUFBSSxFQUVMLEdBQUs2TCxNQUFNQyxRQUFTdkwsR0FBUyxDQUk1QixJQUhBZzRCLEVBQVNuRSxHQUFXMXBCLEdBQ3BCUyxFQUFNNUssRUFBSzRDLE9BRUhuRCxFQUFJbUwsRUFBS25MLElBQ2hCeUssRUFBS2xLLEVBQU1QLElBQVF3SixFQUFPeEYsSUFBSzBHLEVBQU1uSyxFQUFNUCxJQUFLLEVBQU91NEIsR0FHeEQsT0FBTzl0QixFQUdSLFlBQWlCc0IsSUFBVjlLLEVBQ051SSxFQUFPaEYsTUFBT2tHLEVBQU1uSyxFQUFNVSxHQUMxQnVJLEVBQU94RixJQUFLMEcsRUFBTW5LLEtBQ2pCQSxFQUFNVSxFQUFPMEosVUFBVXhILE9BQVMsTUFRckNxRyxFQUFPd3ZCLE1BQVFBLEdBRWZBLEdBQU1wM0IsVUFBWSxDQUNqQm1JLFlBQWFpdkIsR0FDYnB2QixLQUFNLFNBQVVjLEVBQU1wSCxFQUFTNmlCLEVBQU05YSxFQUFLNHRCLEVBQVF6USxHQUNqRC9nQixLQUFLaUQsS0FBT0EsRUFDWmpELEtBQUswZSxLQUFPQSxFQUNaMWUsS0FBS3d4QixPQUFTQSxHQUFVenZCLEVBQU95dkIsT0FBT2hQLFNBQ3RDeGlCLEtBQUtuRSxRQUFVQSxFQUNmbUUsS0FBSzZRLE1BQVE3USxLQUFLZ29CLElBQU1ob0IsS0FBS2dNLE1BQzdCaE0sS0FBSzRELElBQU1BLEVBQ1g1RCxLQUFLK2dCLEtBQU9BLElBQVVoZixFQUFPaWYsVUFBV3RDLEdBQVMsR0FBSyxPQUV2RDFTLElBQUssV0FDSixJQUFJd1QsRUFBUStSLEdBQU1tQixVQUFXMXlCLEtBQUswZSxNQUVsQyxPQUFPYyxHQUFTQSxFQUFNcG1CLElBQ3JCb21CLEVBQU1wbUIsSUFBSzRHLE1BQ1h1eEIsR0FBTW1CLFVBQVVsUSxTQUFTcHBCLElBQUs0RyxPQUVoQzJ5QixJQUFLLFNBQVVDLEdBQ2QsSUFBSUMsRUFDSHJULEVBQVErUixHQUFNbUIsVUFBVzF5QixLQUFLMGUsTUFvQi9CLE9BbEJLMWUsS0FBS25FLFFBQVFpM0IsU0FDakI5eUIsS0FBSyt5QixJQUFNRixFQUFROXdCLEVBQU95dkIsT0FBUXh4QixLQUFLd3hCLFFBQ3RDb0IsRUFBUzV5QixLQUFLbkUsUUFBUWkzQixTQUFXRixFQUFTLEVBQUcsRUFBRzV5QixLQUFLbkUsUUFBUWkzQixVQUc5RDl5QixLQUFLK3lCLElBQU1GLEVBQVFELEVBRXBCNXlCLEtBQUtnb0IsS0FBUWhvQixLQUFLNEQsSUFBTTVELEtBQUs2USxPQUFVZ2lCLEVBQVE3eUIsS0FBSzZRLE1BRS9DN1EsS0FBS25FLFFBQVFtM0IsTUFDakJoekIsS0FBS25FLFFBQVFtM0IsS0FBS3Q2QixLQUFNc0gsS0FBS2lELEtBQU1qRCxLQUFLZ29CLElBQUtob0IsTUFHekN3ZixHQUFTQSxFQUFNaEIsSUFDbkJnQixFQUFNaEIsSUFBS3hlLE1BRVh1eEIsR0FBTW1CLFVBQVVsUSxTQUFTaEUsSUFBS3hlLE1BRXhCQSxPQUlUdXhCLEdBQU1wM0IsVUFBVWdJLEtBQUtoSSxVQUFZbzNCLEdBQU1wM0IsVUFFdkNvM0IsR0FBTW1CLFVBQVksQ0FDakJsUSxTQUFVLENBQ1RwcEIsSUFBSyxTQUFVcW5CLEdBQ2QsSUFBSWhsQixFQUlKLE9BQTZCLElBQXhCZ2xCLEVBQU14ZCxLQUFLakMsVUFDYSxNQUE1QnlmLEVBQU14ZCxLQUFNd2QsRUFBTS9CLE9BQW9ELE1BQWxDK0IsRUFBTXhkLEtBQUtsRyxNQUFPMGpCLEVBQU0vQixNQUNyRCtCLEVBQU14ZCxLQUFNd2QsRUFBTS9CLE9BTzFCampCLEVBQVNzRyxFQUFPeEYsSUFBS2trQixFQUFNeGQsS0FBTXdkLEVBQU0vQixLQUFNLE1BR2hCLFNBQVhqakIsRUFBd0JBLEVBQUosR0FFdkMraUIsSUFBSyxTQUFVaUMsR0FLVDFlLEVBQU9reEIsR0FBR0QsS0FBTXZTLEVBQU0vQixNQUMxQjNjLEVBQU9reEIsR0FBR0QsS0FBTXZTLEVBQU0vQixNQUFRK0IsR0FDSyxJQUF4QkEsRUFBTXhkLEtBQUtqQyxXQUNyQmUsRUFBTzB2QixTQUFVaFIsRUFBTS9CLE9BQzRCLE1BQW5EK0IsRUFBTXhkLEtBQUtsRyxNQUFPNHlCLEdBQWVsUCxFQUFNL0IsT0FHeEMrQixFQUFNeGQsS0FBTXdkLEVBQU0vQixNQUFTK0IsRUFBTXVILElBRmpDam1CLEVBQU9oRixNQUFPMGpCLEVBQU14ZCxLQUFNd2QsRUFBTS9CLEtBQU0rQixFQUFNdUgsSUFBTXZILEVBQU1NLFNBVTVEd1EsR0FBTW1CLFVBQVVRLFVBQVkzQixHQUFNbUIsVUFBVVMsV0FBYSxDQUN4RDNVLElBQUssU0FBVWlDLEdBQ1RBLEVBQU14ZCxLQUFLakMsVUFBWXlmLEVBQU14ZCxLQUFLOUQsYUFDdENzaEIsRUFBTXhkLEtBQU13ZCxFQUFNL0IsTUFBUytCLEVBQU11SCxPQUtwQ2ptQixFQUFPeXZCLE9BQVMsQ0FDZjRCLE9BQVEsU0FBVS80QixHQUNqQixPQUFPQSxHQUVSZzVCLE1BQU8sU0FBVWg1QixHQUNoQixNQUFPLEdBQU1tSyxLQUFLOHVCLElBQUtqNUIsRUFBSW1LLEtBQUsrdUIsSUFBTyxHQUV4Qy9RLFNBQVUsU0FHWHpnQixFQUFPa3hCLEdBQUsxQixHQUFNcDNCLFVBQVVnSSxLQUc1QkosRUFBT2t4QixHQUFHRCxLQUFPLEdBS2pCLElBQ0NRLEdBQU9DLEdBQ1BDLEdBQVcseUJBQ1hDLEdBQU8sY0FFUixTQUFTQyxLQUNISCxNQUNxQixJQUFwQjk0QixFQUFTazVCLFFBQW9CbjVCLEVBQU9vNUIsc0JBQ3hDcDVCLEVBQU9vNUIsc0JBQXVCRixJQUU5Qmw1QixFQUFPb2hCLFdBQVk4WCxHQUFVN3hCLEVBQU9reEIsR0FBR2MsVUFHeENoeUIsRUFBT2t4QixHQUFHZSxRQUtaLFNBQVNDLEtBSVIsT0FIQXY1QixFQUFPb2hCLFlBQVksV0FDbEIwWCxRQUFRbHZCLEtBRUFrdkIsR0FBUXpzQixLQUFLaWhCLE1BSXZCLFNBQVNrTSxHQUFPL3lCLEVBQU1nekIsR0FDckIsSUFBSXZLLEVBQ0hyeEIsRUFBSSxFQUNKcVQsRUFBUSxDQUFFMGpCLE9BQVFudUIsR0FLbkIsSUFEQWd6QixFQUFlQSxFQUFlLEVBQUksRUFDMUI1N0IsRUFBSSxFQUFHQSxHQUFLLEVBQUk0N0IsRUFFdkJ2b0IsRUFBTyxVQURQZ2UsRUFBUTNKLEdBQVcxbkIsS0FDU3FULEVBQU8sVUFBWWdlLEdBQVV6b0IsRUFPMUQsT0FKS2d6QixJQUNKdm9CLEVBQU04bEIsUUFBVTlsQixFQUFNdWhCLE1BQVFoc0IsR0FHeEJ5SyxFQUdSLFNBQVN3b0IsR0FBYTU2QixFQUFPa2xCLEVBQU0yVixHQUtsQyxJQUpBLElBQUk1VCxFQUNId0ssR0FBZXFKLEdBQVVDLFNBQVU3VixJQUFVLElBQUt0aUIsT0FBUWs0QixHQUFVQyxTQUFVLE1BQzlFbDRCLEVBQVEsRUFDUlgsRUFBU3V2QixFQUFXdnZCLE9BQ2JXLEVBQVFYLEVBQVFXLElBQ3ZCLEdBQU9va0IsRUFBUXdLLEVBQVk1dUIsR0FBUTNELEtBQU0yN0IsRUFBVzNWLEVBQU1sbEIsR0FHekQsT0FBT2luQixFQXNOVixTQUFTNlQsR0FBV3J4QixFQUFNdXhCLEVBQVkzNEIsR0FDckMsSUFBSUosRUFDSGc1QixFQUNBcDRCLEVBQVEsRUFDUlgsRUFBUzQ0QixHQUFVSSxXQUFXaDVCLE9BQzlCNGUsRUFBV3ZZLEVBQU9rWSxXQUFXSSxRQUFRLGtCQUc3QjJaLEVBQUsvd0IsUUFFYit3QixFQUFPLFdBQ04sR0FBS1MsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjbkIsSUFBU1MsS0FDMUIvWCxFQUFZMVgsS0FBS2lzQixJQUFLLEVBQUc0RCxFQUFVTyxVQUFZUCxFQUFVdkIsU0FBVzZCLEdBS3BFL0IsRUFBVSxHQURIMVcsRUFBWW1ZLEVBQVV2QixVQUFZLEdBRXpDejJCLEVBQVEsRUFDUlgsRUFBUzI0QixFQUFVUSxPQUFPbjVCLE9BRW5CVyxFQUFRWCxFQUFRVyxJQUN2Qmc0QixFQUFVUSxPQUFReDRCLEdBQVFzMkIsSUFBS0MsR0FNaEMsT0FIQXRZLEVBQVNpQixXQUFZdFksRUFBTSxDQUFFb3hCLEVBQVd6QixFQUFTMVcsSUFHNUMwVyxFQUFVLEdBQUtsM0IsRUFDWndnQixHQUlGeGdCLEdBQ0w0ZSxFQUFTaUIsV0FBWXRZLEVBQU0sQ0FBRW94QixFQUFXLEVBQUcsSUFJNUMvWixFQUFTa0IsWUFBYXZZLEVBQU0sQ0FBRW94QixLQUN2QixJQUVSQSxFQUFZL1osRUFBU3pCLFFBQVMsQ0FDN0I1VixLQUFNQSxFQUNOMGtCLE1BQU81bEIsRUFBTytCLE9BQVEsR0FBSTB3QixHQUMxQk0sS0FBTS95QixFQUFPK0IsUUFBUSxFQUFNLENBQzFCaXhCLGNBQWUsR0FDZnZELE9BQVF6dkIsRUFBT3l2QixPQUFPaFAsVUFDcEIzbUIsR0FDSG01QixtQkFBb0JSLEVBQ3BCUyxnQkFBaUJwNUIsRUFDakIrNEIsVUFBV3BCLElBQVNTLEtBQ3BCbkIsU0FBVWozQixFQUFRaTNCLFNBQ2xCK0IsT0FBUSxHQUNSVCxZQUFhLFNBQVUxVixFQUFNOWEsR0FDNUIsSUFBSTZjLEVBQVExZSxFQUFPd3ZCLE1BQU90dUIsRUFBTW94QixFQUFVUyxLQUFNcFcsRUFBTTlhLEVBQ3BEeXdCLEVBQVVTLEtBQUtDLGNBQWVyVyxJQUFVMlYsRUFBVVMsS0FBS3RELFFBRXpELE9BREE2QyxFQUFVUSxPQUFPajRCLEtBQU02akIsR0FDaEJBLEdBRVJmLEtBQU0sU0FBVXdWLEdBQ2YsSUFBSTc0QixFQUFRLEVBSVhYLEVBQVN3NUIsRUFBVWIsRUFBVVEsT0FBT241QixPQUFTLEVBQzlDLEdBQUsrNEIsRUFDSixPQUFPejBCLEtBR1IsSUFEQXkwQixHQUFVLEVBQ0ZwNEIsRUFBUVgsRUFBUVcsSUFDdkJnNEIsRUFBVVEsT0FBUXg0QixHQUFRczJCLElBQUssR0FVaEMsT0FOS3VDLEdBQ0o1YSxFQUFTaUIsV0FBWXRZLEVBQU0sQ0FBRW94QixFQUFXLEVBQUcsSUFDM0MvWixFQUFTa0IsWUFBYXZZLEVBQU0sQ0FBRW94QixFQUFXYSxLQUV6QzVhLEVBQVNzQixXQUFZM1ksRUFBTSxDQUFFb3hCLEVBQVdhLElBRWxDbDFCLFFBR1QybkIsRUFBUTBNLEVBQVUxTSxNQUluQixLQS9IRCxTQUFxQkEsRUFBT29OLEdBQzNCLElBQUkxNEIsRUFBT3ZELEVBQU0wNEIsRUFBUWg0QixFQUFPZ21CLEVBR2hDLElBQU1uakIsS0FBU3NyQixFQWVkLEdBYkE2SixFQUFTdUQsRUFEVGo4QixFQUFPbWxCLEVBQVc1aEIsSUFFbEI3QyxFQUFRbXVCLEVBQU90ckIsR0FDVitILE1BQU1DLFFBQVM3SyxLQUNuQmc0QixFQUFTaDRCLEVBQU8sR0FDaEJBLEVBQVFtdUIsRUFBT3RyQixHQUFVN0MsRUFBTyxJQUc1QjZDLElBQVV2RCxJQUNkNnVCLEVBQU83dUIsR0FBU1UsU0FDVG11QixFQUFPdHJCLEtBR2ZtakIsRUFBUXpkLEVBQU8wdkIsU0FBVTM0QixLQUNYLFdBQVkwbUIsRUFNekIsSUFBTW5qQixLQUxON0MsRUFBUWdtQixFQUFNK1MsT0FBUS80QixVQUNmbXVCLEVBQU83dUIsR0FJQ1UsRUFDTjZDLEtBQVNzckIsSUFDaEJBLEVBQU90ckIsR0FBVTdDLEVBQU82QyxHQUN4QjA0QixFQUFlMTRCLEdBQVVtMUIsUUFJM0J1RCxFQUFlajhCLEdBQVMwNEIsRUE2RjFCMkQsQ0FBWXhOLEVBQU8wTSxFQUFVUyxLQUFLQyxlQUUxQjE0QixFQUFRWCxFQUFRVyxJQUV2QixHQURBWixFQUFTNjRCLEdBQVVJLFdBQVlyNEIsR0FBUTNELEtBQU0yN0IsRUFBV3B4QixFQUFNMGtCLEVBQU8wTSxFQUFVUyxNQU05RSxPQUpLL3pCLEVBQVl0RixFQUFPaWtCLFFBQ3ZCM2QsRUFBTzBkLFlBQWE0VSxFQUFVcHhCLEtBQU1veEIsRUFBVVMsS0FBS3RiLE9BQVFrRyxLQUMxRGprQixFQUFPaWtCLEtBQUszbEIsS0FBTTBCLElBRWJBLEVBeUJULE9BckJBc0csRUFBT2lCLElBQUsya0IsRUFBT3lNLEdBQWFDLEdBRTNCdHpCLEVBQVlzekIsRUFBVVMsS0FBS2prQixRQUMvQndqQixFQUFVUyxLQUFLamtCLE1BQU1uWSxLQUFNdUssRUFBTW94QixHQUlsQ0EsRUFDRXpaLFNBQVV5WixFQUFVUyxLQUFLbGEsVUFDekIxVCxLQUFNbXRCLEVBQVVTLEtBQUs1dEIsS0FBTW10QixFQUFVUyxLQUFLTSxVQUMxQ3RjLEtBQU11YixFQUFVUyxLQUFLaGMsTUFDckJ1QixPQUFRZ2EsRUFBVVMsS0FBS3phLFFBRXpCdFksRUFBT2t4QixHQUFHb0MsTUFDVHR6QixFQUFPK0IsT0FBUWt3QixFQUFNLENBQ3BCL3dCLEtBQU1BLEVBQ05xeUIsS0FBTWpCLEVBQ043YSxNQUFPNmEsRUFBVVMsS0FBS3RiLFNBSWpCNmEsRUFHUnR5QixFQUFPdXlCLFVBQVl2eUIsRUFBTytCLE9BQVF3d0IsR0FBVyxDQUU1Q0MsU0FBVSxDQUNULElBQUssQ0FBRSxTQUFVN1YsRUFBTWxsQixHQUN0QixJQUFJaW5CLEVBQVF6Z0IsS0FBS28wQixZQUFhMVYsRUFBTWxsQixHQUVwQyxPQURBK21CLEdBQVdFLEVBQU14ZCxLQUFNeWIsRUFBTXNCLEdBQVF0VixLQUFNbFIsR0FBU2luQixHQUM3Q0EsS0FJVDhVLFFBQVMsU0FBVTVOLEVBQU81a0IsR0FDcEJoQyxFQUFZNG1CLElBQ2hCNWtCLEVBQVc0a0IsRUFDWEEsRUFBUSxDQUFFLE1BRVZBLEVBQVFBLEVBQU10ZCxNQUFPOE4sR0FPdEIsSUFKQSxJQUFJdUcsRUFDSHJpQixFQUFRLEVBQ1JYLEVBQVNpc0IsRUFBTWpzQixPQUVSVyxFQUFRWCxFQUFRVyxJQUN2QnFpQixFQUFPaUosRUFBT3RyQixHQUNkaTRCLEdBQVVDLFNBQVU3VixHQUFTNFYsR0FBVUMsU0FBVTdWLElBQVUsR0FDM0Q0VixHQUFVQyxTQUFVN1YsR0FBTzdQLFFBQVM5TCxJQUl0QzJ4QixXQUFZLENBM1diLFNBQTJCenhCLEVBQU0wa0IsRUFBT21OLEdBQ3ZDLElBQUlwVyxFQUFNbGxCLEVBQU9pb0IsRUFBUWpDLEVBQU9nVyxFQUFTQyxFQUFXQyxFQUFnQnBWLEVBQ25FcVYsRUFBUSxVQUFXaE8sR0FBUyxXQUFZQSxFQUN4QzJOLEVBQU90MUIsS0FDUG1xQixFQUFPLEdBQ1BwdEIsRUFBUWtHLEVBQUtsRyxNQUNiODJCLEVBQVM1d0IsRUFBS2pDLFVBQVlxZixHQUFvQnBkLEdBQzlDMnlCLEVBQVdoWCxFQUFTeGxCLElBQUs2SixFQUFNLFVBNkJoQyxJQUFNeWIsS0ExQkFvVyxFQUFLdGIsUUFFYSxPQUR2QmdHLEVBQVF6ZCxFQUFPMGQsWUFBYXhjLEVBQU0sT0FDdkI0eUIsV0FDVnJXLEVBQU1xVyxTQUFXLEVBQ2pCTCxFQUFVaFcsRUFBTTNGLE1BQU1ILEtBQ3RCOEYsRUFBTTNGLE1BQU1ILEtBQU8sV0FDWjhGLEVBQU1xVyxVQUNYTCxNQUlIaFcsRUFBTXFXLFdBRU5QLEVBQUtqYixRQUFRLFdBR1ppYixFQUFLamIsUUFBUSxXQUNabUYsRUFBTXFXLFdBQ0E5ekIsRUFBT3lYLE1BQU92VyxFQUFNLE1BQU92SCxRQUNoQzhqQixFQUFNM0YsTUFBTUgsY0FPRmlPLEVBRWIsR0FEQW51QixFQUFRbXVCLEVBQU9qSixHQUNWZ1YsR0FBUzNvQixLQUFNdlIsR0FBVSxDQUc3QixVQUZPbXVCLEVBQU9qSixHQUNkK0MsRUFBU0EsR0FBb0IsV0FBVmpvQixFQUNkQSxLQUFZcTZCLEVBQVMsT0FBUyxRQUFXLENBSTdDLEdBQWUsU0FBVnI2QixJQUFvQm84QixRQUFpQ3R4QixJQUFyQnN4QixFQUFVbFgsR0FLOUMsU0FKQW1WLEdBQVMsRUFPWDFKLEVBQU16TCxHQUFTa1gsR0FBWUEsRUFBVWxYLElBQVUzYyxFQUFPaEYsTUFBT2tHLEVBQU15YixHQU1yRSxJQURBK1csR0FBYTF6QixFQUFPa0QsY0FBZTBpQixNQUNoQjVsQixFQUFPa0QsY0FBZWtsQixHQThEekMsSUFBTXpMLEtBekREaVgsR0FBMkIsSUFBbEIxeUIsRUFBS2pDLFdBTWxCOHpCLEVBQUtnQixTQUFXLENBQUUvNEIsRUFBTSs0QixTQUFVLzRCLEVBQU1nNUIsVUFBV2g1QixFQUFNaTVCLFdBSWxDLE9BRHZCTixFQUFpQkUsR0FBWUEsRUFBU3RWLFdBRXJDb1YsRUFBaUI5VyxFQUFTeGxCLElBQUs2SixFQUFNLFlBR3JCLFVBRGpCcWQsRUFBVXZlLEVBQU94RixJQUFLMEcsRUFBTSxjQUV0Qnl5QixFQUNKcFYsRUFBVW9WLEdBSVZyVSxHQUFVLENBQUVwZSxJQUFRLEdBQ3BCeXlCLEVBQWlCenlCLEVBQUtsRyxNQUFNdWpCLFNBQVdvVixFQUN2Q3BWLEVBQVV2ZSxFQUFPeEYsSUFBSzBHLEVBQU0sV0FDNUJvZSxHQUFVLENBQUVwZSxPQUtHLFdBQVpxZCxHQUFvQyxpQkFBWkEsR0FBZ0QsTUFBbEJvVixJQUNyQixTQUFoQzN6QixFQUFPeEYsSUFBSzBHLEVBQU0sV0FHaEJ3eUIsSUFDTEgsRUFBS3B1QixNQUFNLFdBQ1ZuSyxFQUFNdWpCLFFBQVVvVixLQUVNLE1BQWxCQSxJQUNKcFYsRUFBVXZqQixFQUFNdWpCLFFBQ2hCb1YsRUFBNkIsU0FBWnBWLEVBQXFCLEdBQUtBLElBRzdDdmpCLEVBQU11akIsUUFBVSxpQkFLZHdVLEVBQUtnQixXQUNULzRCLEVBQU0rNEIsU0FBVyxTQUNqQlIsRUFBS2piLFFBQVEsV0FDWnRkLEVBQU0rNEIsU0FBV2hCLEVBQUtnQixTQUFVLEdBQ2hDLzRCLEVBQU1nNUIsVUFBWWpCLEVBQUtnQixTQUFVLEdBQ2pDLzRCLEVBQU1pNUIsVUFBWWxCLEVBQUtnQixTQUFVLE9BS25DTCxHQUFZLEVBQ0V0TCxFQUdQc0wsSUFDQUcsRUFDQyxXQUFZQSxJQUNoQi9CLEVBQVMrQixFQUFTL0IsUUFHbkIrQixFQUFXaFgsRUFBU3ZCLE9BQVFwYSxFQUFNLFNBQVUsQ0FBRXFkLFFBQVNvVixJQUluRGpVLElBQ0ptVSxFQUFTL0IsUUFBVUEsR0FJZkEsR0FDSnhTLEdBQVUsQ0FBRXBlLElBQVEsR0FLckJxeUIsRUFBS3B1QixNQUFNLFdBU1YsSUFBTXdYLEtBSkFtVixHQUNMeFMsR0FBVSxDQUFFcGUsSUFFYjJiLEVBQVM3Z0IsT0FBUWtGLEVBQU0sVUFDVGtuQixFQUNicG9CLEVBQU9oRixNQUFPa0csRUFBTXliLEVBQU15TCxFQUFNekwsUUFNbkMrVyxFQUFZckIsR0FBYVAsRUFBUytCLEVBQVVsWCxHQUFTLEVBQUdBLEVBQU00VyxHQUN0RDVXLEtBQVFrWCxJQUNmQSxFQUFVbFgsR0FBUytXLEVBQVU1a0IsTUFDeEJnakIsSUFDSjRCLEVBQVU3eEIsSUFBTTZ4QixFQUFVNWtCLE1BQzFCNGtCLEVBQVU1a0IsTUFBUSxNQXVNckJvbEIsVUFBVyxTQUFVbHpCLEVBQVVpcEIsR0FDekJBLEVBQ0pzSSxHQUFVSSxXQUFXN2xCLFFBQVM5TCxHQUU5QnV4QixHQUFVSSxXQUFXOTNCLEtBQU1tRyxNQUs5QmhCLEVBQU9tMEIsTUFBUSxTQUFVQSxFQUFPMUUsRUFBUXR2QixHQUN2QyxJQUFJaTBCLEVBQU1ELEdBQTBCLGlCQUFWQSxFQUFxQm4wQixFQUFPK0IsT0FBUSxHQUFJb3lCLEdBQVUsQ0FDM0VkLFNBQVVsekIsSUFBT0EsR0FBTXN2QixHQUN0Qnp3QixFQUFZbTFCLElBQVdBLEVBQ3hCcEQsU0FBVW9ELEVBQ1YxRSxPQUFRdHZCLEdBQU1zdkIsR0FBVUEsSUFBV3p3QixFQUFZeXdCLElBQVlBLEdBb0M1RCxPQWhDS3p2QixFQUFPa3hCLEdBQUd6TyxJQUNkMlIsRUFBSXJELFNBQVcsRUFHYyxpQkFBakJxRCxFQUFJckQsV0FDVnFELEVBQUlyRCxZQUFZL3dCLEVBQU9reEIsR0FBR21ELE9BQzlCRCxFQUFJckQsU0FBVy93QixFQUFPa3hCLEdBQUdtRCxPQUFRRCxFQUFJckQsVUFHckNxRCxFQUFJckQsU0FBVy93QixFQUFPa3hCLEdBQUdtRCxPQUFPNVQsVUFNakIsTUFBYjJULEVBQUkzYyxRQUErQixJQUFkMmMsRUFBSTNjLFFBQzdCMmMsRUFBSTNjLE1BQVEsTUFJYjJjLEVBQUlwSixJQUFNb0osRUFBSWYsU0FFZGUsRUFBSWYsU0FBVyxXQUNUcjBCLEVBQVlvMUIsRUFBSXBKLE1BQ3BCb0osRUFBSXBKLElBQUlyMEIsS0FBTXNILE1BR1ZtMkIsRUFBSTNjLE9BQ1J6WCxFQUFPdWQsUUFBU3RmLEtBQU1tMkIsRUFBSTNjLFFBSXJCMmMsR0FHUnAwQixFQUFPRyxHQUFHNEIsT0FBUSxDQUNqQnV5QixPQUFRLFNBQVVILEVBQU9JLEVBQUk5RSxFQUFRenVCLEdBR3BDLE9BQU8vQyxLQUFLcEMsT0FBUXlpQixJQUFxQjlqQixJQUFLLFVBQVcsR0FBSStrQixPQUczRDFkLE1BQU0yeUIsUUFBUyxDQUFFN0UsUUFBUzRFLEdBQU1KLEVBQU8xRSxFQUFRenVCLElBRWxEd3pCLFFBQVMsU0FBVTdYLEVBQU13WCxFQUFPMUUsRUFBUXp1QixHQUN2QyxJQUFJOFcsRUFBUTlYLEVBQU9rRCxjQUFleVosR0FDakM4WCxFQUFTejBCLEVBQU9tMEIsTUFBT0EsRUFBTzFFLEVBQVF6dUIsR0FDdEMwekIsRUFBYyxXQUdiLElBQUluQixFQUFPaEIsR0FBV3QwQixLQUFNK0IsRUFBTytCLE9BQVEsR0FBSTRhLEdBQVE4WCxJQUdsRDNjLEdBQVMrRSxFQUFTeGxCLElBQUs0RyxLQUFNLFlBQ2pDczFCLEVBQUs1VixNQUFNLElBS2QsT0FGQytXLEVBQVlDLE9BQVNELEVBRWY1YyxJQUEwQixJQUFqQjJjLEVBQU9oZCxNQUN0QnhaLEtBQUs4QyxLQUFNMnpCLEdBQ1h6MkIsS0FBS3daLE1BQU9nZCxFQUFPaGQsTUFBT2lkLElBRTVCL1csS0FBTSxTQUFVdmUsRUFBTXllLEVBQVlzVixHQUNqQyxJQUFJeUIsRUFBWSxTQUFVblgsR0FDekIsSUFBSUUsRUFBT0YsRUFBTUUsWUFDVkYsRUFBTUUsS0FDYkEsRUFBTXdWLElBWVAsTUFUcUIsaUJBQVQvekIsSUFDWCt6QixFQUFVdFYsRUFDVkEsRUFBYXplLEVBQ2JBLE9BQU9tRCxHQUVIc2IsR0FDSjVmLEtBQUt3WixNQUFPclksR0FBUSxLQUFNLElBR3BCbkIsS0FBSzhDLE1BQU0sV0FDakIsSUFBSXdjLEdBQVUsRUFDYmpqQixFQUFnQixNQUFSOEUsR0FBZ0JBLEVBQU8sYUFDL0J5MUIsRUFBUzcwQixFQUFPNjBCLE9BQ2hCblksRUFBT0csRUFBU3hsQixJQUFLNEcsTUFFdEIsR0FBSzNELEVBQ0NvaUIsRUFBTXBpQixJQUFXb2lCLEVBQU1waUIsR0FBUXFqQixNQUNuQ2lYLEVBQVdsWSxFQUFNcGlCLFNBR2xCLElBQU1BLEtBQVNvaUIsRUFDVEEsRUFBTXBpQixJQUFXb2lCLEVBQU1waUIsR0FBUXFqQixNQUFRaVUsR0FBSzVvQixLQUFNMU8sSUFDdERzNkIsRUFBV2xZLEVBQU1waUIsSUFLcEIsSUFBTUEsRUFBUXU2QixFQUFPbDdCLE9BQVFXLEtBQ3ZCdTZCLEVBQVF2NkIsR0FBUTRHLE9BQVNqRCxNQUNuQixNQUFSbUIsR0FBZ0J5MUIsRUFBUXY2QixHQUFRbWQsUUFBVXJZLElBRTVDeTFCLEVBQVF2NkIsR0FBUWk1QixLQUFLNVYsS0FBTXdWLEdBQzNCNVYsR0FBVSxFQUNWc1gsRUFBT2gzQixPQUFRdkQsRUFBTyxLQU9uQmlqQixHQUFZNFYsR0FDaEJuekIsRUFBT3VkLFFBQVN0ZixLQUFNbUIsT0FJekJ1MUIsT0FBUSxTQUFVdjFCLEdBSWpCLE9BSGMsSUFBVEEsSUFDSkEsRUFBT0EsR0FBUSxNQUVUbkIsS0FBSzhDLE1BQU0sV0FDakIsSUFBSXpHLEVBQ0hvaUIsRUFBT0csRUFBU3hsQixJQUFLNEcsTUFDckJ3WixFQUFRaUYsRUFBTXRkLEVBQU8sU0FDckJxZSxFQUFRZixFQUFNdGQsRUFBTyxjQUNyQnkxQixFQUFTNzBCLEVBQU82MEIsT0FDaEJsN0IsRUFBUzhkLEVBQVFBLEVBQU05ZCxPQUFTLEVBYWpDLElBVkEraUIsRUFBS2lZLFFBQVMsRUFHZDMwQixFQUFPeVgsTUFBT3haLEtBQU1tQixFQUFNLElBRXJCcWUsR0FBU0EsRUFBTUUsTUFDbkJGLEVBQU1FLEtBQUtobkIsS0FBTXNILE1BQU0sR0FJbEIzRCxFQUFRdTZCLEVBQU9sN0IsT0FBUVcsS0FDdkJ1NkIsRUFBUXY2QixHQUFRNEcsT0FBU2pELE1BQVE0MkIsRUFBUXY2QixHQUFRbWQsUUFBVXJZLElBQy9EeTFCLEVBQVF2NkIsR0FBUWk1QixLQUFLNVYsTUFBTSxHQUMzQmtYLEVBQU9oM0IsT0FBUXZELEVBQU8sSUFLeEIsSUFBTUEsRUFBUSxFQUFHQSxFQUFRWCxFQUFRVyxJQUMzQm1kLEVBQU9uZCxJQUFXbWQsRUFBT25kLEdBQVFxNkIsUUFDckNsZCxFQUFPbmQsR0FBUXE2QixPQUFPaCtCLEtBQU1zSCxhQUt2QnllLEVBQUtpWSxhQUtmMzBCLEVBQU9lLEtBQU0sQ0FBRSxTQUFVLE9BQVEsU0FBVSxTQUFVcEQsRUFBSTVHLEdBQ3hELElBQUkrOUIsRUFBUTkwQixFQUFPRyxHQUFJcEosR0FDdkJpSixFQUFPRyxHQUFJcEosR0FBUyxTQUFVbzlCLEVBQU8xRSxFQUFRenVCLEdBQzVDLE9BQWdCLE1BQVRtekIsR0FBa0Msa0JBQVZBLEVBQzlCVyxFQUFNcjJCLE1BQU9SLEtBQU1rRCxXQUNuQmxELEtBQUt1MkIsUUFBU3JDLEdBQU9wN0IsR0FBTSxHQUFRbzlCLEVBQU8xRSxFQUFRenVCLE9BS3JEaEIsRUFBT2UsS0FBTSxDQUNaZzBCLFVBQVc1QyxHQUFPLFFBQ2xCNkMsUUFBUzdDLEdBQU8sUUFDaEI4QyxZQUFhOUMsR0FBTyxVQUNwQitDLE9BQVEsQ0FBRXZGLFFBQVMsUUFDbkJ3RixRQUFTLENBQUV4RixRQUFTLFFBQ3BCeUYsV0FBWSxDQUFFekYsUUFBUyxZQUNyQixTQUFVNTRCLEVBQU02dUIsR0FDbEI1bEIsRUFBT0csR0FBSXBKLEdBQVMsU0FBVW85QixFQUFPMUUsRUFBUXp1QixHQUM1QyxPQUFPL0MsS0FBS3UyQixRQUFTNU8sRUFBT3VPLEVBQU8xRSxFQUFRenVCLE9BSTdDaEIsRUFBTzYwQixPQUFTLEdBQ2hCNzBCLEVBQU9reEIsR0FBR2UsS0FBTyxXQUNoQixJQUFJcUIsRUFDSDk4QixFQUFJLEVBQ0pxK0IsRUFBUzcwQixFQUFPNjBCLE9BSWpCLElBRkFwRCxHQUFRenNCLEtBQUtpaEIsTUFFTHp2QixFQUFJcStCLEVBQU9sN0IsT0FBUW5ELEtBQzFCODhCLEVBQVF1QixFQUFRcitCLE9BR0NxK0IsRUFBUXIrQixLQUFRODhCLEdBQ2hDdUIsRUFBT2gzQixPQUFRckgsSUFBSyxHQUloQnErQixFQUFPbDdCLFFBQ1pxRyxFQUFPa3hCLEdBQUd2VCxPQUVYOFQsUUFBUWx2QixHQUdUdkMsRUFBT2t4QixHQUFHb0MsTUFBUSxTQUFVQSxHQUMzQnR6QixFQUFPNjBCLE9BQU9oNkIsS0FBTXk0QixHQUNwQnR6QixFQUFPa3hCLEdBQUdwaUIsU0FHWDlPLEVBQU9reEIsR0FBR2MsU0FBVyxHQUNyQmh5QixFQUFPa3hCLEdBQUdwaUIsTUFBUSxXQUNaNGlCLEtBSUxBLElBQWEsRUFDYkcsT0FHRDd4QixFQUFPa3hCLEdBQUd2VCxLQUFPLFdBQ2hCK1QsR0FBYSxNQUdkMXhCLEVBQU9reEIsR0FBR21ELE9BQVMsQ0FDbEJnQixLQUFNLElBQ05DLEtBQU0sSUFHTjdVLFNBQVUsS0FNWHpnQixFQUFPRyxHQUFHbzFCLE1BQVEsU0FBVUMsRUFBTXAyQixHQUlqQyxPQUhBbzJCLEVBQU94MUIsRUFBT2t4QixJQUFLbHhCLEVBQU9reEIsR0FBR21ELE9BQVFtQixJQUFpQkEsRUFDdERwMkIsRUFBT0EsR0FBUSxLQUVSbkIsS0FBS3daLE1BQU9yWSxHQUFNLFNBQVU4SSxFQUFNdVYsR0FDeEMsSUFBSWdZLEVBQVU5OEIsRUFBT29oQixXQUFZN1IsRUFBTXN0QixHQUN2Qy9YLEVBQU1FLEtBQU8sV0FDWmhsQixFQUFPKzhCLGFBQWNELFFBTXhCLFdBQ0MsSUFBSTNwQixFQUFRbFQsRUFBU3FDLGNBQWUsU0FFbkNtNUIsRUFEU3g3QixFQUFTcUMsY0FBZSxVQUNwQlEsWUFBYTdDLEVBQVNxQyxjQUFlLFdBRW5ENlEsRUFBTTFNLEtBQU8sV0FJYkwsRUFBUTQyQixRQUEwQixLQUFoQjdwQixFQUFNclUsTUFJeEJzSCxFQUFRNjJCLFlBQWN4QixFQUFJamtCLFVBSTFCckUsRUFBUWxULEVBQVNxQyxjQUFlLFVBQzFCeEQsTUFBUSxJQUNkcVUsRUFBTTFNLEtBQU8sUUFDYkwsRUFBUTgyQixXQUE2QixNQUFoQi9wQixFQUFNclUsTUFwQjVCLEdBd0JBLElBQUlxK0IsR0FDSC9yQixHQUFhL0osRUFBTytNLEtBQUtoRCxXQUUxQi9KLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCa0wsS0FBTSxTQUFVbFcsRUFBTVUsR0FDckIsT0FBTzZqQixFQUFRcmQsS0FBTStCLEVBQU9pTixLQUFNbFcsRUFBTVUsRUFBTzBKLFVBQVV4SCxPQUFTLElBR25FbzhCLFdBQVksU0FBVWgvQixHQUNyQixPQUFPa0gsS0FBSzhDLE1BQU0sV0FDakJmLEVBQU8rMUIsV0FBWTkzQixLQUFNbEgsU0FLNUJpSixFQUFPK0IsT0FBUSxDQUNka0wsS0FBTSxTQUFVL0wsRUFBTW5LLEVBQU1VLEdBQzNCLElBQUltSixFQUFLNmMsRUFDUnVZLEVBQVE5MEIsRUFBS2pDLFNBR2QsR0FBZSxJQUFWKzJCLEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBS25DLFlBQWtDLElBQXRCOTBCLEVBQUtwQixhQUNURSxFQUFPMmMsS0FBTXpiLEVBQU1uSyxFQUFNVSxJQUtsQixJQUFWdStCLEdBQWdCaDJCLEVBQU9nVSxTQUFVOVMsS0FDckN1YyxFQUFRemQsRUFBT2kyQixVQUFXbC9CLEVBQUtnTixpQkFDNUIvRCxFQUFPK00sS0FBS3pFLE1BQU00dEIsS0FBS2x0QixLQUFNalMsR0FBUysrQixRQUFXdnpCLFNBR3RDQSxJQUFWOUssRUFDVyxPQUFWQSxPQUNKdUksRUFBTysxQixXQUFZNzBCLEVBQU1uSyxHQUlyQjBtQixHQUFTLFFBQVNBLFFBQ3VCbGIsS0FBM0MzQixFQUFNNmMsRUFBTWhCLElBQUt2YixFQUFNekosRUFBT1YsSUFDekI2SixHQUdSTSxFQUFLNUYsYUFBY3ZFLEVBQU1VLEVBQVEsSUFDMUJBLEdBR0hnbUIsR0FBUyxRQUFTQSxHQUErQyxRQUFwQzdjLEVBQU02YyxFQUFNcG1CLElBQUs2SixFQUFNbkssSUFDakQ2SixFQU1NLE9BSGRBLEVBQU1aLEVBQU8wTCxLQUFLdUIsS0FBTS9MLEVBQU1uSyxTQUdUd0wsRUFBWTNCLElBR2xDcTFCLFVBQVcsQ0FDVjcyQixLQUFNLENBQ0xxZCxJQUFLLFNBQVV2YixFQUFNekosR0FDcEIsSUFBTXNILEVBQVE4MkIsWUFBd0IsVUFBVnArQixHQUMzQnVRLEVBQVU5RyxFQUFNLFNBQVksQ0FDNUIsSUFBSXZCLEVBQU11QixFQUFLekosTUFLZixPQUpBeUosRUFBSzVGLGFBQWMsT0FBUTdELEdBQ3RCa0ksSUFDSnVCLEVBQUt6SixNQUFRa0ksR0FFUGxJLE1BTVhzK0IsV0FBWSxTQUFVNzBCLEVBQU16SixHQUMzQixJQUFJVixFQUNIUCxFQUFJLEVBSUoyL0IsRUFBWTErQixHQUFTQSxFQUFNNlEsTUFBTzhOLEdBRW5DLEdBQUsrZixHQUErQixJQUFsQmoxQixFQUFLakMsU0FDdEIsS0FBVWxJLEVBQU9vL0IsRUFBVzMvQixNQUMzQjBLLEVBQUt6RSxnQkFBaUIxRixNQU8xQisrQixHQUFXLENBQ1ZyWixJQUFLLFNBQVV2YixFQUFNekosRUFBT1YsR0FRM0IsT0FQZSxJQUFWVSxFQUdKdUksRUFBTysxQixXQUFZNzBCLEVBQU1uSyxHQUV6Qm1LLEVBQUs1RixhQUFjdkUsRUFBTUEsR0FFbkJBLElBSVRpSixFQUFPZSxLQUFNZixFQUFPK00sS0FBS3pFLE1BQU00dEIsS0FBS2xZLE9BQU8xVixNQUFPLFNBQVUsU0FBVTNLLEVBQUk1RyxHQUN6RSxJQUFJQyxFQUFTK1MsR0FBWWhULElBQVVpSixFQUFPMEwsS0FBS3VCLEtBRS9DbEQsR0FBWWhULEdBQVMsU0FBVW1LLEVBQU1uSyxFQUFNb04sR0FDMUMsSUFBSXZELEVBQUtnakIsRUFDUndTLEVBQWdCci9CLEVBQUtnTixjQVl0QixPQVZNSSxJQUdMeWYsRUFBUzdaLEdBQVlxc0IsR0FDckJyc0IsR0FBWXFzQixHQUFrQngxQixFQUM5QkEsRUFBcUMsTUFBL0I1SixFQUFRa0ssRUFBTW5LLEVBQU1vTixHQUN6Qml5QixFQUNBLEtBQ0Ryc0IsR0FBWXFzQixHQUFrQnhTLEdBRXhCaGpCLE1BT1QsSUFBSXkxQixHQUFhLHNDQUNoQkMsR0FBYSxnQkF5SWIsU0FBU0MsR0FBa0I5K0IsR0FFMUIsT0FEYUEsRUFBTTZRLE1BQU84TixJQUFtQixJQUMvQnRhLEtBQU0sS0FJdEIsU0FBUzA2QixHQUFVdDFCLEdBQ2xCLE9BQU9BLEVBQUtwQixjQUFnQm9CLEVBQUtwQixhQUFjLFVBQWEsR0FHN0QsU0FBUzIyQixHQUFnQmgvQixHQUN4QixPQUFLNEssTUFBTUMsUUFBUzdLLEdBQ1pBLEVBRWMsaUJBQVZBLEdBQ0pBLEVBQU02USxNQUFPOE4sSUFFZCxHQXhKUnBXLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCNGEsS0FBTSxTQUFVNWxCLEVBQU1VLEdBQ3JCLE9BQU82akIsRUFBUXJkLEtBQU0rQixFQUFPMmMsS0FBTTVsQixFQUFNVSxFQUFPMEosVUFBVXhILE9BQVMsSUFHbkUrOEIsV0FBWSxTQUFVMy9CLEdBQ3JCLE9BQU9rSCxLQUFLOEMsTUFBTSxrQkFDVjlDLEtBQU0rQixFQUFPMjJCLFFBQVM1L0IsSUFBVUEsU0FLMUNpSixFQUFPK0IsT0FBUSxDQUNkNGEsS0FBTSxTQUFVemIsRUFBTW5LLEVBQU1VLEdBQzNCLElBQUltSixFQUFLNmMsRUFDUnVZLEVBQVE5MEIsRUFBS2pDLFNBR2QsR0FBZSxJQUFWKzJCLEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBV25DLE9BUGUsSUFBVkEsR0FBZ0JoMkIsRUFBT2dVLFNBQVU5UyxLQUdyQ25LLEVBQU9pSixFQUFPMjJCLFFBQVM1L0IsSUFBVUEsRUFDakMwbUIsRUFBUXpkLEVBQU8yd0IsVUFBVzU1QixTQUdad0wsSUFBVjlLLEVBQ0NnbUIsR0FBUyxRQUFTQSxRQUN1QmxiLEtBQTNDM0IsRUFBTTZjLEVBQU1oQixJQUFLdmIsRUFBTXpKLEVBQU9WLElBQ3pCNkosRUFHQ00sRUFBTW5LLEdBQVNVLEVBR3BCZ21CLEdBQVMsUUFBU0EsR0FBK0MsUUFBcEM3YyxFQUFNNmMsRUFBTXBtQixJQUFLNkosRUFBTW5LLElBQ2pENkosRUFHRE0sRUFBTW5LLElBR2Q0NUIsVUFBVyxDQUNWMWdCLFNBQVUsQ0FDVDVZLElBQUssU0FBVTZKLEdBT2QsSUFBSTAxQixFQUFXNTJCLEVBQU8wTCxLQUFLdUIsS0FBTS9MLEVBQU0sWUFFdkMsT0FBSzAxQixFQUNHcEosU0FBVW9KLEVBQVUsSUFJM0JQLEdBQVdydEIsS0FBTTlILEVBQUs4RyxXQUN0QnN1QixHQUFXdHRCLEtBQU05SCxFQUFLOEcsV0FDdEI5RyxFQUFLOE8sS0FFRSxHQUdBLEtBS1gybUIsUUFBUyxDQUNSLElBQU8sVUFDUCxNQUFTLGVBWUw1M0IsRUFBUTYyQixjQUNiNTFCLEVBQU8yd0IsVUFBVXhnQixTQUFXLENBQzNCOVksSUFBSyxTQUFVNkosR0FJZCxJQUFJNk4sRUFBUzdOLEVBQUs5RCxXQUlsQixPQUhLMlIsR0FBVUEsRUFBTzNSLFlBQ3JCMlIsRUFBTzNSLFdBQVdnVCxjQUVaLE1BRVJxTSxJQUFLLFNBQVV2YixHQUlkLElBQUk2TixFQUFTN04sRUFBSzlELFdBQ2IyUixJQUNKQSxFQUFPcUIsY0FFRnJCLEVBQU8zUixZQUNYMlIsRUFBTzNSLFdBQVdnVCxrQkFPdkJwUSxFQUFPZSxLQUFNLENBQ1osV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0Esb0JBQ0UsV0FDRmYsRUFBTzIyQixRQUFTMTRCLEtBQUs4RixlQUFrQjlGLFFBNEJ4QytCLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCODBCLFNBQVUsU0FBVXAvQixHQUNuQixJQUFJcS9CLEVBQVM1MUIsRUFBTStJLEVBQUs4c0IsRUFBVUMsRUFBT3AxQixFQUFHcTFCLEVBQzNDemdDLEVBQUksRUFFTCxHQUFLd0ksRUFBWXZILEdBQ2hCLE9BQU93RyxLQUFLOEMsTUFBTSxTQUFVYSxHQUMzQjVCLEVBQVEvQixNQUFPNDRCLFNBQVVwL0IsRUFBTWQsS0FBTXNILEtBQU0yRCxFQUFHNDBCLEdBQVV2NEIsV0FNMUQsSUFGQTY0QixFQUFVTCxHQUFnQmgvQixJQUVia0MsT0FDWixLQUFVdUgsRUFBT2pELEtBQU16SCxNQUl0QixHQUhBdWdDLEVBQVdQLEdBQVV0MUIsR0FDckIrSSxFQUF3QixJQUFsQi9JLEVBQUtqQyxVQUFvQixJQUFNczNCLEdBQWtCUSxHQUFhLElBRXpELENBRVYsSUFEQW4xQixFQUFJLEVBQ01vMUIsRUFBUUYsRUFBU2wxQixNQUNyQnFJLEVBQUl2TCxRQUFTLElBQU1zNEIsRUFBUSxLQUFRLElBQ3ZDL3NCLEdBQU8rc0IsRUFBUSxLQU1aRCxLQURMRSxFQUFhVixHQUFrQnRzQixLQUU5Qi9JLEVBQUs1RixhQUFjLFFBQVMyN0IsR0FNaEMsT0FBT2g1QixNQUdSaTVCLFlBQWEsU0FBVXovQixHQUN0QixJQUFJcS9CLEVBQVM1MUIsRUFBTStJLEVBQUs4c0IsRUFBVUMsRUFBT3AxQixFQUFHcTFCLEVBQzNDemdDLEVBQUksRUFFTCxHQUFLd0ksRUFBWXZILEdBQ2hCLE9BQU93RyxLQUFLOEMsTUFBTSxTQUFVYSxHQUMzQjVCLEVBQVEvQixNQUFPaTVCLFlBQWF6L0IsRUFBTWQsS0FBTXNILEtBQU0yRCxFQUFHNDBCLEdBQVV2NEIsV0FJN0QsSUFBTWtELFVBQVV4SCxPQUNmLE9BQU9zRSxLQUFLZ1AsS0FBTSxRQUFTLElBSzVCLElBRkE2cEIsRUFBVUwsR0FBZ0JoL0IsSUFFYmtDLE9BQ1osS0FBVXVILEVBQU9qRCxLQUFNekgsTUFNdEIsR0FMQXVnQyxFQUFXUCxHQUFVdDFCLEdBR3JCK0ksRUFBd0IsSUFBbEIvSSxFQUFLakMsVUFBb0IsSUFBTXMzQixHQUFrQlEsR0FBYSxJQUV6RCxDQUVWLElBREFuMUIsRUFBSSxFQUNNbzFCLEVBQVFGLEVBQVNsMUIsTUFHMUIsS0FBUXFJLEVBQUl2TCxRQUFTLElBQU1zNEIsRUFBUSxNQUFTLEdBQzNDL3NCLEVBQU1BLEVBQUl0SCxRQUFTLElBQU1xMEIsRUFBUSxJQUFLLEtBTW5DRCxLQURMRSxFQUFhVixHQUFrQnRzQixLQUU5Qi9JLEVBQUs1RixhQUFjLFFBQVMyN0IsR0FNaEMsT0FBT2g1QixNQUdSazVCLFlBQWEsU0FBVTEvQixFQUFPMi9CLEdBQzdCLElBQUloNEIsU0FBYzNILEVBQ2pCNC9CLEVBQXdCLFdBQVRqNEIsR0FBcUJpRCxNQUFNQyxRQUFTN0ssR0FFcEQsTUFBeUIsa0JBQWIyL0IsR0FBMEJDLEVBQzlCRCxFQUFXbjVCLEtBQUs0NEIsU0FBVXAvQixHQUFVd0csS0FBS2k1QixZQUFhei9CLEdBR3pEdUgsRUFBWXZILEdBQ1R3RyxLQUFLOEMsTUFBTSxTQUFVdkssR0FDM0J3SixFQUFRL0IsTUFBT2s1QixZQUNkMS9CLEVBQU1kLEtBQU1zSCxLQUFNekgsRUFBR2dnQyxHQUFVdjRCLE1BQVFtNUIsR0FDdkNBLE1BS0luNUIsS0FBSzhDLE1BQU0sV0FDakIsSUFBSXNLLEVBQVc3VSxFQUFHb2UsRUFBTTBpQixFQUV4QixHQUFLRCxFQU9KLElBSkE3Z0MsRUFBSSxFQUNKb2UsRUFBTzVVLEVBQVEvQixNQUNmcTVCLEVBQWFiLEdBQWdCaC9CLEdBRW5CNFQsRUFBWWlzQixFQUFZOWdDLE1BRzVCb2UsRUFBSzJpQixTQUFVbHNCLEdBQ25CdUosRUFBS3NpQixZQUFhN3JCLEdBRWxCdUosRUFBS2lpQixTQUFVeHJCLGFBS0k5SSxJQUFWOUssR0FBZ0MsWUFBVDJILEtBQ2xDaU0sRUFBWW1yQixHQUFVdjRCLFFBSXJCNGUsRUFBU0osSUFBS3hlLEtBQU0sZ0JBQWlCb04sR0FPakNwTixLQUFLM0MsY0FDVDJDLEtBQUszQyxhQUFjLFFBQ2xCK1AsSUFBdUIsSUFBVjVULEVBQ2IsR0FDQW9sQixFQUFTeGxCLElBQUs0RyxLQUFNLGtCQUFxQixTQU85Q3M1QixTQUFVLFNBQVV0M0IsR0FDbkIsSUFBSW9MLEVBQVduSyxFQUNkMUssRUFBSSxFQUdMLElBREE2VSxFQUFZLElBQU1wTCxFQUFXLElBQ25CaUIsRUFBT2pELEtBQU16SCxNQUN0QixHQUF1QixJQUFsQjBLLEVBQUtqQyxXQUNQLElBQU1zM0IsR0FBa0JDLEdBQVV0MUIsSUFBVyxLQUFNeEMsUUFBUzJNLElBQWUsRUFDNUUsT0FBTyxFQUlWLE9BQU8sS0FPVCxJQUFJbXNCLEdBQVUsTUFFZHgzQixFQUFPRyxHQUFHNEIsT0FBUSxDQUNqQnBDLElBQUssU0FBVWxJLEdBQ2QsSUFBSWdtQixFQUFPN2MsRUFBS3lvQixFQUNmbm9CLEVBQU9qRCxLQUFNLEdBRWQsT0FBTWtELFVBQVV4SCxRQTBCaEIwdkIsRUFBa0JycUIsRUFBWXZILEdBRXZCd0csS0FBSzhDLE1BQU0sU0FBVXZLLEdBQzNCLElBQUltSixFQUVtQixJQUFsQjFCLEtBQUtnQixXQVdFLE9BTlhVLEVBREkwcEIsRUFDRTV4QixFQUFNZCxLQUFNc0gsS0FBTXpILEVBQUd3SixFQUFRL0IsTUFBTzBCLE9BRXBDbEksR0FLTmtJLEVBQU0sR0FFb0IsaUJBQVJBLEVBQ2xCQSxHQUFPLEdBRUkwQyxNQUFNQyxRQUFTM0MsS0FDMUJBLEVBQU1LLEVBQU9pQixJQUFLdEIsR0FBSyxTQUFVbEksR0FDaEMsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FBS0EsRUFBUSxRQUl0Q2dtQixFQUFRemQsRUFBT3kzQixTQUFVeDVCLEtBQUttQixPQUFVWSxFQUFPeTNCLFNBQVV4NUIsS0FBSytKLFNBQVNqRSxpQkFHckQsUUFBUzBaLFFBQStDbGIsSUFBcENrYixFQUFNaEIsSUFBS3hlLEtBQU0wQixFQUFLLFdBQzNEMUIsS0FBS3hHLE1BQVFrSSxRQXpEVHVCLEdBQ0p1YyxFQUFRemQsRUFBT3kzQixTQUFVdjJCLEVBQUs5QixPQUM3QlksRUFBT3kzQixTQUFVdjJCLEVBQUs4RyxTQUFTakUsaUJBRy9CLFFBQVMwWixRQUNnQ2xiLEtBQXZDM0IsRUFBTTZjLEVBQU1wbUIsSUFBSzZKLEVBQU0sVUFFbEJOLEVBTVksaUJBSHBCQSxFQUFNTSxFQUFLekosT0FJSG1KLEVBQUkrQixRQUFTNjBCLEdBQVMsSUFJaEIsTUFBUDUyQixFQUFjLEdBQUtBLE9BRzNCLEtBeUNIWixFQUFPK0IsT0FBUSxDQUNkMDFCLFNBQVUsQ0FDVHRYLE9BQVEsQ0FDUDlvQixJQUFLLFNBQVU2SixHQUVkLElBQUl2QixFQUFNSyxFQUFPMEwsS0FBS3VCLEtBQU0vTCxFQUFNLFNBQ2xDLE9BQWMsTUFBUHZCLEVBQ05BLEVBTUE0MkIsR0FBa0J2MkIsRUFBT0gsS0FBTXFCLE1BR2xDb0QsT0FBUSxDQUNQak4sSUFBSyxTQUFVNkosR0FDZCxJQUFJekosRUFBTzBvQixFQUFRM3BCLEVBQ2xCc0QsRUFBVW9ILEVBQUtwSCxRQUNmUSxFQUFRNEcsRUFBS2tQLGNBQ2JrUyxFQUFvQixlQUFkcGhCLEVBQUs5QixLQUNYb2dCLEVBQVM4QyxFQUFNLEtBQU8sR0FDdEJvTSxFQUFNcE0sRUFBTWhvQixFQUFRLEVBQUlSLEVBQVFILE9BVWpDLElBUENuRCxFQURJOEQsRUFBUSxFQUNSbzBCLEVBR0FwTSxFQUFNaG9CLEVBQVEsRUFJWDlELEVBQUlrNEIsRUFBS2w0QixJQUtoQixLQUpBMnBCLEVBQVNybUIsRUFBU3RELElBSUoyWixVQUFZM1osSUFBTThELEtBRzdCNmxCLEVBQU9wWSxZQUNMb1ksRUFBTy9pQixXQUFXMkssV0FDbkJDLEVBQVVtWSxFQUFPL2lCLFdBQVksYUFBaUIsQ0FNakQsR0FIQTNGLEVBQVF1SSxFQUFRbWdCLEdBQVN4Z0IsTUFHcEIyaUIsRUFDSixPQUFPN3FCLEVBSVIrbkIsRUFBTzNrQixLQUFNcEQsR0FJZixPQUFPK25CLEdBR1IvQyxJQUFLLFNBQVV2YixFQUFNekosR0FNcEIsSUFMQSxJQUFJaWdDLEVBQVd2WCxFQUNkcm1CLEVBQVVvSCxFQUFLcEgsUUFDZjBsQixFQUFTeGYsRUFBT29ELFVBQVczTCxHQUMzQmpCLEVBQUlzRCxFQUFRSCxPQUVMbkQsT0FDUDJwQixFQUFTcm1CLEVBQVN0RCxJQUlOMlosU0FDWG5RLEVBQU9zRCxRQUFTdEQsRUFBT3kzQixTQUFTdFgsT0FBTzlvQixJQUFLOG9CLEdBQVVYLElBQVksS0FFbEVrWSxHQUFZLEdBVWQsT0FITUEsSUFDTHgyQixFQUFLa1AsZUFBaUIsR0FFaEJvUCxPQU9YeGYsRUFBT2UsS0FBTSxDQUFFLFFBQVMsYUFBYyxXQUNyQ2YsRUFBT3kzQixTQUFVeDVCLE1BQVMsQ0FDekJ3ZSxJQUFLLFNBQVV2YixFQUFNekosR0FDcEIsR0FBSzRLLE1BQU1DLFFBQVM3SyxHQUNuQixPQUFTeUosRUFBS2dQLFFBQVVsUSxFQUFPc0QsUUFBU3RELEVBQVFrQixHQUFPdkIsTUFBT2xJLElBQVcsSUFJdEVzSCxFQUFRNDJCLFVBQ2IzMUIsRUFBT3kzQixTQUFVeDVCLE1BQU81RyxJQUFNLFNBQVU2SixHQUN2QyxPQUF3QyxPQUFqQ0EsRUFBS3BCLGFBQWMsU0FBcUIsS0FBT29CLEVBQUt6SixXQVc5RHNILEVBQVE0NEIsUUFBVSxjQUFlaC9CLEVBR2pDLElBQUlpL0IsR0FBYyxrQ0FDakJDLEdBQTBCLFNBQVV2K0IsR0FDbkNBLEVBQUV5cEIsbUJBR0ovaUIsRUFBTytCLE9BQVEvQixFQUFPd2lCLE1BQU8sQ0FFNUJVLFFBQVMsU0FBVVYsRUFBTzlGLEVBQU14YixFQUFNNDJCLEdBRXJDLElBQUl0aEMsRUFBR3lULEVBQUs0QixFQUFLa3NCLEVBQVlDLEVBQVFwVSxFQUFReEssRUFBUzZlLEVBQ3JEQyxFQUFZLENBQUVoM0IsR0FBUXRJLEdBQ3RCd0csRUFBT1IsRUFBT2pJLEtBQU02ckIsRUFBTyxRQUFXQSxFQUFNcGpCLEtBQU9vakIsRUFDbkRpQixFQUFhN2tCLEVBQU9qSSxLQUFNNnJCLEVBQU8sYUFBZ0JBLEVBQU01WCxVQUFVOUcsTUFBTyxLQUFRLEdBS2pGLEdBSEFtRyxFQUFNZ3VCLEVBQWNwc0IsRUFBTTNLLEVBQU9BLEdBQVF0SSxFQUdsQixJQUFsQnNJLEVBQUtqQyxVQUFvQyxJQUFsQmlDLEVBQUtqQyxXQUs1QjI0QixHQUFZNXVCLEtBQU01SixFQUFPWSxFQUFPd2lCLE1BQU1xQixhQUl0Q3prQixFQUFLVixRQUFTLE1BQVMsSUFHM0Ira0IsRUFBYXJrQixFQUFLMEUsTUFBTyxLQUN6QjFFLEVBQU9xa0IsRUFBV2phLFFBQ2xCaWEsRUFBVzNoQixRQUVaazJCLEVBQVM1NEIsRUFBS1YsUUFBUyxLQUFRLEdBQUssS0FBT1UsR0FHM0NvakIsRUFBUUEsRUFBT3hpQixFQUFPd0MsU0FDckJnZ0IsRUFDQSxJQUFJeGlCLEVBQU9takIsTUFBTy9qQixFQUF1QixpQkFBVm9qQixHQUFzQkEsSUFHaERLLFVBQVlpVixFQUFlLEVBQUksRUFDckN0VixFQUFNNVgsVUFBWTZZLEVBQVczbkIsS0FBTSxLQUNuQzBtQixFQUFNc0MsV0FBYXRDLEVBQU01WCxVQUN4QixJQUFJMUUsT0FBUSxVQUFZdWQsRUFBVzNuQixLQUFNLGlCQUFvQixXQUM3RCxLQUdEMG1CLEVBQU05b0IsWUFBUzZJLEVBQ1RpZ0IsRUFBTXhwQixTQUNYd3BCLEVBQU14cEIsT0FBU2tJLEdBSWhCd2IsRUFBZSxNQUFSQSxFQUNOLENBQUU4RixHQUNGeGlCLEVBQU9vRCxVQUFXc1osRUFBTSxDQUFFOEYsSUFHM0JwSixFQUFVcFosRUFBT3dpQixNQUFNcEosUUFBU2hhLElBQVUsR0FDcEMwNEIsSUFBZ0IxZSxFQUFROEosVUFBbUQsSUFBeEM5SixFQUFROEosUUFBUXprQixNQUFPeUMsRUFBTXdiLElBQXRFLENBTUEsSUFBTW9iLElBQWlCMWUsRUFBUW9NLFdBQWF0bUIsRUFBVWdDLEdBQVMsQ0FNOUQsSUFKQTYyQixFQUFhM2UsRUFBUTBKLGNBQWdCMWpCLEVBQy9CdzRCLEdBQVk1dUIsS0FBTSt1QixFQUFhMzRCLEtBQ3BDNkssRUFBTUEsRUFBSTdNLFlBRUg2TSxFQUFLQSxFQUFNQSxFQUFJN00sV0FDdEI4NkIsRUFBVXI5QixLQUFNb1AsR0FDaEI0QixFQUFNNUIsRUFJRjRCLEtBQVUzSyxFQUFLd0gsZUFBaUI5UCxJQUNwQ3MvQixFQUFVcjlCLEtBQU1nUixFQUFJWixhQUFlWSxFQUFJc3NCLGNBQWdCeC9CLEdBTXpELElBREFuQyxFQUFJLEdBQ015VCxFQUFNaXVCLEVBQVcxaEMsUUFBWWdzQixFQUFNbUMsd0JBQzVDc1QsRUFBY2h1QixFQUNkdVksRUFBTXBqQixLQUFPNUksRUFBSSxFQUNoQnVoQyxFQUNBM2UsRUFBUTJLLFVBQVkza0IsR0FHckJ3a0IsR0FDRS9HLEVBQVN4bEIsSUFBSzRTLEVBQUssV0FBYy9TLE9BQU9ZLE9BQVEsT0FDOUMwcUIsRUFBTXBqQixPQUNUeWQsRUFBU3hsQixJQUFLNFMsRUFBSyxZQUVuQjJaLEVBQU9ubEIsTUFBT3dMLEVBQUt5UyxJQUlwQmtILEVBQVNvVSxHQUFVL3RCLEVBQUsrdEIsS0FDVHBVLEVBQU9ubEIsT0FBUzJkLEVBQVluUyxLQUMxQ3VZLEVBQU05b0IsT0FBU2txQixFQUFPbmxCLE1BQU93TCxFQUFLeVMsSUFDWixJQUFqQjhGLEVBQU05b0IsUUFDVjhvQixFQUFNUyxrQkE4Q1QsT0ExQ0FULEVBQU1wakIsS0FBT0EsRUFHUDA0QixHQUFpQnRWLEVBQU1xRCxzQkFFcEJ6TSxFQUFRcUgsV0FDcUMsSUFBcERySCxFQUFRcUgsU0FBU2hpQixNQUFPeTVCLEVBQVV0eUIsTUFBTzhXLEtBQ3pDTixFQUFZbGIsSUFJUDgyQixHQUFVaDVCLEVBQVlrQyxFQUFNOUIsTUFBYUYsRUFBVWdDLE1BR3ZEMkssRUFBTTNLLEVBQU04MkIsTUFHWDkyQixFQUFNODJCLEdBQVcsTUFJbEJoNEIsRUFBT3dpQixNQUFNcUIsVUFBWXprQixFQUVwQm9qQixFQUFNbUMsd0JBQ1ZzVCxFQUFZOXNCLGlCQUFrQi9MLEVBQU15NEIsSUFHckMzMkIsRUFBTTlCLEtBRURvakIsRUFBTW1DLHdCQUNWc1QsRUFBWWpkLG9CQUFxQjViLEVBQU15NEIsSUFHeEM3M0IsRUFBT3dpQixNQUFNcUIsZUFBWXRoQixFQUVwQnNKLElBQ0ozSyxFQUFNODJCLEdBQVduc0IsSUFNZDJXLEVBQU05b0IsU0FLZDArQixTQUFVLFNBQVVoNUIsRUFBTThCLEVBQU1zaEIsR0FDL0IsSUFBSWxwQixFQUFJMEcsRUFBTytCLE9BQ2QsSUFBSS9CLEVBQU9takIsTUFDWFgsRUFDQSxDQUNDcGpCLEtBQU1BLEVBQ044bUIsYUFBYSxJQUlmbG1CLEVBQU93aUIsTUFBTVUsUUFBUzVwQixFQUFHLEtBQU00SCxNQUtqQ2xCLEVBQU9HLEdBQUc0QixPQUFRLENBRWpCbWhCLFFBQVMsU0FBVTlqQixFQUFNc2QsR0FDeEIsT0FBT3plLEtBQUs4QyxNQUFNLFdBQ2pCZixFQUFPd2lCLE1BQU1VLFFBQVM5akIsRUFBTXNkLEVBQU16ZSxVQUdwQ282QixlQUFnQixTQUFVajVCLEVBQU1zZCxHQUMvQixJQUFJeGIsRUFBT2pELEtBQU0sR0FDakIsR0FBS2lELEVBQ0osT0FBT2xCLEVBQU93aUIsTUFBTVUsUUFBUzlqQixFQUFNc2QsRUFBTXhiLEdBQU0sTUFjNUNuQyxFQUFRNDRCLFNBQ2IzM0IsRUFBT2UsS0FBTSxDQUFFK21CLE1BQU8sVUFBV0MsS0FBTSxhQUFjLFNBQVVLLEVBQU01RCxHQUdwRSxJQUFJMWEsRUFBVSxTQUFVMFksR0FDdkJ4aUIsRUFBT3dpQixNQUFNNFYsU0FBVTVULEVBQUtoQyxFQUFNeHBCLE9BQVFnSCxFQUFPd2lCLE1BQU1nQyxJQUFLaEMsS0FHN0R4aUIsRUFBT3dpQixNQUFNcEosUUFBU29MLEdBQVEsQ0FDN0JQLE1BQU8sV0FJTixJQUFJdmtCLEVBQU16QixLQUFLeUssZUFBaUJ6SyxLQUFLckYsVUFBWXFGLEtBQ2hEcTZCLEVBQVd6YixFQUFTdkIsT0FBUTViLEVBQUs4a0IsR0FFNUI4VCxHQUNMNTRCLEVBQUl5TCxpQkFBa0JpZCxFQUFNdGUsR0FBUyxHQUV0QytTLEVBQVN2QixPQUFRNWIsRUFBSzhrQixHQUFPOFQsR0FBWSxHQUFNLElBRWhEbFUsU0FBVSxXQUNULElBQUkxa0IsRUFBTXpCLEtBQUt5SyxlQUFpQnpLLEtBQUtyRixVQUFZcUYsS0FDaERxNkIsRUFBV3piLEVBQVN2QixPQUFRNWIsRUFBSzhrQixHQUFRLEVBRXBDOFQsRUFLTHpiLEVBQVN2QixPQUFRNWIsRUFBSzhrQixFQUFLOFQsSUFKM0I1NEIsRUFBSXNiLG9CQUFxQm9OLEVBQU10ZSxHQUFTLEdBQ3hDK1MsRUFBUzdnQixPQUFRMEQsRUFBSzhrQixTQVMzQixJQUFJM1UsR0FBV2xYLEVBQU9rWCxTQUVsQjFVLEdBQVEsQ0FBRXlJLEtBQU1vQixLQUFLaWhCLE9BRXJCc1MsR0FBUyxLQUtidjRCLEVBQU93NEIsU0FBVyxTQUFVOWIsR0FDM0IsSUFBSWhPLEVBQ0osSUFBTWdPLEdBQXdCLGlCQUFUQSxFQUNwQixPQUFPLEtBS1IsSUFDQ2hPLEdBQU0sSUFBTS9WLEVBQU84L0IsV0FBY0MsZ0JBQWlCaGMsRUFBTSxZQUN2RCxNQUFRcGpCLEdBQ1RvVixPQUFNbk0sRUFNUCxPQUhNbU0sSUFBT0EsRUFBSTdGLHFCQUFzQixlQUFnQmxQLFFBQ3REcUcsRUFBTzZDLE1BQU8sZ0JBQWtCNlosR0FFMUJoTyxHQUlSLElBQ0NpcUIsR0FBVyxRQUNYQyxHQUFRLFNBQ1JDLEdBQWtCLHdDQUNsQkMsR0FBZSxxQ0FFaEIsU0FBU0MsR0FBYXpJLEVBQVEvMUIsRUFBS3krQixFQUFhcmpCLEdBQy9DLElBQUk1ZSxFQUVKLEdBQUtzTCxNQUFNQyxRQUFTL0gsR0FHbkJ5RixFQUFPZSxLQUFNeEcsR0FBSyxTQUFVL0QsRUFBRzhmLEdBQ3pCMGlCLEdBQWVMLEdBQVMzdkIsS0FBTXNuQixHQUdsQzNhLEVBQUsyYSxFQUFRaGEsR0FLYnlpQixHQUNDekksRUFBUyxLQUFxQixpQkFBTmhhLEdBQXVCLE1BQUxBLEVBQVk5ZixFQUFJLElBQU8sSUFDakU4ZixFQUNBMGlCLEVBQ0FyakIsV0FLRyxHQUFNcWpCLEdBQWlDLFdBQWxCajVCLEVBQVF4RixHQVVuQ29iLEVBQUsyYSxFQUFRLzFCLFFBUGIsSUFBTXhELEtBQVF3RCxFQUNidytCLEdBQWF6SSxFQUFTLElBQU12NUIsRUFBTyxJQUFLd0QsRUFBS3hELEdBQVFpaUMsRUFBYXJqQixHQVlyRTNWLEVBQU9pNUIsTUFBUSxTQUFVdnpCLEVBQUdzekIsR0FDM0IsSUFBSTFJLEVBQ0gvM0IsRUFBSSxHQUNKb2QsRUFBTSxTQUFVNWQsRUFBS21oQyxHQUdwQixJQUFJemhDLEVBQVF1SCxFQUFZazZCLEdBQ3ZCQSxJQUNBQSxFQUVEM2dDLEVBQUdBLEVBQUVvQixRQUFXaUQsbUJBQW9CN0UsR0FBUSxJQUMzQzZFLG1CQUE2QixNQUFUbkYsRUFBZ0IsR0FBS0EsSUFHNUMsR0FBVSxNQUFMaU8sRUFDSixNQUFPLEdBSVIsR0FBS3JELE1BQU1DLFFBQVNvRCxJQUFTQSxFQUFFcEYsU0FBV04sRUFBT29DLGNBQWVzRCxHQUcvRDFGLEVBQU9lLEtBQU0yRSxHQUFHLFdBQ2ZpUSxFQUFLMVgsS0FBS2xILEtBQU1rSCxLQUFLeEcsZUFPdEIsSUFBTTY0QixLQUFVNXFCLEVBQ2ZxekIsR0FBYXpJLEVBQVE1cUIsRUFBRzRxQixHQUFVMEksRUFBYXJqQixHQUtqRCxPQUFPcGQsRUFBRXVELEtBQU0sTUFHaEJrRSxFQUFPRyxHQUFHNEIsT0FBUSxDQUNqQm8zQixVQUFXLFdBQ1YsT0FBT241QixFQUFPaTVCLE1BQU9oN0IsS0FBS203QixtQkFFM0JBLGVBQWdCLFdBQ2YsT0FBT243QixLQUFLZ0QsS0FBSyxXQUdoQixJQUFJK0wsRUFBV2hOLEVBQU8yYyxLQUFNMWUsS0FBTSxZQUNsQyxPQUFPK08sRUFBV2hOLEVBQU9vRCxVQUFXNEosR0FBYS9PLFFBRWpEcEMsUUFBUSxXQUNSLElBQUl1RCxFQUFPbkIsS0FBS21CLEtBR2hCLE9BQU9uQixLQUFLbEgsT0FBU2lKLEVBQVEvQixNQUFPbVcsR0FBSSxjQUN2QzBrQixHQUFhOXZCLEtBQU0vSyxLQUFLK0osWUFBZTZ3QixHQUFnQjd2QixLQUFNNUosS0FDM0RuQixLQUFLaVMsVUFBWTBQLEdBQWU1VyxLQUFNNUosT0FFekM2QixLQUFLLFNBQVV0RCxFQUFJdUQsR0FDbkIsSUFBSXZCLEVBQU1LLEVBQVEvQixNQUFPMEIsTUFFekIsT0FBWSxNQUFQQSxFQUNHLEtBR0gwQyxNQUFNQyxRQUFTM0MsR0FDWkssRUFBT2lCLElBQUt0QixHQUFLLFNBQVVBLEdBQ2pDLE1BQU8sQ0FBRTVJLEtBQU1tSyxFQUFLbkssS0FBTVUsTUFBT2tJLEVBQUlnRCxRQUFTaTJCLEdBQU8sWUFJaEQsQ0FBRTdoQyxLQUFNbUssRUFBS25LLEtBQU1VLE1BQU9rSSxFQUFJZ0QsUUFBU2kyQixHQUFPLFlBQ2xEdmhDLFNBS04sSUFDQ2dpQyxHQUFNLE9BQ05DLEdBQVEsT0FDUkMsR0FBYSxnQkFDYkMsR0FBVyw2QkFJWEMsR0FBYSxpQkFDYkMsR0FBWSxRQVdaL0csR0FBYSxHQU9iZ0gsR0FBYSxHQUdiQyxHQUFXLEtBQUt2L0IsT0FBUSxLQUd4QncvQixHQUFlamhDLEVBQVNxQyxjQUFlLEtBSXhDLFNBQVM2K0IsR0FBNkJDLEdBR3JDLE9BQU8sU0FBVUMsRUFBb0I3aEIsR0FFRCxpQkFBdkI2aEIsSUFDWDdoQixFQUFPNmhCLEVBQ1BBLEVBQXFCLEtBR3RCLElBQUlDLEVBQ0h6akMsRUFBSSxFQUNKMGpDLEVBQVlGLEVBQW1CajJCLGNBQWN1RSxNQUFPOE4sSUFBbUIsR0FFeEUsR0FBS3BYLEVBQVltWixHQUdoQixLQUFVOGhCLEVBQVdDLEVBQVcxakMsTUFHUixNQUFsQnlqQyxFQUFVLElBQ2RBLEVBQVdBLEVBQVMzN0IsTUFBTyxJQUFPLEtBQ2hDeTdCLEVBQVdFLEdBQWFGLEVBQVdFLElBQWMsSUFBS250QixRQUFTcUwsS0FJL0Q0aEIsRUFBV0UsR0FBYUYsRUFBV0UsSUFBYyxJQUFLcC9CLEtBQU1zZCxJQVFuRSxTQUFTZ2lCLEdBQStCSixFQUFXamdDLEVBQVNvNUIsRUFBaUJrSCxHQUU1RSxJQUFJQyxFQUFZLEdBQ2ZDLEVBQXFCUCxJQUFjSixHQUVwQyxTQUFTWSxFQUFTTixHQUNqQixJQUFJOXBCLEVBY0osT0FiQWtxQixFQUFXSixJQUFhLEVBQ3hCajZCLEVBQU9lLEtBQU1nNUIsRUFBV0UsSUFBYyxJQUFJLFNBQVUvaUIsRUFBR3NqQixHQUN0RCxJQUFJQyxFQUFzQkQsRUFBb0IxZ0MsRUFBU281QixFQUFpQmtILEdBQ3hFLE1BQW9DLGlCQUF4QkssR0FDVkgsR0FBcUJELEVBQVdJLEdBS3RCSCxJQUNEbnFCLEVBQVdzcUIsUUFEZixHQUhOM2dDLEVBQVFvZ0MsVUFBVXB0QixRQUFTMnRCLEdBQzNCRixFQUFTRSxJQUNGLE1BS0Z0cUIsRUFHUixPQUFPb3FCLEVBQVN6Z0MsRUFBUW9nQyxVQUFXLE1BQVVHLEVBQVcsTUFBU0UsRUFBUyxLQU0zRSxTQUFTRyxHQUFZMWhDLEVBQVFxRyxHQUM1QixJQUFJdEgsRUFBS29LLEVBQ1J3NEIsRUFBYzM2QixFQUFPNDZCLGFBQWFELGFBQWUsR0FFbEQsSUFBTTVpQyxLQUFPc0gsT0FDUWtELElBQWZsRCxFQUFLdEgsTUFDUDRpQyxFQUFhNWlDLEdBQVFpQixFQUFXbUosSUFBVUEsRUFBTyxLQUFVcEssR0FBUXNILEVBQUt0SCxJQU81RSxPQUpLb0ssR0FDSm5DLEVBQU8rQixRQUFRLEVBQU0vSSxFQUFRbUosR0FHdkJuSixFQS9FUDZnQyxHQUFhN3BCLEtBQU9ILEdBQVNHLEtBZ1A5QmhRLEVBQU8rQixPQUFRLENBR2Q4NEIsT0FBUSxFQUdSQyxhQUFjLEdBQ2RDLEtBQU0sR0FFTkgsYUFBYyxDQUNiSSxJQUFLbnJCLEdBQVNHLEtBQ2Q1USxLQUFNLE1BQ042N0IsUUF2UmdCLDREQXVSUWp5QixLQUFNNkcsR0FBU3FyQixVQUN2Q3A5QixRQUFRLEVBQ1JxOUIsYUFBYSxFQUNiQyxPQUFPLEVBQ1BDLFlBQWEsbURBY2JDLFFBQVMsQ0FDUixJQUFLMUIsR0FDTC81QixLQUFNLGFBQ055cEIsS0FBTSxZQUNONWEsSUFBSyw0QkFDTDZzQixLQUFNLHFDQUdQbm1CLFNBQVUsQ0FDVDFHLElBQUssVUFDTDRhLEtBQU0sU0FDTmlTLEtBQU0sWUFHUEMsZUFBZ0IsQ0FDZjlzQixJQUFLLGNBQ0w3TyxLQUFNLGVBQ04wN0IsS0FBTSxnQkFLUEUsV0FBWSxDQUdYLFNBQVVwMEIsT0FHVixhQUFhLEVBR2IsWUFBYXhLLEtBQUtxZ0IsTUFHbEIsV0FBWWxkLEVBQU93NEIsVUFPcEJtQyxZQUFhLENBQ1pLLEtBQUssRUFDTDk2QixTQUFTLElBT1h3N0IsVUFBVyxTQUFVMWlDLEVBQVEyaUMsR0FDNUIsT0FBT0EsRUFHTmpCLEdBQVlBLEdBQVkxaEMsRUFBUWdILEVBQU80NkIsY0FBZ0JlLEdBR3ZEakIsR0FBWTE2QixFQUFPNDZCLGFBQWM1aEMsSUFHbkM0aUMsY0FBZTlCLEdBQTZCbkgsSUFDNUNrSixjQUFlL0IsR0FBNkJILElBRzVDbUMsS0FBTSxTQUFVZCxFQUFLbGhDLEdBR0EsaUJBQVJraEMsSUFDWGxoQyxFQUFVa2hDLEVBQ1ZBLE9BQU16NEIsR0FJUHpJLEVBQVVBLEdBQVcsR0FFckIsSUFBSWlpQyxFQUdIQyxFQUdBQyxFQUNBQyxFQUdBQyxFQUdBQyxFQUdBcmhCLEVBR0FzaEIsRUFHQTdsQyxFQUdBOGxDLEVBR0EvakMsRUFBSXlILEVBQU8wN0IsVUFBVyxHQUFJNWhDLEdBRzFCeWlDLEVBQWtCaGtDLEVBQUUySCxTQUFXM0gsRUFHL0Jpa0MsRUFBcUJqa0MsRUFBRTJILFVBQ3BCcThCLEVBQWdCdDlCLFVBQVlzOUIsRUFBZ0JqOEIsUUFDN0NOLEVBQVF1OEIsR0FDUnY4QixFQUFPd2lCLE1BR1RqSyxFQUFXdlksRUFBT2tZLFdBQ2xCdWtCLEVBQW1CejhCLEVBQU9pWCxVQUFXLGVBR3JDeWxCLEVBQWFua0MsRUFBRW1rQyxZQUFjLEdBRzdCQyxFQUFpQixHQUNqQkMsRUFBc0IsR0FHdEJDLEVBQVcsV0FHWHpDLEVBQVEsQ0FDUGhmLFdBQVksRUFHWjBoQixrQkFBbUIsU0FBVS9rQyxHQUM1QixJQUFJdVEsRUFDSixHQUFLeVMsRUFBWSxDQUNoQixJQUFNbWhCLEVBRUwsSUFEQUEsRUFBa0IsR0FDUjV6QixFQUFRa3hCLEdBQVM3d0IsS0FBTXN6QixJQUNoQ0MsRUFBaUI1ekIsRUFBTyxHQUFJdkUsY0FBZ0IsTUFDekNtNEIsRUFBaUI1ekIsRUFBTyxHQUFJdkUsY0FBZ0IsTUFBUyxJQUNyRDFKLE9BQVFpTyxFQUFPLElBR3BCQSxFQUFRNHpCLEVBQWlCbmtDLEVBQUlnTSxjQUFnQixLQUU5QyxPQUFnQixNQUFUdUUsRUFBZ0IsS0FBT0EsRUFBTXhNLEtBQU0sT0FJM0NpaEMsc0JBQXVCLFdBQ3RCLE9BQU9oaUIsRUFBWWtoQixFQUF3QixNQUk1Q2UsaUJBQWtCLFNBQVVqbUMsRUFBTVUsR0FNakMsT0FMa0IsTUFBYnNqQixJQUNKaGtCLEVBQU82bEMsRUFBcUI3bEMsRUFBS2dOLGVBQ2hDNjRCLEVBQXFCN2xDLEVBQUtnTixnQkFBbUJoTixFQUM5QzRsQyxFQUFnQjVsQyxHQUFTVSxHQUVuQndHLE1BSVJnL0IsaUJBQWtCLFNBQVU3OUIsR0FJM0IsT0FIa0IsTUFBYjJiLElBQ0p4aUIsRUFBRTJrQyxTQUFXOTlCLEdBRVBuQixNQUlSeStCLFdBQVksU0FBVXo3QixHQUNyQixJQUFJekIsRUFDSixHQUFLeUIsRUFDSixHQUFLOFosRUFHSnFmLEVBQU05aEIsT0FBUXJYLEVBQUttNUIsRUFBTStDLGNBSXpCLElBQU0zOUIsS0FBUXlCLEVBQ2J5N0IsRUFBWWw5QixHQUFTLENBQUVrOUIsRUFBWWw5QixHQUFReUIsRUFBS3pCLElBSW5ELE9BQU92QixNQUlSbS9CLE1BQU8sU0FBVUMsR0FDaEIsSUFBSUMsRUFBWUQsR0FBY1IsRUFLOUIsT0FKS2QsR0FDSkEsRUFBVXFCLE1BQU9FLEdBRWxCbjRCLEVBQU0sRUFBR200QixHQUNGci9CLE9Bb0JWLEdBZkFzYSxFQUFTekIsUUFBU3NqQixHQUtsQjdoQyxFQUFFeWlDLE1BQVVBLEdBQU96aUMsRUFBRXlpQyxLQUFPbnJCLEdBQVNHLE1BQVMsSUFDNUNyTixRQUFTKzJCLEdBQVc3cEIsR0FBU3FyQixTQUFXLE1BRzFDM2lDLEVBQUU2RyxLQUFPdEYsRUFBUStjLFFBQVUvYyxFQUFRc0YsTUFBUTdHLEVBQUVzZSxRQUFVdGUsRUFBRTZHLEtBR3pEN0csRUFBRTJoQyxXQUFjM2hDLEVBQUUwaEMsVUFBWSxLQUFNbDJCLGNBQWN1RSxNQUFPOE4sSUFBbUIsQ0FBRSxJQUd4RCxNQUFqQjdkLEVBQUVnbEMsWUFBc0IsQ0FDNUJuQixFQUFZeGpDLEVBQVNxQyxjQUFlLEtBS3BDLElBQ0NtaEMsRUFBVXBzQixLQUFPelgsRUFBRXlpQyxJQUluQm9CLEVBQVVwc0IsS0FBT29zQixFQUFVcHNCLEtBQzNCelgsRUFBRWdsQyxZQUFjMUQsR0FBYXFCLFNBQVcsS0FBT3JCLEdBQWEyRCxNQUMzRHBCLEVBQVVsQixTQUFXLEtBQU9rQixFQUFVb0IsS0FDdEMsTUFBUWxrQyxHQUlUZixFQUFFZ2xDLGFBQWMsR0FhbEIsR0FSS2hsQyxFQUFFbWtCLE1BQVFua0IsRUFBRTRpQyxhQUFpQyxpQkFBWDVpQyxFQUFFbWtCLE9BQ3hDbmtCLEVBQUVta0IsS0FBTzFjLEVBQU9pNUIsTUFBTzFnQyxFQUFFbWtCLEtBQU1ua0IsRUFBRXlnQyxjQUlsQ21CLEdBQStCeEgsR0FBWXA2QixFQUFHdUIsRUFBU3NnQyxHQUdsRHJmLEVBQ0osT0FBT3FmLEVBOEVSLElBQU01akMsS0F6RU42bEMsRUFBY3I4QixFQUFPd2lCLE9BQVNqcUIsRUFBRXVGLFNBR1EsR0FBcEJrQyxFQUFPNjZCLFVBQzFCNzZCLEVBQU93aUIsTUFBTVUsUUFBUyxhQUl2QjNxQixFQUFFNkcsS0FBTzdHLEVBQUU2RyxLQUFLNmMsY0FHaEIxakIsRUFBRWtsQyxZQUFjaEUsR0FBV3p3QixLQUFNelEsRUFBRTZHLE1BS25DNDhCLEVBQVd6akMsRUFBRXlpQyxJQUFJcjRCLFFBQVMyMkIsR0FBTyxJQUczQi9nQyxFQUFFa2xDLFdBd0JJbGxDLEVBQUVta0IsTUFBUW5rQixFQUFFNGlDLGFBQ29ELEtBQXpFNWlDLEVBQUU4aUMsYUFBZSxJQUFLMzhCLFFBQVMsdUNBQ2pDbkcsRUFBRW1rQixLQUFPbmtCLEVBQUVta0IsS0FBSy9aLFFBQVMwMkIsR0FBSyxPQXZCOUJpRCxFQUFXL2pDLEVBQUV5aUMsSUFBSTE4QixNQUFPMDlCLEVBQVNyaUMsUUFHNUJwQixFQUFFbWtCLE9BQVVua0IsRUFBRTRpQyxhQUFpQyxpQkFBWDVpQyxFQUFFbWtCLFFBQzFDc2YsSUFBY3pELEdBQU92dkIsS0FBTWd6QixHQUFhLElBQU0sS0FBUXpqQyxFQUFFbWtCLFlBR2pEbmtCLEVBQUVta0IsT0FJTyxJQUFabmtCLEVBQUUrUSxRQUNOMHlCLEVBQVdBLEVBQVNyNUIsUUFBUzQyQixHQUFZLE1BQ3pDK0MsR0FBYS9ELEdBQU92dkIsS0FBTWd6QixHQUFhLElBQU0sS0FBUSxLQUFTN2dDLEdBQU15SSxPQUNuRTA0QixHQUlGL2pDLEVBQUV5aUMsSUFBTWdCLEVBQVdNLEdBU2YvakMsRUFBRW1sQyxhQUNEMTlCLEVBQU84NkIsYUFBY2tCLElBQ3pCNUIsRUFBTTRDLGlCQUFrQixvQkFBcUJoOUIsRUFBTzg2QixhQUFja0IsSUFFOURoOEIsRUFBTys2QixLQUFNaUIsSUFDakI1QixFQUFNNEMsaUJBQWtCLGdCQUFpQmg5QixFQUFPKzZCLEtBQU1pQixNQUtuRHpqQyxFQUFFbWtCLE1BQVFua0IsRUFBRWtsQyxhQUFnQyxJQUFsQmxsQyxFQUFFOGlDLGFBQXlCdmhDLEVBQVF1aEMsY0FDakVqQixFQUFNNEMsaUJBQWtCLGVBQWdCemtDLEVBQUU4aUMsYUFJM0NqQixFQUFNNEMsaUJBQ0wsU0FDQXprQyxFQUFFMmhDLFVBQVcsSUFBTzNoQyxFQUFFK2lDLFFBQVMvaUMsRUFBRTJoQyxVQUFXLElBQzNDM2hDLEVBQUUraUMsUUFBUy9pQyxFQUFFMmhDLFVBQVcsS0FDQSxNQUFyQjNoQyxFQUFFMmhDLFVBQVcsR0FBYyxLQUFPTixHQUFXLFdBQWEsSUFDN0RyaEMsRUFBRStpQyxRQUFTLE1BSUYvaUMsRUFBRW9sQyxRQUNadkQsRUFBTTRDLGlCQUFrQnhtQyxFQUFHK0IsRUFBRW9sQyxRQUFTbm5DLElBSXZDLEdBQUsrQixFQUFFcWxDLGNBQytDLElBQW5EcmxDLEVBQUVxbEMsV0FBV2puQyxLQUFNNGxDLEVBQWlCbkMsRUFBTzdoQyxJQUFpQndpQixHQUc5RCxPQUFPcWYsRUFBTWdELFFBZWQsR0FYQVAsRUFBVyxRQUdYSixFQUFpQjltQixJQUFLcGQsRUFBRTg2QixVQUN4QitHLEVBQU1qMUIsS0FBTTVNLEVBQUVzbEMsU0FDZHpELEVBQU1yakIsS0FBTXhlLEVBQUVzSyxPQUdkazVCLEVBQVk1QixHQUErQlIsR0FBWXBoQyxFQUFHdUIsRUFBU3NnQyxHQUs1RCxDQVNOLEdBUkFBLEVBQU1oZixXQUFhLEVBR2RpaEIsR0FDSkcsRUFBbUJ0WixRQUFTLFdBQVksQ0FBRWtYLEVBQU83aEMsSUFJN0N3aUIsRUFDSixPQUFPcWYsRUFJSDdoQyxFQUFFNmlDLE9BQVM3aUMsRUFBRWs5QixRQUFVLElBQzNCMEcsRUFBZXhqQyxFQUFPb2hCLFlBQVksV0FDakNxZ0IsRUFBTWdELE1BQU8sYUFDWDdrQyxFQUFFazlCLFVBR04sSUFDQzFhLEdBQVksRUFDWmdoQixFQUFVK0IsS0FBTW5CLEVBQWdCeDNCLEdBQy9CLE1BQVE3TCxHQUdULEdBQUt5aEIsRUFDSixNQUFNemhCLEVBSVA2TCxHQUFPLEVBQUc3TCxTQWhDWDZMLEdBQU8sRUFBRyxnQkFxQ1gsU0FBU0EsRUFBTWc0QixFQUFRWSxFQUFrQkMsRUFBV0wsR0FDbkQsSUFBSU0sRUFBV0osRUFBU2g3QixFQUFPcTdCLEVBQVVDLEVBQ3hDZCxFQUFhVSxFQUdUaGpCLElBSUxBLEdBQVksRUFHUG9oQixHQUNKeGpDLEVBQU8rOEIsYUFBY3lHLEdBS3RCSixPQUFZeDVCLEVBR1owNUIsRUFBd0IwQixHQUFXLEdBR25DdkQsRUFBTWhmLFdBQWEraEIsRUFBUyxFQUFJLEVBQUksRUFHcENjLEVBQVlkLEdBQVUsS0FBT0EsRUFBUyxLQUFrQixNQUFYQSxFQUd4Q2EsSUFDSkUsRUE3bEJKLFNBQThCM2xDLEVBQUc2aEMsRUFBTzRELEdBT3ZDLElBTEEsSUFBSUksRUFBSWgvQixFQUFNaS9CLEVBQWVDLEVBQzVCbHBCLEVBQVc3YyxFQUFFNmMsU0FDYjhrQixFQUFZM2hDLEVBQUUyaEMsVUFHWSxNQUFuQkEsRUFBVyxJQUNsQkEsRUFBVTF3QixhQUNFakgsSUFBUDY3QixJQUNKQSxFQUFLN2xDLEVBQUUya0MsVUFBWTlDLEVBQU0wQyxrQkFBbUIsaUJBSzlDLEdBQUtzQixFQUNKLElBQU1oL0IsS0FBUWdXLEVBQ2IsR0FBS0EsRUFBVWhXLElBQVVnVyxFQUFVaFcsR0FBTzRKLEtBQU1vMUIsR0FBTyxDQUN0RGxFLEVBQVVwdEIsUUFBUzFOLEdBQ25CLE1BTUgsR0FBSzg2QixFQUFXLEtBQU84RCxFQUN0QkssRUFBZ0JuRSxFQUFXLE9BQ3JCLENBR04sSUFBTTk2QixLQUFRNCtCLEVBQVksQ0FDekIsSUFBTTlELEVBQVcsSUFBTzNoQyxFQUFFa2pDLFdBQVlyOEIsRUFBTyxJQUFNODZCLEVBQVcsSUFBUSxDQUNyRW1FLEVBQWdCai9CLEVBQ2hCLE1BRUtrL0IsSUFDTEEsRUFBZ0JsL0IsR0FLbEJpL0IsRUFBZ0JBLEdBQWlCQyxFQU1sQyxHQUFLRCxFQUlKLE9BSEtBLElBQWtCbkUsRUFBVyxJQUNqQ0EsRUFBVXB0QixRQUFTdXhCLEdBRWJMLEVBQVdLLEdBMGlCTEUsQ0FBcUJobUMsRUFBRzZoQyxFQUFPNEQsS0FJckNDLEdBQWFqK0IsRUFBT3NELFFBQVMsU0FBVS9LLEVBQUUyaEMsWUFBZSxJQUM3RDNoQyxFQUFFa2pDLFdBQVksZUFBa0IsY0FJakN5QyxFQTVpQkgsU0FBc0IzbEMsRUFBRzJsQyxFQUFVOUQsRUFBTzZELEdBQ3pDLElBQUlPLEVBQU9DLEVBQVNDLEVBQU03eUIsRUFBS3dKLEVBQzlCb21CLEVBQWEsR0FHYnZCLEVBQVkzaEMsRUFBRTJoQyxVQUFVNTdCLFFBR3pCLEdBQUs0N0IsRUFBVyxHQUNmLElBQU13RSxLQUFRbm1DLEVBQUVrakMsV0FDZkEsRUFBWWlELEVBQUszNkIsZUFBa0J4TCxFQUFFa2pDLFdBQVlpRCxHQU9uRCxJQUhBRCxFQUFVdkUsRUFBVTF3QixRQUdaaTFCLEdBY1AsR0FaS2xtQyxFQUFFaWpDLGVBQWdCaUQsS0FDdEJyRSxFQUFPN2hDLEVBQUVpakMsZUFBZ0JpRCxJQUFjUCxJQUlsQzdvQixHQUFRNG9CLEdBQWExbEMsRUFBRW9tQyxhQUM1QlQsRUFBVzNsQyxFQUFFb21DLFdBQVlULEVBQVUzbEMsRUFBRTBoQyxXQUd0QzVrQixFQUFPb3BCLEVBQ1BBLEVBQVV2RSxFQUFVMXdCLFFBS25CLEdBQWlCLE1BQVppMUIsRUFFSkEsRUFBVXBwQixPQUdKLEdBQWMsTUFBVEEsR0FBZ0JBLElBQVNvcEIsRUFBVSxDQU05QyxLQUhBQyxFQUFPakQsRUFBWXBtQixFQUFPLElBQU1vcEIsSUFBYWhELEVBQVksS0FBT2dELElBSS9ELElBQU1ELEtBQVMvQyxFQUlkLElBREE1dkIsRUFBTTJ5QixFQUFNMTZCLE1BQU8sTUFDVCxLQUFRMjZCLElBR2pCQyxFQUFPakQsRUFBWXBtQixFQUFPLElBQU14SixFQUFLLEtBQ3BDNHZCLEVBQVksS0FBTzV2QixFQUFLLEtBQ2IsRUFHRyxJQUFUNnlCLEVBQ0pBLEVBQU9qRCxFQUFZK0MsSUFHZ0IsSUFBeEIvQyxFQUFZK0MsS0FDdkJDLEVBQVU1eUIsRUFBSyxHQUNmcXVCLEVBQVVwdEIsUUFBU2pCLEVBQUssS0FFekIsTUFPSixJQUFjLElBQVQ2eUIsRUFHSixHQUFLQSxHQUFRbm1DLEVBQUVxbUMsT0FDZFYsRUFBV1EsRUFBTVIsUUFFakIsSUFDQ0EsRUFBV1EsRUFBTVIsR0FDaEIsTUFBUTVrQyxHQUNULE1BQU8sQ0FDTitlLE1BQU8sY0FDUHhWLE1BQU82N0IsRUFBT3BsQyxFQUFJLHNCQUF3QitiLEVBQU8sT0FBU29wQixJQVNqRSxNQUFPLENBQUVwbUIsTUFBTyxVQUFXcUUsS0FBTXdoQixHQStjcEJXLENBQWF0bUMsRUFBRzJsQyxFQUFVOUQsRUFBTzZELEdBR3ZDQSxHQUdDMWxDLEVBQUVtbEMsY0FDTlMsRUFBVy9ELEVBQU0wQyxrQkFBbUIsb0JBRW5DOThCLEVBQU84NkIsYUFBY2tCLEdBQWFtQyxJQUVuQ0EsRUFBVy9ELEVBQU0wQyxrQkFBbUIsV0FFbkM5OEIsRUFBTys2QixLQUFNaUIsR0FBYW1DLElBS1osTUFBWGhCLEdBQTZCLFNBQVg1a0MsRUFBRTZHLEtBQ3hCaStCLEVBQWEsWUFHUyxNQUFYRixFQUNYRSxFQUFhLGVBSWJBLEVBQWFhLEVBQVM3bEIsTUFDdEJ3bEIsRUFBVUssRUFBU3hoQixLQUVuQnVoQixJQURBcDdCLEVBQVFxN0IsRUFBU3I3QixVQU1sQkEsRUFBUXc2QixHQUNIRixHQUFXRSxJQUNmQSxFQUFhLFFBQ1JGLEVBQVMsSUFDYkEsRUFBUyxLQU1aL0MsRUFBTStDLE9BQVNBLEVBQ2YvQyxFQUFNaUQsWUFBZVUsR0FBb0JWLEdBQWUsR0FHbkRZLEVBQ0oxbEIsRUFBU2tCLFlBQWE4aUIsRUFBaUIsQ0FBRXNCLEVBQVNSLEVBQVlqRCxJQUU5RDdoQixFQUFTc0IsV0FBWTBpQixFQUFpQixDQUFFbkMsRUFBT2lELEVBQVl4NkIsSUFJNUR1M0IsRUFBTXNDLFdBQVlBLEdBQ2xCQSxPQUFhbjZCLEVBRVI4NUIsR0FDSkcsRUFBbUJ0WixRQUFTK2EsRUFBWSxjQUFnQixZQUN2RCxDQUFFN0QsRUFBTzdoQyxFQUFHMGxDLEVBQVlKLEVBQVVoN0IsSUFJcEM0NUIsRUFBaUJ4a0IsU0FBVXNrQixFQUFpQixDQUFFbkMsRUFBT2lELElBRWhEaEIsSUFDSkcsRUFBbUJ0WixRQUFTLGVBQWdCLENBQUVrWCxFQUFPN2hDLE1BRzNDeUgsRUFBTzY2QixRQUNoQjc2QixFQUFPd2lCLE1BQU1VLFFBQVMsY0FLekIsT0FBT2tYLEdBR1IwRSxRQUFTLFNBQVU5RCxFQUFLdGUsRUFBTTFiLEdBQzdCLE9BQU9oQixFQUFPM0ksSUFBSzJqQyxFQUFLdGUsRUFBTTFiLEVBQVUsU0FHekMrOUIsVUFBVyxTQUFVL0QsRUFBS2g2QixHQUN6QixPQUFPaEIsRUFBTzNJLElBQUsyakMsT0FBS3o0QixFQUFXdkIsRUFBVSxhQUkvQ2hCLEVBQU9lLEtBQU0sQ0FBRSxNQUFPLFNBQVUsU0FBVXBELEVBQUlrWixHQUM3QzdXLEVBQVE2VyxHQUFXLFNBQVVta0IsRUFBS3RlLEVBQU0xYixFQUFVNUIsR0FVakQsT0FQS0osRUFBWTBkLEtBQ2hCdGQsRUFBT0EsR0FBUTRCLEVBQ2ZBLEVBQVcwYixFQUNYQSxPQUFPbmEsR0FJRHZDLEVBQU84N0IsS0FBTTk3QixFQUFPK0IsT0FBUSxDQUNsQ2k1QixJQUFLQSxFQUNMNTdCLEtBQU15WCxFQUNOb2pCLFNBQVU3NkIsRUFDVnNkLEtBQU1BLEVBQ05taEIsUUFBUzc4QixHQUNQaEIsRUFBT29DLGNBQWU0NEIsSUFBU0EsUUFJcENoN0IsRUFBTzQ3QixlQUFlLFNBQVVyakMsR0FDL0IsSUFBSS9CLEVBQ0osSUFBTUEsS0FBSytCLEVBQUVvbEMsUUFDYSxpQkFBcEJubkMsRUFBRXVOLGdCQUNOeEwsRUFBRThpQyxZQUFjOWlDLEVBQUVvbEMsUUFBU25uQyxJQUFPLE9BTXJDd0osRUFBT3VwQixTQUFXLFNBQVV5UixFQUFLbGhDLEVBQVM0RixHQUN6QyxPQUFPTSxFQUFPODdCLEtBQU0sQ0FDbkJkLElBQUtBLEVBR0w1N0IsS0FBTSxNQUNONjZCLFNBQVUsU0FDVjN3QixPQUFPLEVBQ1A4eEIsT0FBTyxFQUNQdDlCLFFBQVEsRUFLUjI5QixXQUFZLENBQ1gsY0FBZSxjQUVoQmtELFdBQVksU0FBVVQsR0FDckJsK0IsRUFBT21ELFdBQVkrNkIsRUFBVXBrQyxFQUFTNEYsT0FNekNNLEVBQU9HLEdBQUc0QixPQUFRLENBQ2pCaTlCLFFBQVMsU0FBVTFWLEdBQ2xCLElBQUkvSCxFQXlCSixPQXZCS3RqQixLQUFNLEtBQ0xlLEVBQVlzcUIsS0FDaEJBLEVBQU9BLEVBQUszeUIsS0FBTXNILEtBQU0sS0FJekJzakIsRUFBT3ZoQixFQUFRc3BCLEVBQU1yckIsS0FBTSxHQUFJeUssZUFBZ0JySCxHQUFJLEdBQUlhLE9BQU8sR0FFekRqRSxLQUFNLEdBQUliLFlBQ2Rta0IsRUFBS2hsQixhQUFjMEIsS0FBTSxJQUcxQnNqQixFQUFLdGdCLEtBQUssV0FHVCxJQUZBLElBQUlDLEVBQU9qRCxLQUVIaUQsRUFBSys5QixtQkFDWi85QixFQUFPQSxFQUFLKzlCLGtCQUdiLE9BQU8vOUIsS0FDSjhvQixPQUFRL3JCLE9BR05BLE1BR1JpaEMsVUFBVyxTQUFVNVYsR0FDcEIsT0FBS3RxQixFQUFZc3FCLEdBQ1RyckIsS0FBSzhDLE1BQU0sU0FBVXZLLEdBQzNCd0osRUFBUS9CLE1BQU9paEMsVUFBVzVWLEVBQUszeUIsS0FBTXNILEtBQU16SCxPQUl0Q3lILEtBQUs4QyxNQUFNLFdBQ2pCLElBQUk2VCxFQUFPNVUsRUFBUS9CLE1BQ2xCbVgsRUFBV1IsRUFBS1EsV0FFWkEsRUFBU3piLE9BQ2J5YixFQUFTNHBCLFFBQVMxVixHQUdsQjFVLEVBQUtvVixPQUFRVixPQUtoQi9ILEtBQU0sU0FBVStILEdBQ2YsSUFBSTZWLEVBQWlCbmdDLEVBQVlzcUIsR0FFakMsT0FBT3JyQixLQUFLOEMsTUFBTSxTQUFVdkssR0FDM0J3SixFQUFRL0IsTUFBTytnQyxRQUFTRyxFQUFpQjdWLEVBQUszeUIsS0FBTXNILEtBQU16SCxHQUFNOHlCLE9BSWxFOFYsT0FBUSxTQUFVbi9CLEdBSWpCLE9BSEFoQyxLQUFLOFEsT0FBUTlPLEdBQVcwVSxJQUFLLFFBQVM1VCxNQUFNLFdBQzNDZixFQUFRL0IsTUFBT21zQixZQUFhbnNCLEtBQUs1QixlQUUzQjRCLFFBS1QrQixFQUFPK00sS0FBSy9HLFFBQVE4ckIsT0FBUyxTQUFVNXdCLEdBQ3RDLE9BQVFsQixFQUFPK00sS0FBSy9HLFFBQVFxNUIsUUFBU24rQixJQUV0Q2xCLEVBQU8rTSxLQUFLL0csUUFBUXE1QixRQUFVLFNBQVVuK0IsR0FDdkMsU0FBV0EsRUFBS3NyQixhQUFldHJCLEVBQUtvK0IsY0FBZ0JwK0IsRUFBS3F1QixpQkFBaUI1MUIsU0FNM0VxRyxFQUFPNDZCLGFBQWEyRSxJQUFNLFdBQ3pCLElBQ0MsT0FBTyxJQUFJNW1DLEVBQU82bUMsZUFDakIsTUFBUWxtQyxNQUdYLElBQUltbUMsR0FBbUIsQ0FHckJDLEVBQUcsSUFJSEMsS0FBTSxLQUVQQyxHQUFlNS9CLEVBQU80NkIsYUFBYTJFLE1BRXBDeGdDLEVBQVE4Z0MsT0FBU0QsSUFBa0Isb0JBQXFCQSxHQUN4RDdnQyxFQUFRKzhCLEtBQU84RCxLQUFpQkEsR0FFaEM1L0IsRUFBTzY3QixlQUFlLFNBQVUvaEMsR0FDL0IsSUFBSWtILEVBQVU4K0IsRUFHZCxHQUFLL2dDLEVBQVE4Z0MsTUFBUUQsS0FBaUI5bEMsRUFBUXlqQyxZQUM3QyxNQUFPLENBQ05PLEtBQU0sU0FBVUgsRUFBU3RLLEdBQ3hCLElBQUk3OEIsRUFDSCtvQyxFQUFNemxDLEVBQVF5bEMsTUFXZixHQVRBQSxFQUFJUSxLQUNIam1DLEVBQVFzRixLQUNSdEYsRUFBUWtoQyxJQUNSbGhDLEVBQVFzaEMsTUFDUnRoQyxFQUFRa21DLFNBQ1JsbUMsRUFBUTJXLFVBSUozVyxFQUFRbW1DLFVBQ1osSUFBTXpwQyxLQUFLc0QsRUFBUW1tQyxVQUNsQlYsRUFBSy9vQyxHQUFNc0QsRUFBUW1tQyxVQUFXenBDLEdBbUJoQyxJQUFNQSxLQWREc0QsRUFBUW9qQyxVQUFZcUMsRUFBSXRDLGtCQUM1QnNDLEVBQUl0QyxpQkFBa0JuakMsRUFBUW9qQyxVQVF6QnBqQyxFQUFReWpDLGFBQWdCSSxFQUFTLHNCQUN0Q0EsRUFBUyxvQkFBdUIsa0JBSXRCQSxFQUNWNEIsRUFBSXZDLGlCQUFrQnhtQyxFQUFHbW5DLEVBQVNubkMsSUFJbkN3SyxFQUFXLFNBQVU1QixHQUNwQixPQUFPLFdBQ0Q0QixJQUNKQSxFQUFXOCtCLEVBQWdCUCxFQUFJVyxPQUM5QlgsRUFBSVksUUFBVVosRUFBSWEsUUFBVWIsRUFBSWMsVUFDL0JkLEVBQUllLG1CQUFxQixLQUViLFVBQVRsaEMsRUFDSm1nQyxFQUFJbkMsUUFDZ0IsVUFBVGgrQixFQUtnQixpQkFBZm1nQyxFQUFJcEMsT0FDZjlKLEVBQVUsRUFBRyxTQUViQSxFQUdDa00sRUFBSXBDLE9BQ0pvQyxFQUFJbEMsWUFJTmhLLEVBQ0NvTSxHQUFrQkYsRUFBSXBDLFNBQVlvQyxFQUFJcEMsT0FDdENvQyxFQUFJbEMsV0FLK0IsVUFBakNrQyxFQUFJZ0IsY0FBZ0IsU0FDTSxpQkFBckJoQixFQUFJaUIsYUFDVixDQUFFQyxPQUFRbEIsRUFBSXJCLFVBQ2QsQ0FBRXIrQixLQUFNMC9CLEVBQUlpQixjQUNiakIsRUFBSXhDLDRCQVFUd0MsRUFBSVcsT0FBU2wvQixJQUNiOCtCLEVBQWdCUCxFQUFJWSxRQUFVWixFQUFJYyxVQUFZci9CLEVBQVUsY0FLbkN1QixJQUFoQmc5QixFQUFJYSxRQUNSYixFQUFJYSxRQUFVTixFQUVkUCxFQUFJZSxtQkFBcUIsV0FHQSxJQUFuQmYsRUFBSW5rQixZQU1SemlCLEVBQU9vaEIsWUFBWSxXQUNiL1ksR0FDSjgrQixRQVFMOStCLEVBQVdBLEVBQVUsU0FFckIsSUFHQ3UrQixFQUFJekIsS0FBTWhrQyxFQUFRMmpDLFlBQWMzakMsRUFBUTRpQixNQUFRLE1BQy9DLE1BQVFwakIsR0FHVCxHQUFLMEgsRUFDSixNQUFNMUgsSUFLVDhqQyxNQUFPLFdBQ0RwOEIsR0FDSkEsU0FXTGhCLEVBQU80N0IsZUFBZSxTQUFVcmpDLEdBQzFCQSxFQUFFZ2xDLGNBQ05obEMsRUFBRTZjLFNBQVN4VixRQUFTLE1BS3RCSSxFQUFPMDdCLFVBQVcsQ0FDakJKLFFBQVMsQ0FDUjE3QixPQUFRLDZGQUdUd1YsU0FBVSxDQUNUeFYsT0FBUSwyQkFFVDY3QixXQUFZLENBQ1gsY0FBZSxTQUFVNTdCLEdBRXhCLE9BREFHLEVBQU9tRCxXQUFZdEQsR0FDWkEsTUFNVkcsRUFBTzQ3QixjQUFlLFVBQVUsU0FBVXJqQyxRQUN4QmdLLElBQVpoSyxFQUFFK1EsUUFDTi9RLEVBQUUrUSxPQUFRLEdBRU4vUSxFQUFFZ2xDLGNBQ05obEMsRUFBRTZHLEtBQU8sVUFLWFksRUFBTzY3QixjQUFlLFVBQVUsU0FBVXRqQyxHQUl4QyxJQUFJcUgsRUFBUW9CLEVBRGIsR0FBS3pJLEVBQUVnbEMsYUFBZWhsQyxFQUFFbW9DLFlBRXZCLE1BQU8sQ0FDTjVDLEtBQU0sU0FBVTVtQixFQUFHbWMsR0FDbEJ6ekIsRUFBU0ksRUFBUSxZQUNmaU4sS0FBTTFVLEVBQUVtb0MsYUFBZSxJQUN2Qi9qQixLQUFNLENBQUVna0IsUUFBU3BvQyxFQUFFcW9DLGNBQWV2aEMsSUFBSzlHLEVBQUV5aUMsTUFDekM1WSxHQUFJLGFBQWNwaEIsRUFBVyxTQUFVNi9CLEdBQ3ZDamhDLEVBQU81RCxTQUNQZ0YsRUFBVyxLQUNONi9CLEdBQ0p4TixFQUF1QixVQUFid04sRUFBSXpoQyxLQUFtQixJQUFNLElBQUt5aEMsRUFBSXpoQyxRQUtuRHhHLEVBQVNTLEtBQUtvQyxZQUFhbUUsRUFBUSxLQUVwQ3c5QixNQUFPLFdBQ0RwOEIsR0FDSkEsU0FVTCxJQXFHS3FlLEdBckdEeWhCLEdBQWUsR0FDbEJDLEdBQVMsb0JBR1YvZ0MsRUFBTzA3QixVQUFXLENBQ2pCc0YsTUFBTyxXQUNQQyxjQUFlLFdBQ2QsSUFBSWpnQyxFQUFXOC9CLEdBQWFsN0IsT0FBVzVGLEVBQU93QyxRQUFVLElBQVFySCxHQUFNeUksT0FFdEUsT0FEQTNGLEtBQU0rQyxJQUFhLEVBQ1pBLEtBS1RoQixFQUFPNDdCLGNBQWUsY0FBYyxTQUFVcmpDLEVBQUcyb0MsRUFBa0I5RyxHQUVsRSxJQUFJK0csRUFBY0MsRUFBYUMsRUFDOUJDLEdBQXVCLElBQVovb0MsRUFBRXlvQyxRQUFxQkQsR0FBTy8zQixLQUFNelEsRUFBRXlpQyxLQUNoRCxNQUNrQixpQkFBWHppQyxFQUFFbWtCLE1BRTZDLEtBRG5EbmtCLEVBQUU4aUMsYUFBZSxJQUNqQjM4QixRQUFTLHNDQUNYcWlDLEdBQU8vM0IsS0FBTXpRLEVBQUVta0IsT0FBVSxRQUk1QixHQUFLNGtCLEdBQWlDLFVBQXJCL29DLEVBQUUyaEMsVUFBVyxHQThEN0IsT0EzREFpSCxFQUFlNW9DLEVBQUUwb0MsY0FBZ0JqaUMsRUFBWXpHLEVBQUUwb0MsZUFDOUMxb0MsRUFBRTBvQyxnQkFDRjFvQyxFQUFFMG9DLGNBR0VLLEVBQ0ovb0MsRUFBRytvQyxHQUFhL29DLEVBQUcrb0MsR0FBVzMrQixRQUFTbytCLEdBQVEsS0FBT0ksSUFDL0IsSUFBWjVvQyxFQUFFeW9DLFFBQ2J6b0MsRUFBRXlpQyxNQUFTekMsR0FBT3Z2QixLQUFNelEsRUFBRXlpQyxLQUFRLElBQU0sS0FBUXppQyxFQUFFeW9DLE1BQVEsSUFBTUcsR0FJakU1b0MsRUFBRWtqQyxXQUFZLGVBQWtCLFdBSS9CLE9BSE00RixHQUNMcmhDLEVBQU82QyxNQUFPcytCLEVBQWUsbUJBRXZCRSxFQUFtQixJQUkzQjlvQyxFQUFFMmhDLFVBQVcsR0FBTSxPQUduQmtILEVBQWN6b0MsRUFBUXdvQyxHQUN0QnhvQyxFQUFRd29DLEdBQWlCLFdBQ3hCRSxFQUFvQmxnQyxXQUlyQmk1QixFQUFNOWhCLFFBQVEsZ0JBR1EvVixJQUFoQjYrQixFQUNKcGhDLEVBQVFySCxHQUFTKzlCLFdBQVl5SyxHQUk3QnhvQyxFQUFRd29DLEdBQWlCQyxFQUlyQjdvQyxFQUFHNG9DLEtBR1A1b0MsRUFBRTBvQyxjQUFnQkMsRUFBaUJELGNBR25DSCxHQUFham1DLEtBQU1zbUMsSUFJZkUsR0FBcUJyaUMsRUFBWW9pQyxJQUNyQ0EsRUFBYUMsRUFBbUIsSUFHakNBLEVBQW9CRCxPQUFjNytCLEtBSTVCLFlBWVR4RCxFQUFRd2lDLHFCQUNIbGlCLEdBQU96bUIsRUFBUzRvQyxlQUFlRCxtQkFBb0IsSUFBS2xpQixNQUN2RHRULFVBQVksNkJBQ2lCLElBQTNCc1QsR0FBS2hqQixXQUFXMUMsUUFReEJxRyxFQUFPK1UsVUFBWSxTQUFVMkgsRUFBTXhjLEVBQVN1aEMsR0FDM0MsTUFBcUIsaUJBQVQva0IsRUFDSixJQUVnQixrQkFBWnhjLElBQ1h1aEMsRUFBY3ZoQyxFQUNkQSxHQUFVLEdBS0xBLElBSUFuQixFQUFRd2lDLHFCQU1acG5DLEdBTEErRixFQUFVdEgsRUFBUzRvQyxlQUFlRCxtQkFBb0IsS0FLdkN0bUMsY0FBZSxTQUN6QitVLEtBQU9wWCxFQUFTaVgsU0FBU0csS0FDOUI5UCxFQUFRN0csS0FBS29DLFlBQWF0QixJQUUxQitGLEVBQVV0SCxHQUtad29CLEdBQVdxZ0IsR0FBZSxJQUQxQkMsRUFBU2x0QixFQUFXN0wsS0FBTStULElBS2xCLENBQUV4YyxFQUFRakYsY0FBZXltQyxFQUFRLE1BR3pDQSxFQUFTdmdCLEdBQWUsQ0FBRXpFLEdBQVF4YyxFQUFTa2hCLEdBRXRDQSxHQUFXQSxFQUFRem5CLFFBQ3ZCcUcsRUFBUW9oQixHQUFVcGxCLFNBR1pnRSxFQUFPYSxNQUFPLEdBQUk2Z0MsRUFBT3JsQyxjQWxDaEMsSUFBSWxDLEVBQU11bkMsRUFBUXRnQixHQXlDbkJwaEIsRUFBT0csR0FBR29sQixLQUFPLFNBQVV5VixFQUFLMkcsRUFBUTNnQyxHQUN2QyxJQUFJZixFQUFVYixFQUFNOCtCLEVBQ25CdHBCLEVBQU8zVyxLQUNQd2tCLEVBQU11WSxFQUFJdDhCLFFBQVMsS0FzRHBCLE9BcERLK2pCLEdBQU8sSUFDWHhpQixFQUFXczJCLEdBQWtCeUUsRUFBSTE4QixNQUFPbWtCLElBQ3hDdVksRUFBTUEsRUFBSTE4QixNQUFPLEVBQUdta0IsSUFJaEJ6akIsRUFBWTJpQyxJQUdoQjNnQyxFQUFXMmdDLEVBQ1hBLE9BQVNwL0IsR0FHRW8vQixHQUE0QixpQkFBWEEsSUFDNUJ2aUMsRUFBTyxRQUlId1YsRUFBS2piLE9BQVMsR0FDbEJxRyxFQUFPODdCLEtBQU0sQ0FDWmQsSUFBS0EsRUFLTDU3QixLQUFNQSxHQUFRLE1BQ2Q2NkIsU0FBVSxPQUNWdmQsS0FBTWlsQixJQUNIeDhCLE1BQU0sU0FBVXE3QixHQUduQnRDLEVBQVcvOEIsVUFFWHlULEVBQUswVSxLQUFNcnBCLEVBSVZELEVBQVEsU0FBVWdxQixPQUFRaHFCLEVBQU8rVSxVQUFXeXJCLElBQWlCOTBCLEtBQU16TCxHQUduRXVnQyxNQUtFbG9CLE9BQVF0WCxHQUFZLFNBQVVvNUIsRUFBTytDLEdBQ3hDdm9CLEVBQUs3VCxNQUFNLFdBQ1ZDLEVBQVN2QyxNQUFPUixLQUFNaWdDLEdBQVksQ0FBRTlELEVBQU1vRyxhQUFjckQsRUFBUS9DLFNBSzVEbjhCLE1BTVIrQixFQUFPK00sS0FBSy9HLFFBQVE0N0IsU0FBVyxTQUFVMWdDLEdBQ3hDLE9BQU9sQixFQUFPd0IsS0FBTXhCLEVBQU82MEIsUUFBUSxTQUFVMTBCLEdBQzVDLE9BQU9lLElBQVNmLEVBQUdlLFFBQ2hCdkgsUUFNTHFHLEVBQU82aEMsT0FBUyxDQUNmQyxVQUFXLFNBQVU1Z0MsRUFBTXBILEVBQVN0RCxHQUNuQyxJQUFJdXJDLEVBQWFDLEVBQVNDLEVBQVdDLEVBQVFDLEVBQVdDLEVBQ3ZEOVYsRUFBV3RzQixFQUFPeEYsSUFBSzBHLEVBQU0sWUFDN0JtaEMsRUFBVXJpQyxFQUFRa0IsR0FDbEIwa0IsRUFBUSxHQUdTLFdBQWIwRyxJQUNKcHJCLEVBQUtsRyxNQUFNc3hCLFNBQVcsWUFHdkI2VixFQUFZRSxFQUFRUixTQUNwQkksRUFBWWppQyxFQUFPeEYsSUFBSzBHLEVBQU0sT0FDOUJraEMsRUFBYXBpQyxFQUFPeEYsSUFBSzBHLEVBQU0sU0FDSSxhQUFib3JCLEdBQXdDLFVBQWJBLEtBQzlDMlYsRUFBWUcsR0FBYTFqQyxRQUFTLFNBQVksR0FNaER3akMsR0FEQUgsRUFBY00sRUFBUS9WLFlBQ0RwaEIsSUFDckI4MkIsRUFBVUQsRUFBWTdSLE9BR3RCZ1MsRUFBU3ZWLFdBQVlzVixJQUFlLEVBQ3BDRCxFQUFVclYsV0FBWXlWLElBQWdCLEdBR2xDcGpDLEVBQVlsRixLQUdoQkEsRUFBVUEsRUFBUW5ELEtBQU11SyxFQUFNMUssRUFBR3dKLEVBQU8rQixPQUFRLEdBQUlvZ0MsS0FHakMsTUFBZnJvQyxFQUFRb1IsTUFDWjBhLEVBQU0xYSxJQUFRcFIsRUFBUW9SLElBQU1pM0IsRUFBVWozQixJQUFRZzNCLEdBRTFCLE1BQWhCcG9DLEVBQVFvMkIsT0FDWnRLLEVBQU1zSyxLQUFTcDJCLEVBQVFvMkIsS0FBT2lTLEVBQVVqUyxLQUFTOFIsR0FHN0MsVUFBV2xvQyxFQUNmQSxFQUFRd29DLE1BQU0zckMsS0FBTXVLLEVBQU0wa0IsSUFHQSxpQkFBZEEsRUFBTTFhLE1BQ2pCMGEsRUFBTTFhLEtBQU8sTUFFYSxpQkFBZjBhLEVBQU1zSyxPQUNqQnRLLEVBQU1zSyxNQUFRLE1BRWZtUyxFQUFRN25DLElBQUtvckIsTUFLaEI1bEIsRUFBT0csR0FBRzRCLE9BQVEsQ0FHakI4L0IsT0FBUSxTQUFVL25DLEdBR2pCLEdBQUtxSCxVQUFVeEgsT0FDZCxZQUFtQjRJLElBQVp6SSxFQUNObUUsS0FDQUEsS0FBSzhDLE1BQU0sU0FBVXZLLEdBQ3BCd0osRUFBTzZoQyxPQUFPQyxVQUFXN2pDLEtBQU1uRSxFQUFTdEQsTUFJM0MsSUFBSStyQyxFQUFNQyxFQUNUdGhDLEVBQU9qRCxLQUFNLEdBRWQsT0FBTWlELEVBUUFBLEVBQUtxdUIsaUJBQWlCNTFCLFFBSzVCNG9DLEVBQU9yaEMsRUFBSzh1Qix3QkFDWndTLEVBQU10aEMsRUFBS3dILGNBQWN1QyxZQUNsQixDQUNOQyxJQUFLcTNCLEVBQUtyM0IsSUFBTXMzQixFQUFJQyxZQUNwQnZTLEtBQU1xUyxFQUFLclMsS0FBT3NTLEVBQUlFLGNBUmYsQ0FBRXgzQixJQUFLLEVBQUdnbEIsS0FBTSxRQVR4QixHQXVCRDVELFNBQVUsV0FDVCxHQUFNcnVCLEtBQU0sR0FBWixDQUlBLElBQUkwa0MsRUFBY2QsRUFBUW5pQyxFQUN6QndCLEVBQU9qRCxLQUFNLEdBQ2Iya0MsRUFBZSxDQUFFMTNCLElBQUssRUFBR2dsQixLQUFNLEdBR2hDLEdBQXdDLFVBQW5DbHdCLEVBQU94RixJQUFLMEcsRUFBTSxZQUd0QjJnQyxFQUFTM2dDLEVBQUs4dUIsNEJBRVIsQ0FPTixJQU5BNlIsRUFBUzVqQyxLQUFLNGpDLFNBSWRuaUMsRUFBTXdCLEVBQUt3SCxjQUNYaTZCLEVBQWV6aEMsRUFBS3loQyxjQUFnQmpqQyxFQUFJb0wsZ0JBQ2hDNjNCLElBQ0xBLElBQWlCampDLEVBQUkyZixNQUFRc2pCLElBQWlCampDLEVBQUlvTCxrQkFDVCxXQUEzQzlLLEVBQU94RixJQUFLbW9DLEVBQWMsYUFFMUJBLEVBQWVBLEVBQWF2bEMsV0FFeEJ1bEMsR0FBZ0JBLElBQWlCemhDLEdBQWtDLElBQTFCeWhDLEVBQWExakMsWUFHMUQyakMsRUFBZTVpQyxFQUFRMmlDLEdBQWVkLFVBQ3pCMzJCLEtBQU9sTCxFQUFPeEYsSUFBS21vQyxFQUFjLGtCQUFrQixHQUNoRUMsRUFBYTFTLE1BQVFsd0IsRUFBT3hGLElBQUttb0MsRUFBYyxtQkFBbUIsSUFLcEUsTUFBTyxDQUNOejNCLElBQUsyMkIsRUFBTzMyQixJQUFNMDNCLEVBQWExM0IsSUFBTWxMLEVBQU94RixJQUFLMEcsRUFBTSxhQUFhLEdBQ3BFZ3ZCLEtBQU0yUixFQUFPM1IsS0FBTzBTLEVBQWExUyxLQUFPbHdCLEVBQU94RixJQUFLMEcsRUFBTSxjQUFjLE1BYzFFeWhDLGFBQWMsV0FDYixPQUFPMWtDLEtBQUtnRCxLQUFLLFdBR2hCLElBRkEsSUFBSTBoQyxFQUFlMWtDLEtBQUswa0MsYUFFaEJBLEdBQTJELFdBQTNDM2lDLEVBQU94RixJQUFLbW9DLEVBQWMsYUFDakRBLEVBQWVBLEVBQWFBLGFBRzdCLE9BQU9BLEdBQWdCNzNCLFNBTTFCOUssRUFBT2UsS0FBTSxDQUFFcXdCLFdBQVksY0FBZUQsVUFBVyxnQkFBaUIsU0FBVXRhLEVBQVE4RixHQUN2RixJQUFJelIsRUFBTSxnQkFBa0J5UixFQUU1QjNjLEVBQU9HLEdBQUkwVyxHQUFXLFNBQVVsWCxHQUMvQixPQUFPMmIsRUFBUXJkLE1BQU0sU0FBVWlELEVBQU0yVixFQUFRbFgsR0FHNUMsSUFBSTZpQyxFQU9KLEdBTkt0akMsRUFBVWdDLEdBQ2RzaEMsRUFBTXRoQyxFQUN1QixJQUFsQkEsRUFBS2pDLFdBQ2hCdWpDLEVBQU10aEMsRUFBSytKLGtCQUdDMUksSUFBUjVDLEVBQ0osT0FBTzZpQyxFQUFNQSxFQUFLN2xCLEdBQVN6YixFQUFNMlYsR0FHN0IyckIsRUFDSkEsRUFBSUssU0FDRjMzQixFQUFZczNCLEVBQUlFLFlBQVYvaUMsRUFDUHVMLEVBQU12TCxFQUFNNmlDLEVBQUlDLGFBSWpCdmhDLEVBQU0yVixHQUFXbFgsSUFFaEJrWCxFQUFRbFgsRUFBS3dCLFVBQVV4SCxZQVU1QnFHLEVBQU9lLEtBQU0sQ0FBRSxNQUFPLFNBQVUsU0FBVXBELEVBQUlnZixHQUM3QzNjLEVBQU8wdkIsU0FBVS9TLEdBQVM4TyxHQUFjMXNCLEVBQVFpdUIsZUFDL0MsU0FBVTlyQixFQUFNaXFCLEdBQ2YsR0FBS0EsRUFJSixPQUhBQSxFQUFXRCxHQUFRaHFCLEVBQU15YixHQUdsQmdPLEdBQVUzaEIsS0FBTW1pQixHQUN0Qm5yQixFQUFRa0IsR0FBT29yQixXQUFZM1AsR0FBUyxLQUNwQ3dPLFFBUUxuckIsRUFBT2UsS0FBTSxDQUFFK2hDLE9BQVEsU0FBVUMsTUFBTyxVQUFXLFNBQVVoc0MsRUFBTXFJLEdBQ2xFWSxFQUFPZSxLQUFNLENBQUVxdkIsUUFBUyxRQUFVcjVCLEVBQU1tZixRQUFTOVcsRUFBTSxHQUFJLFFBQVVySSxJQUNwRSxTQUFVaXNDLEVBQWNDLEdBR3hCampDLEVBQU9HLEdBQUk4aUMsR0FBYSxTQUFVOVMsRUFBUTE0QixHQUN6QyxJQUFJOGpCLEVBQVlwYSxVQUFVeEgsU0FBWXFwQyxHQUFrQyxrQkFBWDdTLEdBQzVEbEIsRUFBUStULEtBQTZCLElBQVg3UyxJQUE2QixJQUFWMTRCLEVBQWlCLFNBQVcsVUFFMUUsT0FBTzZqQixFQUFRcmQsTUFBTSxTQUFVaUQsRUFBTTlCLEVBQU0zSCxHQUMxQyxJQUFJaUksRUFFSixPQUFLUixFQUFVZ0MsR0FHeUIsSUFBaEMraEMsRUFBU3ZrQyxRQUFTLFNBQ3hCd0MsRUFBTSxRQUFVbkssR0FDaEJtSyxFQUFLdEksU0FBU2tTLGdCQUFpQixTQUFXL1QsR0FJckIsSUFBbEJtSyxFQUFLakMsVUFDVFMsRUFBTXdCLEVBQUs0SixnQkFJSnJJLEtBQUtpc0IsSUFDWHh0QixFQUFLbWUsS0FBTSxTQUFXdG9CLEdBQVEySSxFQUFLLFNBQVczSSxHQUM5Q21LLEVBQUttZSxLQUFNLFNBQVd0b0IsR0FBUTJJLEVBQUssU0FBVzNJLEdBQzlDMkksRUFBSyxTQUFXM0ksVUFJRHdMLElBQVY5SyxFQUdOdUksRUFBT3hGLElBQUswRyxFQUFNOUIsRUFBTTZ2QixHQUd4Qmp2QixFQUFPaEYsTUFBT2tHLEVBQU05QixFQUFNM0gsRUFBT3czQixLQUNoQzd2QixFQUFNbWMsRUFBWTRVLE9BQVM1dEIsRUFBV2daLFVBTTVDdmIsRUFBT2UsS0FBTSxDQUNaLFlBQ0EsV0FDQSxlQUNBLFlBQ0EsY0FDQSxhQUNFLFNBQVVwRCxFQUFJeUIsR0FDaEJZLEVBQU9HLEdBQUlmLEdBQVMsU0FBVWUsR0FDN0IsT0FBT2xDLEtBQUtta0IsR0FBSWhqQixFQUFNZSxPQU94QkgsRUFBT0csR0FBRzRCLE9BQVEsQ0FFakIvSixLQUFNLFNBQVVxcUIsRUFBTzNGLEVBQU12YyxHQUM1QixPQUFPbEMsS0FBS21rQixHQUFJQyxFQUFPLEtBQU0zRixFQUFNdmMsSUFFcEMraUMsT0FBUSxTQUFVN2dCLEVBQU9saUIsR0FDeEIsT0FBT2xDLEtBQUt3a0IsSUFBS0osRUFBTyxLQUFNbGlCLElBRy9CZ2pDLFNBQVUsU0FBVWxqQyxFQUFVb2lCLEVBQU8zRixFQUFNdmMsR0FDMUMsT0FBT2xDLEtBQUtta0IsR0FBSUMsRUFBT3BpQixFQUFVeWMsRUFBTXZjLElBRXhDaWpDLFdBQVksU0FBVW5qQyxFQUFVb2lCLEVBQU9saUIsR0FHdEMsT0FBNEIsSUFBckJnQixVQUFVeEgsT0FDaEJzRSxLQUFLd2tCLElBQUt4aUIsRUFBVSxNQUNwQmhDLEtBQUt3a0IsSUFBS0osRUFBT3BpQixHQUFZLEtBQU1FLElBR3JDa2pDLE1BQU8sU0FBVUMsRUFBUUMsR0FDeEIsT0FBT3RsQyxLQUFLK3BCLFdBQVlzYixHQUFTcmIsV0FBWXNiLEdBQVNELE1BSXhEdGpDLEVBQU9lLEtBQU0sd0xBRWdEK0MsTUFBTyxNQUNuRSxTQUFVbkcsRUFBSTVHLEdBR2JpSixFQUFPRyxHQUFJcEosR0FBUyxTQUFVMmxCLEVBQU12YyxHQUNuQyxPQUFPZ0IsVUFBVXhILE9BQVMsRUFDekJzRSxLQUFLbWtCLEdBQUlyckIsRUFBTSxLQUFNMmxCLEVBQU12YyxHQUMzQmxDLEtBQUtpbEIsUUFBU25zQixPQVNsQixJQUFJb1AsR0FBUSxxQ0FNWm5HLEVBQU93akMsTUFBUSxTQUFVcmpDLEVBQUlELEdBQzVCLElBQUkyTCxFQUFLdUQsRUFBTW8wQixFQVVmLEdBUndCLGlCQUFadGpDLElBQ1gyTCxFQUFNMUwsRUFBSUQsR0FDVkEsRUFBVUMsRUFDVkEsRUFBSzBMLEdBS0E3TSxFQUFZbUIsR0FhbEIsT0FSQWlQLEVBQU85USxFQUFNM0gsS0FBTXdLLFVBQVcsSUFDOUJxaUMsRUFBUSxXQUNQLE9BQU9yakMsRUFBRzFCLE1BQU95QixHQUFXakMsS0FBTW1SLEVBQUsvVSxPQUFRaUUsRUFBTTNILEtBQU13SyxlQUl0RHlDLEtBQU96RCxFQUFHeUQsS0FBT3pELEVBQUd5RCxNQUFRNUQsRUFBTzRELE9BRWxDNC9CLEdBR1J4akMsRUFBT3lqQyxVQUFZLFNBQVVDLEdBQ3ZCQSxFQUNKMWpDLEVBQU9rYixZQUVQbGIsRUFBT2dWLE9BQU8sSUFHaEJoVixFQUFPc0MsUUFBVUQsTUFBTUMsUUFDdkJ0QyxFQUFPMmpDLFVBQVk5bUMsS0FBS3FnQixNQUN4QmxkLEVBQU9nSSxTQUFXQSxFQUNsQmhJLEVBQU9oQixXQUFhQSxFQUNwQmdCLEVBQU9kLFNBQVdBLEVBQ2xCYyxFQUFPa2MsVUFBWUEsRUFDbkJsYyxFQUFPWixLQUFPVyxFQUVkQyxFQUFPaW1CLElBQU1qaEIsS0FBS2loQixJQUVsQmptQixFQUFPNGpDLFVBQVksU0FBVXJwQyxHQUs1QixJQUFJNkUsRUFBT1ksRUFBT1osS0FBTTdFLEdBQ3hCLE9BQWtCLFdBQVQ2RSxHQUE4QixXQUFUQSxLQUs1QnlrQyxNQUFPdHBDLEVBQU1veUIsV0FBWXB5QixLQUc1QnlGLEVBQU84akMsS0FBTyxTQUFVamtDLEdBQ3ZCLE9BQWUsTUFBUkEsRUFDTixJQUNFQSxFQUFPLElBQUs4QyxRQUFTd0QsR0FBTyxVQXFCOUIsS0FGcUIsRUFBRixXQUNuQixPQUFPbkcsR0FDUCxRQUZpQixPQUVqQixhQU1GLElBR0MrakMsR0FBVXByQyxFQUFPcUgsT0FHakJna0MsR0FBS3JyQyxFQUFPc3JDLEVBd0JiLE9BdEJBamtDLEVBQU9ra0MsV0FBYSxTQUFVL2hDLEdBUzdCLE9BUkt4SixFQUFPc3JDLElBQU1qa0MsSUFDakJySCxFQUFPc3JDLEVBQUlELElBR1A3aEMsR0FBUXhKLEVBQU9xSCxTQUFXQSxJQUM5QnJILEVBQU9xSCxPQUFTK2pDLElBR1YvakMsUUFNaUIsSUFBYjlCLElBQ1h2RixFQUFPcUgsT0FBU3JILEVBQU9zckMsRUFBSWprQyxHQU1yQkEsTSwrQkN0blZQLHVCLG1wQkFNTW1rQyxFLFdBc0JKLFdBQVlDLEVBQVd6c0MsSSw0RkFBTSwrcUJBVGpCLENBQ1Ywc0MsVUFBVyxFQUNYQyxXQUFZLEVBQ1pDLFVBQVcsRUFDWEMsaUJBQWFqaUMsRUFDYmtpQyxrQkFBY2xpQyxFQUNkbWlDLGlCQUFhbmlDLEtBSWIsRUFBQXRFLEtBQUEsRUFBa0JtbUMsR0FDbEIsRUFBQW5tQyxLQUFBLEVBQWdCbW1DLEVBQVUxNEIsS0FBSyw2QkFDL0IsRUFBQXpOLEtBQUEsRUFBb0JtbUMsRUFBVTE0QixLQUFLLDJDQUNuQyxFQUFBek4sS0FBQSxFQUFpQm1tQyxFQUFVMTRCLEtBQUssaUNBQ2hDLEVBQUF6TixLQUFBLEVBQWdCbW1DLEVBQVUxNEIsS0FBSywrQkFDL0IsRUFBQXpOLEtBQUEsRUFBZW1tQyxFQUFVMTRCLEtBQUssbURBQzlCLEVBQUF6TixLQUFBLEVBQWNtbUMsRUFBVTE0QixLQUFLLGtEQUM3QixFQUFBek4sS0FBQSxFQUFnQm1tQyxFQUFVMTRCLEtBQUssb0RBQy9CLEVBQUF6TixLQUFBLEVBQWVtbUMsRUFBVTE0QixLQUFLLDBDQUM5QixFQUFBek4sS0FBQSxFQUFnQm1tQyxFQUFVMTRCLEtBQUssMkNBRS9CLEVBQUF6TixLQUFBLEdBQWFta0IsR0FBRyxRQUFTLEVBQUFua0IsS0FBQSxLQUFrQmpHLEtBQUtpRyxPQUNoRCxFQUFBQSxLQUFBLEdBQWNta0IsR0FBRyxRQUFTbmtCLEtBQUswbUMsYUFBYTNzQyxLQUFLaUcsT0FDakQsRUFBQUEsS0FBQSxHQUFjbWtCLEdBQUcsUUFBU25rQixLQUFLMG1DLGFBQWEzc0MsS0FBS2lHLE9BQ2pELEVBQUFBLEtBQUEsR0FBYW9ELEdBQUcsR0FBRytnQixHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQW1CakcsS0FBS2lHLE9BQ3ZELEVBQUFBLEtBQUEsR0FBYW9ELEdBQUcsR0FBRytnQixHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQW9CakcsS0FBS2lHLE9BQ3hELEVBQUFBLEtBQUEsR0FBYW9ELEdBQUcsR0FBRytnQixHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQW1CakcsS0FBS2lHLE9BQ3ZELEVBQUFBLEtBQUEsR0FBWW9ELEdBQUcsR0FBRytnQixHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQW1CakcsS0FBS2lHLE9BQ3RELEVBQUFBLEtBQUEsR0FBWW9ELEdBQUcsR0FBRytnQixHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQW9CakcsS0FBS2lHLE9BQ3ZELEVBQUFBLEtBQUEsR0FBWW9ELEdBQUcsR0FBRytnQixHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQW1CakcsS0FBS2lHLE9BRXREckYsU0FBU3VTLGlCQUFpQixVQUFXLEVBQUFsTixLQUFBLEtBQW1CakcsS0FBS2lHLE9BRWhELFNBQVR0RyxFQUFpQixFQUFBc0csS0FBQSxVQUFBQSxNQUNoQixFQUFBQSxLQUFBLFVBQUFBLE1BQ0xBLEtBQUswbUMsZSw4REFJTCxFQUFBMW1DLEtBQUEsR0FBY2s1QixZQUFZLHlDLHFiQUkxQixFQUFBbDVCLEtBQUEsR0FBY3lOLEtBQUssZ0RBQWdEK1QsT0FDbkUsRUFBQXhoQixLQUFBLEdBQWU0QixLQUFLLG1CQUNwQixFQUFBNUIsS0FBQSxHQUFrQm9ELEdBQUcsR0FBR3hCLEtBQUssV0FDN0IsRUFBQTVCLEtBQUEsR0FBa0JvRCxHQUFHLEdBQUd4QixLQUFLLFdBQzdCLEVBQUE1QixLQUFBLEdBQWtCb0QsR0FBRyxHQUFHeEIsS0FBSyxrQkFDN0IsRUFBQTVCLEtBQUEsSUFBeUJBLEtBQXpCLE1BQ0EsRUFBQUEsS0FBQSxJQUFtQkEsS0FBbkIsTyxhQUlBLEVBQUFBLEtBQUEsR0FBZTRCLEtBQUssa0JBQ3BCLEVBQUE1QixLQUFBLEdBQWtCb0QsR0FBRyxHQUFHeEIsS0FBSyxZQUM3QixFQUFBNUIsS0FBQSxHQUFrQm9ELEdBQUcsR0FBR3hCLEtBQUssUUFDN0IsRUFBQTVCLEtBQUEsR0FBa0JvRCxHQUFHLEdBQUd4QixLQUFLLFlBQzdCLEVBQUE1QixLQUFBLElBQXlCQSxLQUF6QixNQUNBLEVBQUFBLEtBQUEsSUFBbUJBLEtBQW5CLE8sYUFJQSxPQUFRLEVBQUFBLEtBQUEsR0FBZXVtQyxhQUNyQixLQUFLLEVBQ0MsRUFBQXZtQyxLQUFBLEdBQWVvbUMsVUFBWSxHQUFHLEVBQUFwbUMsS0FBQSxHQUFlb21DLFlBQ2pELE1BQ0YsVUFBSzloQyxFQUNILE1BQ0YsS0FBSyxFQUNDLEVBQUF0RSxLQUFBLEdBQWVvbUMsVUFBWSxHQUFHLEVBQUFwbUMsS0FBQSxHQUFlb21DLFlBRXJELEdBQUksRUFBQXBtQyxLQUFBLEdBQWVvbUMsVUFBWSxFQUM3QixPQUFRLEVBQUFwbUMsS0FBQSxHQUFld21DLGNBQ3JCLEtBQUssRUFDQyxFQUFBeG1DLEtBQUEsR0FBZXFtQyxXQUFhLEdBQUcsRUFBQXJtQyxLQUFBLEdBQWVxbUMsYUFDbEQsTUFDRixVQUFLL2hDLEVBQ0gsTUFDRixLQUFLLEVBQ0MsRUFBQXRFLEtBQUEsR0FBZXFtQyxXQUFhLEdBQUcsRUFBQXJtQyxLQUFBLEdBQWVxbUMsa0JBR3RELEVBQUFybUMsS0FBQSxHQUFlcW1DLFdBQWEsRUFDNUIsRUFBQXJtQyxLQUFBLEdBQWVzbUMsVUFBWSxFQUU3QixHQUFJLEVBQUF0bUMsS0FBQSxHQUFlb21DLFVBQVksR0FBSyxFQUFBcG1DLEtBQUEsR0FBZXFtQyxXQUFhLEVBQzlELE9BQVEsRUFBQXJtQyxLQUFBLEdBQWV5bUMsYUFDckIsS0FBSyxFQUNDLEVBQUF6bUMsS0FBQSxHQUFlc21DLFVBQVksR0FBRyxFQUFBdG1DLEtBQUEsR0FBZXNtQyxZQUNqRCxNQUNGLFVBQUtoaUMsRUFDSCxNQUNGLEtBQUssRUFDOEIsSUFBN0IsRUFBQXRFLEtBQUEsR0FBZXNtQyxXQUFpQixFQUFBdG1DLEtBQUEsR0FBZXNtQyxpQkFFbEQsRUFBQXRtQyxLQUFBLEdBQWVzbUMsVUFBWSxFQUNsQyxFQUFBdG1DLEtBQUEsR0FBZXVtQyxpQkFBY2ppQyxFQUM3QixFQUFBdEUsS0FBQSxHQUFld21DLGtCQUFlbGlDLEVBQzlCLEVBQUF0RSxLQUFBLEdBQWV5bUMsaUJBQWNuaUMsRyxhQUk3QixJQUFJcWlDLEVBQWtCLEdBSXRCLE9BSEFYLEVBQUUsRUFBQWhtQyxLQUFBLEdBQWMsSUFBSTRCLEtBQUssRUFBQTVCLEtBQUEsR0FBZW9tQyxXQUN4Q0osRUFBRSxFQUFBaG1DLEtBQUEsR0FBYyxJQUFJNEIsS0FBSyxFQUFBNUIsS0FBQSxHQUFlcW1DLFlBQ3hDTCxFQUFFLEVBQUFobUMsS0FBQSxHQUFjLElBQUk0QixLQUFLLEVBQUE1QixLQUFBLEdBQWVzbUMsV0FDaEMsRUFBQXRtQyxLQUFBLEdBQWVvbUMsV0FDckIsS0FBSyxFQUNILEVBQUFwbUMsS0FBQSxHQUFhekQsSUFBSSxhQUFjLFVBQy9Cb3FDLEVBQWtCLGtCQUNsQixNQUNGLEtBQUssRUFDSCxFQUFBM21DLEtBQUEsR0FBYXpELElBQUksYUFBYyxXQUMvQm9xQyxFQUFrQixHQUFILE9BQU0sRUFBQTNtQyxLQUFBLEdBQWVvbUMsVUFBckIsWUFDZixNQUNGLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNITyxFQUFrQixHQUFILE9BQU0sRUFBQTNtQyxLQUFBLEdBQWVvbUMsVUFBckIsWUFDZixNQUNGLEtBQUssRUFDSE8sRUFBa0IsR0FBSCxPQUFNLEVBQUEzbUMsS0FBQSxHQUFlb21DLFVBQXJCLFdBRW5CLE9BQVEsRUFBQXBtQyxLQUFBLEdBQWVxbUMsWUFDckIsS0FBSyxFQUNITSxHQUFvQyxLQUFILE9BQVEsRUFBQTNtQyxLQUFBLEdBQWVxbUMsV0FBdkIsWUFDakMsTUFDRixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDSE0sR0FBb0MsS0FBSCxPQUFRLEVBQUEzbUMsS0FBQSxHQUFlcW1DLFdBQXZCLFlBQ2pDLE1BQ0YsS0FBSyxFQUNITSxHQUFvQyxLQUFILE9BQVEsRUFBQTNtQyxLQUFBLEdBQWVxbUMsV0FBdkIsYUFFckMsRUFBQXJtQyxLQUFBLEdBQWU0QixLQUFLK2tDLEksYUFJcEIsSUFBSUMsRUFBb0IsRUFBQTVtQyxLQUFBLEdBQWVvbUMsVUFBWSxFQUFBcG1DLEtBQUEsR0FBZXFtQyxXQUNsRSxPQUFRLEVBQUFybUMsS0FBQSxHQUFldW1DLGFBQ3JCLEtBQUssRUFDQ0ssRUFBb0IsR0FBRyxFQUFBNW1DLEtBQUEsR0FBZW9tQyxZQUMxQyxNQUNGLFVBQUs5aEMsRUFDSCxNQUNGLEtBQUssRUFDQyxFQUFBdEUsS0FBQSxHQUFlb21DLFVBQVksR0FBRyxFQUFBcG1DLEtBQUEsR0FBZW9tQyxZQUdyRCxPQURBUSxFQUFvQixFQUFBNW1DLEtBQUEsR0FBZW9tQyxVQUFZLEVBQUFwbUMsS0FBQSxHQUFlcW1DLFdBQ3RELEVBQUFybUMsS0FBQSxHQUFld21DLGNBQ3JCLEtBQUssRUFDQ0ksRUFBb0IsR0FBRyxFQUFBNW1DLEtBQUEsR0FBZXFtQyxhQUMxQyxNQUNGLFVBQUsvaEMsRUFDSCxNQUNGLEtBQUssRUFDQyxFQUFBdEUsS0FBQSxHQUFlcW1DLFdBQWEsR0FBRyxFQUFBcm1DLEtBQUEsR0FBZXFtQyxhQUd0RCxJQURBTyxFQUFvQixFQUFBNW1DLEtBQUEsR0FBZW9tQyxVQUFZLEVBQUFwbUMsS0FBQSxHQUFlcW1DLFlBQ3RDLEVBQ3RCLE9BQVEsRUFBQXJtQyxLQUFBLEdBQWV5bUMsYUFDckIsS0FBSyxFQUNDLEVBQUF6bUMsS0FBQSxHQUFlc21DLFVBQVksR0FBRyxFQUFBdG1DLEtBQUEsR0FBZXNtQyxZQUNqRCxNQUNGLFVBQUtoaUMsRUFDSCxNQUNGLEtBQUssRUFDOEIsSUFBN0IsRUFBQXRFLEtBQUEsR0FBZXNtQyxXQUFpQixFQUFBdG1DLEtBQUEsR0FBZXNtQyxpQkFFbEQsRUFBQXRtQyxLQUFBLEdBQWVzbUMsVUFBWSxFQUNsQyxFQUFBdG1DLEtBQUEsR0FBZXVtQyxpQkFBY2ppQyxFQUM3QixFQUFBdEUsS0FBQSxHQUFld21DLGtCQUFlbGlDLEVBQzlCLEVBQUF0RSxLQUFBLEdBQWV5bUMsaUJBQWNuaUMsRyxhQUk3QixJQUFJcWlDLEVBQWtCLEdBQ2xCQyxFQUFvQixFQUFBNW1DLEtBQUEsR0FBZW9tQyxVQUFZLEVBQUFwbUMsS0FBQSxHQUFlcW1DLFdBSWxFLE9BSEFMLEVBQUUsRUFBQWhtQyxLQUFBLEdBQWMsSUFBSTRCLEtBQUssRUFBQTVCLEtBQUEsR0FBZW9tQyxXQUN4Q0osRUFBRSxFQUFBaG1DLEtBQUEsR0FBYyxJQUFJNEIsS0FBSyxFQUFBNUIsS0FBQSxHQUFlcW1DLFlBQ3hDTCxFQUFFLEVBQUFobUMsS0FBQSxHQUFjLElBQUk0QixLQUFLLEVBQUE1QixLQUFBLEdBQWVzbUMsV0FDaENNLEdBQ04sS0FBSyxFQUNILEVBQUE1bUMsS0FBQSxHQUFhekQsSUFBSSxhQUFjLFVBQy9Cb3FDLEVBQWtCLGlCQUNsQixNQUNGLEtBQUssRUFDSCxFQUFBM21DLEtBQUEsR0FBYXpELElBQUksYUFBYyxXQUMvQm9xQyxFQUFrQixHQUFILE9BQU1DLEVBQU4sVUFDZixNQUNGLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNIRCxFQUFrQixHQUFILE9BQU1DLEVBQU4sVUFDZixNQUNGLEtBQUssRUFDSEQsRUFBa0IsR0FBSCxPQUFNQyxFQUFOLFdBRW5CLE9BQVEsRUFBQTVtQyxLQUFBLEdBQWVzbUMsV0FDckIsS0FBSyxFQUNISyxHQUFvQyxLQUFILE9BQVEsRUFBQTNtQyxLQUFBLEdBQWVzbUMsVUFBdkIsYUFDakMsTUFDRixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDSEssR0FBb0MsS0FBSCxPQUFRLEVBQUEzbUMsS0FBQSxHQUFlc21DLFVBQXZCLGFBQ2pDLE1BQ0YsS0FBSyxFQUNISyxHQUFvQyxLQUFILE9BQVEsRUFBQTNtQyxLQUFBLEdBQWVzbUMsVUFBdkIsY0FFckMsRUFBQXRtQyxLQUFBLEdBQWU0QixLQUFLK2tDLEksYUFJcEIsT0FBUSxFQUFBM21DLEtBQUEsR0FBZW9tQyxXQUNyQixLQUFLLEVBQ0hKLEVBQUUsRUFBQWhtQyxLQUFBLEdBQWEsSUFBSTBlLEtBQUssWUFBWSxHQUNwQyxNQUNGLEtBQUssRUFDSHNuQixFQUFFLEVBQUFobUMsS0FBQSxHQUFhLElBQUkwZSxLQUFLLFlBQVksR0FFeEMsT0FBUSxFQUFBMWUsS0FBQSxHQUFlcW1DLFlBQ3JCLEtBQUssRUFDSEwsRUFBRSxFQUFBaG1DLEtBQUEsR0FBYSxJQUFJMGUsS0FBSyxZQUFZLEdBQ3BDLE1BQ0YsS0FBSyxFQUNIc25CLEVBQUUsRUFBQWhtQyxLQUFBLEdBQWEsSUFBSTBlLEtBQUssWUFBWSxHQUV4QyxPQUFRLEVBQUExZSxLQUFBLEdBQWVzbUMsV0FDckIsS0FBSyxFQUNITixFQUFFLEVBQUFobUMsS0FBQSxHQUFhLElBQUkwZSxLQUFLLFlBQVksR0FDcEMsTUFDRixLQUFLLEVBQ0hzbkIsRUFBRSxFQUFBaG1DLEtBQUEsR0FBYSxJQUFJMGUsS0FBSyxZQUFZLEssYUFLeEMsRUFBQTFlLEtBQUEsR0FBZXVtQyxhQUFjLEVBQzdCLEVBQUF2bUMsS0FBQSxRQUFBQSxNQUNBLEVBQUFBLEtBQUEsUUFBQUEsTUFDQSxFQUFBQSxLQUFBLFVBQUFBLE8sYUFJQSxFQUFBQSxLQUFBLEdBQWV1bUMsYUFBYyxFQUM3QixFQUFBdm1DLEtBQUEsUUFBQUEsTUFDQSxFQUFBQSxLQUFBLFFBQUFBLE1BQ0EsRUFBQUEsS0FBQSxVQUFBQSxPLGFBSUEsRUFBQUEsS0FBQSxHQUFld21DLGNBQWUsRUFDOUIsRUFBQXhtQyxLQUFBLFFBQUFBLE1BQ0EsRUFBQUEsS0FBQSxRQUFBQSxNQUNBLEVBQUFBLEtBQUEsVUFBQUEsTyxhQUlBLEVBQUFBLEtBQUEsR0FBZXdtQyxjQUFlLEVBQzlCLEVBQUF4bUMsS0FBQSxRQUFBQSxNQUNBLEVBQUFBLEtBQUEsUUFBQUEsTUFDQSxFQUFBQSxLQUFBLFVBQUFBLE8sYUFJQSxFQUFBQSxLQUFBLEdBQWV5bUMsYUFBYyxFQUM3QixFQUFBem1DLEtBQUEsUUFBQUEsTUFDQSxFQUFBQSxLQUFBLFFBQUFBLE1BQ0EsRUFBQUEsS0FBQSxVQUFBQSxPLGFBSUEsRUFBQUEsS0FBQSxHQUFleW1DLGFBQWMsRUFDN0IsRUFBQXptQyxLQUFBLFFBQUFBLE1BQ0EsRUFBQUEsS0FBQSxRQUFBQSxNQUNBLEVBQUFBLEtBQUEsVUFBQUEsTyxhQUlBLEVBQUFBLEtBQUEsR0FBZW9tQyxVQUFZLEVBQzNCLEVBQUFwbUMsS0FBQSxHQUFlcW1DLFdBQWEsRUFDNUIsRUFBQXJtQyxLQUFBLEdBQWVzbUMsVUFBWSxFQUMzQixFQUFBdG1DLEtBQUEsUUFBQUEsTUFDQSxFQUFBQSxLQUFBLFVBQUFBLE8sV0FHWTRpQyxHQUNQQSxFQUFJN25DLE9BQU95YyxRQUFRLHVCQUN0QixFQUFBeFgsS0FBQSxHQUFjNDRCLFNBQVMscUNBS2RzTixRLDhDQzFUZixXLHc1QkF5Q0ksRUFBQWxtQyxLQUFBLEdBQWNpbEIsUUFBZCxFQUFzQmpsQixLQUF0QixLLGFBSUFBLEtBQUs2bUMsUUFBVSxFQUNmLEVBQUE3bUMsS0FBQSxHQUFpQjhtQyxRQUFqQixFQUF5QjltQyxLQUF6QixJQUNBQSxLQUFLK21DLGdCQUFhemlDLEVBQ2xCdEUsS0FBS2duQyxrQkFBZTFpQyxFQUNwQixFQUFBdEUsS0FBQSxVQUFBQSxNQUNBLEVBQUFBLEtBQUEsVUFBQUEsTUFDQSxFQUFBQSxLQUFBLFVBQUFBLE1BQ0EsRUFBQUEsS0FBQSxHQUFjaWxCLFFBQWQsRUFBc0JqbEIsS0FBdEIsSyxhQUlBLEVBQUFBLEtBQUEsR0FBYTRCLEtBQWIsVUFBcUIsRUFBQTVCLEtBQUEsR0FBZ0IsRUFBQUEsS0FBQSxHQUFpQmluQyxZQUF0RCxZQUFxRSxFQUFBam5DLEtBQUEsR0FBaUJrbkMsaUIsYUFJdEYsRUFBQWxuQyxLQUFBLEdBQWlCbW5DLFNBQVMsRUFBQW5uQyxLQUFBLEdBQWlCaW5DLFdBQWEsR0FDeEQsRUFBQWpuQyxLQUFBLFVBQUFBLE8sYUFJQSxFQUFBQSxLQUFBLEdBQWlCbW5DLFNBQVMsRUFBQW5uQyxLQUFBLEdBQWlCaW5DLFdBQWEsR0FDeEQsRUFBQWpuQyxLQUFBLFVBQUFBLE8sV0FHVTRpQyxHQUNWLE9BQVE1aUMsS0FBSzZtQyxTQUNYLEtBQUssRUFDSCxFQUFBN21DLEtBQUEsRUFBeUJBLEtBQUsrbUMsWUFDOUIvbUMsS0FBSyttQyxXQUFhbkUsRUFBSWpjLGNBQWM5a0IsYUFBYSxrQkFDakQsRUFBQTdCLEtBQUEsVUFBQUEsTUFDQUEsS0FBSzZtQyxVQUNMLEVBQUE3bUMsS0FBQSxHQUFjaWxCLFFBQWQsRUFBc0JqbEIsS0FBdEIsSUFDQSxNQUNGLEtBQUssRUFDSCxFQUFBQSxLQUFBLEVBQTJCQSxLQUFLZ25DLGNBQ2hDaG5DLEtBQUtnbkMsYUFBZXBFLEVBQUlqYyxjQUFjOWtCLGFBQWEsa0JBQ25ELEVBQUE3QixLQUFBLFVBQUFBLE1BQ0FBLEtBQUs2bUMsVUFDTCxFQUFBN21DLEtBQUEsR0FBY2lsQixRQUFkLEVBQXNCamxCLEtBQXRCLE0sYUFJVSxXQUNkLEVBQUFBLEtBQUEsR0FBaUI4QyxNQUFLLFNBQUN6RyxFQUFPK3FDLEdBQzVCLElBQU1yZixFQUFZcWYsRUFBS3ZsQyxhQUFhLGtCQUVwQmttQixHQUFhLEVBQUtnZixZQUFjaGYsR0FBYSxFQUFLaWYsY0FBZ0IsRUFBS0QsYUFBZSxFQUFLQyxhQUV6RyxJQUFJLEdBQWMzcUMsR0FBT2dyQyxVQUFVM3ZCLElBQUksMkJBRXZDLElBQUksR0FBY3JiLEdBQU9nckMsVUFBVXRwQyxPQUFPLDJCQUd6QmdxQixJQUFjLEVBQUtnZixZQUFjaGYsSUFBYyxFQUFLaWYsY0FFckVJLEVBQUtDLFVBQVUzdkIsSUFBSSxtQ0FDZnFRLElBQWMsRUFBS2dmLFdBQ3JCLElBQUksR0FBYzFxQyxHQUFPZ0IsYUFBYSxhQUFjLFNBRXBELElBQUksR0FBY2hCLEdBQU9nQixhQUFhLGFBQWMsVUFHdEQrcEMsRUFBS0MsVUFBVXRwQyxPQUFPLG1DQUN0QixJQUFJLEdBQWMxQixHQUFPbUMsZ0JBQWdCLGVBR3ZDdXBCLElBQWMzZSxPQUFPLElBQUQsSUFDdEJnK0IsRUFBS0MsVUFBVTN2QixJQUFJLGtDQUVuQjB2QixFQUFLQyxVQUFVdHBDLE9BQU8sc0MsYUFNMUIsSUFBTXVwQyxFQUFjLElBQUl2Z0MsS0FBSixFQUFTL0csS0FBVCxJQUNkdW5DLEVBQVFELEVBQVlMLFdBQzFCSyxFQUFZRSxRQUFRLEdBQ3BCLElBQUlDLEVBQVVILEVBQVlJLFNBQ1YsSUFBWkQsSUFBZUEsRUFBVSxHQUM3QkgsRUFBWUUsUUFBbUIsRUFBVkMsR0FFckIsRUFBQXpuQyxLQUFBLEdBQWlCOEMsTUFBSyxTQUFDekcsRUFBTytxQyxHQUM1QkUsRUFBWUUsUUFBUUYsRUFBWUssVUFBWSxHQUN4Q0wsRUFBWUwsYUFBZU0sRUFDN0JILEVBQUtDLFVBQVUzdkIsSUFBSSxvQ0FFbkIwdkIsRUFBS0MsVUFBVXRwQyxPQUFPLG9DQUV4QnFwQyxFQUFLL3BDLGFBQWEsaUJBQWtCaXFDLEVBQVlNLFdBQ2hEUixFQUFLNXRDLE1BQVE4dEMsRUFBWUssYUFFM0IsRUFBQTNuQyxLQUFBLFVBQUFBLE1BQ0EsRUFBQUEsS0FBQSxVQUFBQSxPQUlXNm5DLElBcEhiLFdBQVlDLEksNEZBQVMsbVNBZFQsc0JBY1MsOEJBYlIsdUJBYVEsOEJBWk4sMEJBWU0sOEJBWEwsMkJBV0ssOEJBVlAsSUFBSS9nQyxPQVVHLDhCQVRSLENBQUMsU0FBVSxVQUFXLE9BQVEsU0FBVSxNQUFPLE9BQVEsT0FBUSxTQUFVLFVBQVcsVUFBVyxTQUFVLGFBU2pHLDRHQU5OLEVBQUEvRyxLQUFBLEdBQWlCNG5DLFlBTVgsb0JBTFIsRUFBQTVuQyxLQUFBLEdBQWtCUixZQUtWLHNCQUpOLEVBQUFRLEtBQUEsR0FBa0JSLFlBSVosaUJBSFgsR0FJUixFQUFBUSxLQUFBLEVBQWdCOG5DLEdBQ2hCLEVBQUE5bkMsS0FBQSxFQUFlOG5DLEVBQVFyNkIsS0FBSyw2QkFDNUIsRUFBQXpOLEtBQUEsRUFBb0I4bkMsRUFBUXI2QixLQUFLLDZCQUVqQyxFQUFBek4sS0FBQSxFQUFtQjhuQyxFQUFRcjZCLEtBQUssMkJBQTJCMFcsR0FBRyxRQUFTLEVBQUFua0IsS0FBQSxLQUFpQmpHLEtBQUtpRyxRQUM3RjhuQyxFQUFRcjZCLEtBQUssZ0NBQWdDMFcsR0FBRyxRQUFTLEVBQUFua0IsS0FBQSxLQUFtQmpHLEtBQUtpRyxPQUNqRjhuQyxFQUFRcjZCLEtBQUssaUNBQWlDMFcsR0FBRyxRQUFTLEVBQUFua0IsS0FBQSxLQUFvQmpHLEtBQUtpRyxPQUNuRjhuQyxFQUFRcjZCLEtBQUssOEJBQThCMFcsR0FBRyxRQUFTLEVBQUFua0IsS0FBQSxLQUFZakcsS0FBS2lHLE9BQ3hFOG5DLEVBQVFyNkIsS0FBSywrQkFBK0IwVyxHQUFHLFFBQVMsRUFBQW5rQixLQUFBLEtBQWFqRyxLQUFLaUcsT0FFMUUsRUFBQUEsS0FBQSxVQUFBQSxRLGdCQ3JDSixJQUFJK25DLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxHQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLGtDQ2xCbkMsSUFBSUYsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLEdBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEksb0RDbEJwQixJQ0FBLElDQUEsSUNBQSxJQ0FBLElDQUEsSUNBQSxJQ0FBLElDQUEsSUNBQSxJQ0FBLElDQUEsSUNBQSxJQ0FBLEksc0JDQWYsSUFBSUYsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEksK0NDbEJuQyxPLGdCQ0FBLElBQUlGLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLCtDQ2xCbkMsaUIseXJEQU1NQyxFLHNRQVlKLFdBQVlDLEdBQVksYSw0RkFBQSxTQUN0QixjQUFNQSxFQUFXMTZCLEtBQUssaUJBREEsa1FBUFQsZUFPUyw4QkFOaEIsSUFBSTFHLE9BTVksK0JBSFIsSUFLZCxTQUFtQm9oQyxHQUNuQixTQUFvQkEsRUFBVzE2QixLQUFLLHdCQUNwQyxTQUFnQjA2QixFQUFXMTZCLEtBQUssOEJBQ2hDLFNBQWlCMDZCLEVBQVcxNkIsS0FBSywrQkFFakMwNkIsRUFBVzE2QixLQUFLLHdCQUF3QjBXLEdBQUcsUUFBUyxZQUFtQnBxQixLQUFuQixPQUNwRG91QyxFQUFXMTZCLEtBQUsseUJBQXlCMFcsR0FBRyxRQUFTLFlBQW1CcHFCLEtBQW5CLE9BQ3JEb3VDLEVBQVdoa0IsR0FBRyx3QkFBeUIsWUFBZ0JwcUIsS0FBaEIsT0FDdkNvdUMsRUFBV2hrQixHQUFHLHlCQUEwQixZQUFpQnBxQixLQUFqQixPQUN4Q291QyxFQUFXaGtCLEdBQUcsb0JBQXFCLFlBQXFCcHFCLEtBQXJCLE9BQ25Db3VDLEVBQVdoa0IsR0FBRyxxQkFBc0IsWUFBbUJwcUIsS0FBbkIsT0FFcENZLFNBQVN1UyxpQkFBaUIsVUFBVyxZQUFtQm5ULEtBQW5CLE9BRXJDLHVCQWhCc0IsRSxvREFxQnRCLE9BREEsRUFBQWlHLEtBQUEsR0FBVzhtQyxRQUFRc0IsT0FBT3BvQyxLQUFLZ25DLGNBQWdCb0IsT0FBT3BvQyxLQUFLK21DLGFBQ25ELEVBQUEvbUMsS0FBQSxHQUFXMm5DLFVBQVksTyw4QkFqQ1hFLEssbU1BcUNwQjduQyxLQUFLNm1DLFFBQVUsRUFDZixFQUFBN21DLEtBQUEsR0FBVzhtQyxRQUFRc0IsT0FBT3BvQyxLQUFLK21DLGFBQy9CLElBQU1zQixFQUFNLEdBQUgsT0FBTSxFQUFBcm9DLEtBQUEsR0FBVzJuQyxVQUFqQixjQUE4QjNuQyxLQUE5QixVQUE4QkEsS0FBZSxFQUFBQSxLQUFBLEdBQVdpbkMsWUFBeEQsWUFBdUUsRUFBQWpuQyxLQUFBLEdBQVdrbkMsZUFDM0YsRUFBQWxuQyxLQUFBLEdBQWM0QixLQUFLeW1DLEksYUFJbkJyb0MsS0FBSzZtQyxRQUFVLEVBQ2YsRUFBQTdtQyxLQUFBLEdBQVc4bUMsUUFBUXNCLE9BQU9wb0MsS0FBS2duQyxlQUMvQixJQUFNcUIsRUFBTSxHQUFILE9BQU0sRUFBQXJvQyxLQUFBLEdBQVcybkMsVUFBakIsY0FBOEIzbkMsS0FBOUIsVUFBOEJBLEtBQWUsRUFBQUEsS0FBQSxHQUFXaW5DLFlBQXhELFlBQXVFLEVBQUFqbkMsS0FBQSxHQUFXa25DLGVBQzNGLEVBQUFsbkMsS0FBQSxHQUFlNEIsS0FBS3ltQyxJLFdBR1pkLEdBR1IsUUFEQUEsRUFDWSxHQUNDLElBQUgsT0FBT0EsR0FFSEEsRyxhQUlkLEVBQUF2bkMsS0FBQSxHQUFjNEIsS0FBZCxFQUFtQjVCLEtBQW5CLElBQ0EsRUFBQUEsS0FBQSxHQUFlNEIsS0FBZixFQUFvQjVCLEtBQXBCLEssV0FHWTRpQyxHQUNaLEdBQUlBLEVBQUssQ0FDUCxHQUFJQSxFQUFJN25DLE9BQU95YyxRQUFRLHdCQU1yQixPQUxLLEVBQUF4WCxLQUFELEtBQXVCLEVBQUFBLEtBQUEsR0FBa0JzNUIsU0FBUyw4QkFDcEQsRUFBQXQ1QixLQUFBLEdBQWtCazVCLFlBQVksNkJBRWhDLEVBQUFsNUIsS0FBQSxHQUFxQixRQUNyQkEsS0FBSzZtQyxRQUFVLEdBR2pCLEdBQUlqRSxFQUFJN25DLE9BQU95YyxRQUFRLHlCQU1yQixPQUxJLEVBQUF4WCxLQUFBLElBQXNCLEVBQUFBLEtBQUEsR0FBa0JzNUIsU0FBUywrQkFDbkQsRUFBQXQ1QixLQUFBLEdBQWtCazVCLFlBQVksNkJBRWhDLEVBQUFsNUIsS0FBQSxHQUFxQixRQUNyQkEsS0FBSzZtQyxRQUFVLEdBSW5CLEVBQUE3bUMsS0FBQSxHQUFrQms1QixZQUFZLDhCLFdBR2xCMEosR0FDUEEsRUFBSTduQyxPQUFPeWMsUUFBUSxnQkFDdEIsRUFBQXhYLEtBQUEsR0FBa0I0NEIsU0FBUyw4QkFLbEJzUCxPLHlCQ25HZixJQUFJSCxFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSxrQ0NsQm5DLElBQUlGLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLG1EQ2xCbkMsd0JBTUFqQyxFQUFFLGVBQWVsakMsTUFFakIsU0FBbUJ6RyxFQUFPTCxHQUN4QixJQUFNc3NDLEVBQU90c0MsRUFBSzZGLGFBQWEsYUFDM0J5bUMsR0FDRnRDLEVBQUVocUMsR0FBTXNzQyxLQUFLQSxFQUFNLENBQUNDLFlBQWEsb0IsaUNDWHJDLElBQUlSLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLGtDQ2xCbkMsSUFBSUYsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEksa0NDbEJuQyxVQUdRLEVBQU8sQ0FBQyxXQUFrQiwwQkFBUCxFQVF6QixTQUFVakMsR0FFWixJQUlDd0MsRUFKR0MsRUFBS0MsVUFBVUMsVUFDbEJDLEVBQVMsVUFBVTc5QixLQUFLMDlCLEdBQ3hCSSxFQUFTLFVBQVU5OUIsS0FBSzA5QixHQUN4QkssRUFBVSxXQUFXLzlCLEtBQUswOUIsR0FHM0J6QyxFQUFFc0MsS0FBTyxDQUVSUyxZQUFhLENBQ1osRUFBSyxRQUNMLEVBQUssV0FDTCxJQUFLLGVBRU5DLFdBQVcsRUFDWEMsU0FBVSxZQUNWVixZQUFhLEtBR2R2QyxFQUFFOWpDLEdBQUc0QixPQUFPLENBRVhvbEMsTUFBTyxTQUFTQyxFQUFPdmxDLEdBQ3RCLElBQUl3bEMsRUFFSixHQUFvQixJQUFoQnBwQyxLQUFLdEUsU0FBZ0JzRSxLQUFLbVcsR0FBRyxZQUFjblcsS0FBSzVHLElBQUksS0FBT3VCLFNBQVNrWCxjQUl4RSxNQUFvQixpQkFBVHMzQixHQUNWdmxDLEVBQXNCLGlCQUFSQSxFQUFvQkEsRUFBTXVsQyxFQUNqQ25wQyxLQUFLOEMsTUFBSyxXQUNaOUMsS0FBS3FwQyxrQkFDUnJwQyxLQUFLcXBDLGtCQUFrQkYsRUFBT3ZsQyxHQUNwQjVELEtBQUtzcEMsbUJBQ2ZGLEVBQVFwcEMsS0FBS3NwQyxtQkFDUEMsVUFBUyxHQUNmSCxFQUFNSSxRQUFRLFlBQWE1bEMsR0FDM0J3bEMsRUFBTUssVUFBVSxZQUFhTixHQUM3QkMsRUFBTS9pQyxlQUlKckcsS0FBSyxHQUFHcXBDLG1CQUNYRixFQUFRbnBDLEtBQUssR0FBRzBwQyxlQUNoQjlsQyxFQUFNNUQsS0FBSyxHQUFHMnBDLGNBQ0podkMsU0FBU3lvQixXQUFhem9CLFNBQVN5b0IsVUFBVXdtQixjQUNuRFIsRUFBUXp1QyxTQUFTeW9CLFVBQVV3bUIsY0FDM0JULEVBQVEsRUFBSUMsRUFBTVMsWUFBWUosVUFBVSxhQUFjLEtBQ3REN2xDLEVBQU11bEMsRUFBUUMsRUFBTXhuQyxLQUFLbEcsUUFFbkIsQ0FBRXl0QyxNQUFPQSxFQUFPdmxDLElBQUtBLEtBRzlCa21DLE9BQVEsV0FDUCxPQUFPOXBDLEtBQUtpbEIsUUFBUSxXQUVyQnFqQixLQUFNLFNBQVNBLEVBQU01SyxHQUNwQixJQUNDcU0sRUFDQUMsRUFDQUMsRUFDQUMsRUFDU0MsRUFDQXptQyxFQUNBMG1DLEVBRVYsSUFBSzlCLEdBQVF0b0MsS0FBS3RFLE9BQVMsRUFBRyxDQUVwQixJQUFJd0csRUFETDhqQyxFQUFFaG1DLEtBQUssSUFDU3llLEtBQUt1bkIsRUFBRXNDLEtBQUtXLFVBQ3BDLE9BQU8vbUMsRUFBR0EsU0FBS29DLEVBa0NoQixPQS9CQW81QixFQUFXc0ksRUFBRWxpQyxPQUFPLENBQ25Ca2xDLFVBQVdoRCxFQUFFc0MsS0FBS1UsVUFDbEJULFlBQWF2QyxFQUFFc0MsS0FBS0MsWUFDcEJ6ckIsVUFBVyxNQUNUNGdCLEdBR0hxTSxFQUFPL0QsRUFBRXNDLEtBQUtTLFlBQ2RpQixFQUFRLEdBQ1JDLEVBQWtCdm1DLEVBQU00a0MsRUFBSzVzQyxPQUM3Qnd1QyxFQUFrQixLQUVsQjVCLEVBQU9sL0IsT0FBT2svQixHQUVkdEMsRUFBRWxqQyxLQUFLd2xDLEVBQUt6aUMsTUFBTSxLQUFLLFNBQVN0TixFQUFHSyxHQUN6QixLQUFMQSxHQUNIOEssSUFDQXVtQyxFQUFrQjF4QyxHQUNSd3hDLEVBQUtueEMsSUFDZm94QyxFQUFNcHRDLEtBQUssSUFBSXFMLE9BQU84aEMsRUFBS254QyxLQUNILE9BQXBCc3hDLElBQ0hBLEVBQWtCRixFQUFNdHVDLE9BQVMsR0FFbkJuRCxFQUFJMHhDLElBQ0hFLEVBQXlCSCxFQUFNdHVDLE9BQVMsSUFHeERzdUMsRUFBTXB0QyxLQUFLLFNBSU5vRCxLQUFLaWxCLFFBQVEsVUFBVW5pQixNQUFLLFdBQ2xDLElBQUkrSyxFQUFRbTRCLEVBQUVobUMsTUFDYnFxQyxFQUFTckUsRUFBRWhqQyxJQUNQc2xDLEVBQUt6aUMsTUFBTSxLQUNYLFNBQVNqTixFQUFHTCxHQUNYLEdBQVMsS0FBTEssRUFDSCxPQUFPbXhDLEVBQUtueEMsR0FBSzB4QyxFQUFlL3hDLEdBQUtLLEtBRzNDMnhDLEVBQWdCRixFQUFPeHNDLEtBQUssSUFDNUIyc0MsRUFBWTM4QixFQUFNbk0sTUFFVixTQUFTK29DLElBQ0wsR0FBSy9NLEVBQVM1Z0IsVUFBZCxDQUlBLElBQUssSUFBSXZrQixFQUFJMnhDLEVBQWlCM3hDLEdBQUs0eEMsRUFBd0I1eEMsSUFDdkQsR0FBSXl4QyxFQUFNenhDLElBQU04eEMsRUFBTzl4QyxLQUFPK3hDLEVBQWUveEMsR0FDekMsT0FHUm1sQyxFQUFTNWdCLFVBQVVwa0IsS0FBS21WLElBRzVCLFNBQVN5OEIsRUFBZS94QyxHQUNwQixPQUFHQSxFQUFJbWxDLEVBQVM2SyxZQUFZN3NDLE9BQ2pCZ2lDLEVBQVM2SyxZQUFZbUMsT0FBT255QyxHQUNoQ21sQyxFQUFTNkssWUFBWW1DLE9BQU8sR0FHaEQsU0FBU0MsRUFBUzVYLEdBQ2pCLE9BQVNBLEVBQU1ydkIsSUFBUXNtQyxFQUFNalgsS0FDN0IsT0FBT0EsRUFRUixTQUFTNlgsRUFBT3pCLEVBQU12bEMsR0FDckIsSUFBSXJMLEVBQ0hvTCxFQUVELEtBQUl3bEMsRUFBTSxHQUFWLENBSUEsSUFBSzV3QyxFQUFJNHdDLEVBQU94bEMsRUFBSWduQyxFQUFTL21DLEdBQU1yTCxFQUFJbUwsRUFBS25MLElBQzNDLEdBQUl5eEMsRUFBTXp4QyxHQUFJLENBQ2IsS0FBSW9MLEVBQUlELEdBQU9zbUMsRUFBTXp4QyxHQUFHd1MsS0FBS3MvQixFQUFPMW1DLEtBSW5DLE1BSEEwbUMsRUFBTzl4QyxHQUFLOHhDLEVBQU8xbUMsR0FDbkIwbUMsRUFBTzFtQyxHQUFLMm1DLEVBQWUzbUMsR0FLNUJBLEVBQUlnbkMsRUFBU2huQyxHQUdma25DLElBQ0FoOUIsRUFBTXE3QixNQUFNMWtDLEtBQUtpc0IsSUFBSXlaLEVBQWlCZixLQTBEdkMsU0FBUzJCLEVBQVV6dkMsR0FDTjB2QyxJQUVJbDlCLEVBQU1uTSxPQUFTOG9DLEdBQ2YzOEIsRUFBTW05QixTQW9GdkIsU0FBU0MsRUFBWXA2QixFQUFPak4sR0FDM0IsSUFBSXJMLEVBQ0osSUFBS0EsRUFBSXNZLEVBQU90WSxFQUFJcUwsR0FBT3JMLEVBQUltTCxFQUFLbkwsSUFDL0J5eEMsRUFBTXp4QyxLQUNUOHhDLEVBQU85eEMsR0FBSyt4QyxFQUFlL3hDLElBSzlCLFNBQVNzeUMsSUFBZ0JoOUIsRUFBTW5NLElBQUkyb0MsRUFBT3hzQyxLQUFLLEtBRS9DLFNBQVNrdEMsRUFBU0csR0FFakIsSUFFQzN5QyxFQUNBSyxFQUNBbTZCLEVBSkdob0IsRUFBTzhDLEVBQU1uTSxNQUNoQnlwQyxHQUFhLEVBS2QsSUFBSzV5QyxFQUFJLEVBQUd3NkIsRUFBTSxFQUFHeDZCLEVBQUltTCxFQUFLbkwsSUFDN0IsR0FBSXl4QyxFQUFNenhDLEdBQUksQ0FFYixJQURBOHhDLEVBQU85eEMsR0FBSyt4QyxFQUFlL3hDLEdBQ3BCdzZCLElBQVFob0IsRUFBS3JQLFFBRW5CLEdBREE5QyxFQUFJbVMsRUFBSzIvQixPQUFPM1gsRUFBTSxHQUNsQmlYLEVBQU16eEMsR0FBR3dTLEtBQUtuUyxHQUFJLENBQ3JCeXhDLEVBQU85eEMsR0FBS0ssRUFDWnV5QyxFQUFZNXlDLEVBQ1osTUFHRixHQUFJdzZCLEVBQU1ob0IsRUFBS3JQLE9BQVEsQ0FDdEJ1dkMsRUFBWTF5QyxFQUFJLEVBQUdtTCxHQUNuQixZQUdxQjJtQyxFQUFPOXhDLEtBQU93UyxFQUFLMi9CLE9BQU8zWCxJQUMxQkEsSUFFQXg2QixFQUFJMHhDLElBQ0prQixFQUFZNXlDLEdBcUJwQyxPQWpCSTJ5QyxFQUNITCxJQUNVTSxFQUFZLEVBQUlsQixFQUN0QnZNLEVBQVNzTCxXQUFhcUIsRUFBT3hzQyxLQUFLLE1BQVEwc0MsR0FHMUMxOEIsRUFBTW5NLE9BQU9tTSxFQUFNbk0sSUFBSSxJQUMxQnVwQyxFQUFZLEVBQUd2bkMsSUFJZm1uQyxLQUdEQSxJQUNBaDlCLEVBQU1uTSxJQUFJbU0sRUFBTW5NLE1BQU0wcEMsVUFBVSxFQUFHRCxFQUFZLEtBRXhDbEIsRUFBa0IxeEMsRUFBSTJ4QyxFQUcvQnI4QixFQUFNNFEsS0FBS3VuQixFQUFFc0MsS0FBS1csVUFBUyxXQUMxQixPQUFPakQsRUFBRWhqQyxJQUFJcW5DLEdBQVEsU0FBU3p4QyxFQUFHTCxHQUNoQyxPQUFPeXhDLEVBQU16eEMsSUFBSUssR0FBRzB4QyxFQUFlL3hDLEdBQUtLLEVBQUksUUFDMUNpRixLQUFLLE9BSVRnUSxFQUNFd1csSUFBSSxVQUFVLFdBQ2R4VyxFQUNFMlcsSUFBSSxTQUNKckYsV0FBVzZtQixFQUFFc0MsS0FBS1csYUFFcEI5a0IsR0FBRyxjQUFjLFdBTWpCLElBQUk0TyxFQUxlbGxCLEVBQU02USxLQUFLLGNBSTlCK1ksYUFBYStRLEdBR2JnQyxFQUFZMzhCLEVBQU1uTSxNQUVsQnF4QixFQUFNZ1ksSUFFTnZDLEVBQWlCMXNCLFlBQVcsV0FDTmpPLEVBQU16VSxJQUFJLEtBQU91QixTQUFTa1gsZ0JBRy9DZzVCLElBQ0k5WCxHQUFPdVYsRUFBSzVqQyxRQUFRLElBQUksSUFBSWhKLE9BQy9CbVMsRUFBTXE3QixNQUFNLEVBQUduVyxHQUVmbGxCLEVBQU1xN0IsTUFBTW5XLE1BRVgsUUFFSDVPLEdBQUcsWUFBYTJtQixHQUNoQjNtQixHQUFHLGdCQXRMTCxTQUFzQjlvQixHQUNULElBQUl3UyxFQUFNNlEsS0FBSyxZQUFmLENBSVosSUFDQ3FVLEVBQ0FvVyxFQUNBdmxDLEVBSEd5bkMsRUFBSWh3QyxFQUFFdXVCLE9BQVN2dUIsRUFBRTB0QixRQUlMcWhCLEVBQVN2OEIsRUFBTW5NLE1BRXJCLElBQU4ycEMsR0FBaUIsS0FBTkEsR0FBYXpDLEdBQWdCLE1BQU55QyxHQUVyQ2xDLEdBREFwVyxFQUFNbGxCLEVBQU1xN0IsU0FDQUMsT0FDWnZsQyxFQUFNbXZCLEVBQUludkIsS0FFQXVsQyxHQUFVLElBQ25CQSxFQUFVLEtBQUprQyxFQTVHVCxTQUFrQnRZLEdBQ2pCLE9BQVNBLEdBQU8sSUFBTWlYLEVBQU1qWCxLQUM1QixPQUFPQSxFQTBHUXVZLENBQVNuQyxHQUFRdmxDLEVBQUkrbUMsRUFBU3hCLEVBQU0sR0FDakR2bEMsRUFBUSxLQUFKeW5DLEVBQU9WLEVBQVMvbUMsR0FBS0EsR0FFMUJxbkMsRUFBWTlCLEVBQU92bEMsR0FDbkJnbkMsRUFBT3pCLEVBQU92bEMsRUFBTSxHQUVwQnZJLEVBQUUycEIsa0JBQ2MsS0FBTnFtQixFQUNWUCxFQUFVcHlDLEtBQUtzSCxLQUFNM0UsR0FDTCxLQUFOZ3dDLElBQ1Z4OUIsRUFBTW5NLElBQUk4b0MsR0FDVjM4QixFQUFNcTdCLE1BQU0sRUFBRzZCLEtBQ2YxdkMsRUFBRTJwQixzQkEwSkZiLEdBQUcsaUJBdEpMLFNBQXVCOW9CLEdBQ1YsSUFBSXdTLEVBQU02USxLQUFLLFlBQWYsQ0FJWixJQUVDcmtCLEVBQ0F6QixFQUNBcVIsRUFKR29oQyxFQUFJaHdDLEVBQUV1dUIsT0FBU3Z1QixFQUFFMHRCLFFBQ3BCZ0ssRUFBTWxsQixFQUFNcTdCLFFBS1Q3dEMsRUFBRWl0QixTQUFXanRCLEVBQUU2c0IsUUFBVTdzQixFQUFFb3RCLFNBQVc0aUIsRUFBSSxLQUVsQ0EsR0FBVyxLQUFOQSxJQUNadFksRUFBSW52QixJQUFNbXZCLEVBQUlvVyxPQUFVLElBQzNCOEIsRUFBWWxZLEVBQUlvVyxNQUFPcFcsRUFBSW52QixLQUMzQmduQyxFQUFPN1gsRUFBSW9XLE1BQU9wVyxFQUFJbnZCLElBQUksS0FHM0J2SixFQUFJc3dDLEVBQVM1WCxFQUFJb1csTUFBUSxJQUNqQnpsQyxJQUNQOUssRUFBSXdRLE9BQU9DLGFBQWFnaUMsR0FDcEJyQixFQUFNM3ZDLEdBQUcwUSxLQUFLblMsTUFySHJCLFNBQWdCbTZCLEdBQ2YsSUFBSXg2QixFQUNISyxFQUNBK0ssRUFDQWxLLEVBRUQsSUFBS2xCLEVBQUl3NkIsRUFBS242QixFQUFJMHhDLEVBQWV2WCxHQUFNeDZCLEVBQUltTCxFQUFLbkwsSUFDL0MsR0FBSXl4QyxFQUFNenhDLEdBQUksQ0FJYixHQUhBb0wsRUFBSWduQyxFQUFTcHlDLEdBQ2JrQixFQUFJNHdDLEVBQU85eEMsR0FDWDh4QyxFQUFPOXhDLEdBQUtLLElBQ1IrSyxFQUFJRCxHQUFPc21DLEVBQU1ybUMsR0FBR29ILEtBQUt0UixJQUc1QixNQUZBYixFQUFJYSxHQTBHSjh4QyxDQUFPbHhDLEdBRVBnd0MsRUFBT2h3QyxHQUFLekIsRUFDWml5QyxJQUNBNWdDLEVBQU8wZ0MsRUFBU3R3QyxHQUVieXVDLEVBTUZodEIsWUFKWSxXQUNYa3FCLEVBQUVULE1BQU1TLEVBQUU5akMsR0FBR2duQyxNQUFNcjdCLEVBQU01RCxFQUF6Qis3QixLQUdnQixHQUVqQm40QixFQUFNcTdCLE1BQU1qL0IsR0FFVzhvQixFQUFJb1csT0FBU2dCLEdBQ2pCTSxLQUl0QnB2QyxFQUFFMnBCLHNCQTJHRmIsR0FBRyx5QkFBeUIsV0FDVHRXLEVBQU02USxLQUFLLGFBSTlCNUMsWUFBVyxXQUNWLElBQUlpWCxFQUFJZ1ksR0FBUyxHQUNqQmw5QixFQUFNcTdCLE1BQU1uVyxHQUNNMFgsTUFDaEIsTUFFWTVCLEdBQVVDLEdBRVZqN0IsRUFDSzJXLElBQUksY0FDSkwsR0FBRyxjQWpQekIsU0FBMkI5b0IsR0FDMUIsSUFBSW13QyxFQUFTMzlCLEVBQU1uTSxNQUNmcXhCLEVBQU1sbEIsRUFBTXE3QixRQUNoQixHQUFJa0IsR0FBVUEsRUFBTzF1QyxRQUFVMHVDLEVBQU8xdUMsT0FBUzh2QyxFQUFPOXZDLE9BQVMsQ0FHOUQsSUFEQXF2QyxHQUFTLEdBQ0ZoWSxFQUFJb1csTUFBUSxJQUFNYSxFQUFNalgsRUFBSW9XLE1BQU0sSUFDeENwVyxFQUFJb1csUUFDTCxHQUFrQixJQUFkcFcsRUFBSW9XLE1BRVAsS0FBT3BXLEVBQUlvVyxNQUFRZSxJQUFvQkYsRUFBTWpYLEVBQUlvVyxRQUNoRHBXLEVBQUlvVyxRQUVOdDdCLEVBQU1xN0IsTUFBTW5XLEVBQUlvVyxNQUFNcFcsRUFBSW9XLFdBQ3BCLENBQ0s0QixHQUFTLEdBQXBCLElBQ0lVLEVBQW1CRCxFQUFPZCxPQUFPM1gsRUFBSW9XLE9BQ3JDcFcsRUFBSW9XLE1BQVF6bEMsSUFDWHNtQyxFQUFNalgsRUFBSW9XLFFBQ2JwVyxFQUFJb1csUUFLRGEsRUFBTWpYLEVBQUlvVyxPQUFPcCtCLEtBQUswZ0MsSUFDeEIxWSxFQUFJb1csU0FJUHQ3QixFQUFNcTdCLE1BQU1uVyxFQUFJb1csTUFBTXBXLEVBQUlvVyxPQUUzQnNCLE9Bb05BTSxZQXhiOEIsZ0MsZ0JDSGxDLElBQUloRCxFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSxxRENsQnBCLEksc0NDQWYsTyxnQkNBQSxJQUFJRixFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSwrQ0NsQm5DLE8sNkJDQUEsTyxnQkNBQSxJQUFJRixFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSwrQ0NsQm5DLE8sZ0JDQUEsSUFBSUYsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEksK0NDbEJuQyxZLDhqQkFzQnFCckYsR0FDTyxjQUFwQkEsRUFBSXJhLE9BQU96dkIsTUFDYixFQUFBa0gsS0FBQSxJQUFrQkEsS0FBbEIsVUFBa0JBLEtBQW1CQSxLQUFLMHJDLFFBQVFDLE9BQU8sZUFFbkMsWUFBcEIvSSxFQUFJcmEsT0FBT3p2QixNQUNiLEVBQUFrSCxLQUFBLElBQWdCQSxLQUFoQixVQUFnQkEsS0FBbUJBLEtBQUswckMsUUFBUUMsT0FBTyxhQUV6RCxFQUFBM3JDLEtBQUEsR0FBYTRCLEtBQWIsWUFBcUI1QixLQUFyQixxQkFBc0RBLEtBQXRELFcsV0FHWXdDLEdBRVosT0FEUUEsRUFBSWhELFdBQ0hrRixRQUFRLGtDQUFtQyxRQUl6Q2tuQyxJQTFCYixXQUFZQyxHLHVHQUFjLGlDLE9BQUEsRyxFQUFBLGEsRUFBQSxNLHNGQUFBLHFIQUN4QjdyQyxLQUFLMHJDLFFBQVVHLEVBQWFwK0IsS0FBSyx5QkFBeUJrK0IsT0FBTyxRQUNqRSxFQUFBM3JDLEtBQUEsRUFBZTZyQyxFQUFhcCtCLEtBQUssK0JBQ2pDLEVBQUF6TixLQUFBLElBQWtCQSxLQUFsQixVQUFrQkEsS0FBbUJBLEtBQUswckMsUUFBUUMsT0FBTyxlQUN6RCxFQUFBM3JDLEtBQUEsSUFBZ0JBLEtBQWhCLFVBQWdCQSxLQUFtQkEsS0FBSzByQyxRQUFRQyxPQUFPLGFBQ3ZELEVBQUEzckMsS0FBQSxHQUFhNEIsS0FBYixZQUFxQjVCLEtBQXJCLG9CQUFnREEsS0FBaEQsU0FFQUEsS0FBSzByQyxRQUFRdm5CLEdBQUcsY0FBZSxFQUFBbmtCLEtBQUEsS0FBd0JqRyxLQUFLaUcsUyw2QkNuQmhFLHNCLG1oREFPTThyQyxFLGdRQVNKLFdBQVlDLEdBQWEsYSw0RkFBQSxTQUN2QixjQUFNQSxFQUFZdCtCLEtBQUssaUJBREEsOE5BSmhCLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLFNBSTlELDhCQUhqQixJQUFJMUcsT0FLVixTQUFvQmdsQyxHQUNwQixTQUFvQkEsRUFBWXQrQixLQUFLLHVCQUNyQyxTQUFtQnMrQixFQUFZdCtCLEtBQUssNkJBQ3BDLFNBQW9CcytCLEVBQVl0K0IsS0FBSyx5QkFFckMsVUFBa0IwVyxHQUFHLFFBQVMsWUFBbUJwcUIsS0FBbkIsT0FDOUIsVUFBa0JvcUIsR0FBRyx5QkFBMEIsWUFBbUJwcUIsS0FBbkIsT0FDL0MsVUFBa0JvcUIsR0FBRyxxQkFBc0IsWUFBbUJwcUIsS0FBbkIsT0FFM0NZLFNBQVN1UyxpQkFBaUIsVUFBVyxZQUFtQm5ULEtBQW5CLE9BRXJDLHVCQUNBLHVCQWR1QixFLFVBVEY4dEMsSywySUEyQnJCLEVBQUE3bkMsS0FBQSxHQUFXOG1DLFFBQVFzQixPQUFPcG9DLEtBQUsrbUMsYUFDL0IsSUFBSWlGLEVBQVcsR0FBSCxPQUFNLEVBQUFoc0MsS0FBQSxHQUFXMm5DLFVBQWpCLFlBQThCLEVBQUEzbkMsS0FBQSxHQUFZLEVBQUFBLEtBQUEsR0FBV2luQyxZQUFyRCxLQUNaLEVBQUFqbkMsS0FBQSxHQUFXOG1DLFFBQVFzQixPQUFPcG9DLEtBQUtnbkMsZUFDL0IsSUFBSWlGLEVBQVMsR0FBSCxPQUFNLEVBQUFqc0MsS0FBQSxHQUFXMm5DLFVBQWpCLFlBQThCLEVBQUEzbkMsS0FBQSxHQUFZLEVBQUFBLEtBQUEsR0FBV2luQyxhQUMvRCxFQUFBam5DLEtBQUEsR0FBaUI0QixLQUFqQixVQUF5Qm9xQyxFQUF6QixjQUF1Q0MsSyxhQUd2QyxFQUFBanNDLEtBQUEsR0FBa0JrNUIsWUFBWSwrQixXQUdsQjBKLEdBQ1BBLEVBQUk3bkMsT0FBT3ljLFFBQVEsaUJBQ3RCLEVBQUF4WCxLQUFBLEdBQWtCNDRCLFNBQVMsK0JBS2xCa1QsTyxtUUNuRGQsU0FBU3J5QyxHQUFHLElBQUk0QixFQUFFLEdBQUcsU0FBU3JCLEVBQUVoQixHQUFHLEdBQUdxQyxFQUFFckMsR0FBRyxPQUFPcUMsRUFBRXJDLEdBQUdYLFFBQVEsSUFBSUUsRUFBRThDLEVBQUVyQyxHQUFHLENBQUNULEVBQUVTLEVBQUVSLEdBQUUsRUFBR0gsUUFBUSxJQUFJLE9BQU9vQixFQUFFVCxHQUFHTixLQUFLSCxFQUFFRixRQUFRRSxFQUFFQSxFQUFFRixRQUFRMkIsR0FBR3pCLEVBQUVDLEdBQUUsRUFBR0QsRUFBRUYsUUFBUTJCLEVBQUVyQixFQUFFYyxFQUFFTyxFQUFFcEIsRUFBRXlDLEVBQUVyQixFQUFFbkIsRUFBRSxTQUFTWSxFQUFFNEIsRUFBRXJDLEdBQUdnQixFQUFFaEIsRUFBRVMsRUFBRTRCLElBQUlwQyxPQUFPQyxlQUFlTyxFQUFFNEIsRUFBRSxDQUFDbEMsWUFBVyxFQUFHQyxJQUFJSixLQUFLZ0IsRUFBRVgsRUFBRSxTQUFTSSxHQUFHLG9CQUFvQkgsUUFBUUEsT0FBT0MsYUFBYU4sT0FBT0MsZUFBZU8sRUFBRUgsT0FBT0MsWUFBWSxDQUFDQyxNQUFNLFdBQVdQLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLEtBQU1RLEVBQUVQLEVBQUUsU0FBU0EsRUFBRTRCLEdBQUcsR0FBRyxFQUFFQSxJQUFJNUIsRUFBRU8sRUFBRVAsSUFBSSxFQUFFNEIsRUFBRSxPQUFPNUIsRUFBRSxHQUFHLEVBQUU0QixHQUFHLFlBQWlCNUIsSUFBR0EsR0FBR0EsRUFBRUUsV0FBVyxPQUFPRixFQUFFLElBQUlULEVBQUVDLE9BQU9ZLE9BQU8sTUFBTSxHQUFHRyxFQUFFWCxFQUFFTCxHQUFHQyxPQUFPQyxlQUFlRixFQUFFLFVBQVUsQ0FBQ0csWUFBVyxFQUFHSyxNQUFNQyxJQUFJLEVBQUU0QixHQUFHLGlCQUFpQjVCLEVBQUUsSUFBSSxJQUFJbEIsS0FBS2tCLEVBQUVPLEVBQUVuQixFQUFFRyxFQUFFVCxFQUFFLFNBQVM4QyxHQUFHLE9BQU81QixFQUFFNEIsSUFBSXRCLEtBQUssS0FBS3hCLElBQUksT0FBT1MsR0FBR2dCLEVBQUVBLEVBQUUsU0FBU1AsR0FBRyxJQUFJNEIsRUFBRTVCLEdBQUdBLEVBQUVFLFdBQVcsV0FBVyxPQUFPRixFQUFFdXVDLFNBQVMsV0FBVyxPQUFPdnVDLEdBQUcsT0FBT08sRUFBRW5CLEVBQUV3QyxFQUFFLElBQUlBLEdBQUdBLEdBQUdyQixFQUFFaEIsRUFBRSxTQUFTUyxFQUFFNEIsR0FBRyxPQUFPcEMsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLZSxFQUFFNEIsSUFBSXJCLEVBQUVLLEVBQUUsR0FBR0wsRUFBRUEsRUFBRU0sRUFBRSxJQUExNEIsQ0FBKzRCLENBQUMsU0FBU2IsRUFBRTRCLEVBQUVyQixHQUFHLGFBQWEsSUFBSWhCLEVBQUVnQixFQUFFLEdBQUd6QixFQUFFeUIsRUFBRUEsRUFBRWhCLEVBQUpnQixJQUFTLEdBQUl6QixFQUFFcUUsS0FBSyxDQUFDbkQsRUFBRWxCLEVBQUUsOHpFQUE4ekUsS0FBS0EsRUFBRTB2QyxPQUFPLENBQUNpRSxLQUFLLHdCQUF3QkMsU0FBUywwQkFBMEJDLE1BQU0sMEJBQTBCQyxVQUFVLDBCQUEwQkMsZUFBZSwwQkFBMEJDLG1CQUFtQix3QkFBd0IzeEIsU0FBUywwQkFBMEI0eEIsYUFBYSwwQkFBMEI3ckIsTUFBTSwwQkFBMEI4ckIsVUFBVSwwQkFBMEJDLGVBQWUsd0JBQXdCQyxtQkFBbUIsd0JBQXdCQyxnQkFBZ0IsMEJBQTBCQyxvQkFBb0Isd0JBQXdCQyxtQkFBbUIsd0JBQXdCQyx1QkFBdUIsMEJBQTBCQyxjQUFjLHdCQUF3QkMsa0JBQWtCLDBCQUEwQkMsa0JBQWtCLDBCQUEwQkMsc0JBQXNCLDJCQUEyQjl4QyxFQUFFb00sRUFBRWxQLEdBQUcsU0FBU2tCLEVBQUU0QixHQUFHNUIsRUFBRXBCLFFBQVEwSixHQUFRLFNBQVN0SSxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRUEsRUFBRSxXQUFXLE9BQU9nRyxLQUFsQixHQUEwQixJQUFJaEcsRUFBRUEsR0FBRyxJQUFJb3pDLFNBQVMsY0FBYixHQUE4QixNQUFNM3pDLEdBQUcsK0JBQWlCaUIsT0FBakIsY0FBaUJBLFdBQVNWLEVBQUVVLFFBQVFqQixFQUFFcEIsUUFBUTJCLEdBQUcsU0FBU1AsRUFBRTRCLEVBQUVyQixHQUFHLGFBQWFQLEVBQUVwQixRQUFRLFNBQVNvQixHQUFHLElBQUk0QixFQUFFLEdBQUcsT0FBT0EsRUFBRW1FLFNBQVMsV0FBVyxPQUFPUSxLQUFLZ0QsS0FBSyxTQUFTM0gsR0FBRyxJQUFJckIsRUFBRSxTQUFTUCxFQUFFNEIsR0FBRyxJQUF5WG9NLEVBQUVuTixFQUFFOUIsRUFBelh3QixFQUFFUCxFQUFFLElBQUksR0FBR1QsRUFBRVMsRUFBRSxHQUFHLElBQUlULEVBQUUsT0FBT2dCLEVBQUUsR0FBR3FCLEdBQUcsbUJBQW1Cb0QsS0FBSyxDQUFDLElBQUlsRyxHQUFHa1AsRUFBRXpPLEVBQUVzQixFQUFFbUUsS0FBS0MsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVNEksTUFBTWpQLEVBQUUsK0RBQStENEQsT0FBTzlCLEdBQUcsT0FBTzhCLE9BQU81RCxFQUFFLFFBQVFhLEVBQUVMLEVBQUVxMEMsUUFBUXJxQyxLQUFLLFNBQVN2SixHQUFHLE1BQU0saUJBQWlCMkMsT0FBT3BELEVBQUVzMEMsWUFBWSxJQUFJbHhDLE9BQU8zQyxFQUFFLFVBQVUsTUFBTSxDQUFDTyxHQUFHb0MsT0FBTy9DLEdBQUcrQyxPQUFPLENBQUM3RCxJQUFJc0YsS0FBSyxNQUFnQixNQUFNLENBQUM3RCxHQUFHNkQsS0FBSyxNQUE1WixDQUFtYXhDLEVBQUU1QixHQUFHLE9BQU80QixFQUFFLEdBQUcsVUFBVWUsT0FBT2YsRUFBRSxHQUFHLE1BQU1lLE9BQU9wQyxFQUFFLEtBQUtBLEtBQUs2RCxLQUFLLEtBQUt4QyxFQUFFOUMsRUFBRSxTQUFTa0IsRUFBRU8sRUFBRWhCLEdBQUcsaUJBQWlCUyxJQUFJQSxFQUFFLENBQUMsQ0FBQyxLQUFLQSxFQUFFLE1BQU0sSUFBSWxCLEVBQUUsR0FBRyxHQUFHUyxFQUFFLElBQUksSUFBSUssRUFBRSxFQUFFQSxFQUFFMkcsS0FBS3RFLE9BQU9yQyxJQUFJLENBQUMsSUFBSW9PLEVBQUV6SCxLQUFLM0csR0FBRyxHQUFHLE1BQU1vTyxJQUFJbFAsRUFBRWtQLElBQUcsR0FBSSxJQUFJLElBQUluTixFQUFFLEVBQUVBLEVBQUViLEVBQUVpQyxPQUFPcEIsSUFBSSxDQUFDLElBQUk5QixFQUFFLEdBQUc0RCxPQUFPM0MsRUFBRWEsSUFBSXRCLEdBQUdULEVBQUVDLEVBQUUsTUFBTXdCLElBQUl4QixFQUFFLEdBQUdBLEVBQUUsR0FBRyxHQUFHNEQsT0FBT3BDLEVBQUUsU0FBU29DLE9BQU81RCxFQUFFLElBQUlBLEVBQUUsR0FBR3dCLEdBQUdxQixFQUFFdUIsS0FBS3BFLE1BQU02QyxJQUFJLFNBQVM1QixFQUFFNEIsRUFBRXJCLEdBQUcsY0FBYSxTQUFVUCxHQUFHTyxFQUFFLEdBQUdBLEVBQUUsR0FBRyxJQUFJcUIsRUFBRXJDLEVBQUVnQixFQUFFLEdBQUd6QixHQUFHOEMsRUFBRSxTQUFTNUIsRUFBRU8sR0FBRyxPQUFPcUIsRUFBRXBDLE9BQU9zMEMsZ0JBQWdCLENBQUNDLFVBQVUsY0FBY3BwQyxPQUFPLFNBQVMzSyxFQUFFNEIsR0FBRzVCLEVBQUUrekMsVUFBVW55QyxJQUFJLFNBQVM1QixFQUFFNEIsR0FBRyxJQUFJLElBQUlyQixLQUFLcUIsRUFBRXBDLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzJDLEVBQUVyQixLQUFLUCxFQUFFTyxHQUFHcUIsRUFBRXJCLE1BQU1QLEVBQUVPLElBQUksU0FBU1AsRUFBRU8sR0FBRyxTQUFTaEIsSUFBSWdILEtBQUtzQyxZQUFZN0ksRUFBRTRCLEVBQUU1QixFQUFFTyxHQUFHUCxFQUFFVSxVQUFVLE9BQU9ILEVBQUVmLE9BQU9ZLE9BQU9HLElBQUloQixFQUFFbUIsVUFBVUgsRUFBRUcsVUFBVSxJQUFJbkIsS0FBS0ssRUFBRSxTQUFTZ0MsR0FBRyxTQUFTckIsRUFBRVAsR0FBRyxJQUFJTyxFQUFFcUIsRUFBRTNDLEtBQUtzSCxPQUFPQSxLQUFLLE9BQU9oRyxFQUFFa3lDLEtBQUssSUFBSXprQyxFQUFFek4sRUFBRTJtQixNQUFNLElBQUkvbkIsRUFBRW9CLEVBQUU4MkIsT0FBT24yQixTQUFTcUMsY0FBYyxTQUFTaEQsRUFBRXl6QyxVQUFVaDBDLEVBQUVPLEVBQUU4MkIsT0FBT2hqQixVQUFVOVUsRUFBRXlPLEVBQUV6TixFQUFFMHpDLGFBQWEsQ0FBQ2gwQyxLQUFLLFNBQVNNLEVBQUUyekMsYUFBYTN6QyxFQUFFMnpDLFdBQVdud0MsWUFBWXhELEVBQUU4MkIsUUFBUTkyQixFQUFFMnpDLFdBQVdud0MsWUFBWXhELEVBQUVreUMsTUFBTWx5QyxFQUFFMnpDLFdBQVdud0MsWUFBWXhELEVBQUUybUIsUUFBUTNtQixFQUFFLE9BQU96QixFQUFFeUIsRUFBRXFCLEdBQUdyQixFQUFFRyxVQUFVeXpDLGtCQUFrQixXQUFXNXRDLEtBQUtqRCxNQUFNdWpCLFFBQVEsT0FBT3RnQixLQUFLakQsTUFBTTh3QyxlQUFlLFVBQVU3ekMsRUFBRUcsVUFBVTJ6QyxhQUFhLFNBQVN6eUMsRUFBRXJCLEdBQUcsT0FBT3FCLEdBQUcsSUFBSSxXQUFXMkUsS0FBS2tzQyxLQUFLN3VDLGFBQWEsaUJBQWlCckQsRUFBRXdGLFlBQVlRLEtBQUsyZ0IsTUFBTXRqQixhQUFhLGlCQUFpQnJELEVBQUV3RixZQUFZLE1BQU0sSUFBSSxXQUFXUSxLQUFLa3NDLEtBQUs3dUMsYUFBYSxpQkFBaUJyRCxFQUFFd0YsWUFBWVEsS0FBSzJnQixNQUFNdGpCLGFBQWEsaUJBQWlCckQsRUFBRXdGLFlBQVksTUFBTSxJQUFJLFlBQVlRLEtBQUtrc0MsS0FBSzd1QyxhQUFhLGtCQUFrQnJELEVBQUV3RixZQUFZLE1BQU0sSUFBSSxVQUFVUSxLQUFLa3NDLEtBQUs3dUMsYUFBYSxnQkFBZ0JyRCxFQUFFd0YsWUFBWSxNQUFNLElBQUksVUFBVXhGLEVBQUVQLEVBQUV1RyxLQUFLMmdCLE9BQU9XLE9BQU83bkIsRUFBRXVHLEtBQUsyZ0IsT0FBT2EsT0FBTyxNQUFNLElBQUksWUFBWXhoQixLQUFLa3NDLEtBQUs3dUMsYUFBYSxrQkFBa0JyRCxFQUFFd0YsWUFBWSxNQUFNLElBQUksVUFBVVEsS0FBS2tzQyxLQUFLN3VDLGFBQWEsZ0JBQWdCckQsRUFBRXdGLFlBQVlRLEtBQUsyZ0IsTUFBTXRqQixhQUFhLGdCQUFnQnJELEVBQUV3RixZQUFZLE1BQU0sSUFBSSxhQUFhUSxLQUFLakQsTUFBTWd4QyxjQUFjL3pDLEVBQUUsTUFBTSxTQUFTZ0csS0FBS2tzQyxLQUFLN3VDLGFBQWEsbUJBQW1CckQsRUFBRXdGLFlBQVlRLEtBQUsyZ0IsTUFBTXRqQixhQUFhLG1CQUFtQnJELEVBQUV3RixjQUFjeEYsRUFBbnpDLENBQXN6Q2cwQyxhQUFhdm1DLEVBQUUsU0FBU3BNLEdBQUcsU0FBU3JCLElBQUksSUFBSVAsRUFBRTRCLEVBQUUzQyxLQUFLc0gsT0FBT0EsS0FBSyxPQUFPdkcsRUFBRXcwQyxXQUFXLElBQUl6MUMsRUFBRSxhQUFhaUIsRUFBRXkwQyxTQUFTLElBQUkxMUMsRUFBRSxXQUFXaUIsRUFBRTAwQyxVQUFVLElBQUk3ekMsRUFBRWIsRUFBRTJULFVBQVVwVSxFQUFFeU8sRUFBRXdnQyxPQUFPaUUsS0FBS3p5QyxFQUFFK0QsWUFBWS9ELEVBQUV3MEMsWUFBWXgwQyxFQUFFK0QsWUFBWS9ELEVBQUV5MEMsVUFBVXowQyxFQUFFK0QsWUFBWS9ELEVBQUUwMEMsV0FBVzEwQyxFQUFFLE9BQU9sQixFQUFFeUIsRUFBRXFCLEdBQUdwQyxPQUFPQyxlQUFlYyxFQUFFLHFCQUFxQixDQUFDWixJQUFJLFdBQVcsTUFBTSxDQUFDLGlCQUFpQixpQkFBaUIsa0JBQWtCLGdCQUFnQixrQkFBa0IsZ0JBQWdCLHFCQUFxQkQsWUFBVyxFQUFHb2xCLGNBQWEsSUFBS3ZrQixFQUFFRyxVQUFVaTBDLHlCQUF5QixTQUFTL3lDLEdBQUcsT0FBT0EsR0FBRyxJQUFJLGlCQUFpQixJQUFJLGlCQUFpQjJFLEtBQUtpdUMsV0FBVzV3QyxhQUFhLGdCQUFnQjJDLEtBQUtxdUMsa0JBQWtCLFFBQVE3dUMsWUFBWVEsS0FBS211QyxVQUFVOXdDLGFBQWEscUJBQXFCMkMsS0FBS3F1QyxrQkFBa0IsUUFBUTd1QyxZQUFZUSxLQUFLa3VDLFNBQVM3d0MsYUFBYSxnQkFBZ0IyQyxLQUFLcXVDLGtCQUFrQixNQUFNN3VDLFlBQVlRLEtBQUttdUMsVUFBVTl3QyxhQUFhLG1CQUFtQjJDLEtBQUtxdUMsa0JBQWtCLE1BQU03dUMsWUFBWSxNQUFNLElBQUksa0JBQWtCUSxLQUFLaXVDLFdBQVc1d0MsYUFBYSxrQkFBa0IyQyxLQUFLc3VDLFFBQVFDLFdBQVd2dUMsS0FBS2t1QyxTQUFTN3dDLGFBQWEsa0JBQWtCMkMsS0FBS3N1QyxRQUFRQyxXQUFXLE1BQU0sSUFBSSxnQkFBZ0J2dUMsS0FBS211QyxVQUFVOXdDLGFBQWEsZ0JBQWdCMkMsS0FBS3N1QyxRQUFRRSxTQUFTLFVBQVV4dUMsS0FBS3N1QyxRQUFRRSxRQUFRLzBDLEVBQUV1RyxLQUFLa3VDLFVBQVUxc0IsT0FBTy9uQixFQUFFdUcsS0FBS2t1QyxVQUFVNXNCLE9BQU8sTUFBTSxJQUFJLG1CQUFtQnRoQixLQUFLaXVDLFdBQVc1d0MsYUFBYSxtQkFBbUIyQyxLQUFLc3VDLFFBQVFHLFlBQVl6dUMsS0FBS211QyxVQUFVOXdDLGFBQWEsbUJBQW1CMkMsS0FBS3N1QyxRQUFRRyxZQUFZenVDLEtBQUtrdUMsU0FBUzd3QyxhQUFhLG1CQUFtQjJDLEtBQUtzdUMsUUFBUUcsWUFBWSxTQUFTenVDLEtBQUtzdUMsUUFBUUcsV0FBV2gxQyxFQUFFdUcsTUFBTTQ0QixTQUFTNS9CLEVBQUV5TyxFQUFFd2dDLE9BQU9rRSxVQUFVMXlDLEVBQUV1RyxNQUFNaTVCLFlBQVlqZ0MsRUFBRXlPLEVBQUV3Z0MsT0FBT2tFLFVBQVUsTUFBTSxJQUFJLGtCQUFrQm5zQyxLQUFLaXVDLFdBQVc1d0MsYUFBYSxnQkFBZ0IyQyxLQUFLcXVDLGtCQUFrQixRQUFRN3VDLFlBQVlRLEtBQUtpdUMsV0FBVzV3QyxhQUFhLGFBQWErcUMsT0FBT3BvQyxLQUFLc3VDLFFBQVFJLFdBQVdDLFdBQVczdUMsS0FBS211QyxVQUFVOXdDLGFBQWEscUJBQXFCMkMsS0FBS3F1QyxrQkFBa0IsUUFBUTd1QyxZQUFZLE1BQU0sSUFBSSxnQkFBZ0JRLEtBQUtrdUMsU0FBUzd3QyxhQUFhLGdCQUFnQjJDLEtBQUtxdUMsa0JBQWtCLE1BQU03dUMsWUFBWVEsS0FBS2t1QyxTQUFTN3dDLGFBQWEsYUFBYStxQyxPQUFPcG9DLEtBQUtzdUMsUUFBUU0sU0FBU0QsV0FBVzN1QyxLQUFLbXVDLFVBQVU5d0MsYUFBYSxtQkFBbUIyQyxLQUFLcXVDLGtCQUFrQixNQUFNN3VDLGNBQWN4RixFQUFFRyxVQUFVazBDLGtCQUFrQixTQUFTNTBDLEdBQUcsSUFBSTRCLEVBQUUrc0MsT0FBT3BvQyxLQUFLc3VDLFFBQVFPLFVBQVU3MEMsRUFBRW91QyxPQUFPcG9DLEtBQUtzdUMsUUFBUVEsVUFBVSxPQUFPMUcsT0FBTyxTQUFTM3VDLEVBQUV1RyxLQUFLc3VDLFFBQVFJLFVBQVUxdUMsS0FBS3N1QyxRQUFRTSxTQUFTdnpDLEtBQUtyQixFQUFFcUIsR0FBRyxNQUFNckIsRUFBaDJFLENBQW0yRWcwQyxhQUFhMXpDLEVBQUUsU0FBU2UsR0FBRyxTQUFTckIsSUFBSSxJQUFJUCxFQUFFNEIsRUFBRTNDLEtBQUtzSCxPQUFPQSxLQUFLLE9BQU92RyxFQUFFczFDLFdBQVcsT0FBT3QxQyxFQUFFdTFDLGVBQWUsUUFBUXYxQyxFQUFFMlQsVUFBVXBVLEVBQUV5TyxFQUFFd2dDLE9BQU9ydEIsU0FBU25oQixFQUFFLE9BQU9sQixFQUFFeUIsRUFBRXFCLEdBQUdwQyxPQUFPQyxlQUFlYyxFQUFFLHFCQUFxQixDQUFDWixJQUFJLFdBQVcsTUFBTSxDQUFDLHFCQUFxQixtQkFBbUIsZ0JBQWdCLHFCQUFxQkQsWUFBVyxFQUFHb2xCLGNBQWEsSUFBS3ZrQixFQUFFRyxVQUFVaTBDLHlCQUF5QixTQUFTL3lDLEdBQUcsT0FBT0EsR0FBRyxJQUFJLHFCQUFxQjJFLEtBQUtpdkMsYUFBYSxNQUFNLElBQUksbUJBQW1CLElBQUksZ0JBQWdCanZDLEtBQUtrdkMsV0FBVyxNQUFNLElBQUksbUJBQW1CLFNBQVNsdkMsS0FBS3N1QyxRQUFRRyxXQUFXaDFDLEVBQUV1RyxNQUFNNDRCLFNBQVM1L0IsRUFBRXlPLEVBQUV3Z0MsT0FBT3VFLGNBQWMveUMsRUFBRXVHLE1BQU1pNUIsWUFBWWpnQyxFQUFFeU8sRUFBRXdnQyxPQUFPdUUsY0FBY3hzQyxLQUFLbXZDLGVBQWVudkMsS0FBS2l2QyxhQUFhanZDLEtBQUtrdkMsYUFBYWwxQyxFQUFFRyxVQUFVODBDLFdBQVcsV0FBV3gxQyxFQUFFdUcsTUFBTXpELElBQUksR0FBR3lELEtBQUsrdUMsV0FBVy91QyxLQUFLc3VDLFFBQVFjLGFBQWEsTUFBTXAxQyxFQUFFRyxVQUFVKzBDLFNBQVMsV0FBVyxTQUFTbHZDLEtBQUtzdUMsUUFBUUUsUUFBUS8wQyxFQUFFdUcsTUFBTXpELElBQUksR0FBR3lELEtBQUtndkMsZUFBZSxJQUFJNUcsT0FBT3BvQyxLQUFLc3VDLFFBQVFlLFlBQVksS0FBSzUxQyxFQUFFdUcsTUFBTXpELElBQUksR0FBR3lELEtBQUtndkMsZUFBZSxNQUFNaDFDLEVBQUVHLFVBQVVnMUMsYUFBYSxXQUFXLFNBQVNudkMsS0FBS3N1QyxRQUFRRyxZQUFZenVDLEtBQUsrdUMsV0FBVyxNQUFNL3VDLEtBQUtndkMsZUFBZSxTQUFTaHZDLEtBQUtqRCxNQUFNazFCLEtBQUssTUFBTWp5QixLQUFLK3VDLFdBQVcsT0FBTy91QyxLQUFLZ3ZDLGVBQWUsUUFBUWh2QyxLQUFLakQsTUFBTWtRLElBQUksTUFBTWpULEVBQXRxQyxDQUF5cUNnMEMsYUFBYXgxQyxFQUFFLFNBQVM2QyxHQUFHLFNBQVNyQixFQUFFUCxHQUFHLElBQUlPLEVBQUVxQixFQUFFM0MsS0FBS3NILE9BQU9BLEtBQUssT0FBT2hHLEVBQUVzMUMsVUFBVSxFQUFFdDFDLEVBQUV1MUMsWUFBWSxVQUFVdjFDLEVBQUV3MUMsWUFBWSxFQUFFeDFDLEVBQUV5MUMsZUFBZSxFQUFFejFDLEVBQUUwMUMsV0FBVyxPQUFPMTFDLEVBQUUyMUMsU0FBU2gxQyxTQUFTcUMsY0FBYyxPQUFPaEQsRUFBRTQxQyxXQUFXNTFDLEVBQUU2MUMsWUFBWTkxQyxLQUFLQyxHQUFHQSxFQUFFODFDLFNBQVM5MUMsRUFBRSsxQyxVQUFVaDJDLEtBQUtDLEdBQUdBLEVBQUU0YixNQUFNbmMsRUFBRU8sRUFBRW9ULFVBQVVwVSxFQUFFeU8sRUFBRXdnQyxPQUFPbUUsTUFBTXB5QyxFQUFFMjFDLFNBQVN2aUMsVUFBVXBVLEVBQUV5TyxFQUFFd2dDLE9BQU9xRSxlQUFldHlDLEVBQUV3RCxZQUFZeEQsRUFBRTIxQyxVQUFVMzFDLEVBQUVrVCxpQkFBaUIsWUFBWWxULEVBQUVnMkMsWUFBWWoyQyxLQUFLQyxJQUFJQSxFQUFFLE9BQU96QixFQUFFeUIsRUFBRXFCLEdBQUdwQyxPQUFPQyxlQUFlYyxFQUFFLHFCQUFxQixDQUFDWixJQUFJLFdBQVcsTUFBTSxDQUFDLGFBQWEsZ0JBQWdCLG1CQUFtQixvQkFBb0JELFlBQVcsRUFBR29sQixjQUFhLElBQUt2a0IsRUFBRUcsVUFBVWkwQyx5QkFBeUIsU0FBUy95QyxHQUFHLE9BQU9BLEdBQUcsSUFBSSxhQUFhMkUsS0FBSzJ2QyxTQUFTcGdDLFlBQVl2UCxLQUFLc3VDLFFBQVE5MEMsTUFBTSxNQUFNLElBQUksZ0JBQWdCd0csS0FBS3N2QyxVQUFVbEgsT0FBT3BvQyxLQUFLc3VDLFFBQVFqZ0IsVUFBVXJ1QixLQUFLaXdDLGVBQWVqd0MsS0FBS3N2QyxXQUFXLE1BQU0sSUFBSSxtQkFBbUIsU0FBU3R2QyxLQUFLc3VDLFFBQVFHLFlBQVloMUMsRUFBRXVHLE1BQU00NEIsU0FBUzUvQixFQUFFeU8sRUFBRXdnQyxPQUFPb0UsV0FBVzV5QyxFQUFFdUcsS0FBSzJ2QyxVQUFVL1csU0FBUzUvQixFQUFFeU8sRUFBRXdnQyxPQUFPc0Usc0JBQXNCOXlDLEVBQUV1RyxNQUFNaTVCLFlBQVlqZ0MsRUFBRXlPLEVBQUV3Z0MsT0FBT29FLFdBQVc1eUMsRUFBRXVHLEtBQUsydkMsVUFBVTFXLFlBQVlqZ0MsRUFBRXlPLEVBQUV3Z0MsT0FBT3NFLHFCQUFxQnZzQyxLQUFLa3dDLGNBQWNsd0MsS0FBS2l3QyxlQUFlandDLEtBQUtzdkMsV0FBVyxNQUFNLElBQUksa0JBQWtCLFVBQVV0dkMsS0FBS3N1QyxRQUFRQyxVQUFVOTBDLEVBQUV1RyxLQUFLMnZDLFVBQVVudUIsT0FBTy9uQixFQUFFdUcsS0FBSzJ2QyxVQUFVcnVCLFNBQVN0bkIsRUFBRUcsVUFBVTgxQyxlQUFlLFNBQVM1MEMsR0FBRzVCLEVBQUV1RyxNQUFNekQsSUFBSSxHQUFHeUQsS0FBSzB2QyxXQUFXcjBDLEVBQUUsTUFBTXJCLEVBQUVHLFVBQVUrMUMsWUFBWSxXQUFXLEdBQUdsd0MsS0FBS213QyxjQUFjLENBQUMsSUFBSTEyQyxFQUFFdUcsS0FBS213QyxjQUFjcGUsd0JBQXdCLFNBQVMveEIsS0FBS3N1QyxRQUFRRyxZQUFZenVDLEtBQUt1dkMsWUFBWSxVQUFVdnZDLEtBQUswdkMsV0FBVyxNQUFNMXZDLEtBQUt3dkMsWUFBWS8xQyxFQUFFd1QsSUFBSWpOLEtBQUt5dkMsZUFBZWgyQyxFQUFFNjFCLE9BQU90dkIsS0FBS2pELE1BQU1rMUIsS0FBSyxNQUFNanlCLEtBQUt1dkMsWUFBWSxVQUFVdnZDLEtBQUswdkMsV0FBVyxPQUFPMXZDLEtBQUt3dkMsWUFBWS8xQyxFQUFFdzRCLEtBQUtqeUIsS0FBS3l2QyxlQUFlaDJDLEVBQUUwekIsTUFBTW50QixLQUFLakQsTUFBTWtRLElBQUksT0FBT2pULEVBQUVHLFVBQVU2MUMsWUFBWSxTQUFTdjJDLEdBQUdBLEVBQUV1ckIsaUJBQWlCaGxCLEtBQUtrd0MsY0FBY3YxQyxTQUFTdVMsaUJBQWlCLFlBQVlsTixLQUFLNHZDLFlBQVlqMUMsU0FBU3VTLGlCQUFpQixVQUFVbE4sS0FBSzh2QyxXQUFXOTFDLEVBQUVHLFVBQVUwMUMsWUFBWSxTQUFTcDJDLEdBQUd1RyxLQUFLc3ZDLFdBQVc3MUMsRUFBRXVHLEtBQUt1dkMsYUFBYXZ2QyxLQUFLd3ZDLGNBQWN4dkMsS0FBS3l2QyxlQUFlLEtBQUt6dkMsS0FBS3N2QyxVQUFVLElBQUl0dkMsS0FBS3N2QyxVQUFVLEdBQUd0dkMsS0FBS3N2QyxVQUFVLE1BQU10dkMsS0FBS3N2QyxVQUFVLEtBQUt0dkMsS0FBS293QyxjQUFjLElBQUlDLFlBQVksY0FBYyxDQUFDbG9CLFNBQVEsRUFBR0MsWUFBVyxFQUFHakksVUFBUyxFQUFHb0ksT0FBTyxDQUFDenZCLEtBQUtrSCxLQUFLNFYsTUFBTXBjLE1BQU13RyxLQUFLc3ZDLGVBQWV0MUMsRUFBRUcsVUFBVTQxQyxVQUFVLFdBQVdwMUMsU0FBU29pQixvQkFBb0IsWUFBWS9jLEtBQUs0dkMsWUFBWWoxQyxTQUFTb2lCLG9CQUFvQixVQUFVL2MsS0FBSzh2QyxXQUFXOTFDLEVBQXQxRSxDQUF5MUVnMEMsYUFBYXAxQyxFQUFFLFNBQVN5QyxHQUFHLFNBQVNyQixJQUFJLElBQUlQLEVBQUU0QixFQUFFM0MsS0FBS3NILE9BQU9BLEtBQUt2RyxFQUFFNjJDLGlCQUFpQixHQUFHNzJDLEVBQUVtYyxNQUFNLFVBQVVuYyxFQUFFMlQsVUFBVXBVLEVBQUV5TyxFQUFFd2dDLE9BQU90bkIsTUFBTSxJQUFJLElBQUkzbUIsRUFBRSxFQUFFQSxFQUFFLEVBQUVBLElBQUlQLEVBQUU2MkMsaUJBQWlCdDJDLEdBQUdXLFNBQVNxQyxjQUFjLFFBQVF2RCxFQUFFNjJDLGlCQUFpQnQyQyxHQUFHb1QsVUFBVXBVLEVBQUV5TyxFQUFFd2dDLE9BQU9pRixrQkFBa0IsSUFBSTMwQyxFQUFFb0MsU0FBU3FDLGNBQWMsT0FBT3pFLEVBQUU2VSxVQUFVcFUsRUFBRXlPLEVBQUV3Z0MsT0FBTytFLGNBQWMsSUFBSSxJQUFJM3pDLEVBQUUsRUFBRW9PLEVBQUVoTyxFQUFFNjJDLGlCQUFpQmozQyxFQUFFb08sRUFBRS9MLE9BQU9yQyxJQUFJLENBQUMsSUFBSWlCLEVBQUVtTixFQUFFcE8sR0FBR2QsRUFBRWlGLFlBQVlsRCxHQUFHLE9BQU9iLEVBQUVxVSxVQUFVLDZCQUE2QjlVLEVBQUV5TyxFQUFFd2dDLE9BQU95RSxlQUFlLDJCQUEyQjF6QyxFQUFFeU8sRUFBRXdnQyxPQUFPMkUsZ0JBQWdCLDhCQUE4QjV6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLGtEQUFrRDl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPMkUsZ0JBQWdCLDhCQUE4QjV6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLGtEQUFrRDl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPMkUsZ0JBQWdCLDhCQUE4QjV6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLHFDQUFxQzl6QyxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsbUJBQW1CLDBDQUEwQ3J6QyxFQUFFK0QsWUFBWWpGLEdBQUdrQixFQUFFeVQsaUJBQWlCLFlBQVl6VCxFQUFFODJDLGdCQUFnQngyQyxLQUFLTixJQUFJQSxFQUFFLE9BQU9sQixFQUFFeUIsRUFBRXFCLEdBQUdwQyxPQUFPQyxlQUFlYyxFQUFFLHFCQUFxQixDQUFDWixJQUFJLFdBQVcsTUFBTSxDQUFDLGlCQUFpQixpQkFBaUIscUJBQXFCRCxZQUFXLEVBQUdvbEIsY0FBYSxJQUFLdmtCLEVBQUVHLFVBQVVpMEMseUJBQXlCLFNBQVMveUMsR0FBRyxPQUFPQSxHQUFHLElBQUksaUJBQWlCLElBQUksaUJBQWlCMkUsS0FBS3d3QyxTQUFTLE1BQU0sSUFBSSxtQkFBbUIsU0FBU3h3QyxLQUFLc3VDLFFBQVFHLFlBQVloMUMsRUFBRXVHLE1BQU00NEIsU0FBUzUvQixFQUFFeU8sRUFBRXdnQyxPQUFPd0UsV0FBV2h6QyxFQUFFdUcsTUFBTXlOLEtBQUssSUFBSXpVLEVBQUV5TyxFQUFFd2dDLE9BQU95RSxnQkFBZ0I5VCxTQUFTNS9CLEVBQUV5TyxFQUFFd2dDLE9BQU8wRSxvQkFBb0JsekMsRUFBRXVHLE1BQU15TixLQUFLLElBQUl6VSxFQUFFeU8sRUFBRXdnQyxPQUFPK0UsZUFBZXBVLFNBQVM1L0IsRUFBRXlPLEVBQUV3Z0MsT0FBT2dGLG1CQUFtQnh6QyxFQUFFdUcsTUFBTXlOLEtBQUssSUFBSXpVLEVBQUV5TyxFQUFFd2dDLE9BQU9pRixtQkFBbUJ0VSxTQUFTNS9CLEVBQUV5TyxFQUFFd2dDLE9BQU9rRix1QkFBdUIxekMsRUFBRXVHLE1BQU15TixLQUFLLElBQUl6VSxFQUFFeU8sRUFBRXdnQyxPQUFPMkUsaUJBQWlCaFUsU0FBUzUvQixFQUFFeU8sRUFBRXdnQyxPQUFPNEUscUJBQXFCcHpDLEVBQUV1RyxNQUFNeU4sS0FBSyxJQUFJelUsRUFBRXlPLEVBQUV3Z0MsT0FBTzZFLG9CQUFvQmxVLFNBQVM1L0IsRUFBRXlPLEVBQUV3Z0MsT0FBTzhFLDBCQUEwQnR6QyxFQUFFdUcsTUFBTWk1QixZQUFZamdDLEVBQUV5TyxFQUFFd2dDLE9BQU93RSxXQUFXaHpDLEVBQUV1RyxNQUFNeU4sS0FBSyxJQUFJelUsRUFBRXlPLEVBQUV3Z0MsT0FBT3lFLGdCQUFnQnpULFlBQVlqZ0MsRUFBRXlPLEVBQUV3Z0MsT0FBTzBFLG9CQUFvQmx6QyxFQUFFdUcsTUFBTXlOLEtBQUssSUFBSXpVLEVBQUV5TyxFQUFFd2dDLE9BQU8rRSxlQUFlL1QsWUFBWWpnQyxFQUFFeU8sRUFBRXdnQyxPQUFPZ0YsbUJBQW1CeHpDLEVBQUV1RyxNQUFNeU4sS0FBSyxJQUFJelUsRUFBRXlPLEVBQUV3Z0MsT0FBT2lGLG1CQUFtQmpVLFlBQVlqZ0MsRUFBRXlPLEVBQUV3Z0MsT0FBT2tGLHVCQUF1QjF6QyxFQUFFdUcsTUFBTXlOLEtBQUssSUFBSXpVLEVBQUV5TyxFQUFFd2dDLE9BQU8yRSxpQkFBaUIzVCxZQUFZamdDLEVBQUV5TyxFQUFFd2dDLE9BQU80RSxxQkFBcUJwekMsRUFBRXVHLE1BQU15TixLQUFLLElBQUl6VSxFQUFFeU8sRUFBRXdnQyxPQUFPNkUsb0JBQW9CN1QsWUFBWWpnQyxFQUFFeU8sRUFBRXdnQyxPQUFPOEUsMkJBQTJCL3lDLEVBQUVHLFVBQVVxMkMsT0FBTyxXQUFXLElBQUkvMkMsRUFBRTJ1QyxPQUFPcG9DLEtBQUtzdUMsUUFBUU8sVUFBVXh6QyxFQUFFK3NDLE9BQU9wb0MsS0FBS3N1QyxRQUFRUSxVQUFVOTBDLEdBQUdxQixFQUFFNUIsR0FBRyxFQUFFdUcsS0FBS3N3QyxpQkFBaUIsR0FBRy9nQyxZQUFZOVYsRUFBRWsxQyxVQUFVM3VDLEtBQUtzd0MsaUJBQWlCLEdBQUcvZ0MsYUFBYTlWLEVBQUVPLEdBQUcyMEMsVUFBVTN1QyxLQUFLc3dDLGlCQUFpQixHQUFHL2dDLGFBQWE5VixFQUFFTyxFQUFFQSxHQUFHMjBDLFVBQVUzdUMsS0FBS3N3QyxpQkFBaUIsR0FBRy9nQyxZQUFZbFUsRUFBRXN6QyxXQUFXMzBDLEVBQUVHLFVBQVVvMkMsZ0JBQWdCLFNBQVM5MkMsR0FBRyxJQUFJNEIsRUFBRTJFLEtBQUsreEIsd0JBQXdCLzNCLEVBQUUsRUFBRVAsRUFBRXd2QixTQUFTeHZCLEVBQUV5dkIsVUFBVWx2QixFQUFFLFNBQVNnRyxLQUFLc3VDLFFBQVFHLFlBQVloMUMsRUFBRXl2QixRQUFRN3RCLEVBQUU0UixNQUFNNVIsRUFBRWkwQixPQUFPLE1BQU03MUIsRUFBRXd2QixRQUFRNXRCLEVBQUU0MkIsT0FBTzUyQixFQUFFOHhCLE1BQU0sTUFBTSxTQUFTbnRCLEtBQUtzdUMsUUFBUUUsU0FBUyxjQUFjeHVDLEtBQUs0VixNQUFNNVYsS0FBSzRWLE1BQU0sVUFBVTVWLEtBQUs0VixNQUFNLFlBQVk1VixLQUFLb3dDLGNBQWMsSUFBSUMsWUFBWSxjQUFjLENBQUNsb0IsU0FBUSxFQUFHQyxZQUFXLEVBQUdqSSxVQUFTLEVBQUdvSSxPQUFPLENBQUN6dkIsS0FBS2tILEtBQUs0VixNQUFNcGMsTUFBTVEsT0FBT0EsRUFBdndILENBQTB3SGcwQyxhQUFheUMsZUFBZXIzQyxJQUFJLGtCQUFrQnEzQyxlQUFlQyxPQUFPLGVBQWVyM0MsR0FBR28zQyxlQUFlQyxPQUFPLDBCQUEwQmw0QyxHQUFHaTRDLGVBQWVDLE9BQU8seUJBQXlCanBDLEdBQUdncEMsZUFBZUMsT0FBTywwQkFBMEI5M0MsR0FBRzYzQyxlQUFlQyxPQUFPLDZCQUE2QnAyQyxNQUFNNUIsS0FBS3NILEtBQUtoRyxFQUFFLEtBQUssU0FBU1AsRUFBRTRCOzs7Ozs7Ozs7O0NBVWx5aEIsV0FBVyxjQUFjLFdBQVcsUUFBRyxJQUFTWCxPQUFPaTJDLGNBQVMsSUFBU2oyQyxPQUFPKzFDLGlCQUFnQi8xQyxPQUFPKzFDLGVBQWVHLDBCQUFsRixDQUFtSCxJQUFNbjNDLEVBQUV1MEMsWUFBWXR6QyxPQUFPc3pDLFlBQVksQ0FBQ0EsWUFBWSxXQUFXLE9BQU8yQyxRQUFRRSxVQUFVcDNDLEVBQUUsR0FBR3VHLEtBQUtzQyxlQUFlMHJDLFlBQVlBLFlBQVk3ekMsVUFBVVYsRUFBRVUsVUFBVTZ6QyxZQUFZN3pDLFVBQVVtSSxZQUFZMHJDLFlBQVkvMEMsT0FBT3MwQyxlQUFlUyxZQUFZdjBDLElBQTdXLEdBQXpCLElBQWdaLFNBQVNBLEVBQUU0QixFQUFFckIsSUFBRyxTQUFVUCxFQUFFNEI7Ozs7Ozs7Ozs7Q0FVN2EsV0FBWSxhQUFhLElBQUlyQixFQUFFLFNBQVNoQixFQUFFUyxHQUFHLElBQUk0QixFQUFFLEVBQUUsT0FBTyxXQUFXLE9BQU9BLEVBQUU1QixFQUFFaUMsT0FBTyxDQUFDd0wsTUFBSyxFQUFHMU4sTUFBTUMsRUFBRTRCLE1BQU0sQ0FBQzZMLE1BQUssSUFBSyxJQUFJM08sRUFBRSxtQkFBbUJVLE9BQU82M0MsaUJBQWlCNzNDLE9BQU9DLGVBQWUsU0FBU08sRUFBRTRCLEVBQUVyQixHQUFHUCxHQUFHMkssTUFBTWpLLFdBQVdWLEdBQUdSLE9BQU9rQixZQUFZVixFQUFFNEIsR0FBR3JCLEVBQUVSLFFBQVFILEVBQUUsb0JBQW9CcUIsUUFBUUEsU0FBU3NGLEtBQUtBLFVBQUssSUFBU3ZHLEdBQUcsTUFBTUEsRUFBRUEsRUFBRXVHLEtBQUssU0FBU3lILElBQUlBLEVBQUUsYUFBYXBPLEVBQUVDLFNBQVNELEVBQUVDLE9BQU95M0MsR0FBRyxTQUFTejJDLEVBQUViLEVBQUU0QixHQUFHMkUsS0FBS3lILEVBQUVoTyxFQUFFbEIsRUFBRXlILEtBQUssY0FBYyxDQUFDdWUsY0FBYSxFQUFHOEksVUFBUyxFQUFHN3RCLE1BQU02QixJQUFJZixFQUFFSCxVQUFVcUYsU0FBUyxXQUFXLE9BQU9RLEtBQUt5SCxHQUFHLElBQUlqUCxFQUFFSSxFQUFFbTRDLEdBQUd2NEMsRUFBRSxFQUFFLFNBQVNpQixFQUFFNEIsR0FBRyxHQUFHMkUsZ0JBQWdCdkcsRUFBRSxNQUFNLElBQUk2aEIsVUFBVSwrQkFBK0IsT0FBTyxJQUFJaGhCLEVBQUUsa0JBQWtCZSxHQUFHLElBQUksSUFBSTdDLElBQUk2QyxLQUFLLFNBQVMyMUMsSUFBSXZwQyxJQUFJLElBQUloTyxFQUFFSixFQUFFQyxPQUFPc00sU0FBU25NLElBQUlBLEVBQUVKLEVBQUVDLE9BQU9zTSxTQUFTdk0sRUFBRUMsT0FBTyxvQkFBb0IsbUJBQW1COEssTUFBTWpLLFVBQVVWLElBQUlsQixFQUFFNkwsTUFBTWpLLFVBQVVWLEVBQUUsQ0FBQzhrQixjQUFhLEVBQUc4SSxVQUFTLEVBQUc3dEIsTUFBTSxXQUFXLE9BQU8sU0FBU0MsR0FBRyxPQUFPdTNDLEtBQUt2M0MsRUFBRSxDQUFDd1EsS0FBS3hRLElBQUlKLEVBQUVDLE9BQU9zTSxVQUFVLFdBQVcsT0FBTzVGLE1BQU12RyxFQUEvRSxDQUFrRlQsRUFBRWdILFVBQVVneEMsRUFBRSxhQUFhLFNBQVNuNEMsRUFBRVksR0FBRyxJQUFJNEIsRUFBRSxvQkFBb0IvQixRQUFRQSxPQUFPc00sVUFBVW5NLEVBQUVILE9BQU9zTSxVQUFVLE9BQU92SyxFQUFFQSxFQUFFM0MsS0FBS2UsR0FBRyxDQUFDd1EsS0FBS2pSLEVBQUVTLElBQUksU0FBU3czQyxFQUFFeDNDLEdBQUcsSUFBSSxJQUFJNEIsRUFBRXJCLEVBQUUsS0FBS3FCLEVBQUU1QixFQUFFd1EsUUFBUS9DLE1BQU1sTixFQUFFNEMsS0FBS3ZCLEVBQUU3QixPQUFPLE9BQU9RLEVBQUUsR0FBRyxtQkFBbUJmLE9BQU9zMEMsZUFBZTMwQyxFQUFFSyxPQUFPczBDLG1CQUFtQixDQUFDLElBQUlsekMsRUFBRVosRUFBRSxDQUFDLElBQUl3ZixFQUFFLEdBQUcsSUFBSUEsRUFBRXUwQixVQUFVLENBQUMwRCxJQUFHLEdBQUk3MkMsRUFBRTRlLEVBQUVpNEIsR0FBRyxNQUFNejNDLEVBQUUsTUFBTTAzQyxLQUFLOTJDLEdBQUUsRUFBR3pCLEVBQUV5QixFQUFFLFNBQVNaLEVBQUU0QixHQUFHLEdBQUc1QixFQUFFK3pDLFVBQVVueUMsRUFBRTVCLEVBQUUrekMsWUFBWW55QyxFQUFFLE1BQU0sSUFBSWlnQixVQUFVN2hCLEVBQUUsc0JBQXNCLE9BQU9BLEdBQUcsS0FBSyxJQUFJZCxFQUFFQyxFQUFFLFNBQVN5ZixJQUFJclksS0FBS3hILEdBQUUsRUFBR3dILEtBQUswSCxFQUFFLEtBQUsxSCxLQUFLb3hDLFFBQUcsRUFBT3B4QyxLQUFLeUgsRUFBRSxFQUFFekgsS0FBS3F4QyxFQUFFLEVBQUVyeEMsS0FBS3BILEVBQUUsS0FBSyxTQUFTMDRDLEVBQUU3M0MsR0FBRyxHQUFHQSxFQUFFakIsRUFBRSxNQUFNLElBQUk4aUIsVUFBVSxnQ0FBZ0M3aEIsRUFBRWpCLEdBQUUsRUFBRyxTQUFTKzRDLEVBQUU5M0MsRUFBRTRCLEdBQUc1QixFQUFFYixFQUFFLENBQUM0NEMsR0FBR24yQyxFQUFFbzJDLElBQUcsR0FBSWg0QyxFQUFFZ08sRUFBRWhPLEVBQUU0M0MsRUFBRSxTQUFTM3BDLEVBQUVqTyxFQUFFNEIsR0FBRyxPQUFPNUIsRUFBRWdPLEVBQUUsRUFBRSxDQUFDak8sTUFBTTZCLEdBQUcsU0FBUzBFLEVBQUV0RyxHQUFHdUcsS0FBS3lILEVBQUUsSUFBSTRRLEVBQUVyWSxLQUFLMEgsRUFBRWpPLEVBQUUsU0FBU2k0QyxFQUFFajRDLEVBQUU0QixFQUFFckIsRUFBRWhCLEdBQUcsSUFBSSxJQUFJVCxFQUFFOEMsRUFBRTNDLEtBQUtlLEVBQUVnTyxFQUFFQyxFQUFFMU4sR0FBRyxLQUFLekIsYUFBYVUsUUFBUSxNQUFNLElBQUlxaUIsVUFBVSxtQkFBbUIvaUIsRUFBRSxxQkFBcUIsSUFBSUEsRUFBRTJPLEtBQUssT0FBT3pOLEVBQUVnTyxFQUFFalAsR0FBRSxFQUFHRCxFQUFFLElBQUljLEVBQUVkLEVBQUVpQixNQUFNLE1BQU02QixHQUFHLE9BQU81QixFQUFFZ08sRUFBRUMsRUFBRSxLQUFLNnBDLEVBQUU5M0MsRUFBRWdPLEVBQUVwTSxHQUFHczJDLEVBQUVsNEMsR0FBRyxPQUFPQSxFQUFFZ08sRUFBRUMsRUFBRSxLQUFLMU8sRUFBRU4sS0FBS2UsRUFBRWdPLEVBQUVwTyxHQUFHczRDLEVBQUVsNEMsR0FBRyxTQUFTazRDLEVBQUVsNEMsR0FBRyxLQUFLQSxFQUFFZ08sRUFBRUEsR0FBRyxJQUFJLElBQUlwTSxFQUFFNUIsRUFBRWlPLEVBQUVqTyxFQUFFZ08sR0FBRyxHQUFHcE0sRUFBRSxPQUFPNUIsRUFBRWdPLEVBQUVqUCxHQUFFLEVBQUcsQ0FBQ2dCLE1BQU02QixFQUFFN0IsTUFBTTBOLE1BQUssR0FBSSxNQUFNN0wsR0FBRzVCLEVBQUVnTyxFQUFFMnBDLFFBQUcsRUFBT0csRUFBRTkzQyxFQUFFZ08sRUFBRXBNLEdBQUcsR0FBRzVCLEVBQUVnTyxFQUFFalAsR0FBRSxFQUFHaUIsRUFBRWdPLEVBQUU3TyxFQUFFLENBQUMsR0FBR3lDLEVBQUU1QixFQUFFZ08sRUFBRTdPLEVBQUVhLEVBQUVnTyxFQUFFN08sRUFBRSxLQUFLeUMsRUFBRW8yQyxHQUFHLE1BQU1wMkMsRUFBRW0yQyxHQUFHLE1BQU0sQ0FBQ2g0QyxNQUFNNkIsRUFBRXUyQyxPQUFPMXFDLE1BQUssR0FBSSxNQUFNLENBQUMxTixXQUFNLEVBQU8wTixNQUFLLEdBQUksU0FBUzJxQyxFQUFFcDRDLEdBQUd1RyxLQUFLaUssS0FBSyxTQUFTNU8sR0FBRyxPQUFPaTJDLEVBQUU3M0MsRUFBRWdPLEdBQUdoTyxFQUFFZ08sRUFBRUMsRUFBRXJNLEVBQUVxMkMsRUFBRWo0QyxFQUFFQSxFQUFFZ08sRUFBRUMsRUFBRXVDLEtBQUs1TyxFQUFFNUIsRUFBRWdPLEVBQUVxcUMsSUFBSXI0QyxFQUFFZ08sRUFBRXFxQyxFQUFFejJDLEdBQUdBLEVBQUVzMkMsRUFBRWw0QyxJQUFJNEIsR0FBRzJFLEtBQUsreEMsTUFBTSxTQUFTMTJDLEdBQUcsT0FBT2kyQyxFQUFFNzNDLEVBQUVnTyxHQUFHaE8sRUFBRWdPLEVBQUVDLEVBQUVyTSxFQUFFcTJDLEVBQUVqNEMsRUFBRUEsRUFBRWdPLEVBQUVDLEVBQUVxcUMsTUFBTTEyQyxFQUFFNUIsRUFBRWdPLEVBQUVxcUMsSUFBSVAsRUFBRTkzQyxFQUFFZ08sRUFBRXBNLEdBQUdBLEVBQUVzMkMsRUFBRWw0QyxJQUFJNEIsR0FBRzJFLEtBQUs0eEMsT0FBTyxTQUFTdjJDLEdBQUcsT0FBTyxTQUFTNUIsRUFBRTRCLEdBQUdpMkMsRUFBRTczQyxFQUFFZ08sR0FBRyxJQUFJek4sRUFBRVAsRUFBRWdPLEVBQUVDLEVBQUUsT0FBTzFOLEVBQUUwM0MsRUFBRWo0QyxFQUFFLFdBQVdPLEVBQUVBLEVBQUU0M0MsT0FBTyxTQUFTbjRDLEdBQUcsTUFBTSxDQUFDRCxNQUFNQyxFQUFFeU4sTUFBSyxJQUFLN0wsRUFBRTVCLEVBQUVnTyxFQUFFbXFDLFNBQVNuNEMsRUFBRWdPLEVBQUVtcUMsT0FBT3YyQyxHQUFHczJDLEVBQUVsNEMsSUFBeEksQ0FBNklBLEVBQUU0QixJQUFJMjFDLElBQUloeEMsS0FBSzFHLE9BQU9zTSxVQUFVLFdBQVcsT0FBTzVGLE1BQU0sU0FBU2d5QyxFQUFFdjRDLEVBQUU0QixHQUFHLE9BQU9BLEVBQUUsSUFBSXcyQyxFQUFFLElBQUk5eEMsRUFBRTFFLElBQUkxQyxHQUFHQSxFQUFFMEMsRUFBRTVCLEVBQUVVLFdBQVdrQixFQUFFZ2QsRUFBRWxlLFVBQVUyM0MsRUFBRSxTQUFTcjRDLEdBQUd1RyxLQUFLb3hDLEdBQUczM0MsR0FBRzRlLEVBQUVsZSxVQUFVeTNDLE9BQU8sU0FBU240QyxHQUFHdUcsS0FBS3BILEVBQUUsQ0FBQ2c1QyxPQUFPbjRDLEdBQUd1RyxLQUFLeUgsRUFBRXpILEtBQUtxeEMsR0FBR2p0QyxNQUFNNnRDLE9BQU83dEMsTUFBTTZ0QyxLQUFLLFNBQVN4NEMsR0FBRyxNQUFNLEdBQUc0RyxNQUFNM0gsS0FBS2UsS0FBS1IsT0FBT2k1QyxTQUFTajVDLE9BQU9pNUMsT0FBTyxTQUFTejRDLEdBQUcsSUFBSSxJQUFJNEIsRUFBRXJCLEVBQUUsR0FBR3FHLE1BQU0zSCxLQUFLd0ssVUFBVSxHQUFHbEssRUFBRSxFQUFFQSxFQUFFZ0IsRUFBRTBCLE9BQU8xQyxJQUFJLEdBQUdxQyxFQUFFckIsRUFBRWhCLEdBQUcsSUFBSSxJQUFJVCxFQUFFa0IsRUFBRUosRUFBRUosT0FBT2tFLEtBQUs5QixHQUFHb00sRUFBRSxFQUFFQSxFQUFFcE8sRUFBRXFDLE9BQU8rTCxJQUFJLENBQUMsSUFBSW5OLEVBQUVqQixFQUFFb08sR0FBR2xQLEVBQUUrQixHQUFHZSxFQUFFZixHQUFHLE9BQU9iLElBQUksSUFBSTA0QyxFQUFFeDNDLFNBQVN5M0MsWUFBWSxTQUFTLEdBQUdELEVBQUVFLFVBQVUsT0FBTSxHQUFHLEdBQUlGLEVBQUVudEIsa0JBQWtCbXRCLEVBQUV0cUIsaUJBQWlCLENBQUMsSUFBSXlxQixFQUFFcHRCLE1BQU0vcUIsVUFBVTZxQixlQUFlRSxNQUFNL3FCLFVBQVU2cUIsZUFBZSxXQUFXaGxCLEtBQUtvb0IsYUFBYWtxQixFQUFFNTVDLEtBQUtzSCxNQUFNL0csT0FBT0MsZUFBZThHLEtBQUssbUJBQW1CLENBQUM1RyxJQUFJLFdBQVcsT0FBTSxHQUFJbWxCLGNBQWEsTUFBTyxJQUFJZzBCLEVBQUUsVUFBVXhuQyxLQUFLMjlCLFVBQVVDLFdBQVcsSUFBSWp1QyxPQUFPd3FCLE9BQU9xdEIsR0FBRyxtQkFBbUI3M0MsT0FBT3dxQixNQUFNLENBQUMsSUFBSXN0QixFQUFFOTNDLE9BQU93cUIsTUFBTSxHQUFHeHFCLE9BQU93cUIsTUFBTSxTQUFTenJCLEVBQUU0QixHQUFHQSxFQUFFQSxHQUFHLEdBQUcsSUFBSXJCLEVBQUVXLFNBQVN5M0MsWUFBWSxTQUFTLE9BQU9wNEMsRUFBRXE0QyxVQUFVNTRDLElBQUk0QixFQUFFOHNCLFVBQVU5c0IsRUFBRStzQixZQUFZcHVCLEdBQUd3NEMsRUFBRSxDQUFDLElBQUksSUFBSUMsS0FBS0QsRUFBRTkzQyxPQUFPd3FCLE1BQU11dEIsR0FBR0QsRUFBRUMsR0FBRy8zQyxPQUFPd3FCLE1BQU0vcUIsVUFBVXE0QyxFQUFFcjRDLFdBQVcsS0FBS08sT0FBTzIxQyxhQUFha0MsR0FBRyxtQkFBbUI3M0MsT0FBTzIxQyxlQUFlMzFDLE9BQU8yMUMsWUFBWSxTQUFTNTJDLEVBQUU0QixHQUFHQSxFQUFFQSxHQUFHLEdBQUcsSUFBSXJCLEVBQUVXLFNBQVN5M0MsWUFBWSxlQUFlLE9BQU9wNEMsRUFBRTA0QyxnQkFBZ0JqNUMsSUFBSTRCLEVBQUU4c0IsVUFBVTlzQixFQUFFK3NCLFdBQVcvc0IsRUFBRWt0QixRQUFRdnVCLEdBQUdVLE9BQU8yMUMsWUFBWWwyQyxVQUFVTyxPQUFPd3FCLE1BQU0vcUIsWUFBWU8sT0FBT2k0QyxZQUFZSixHQUFHLG1CQUFtQjczQyxPQUFPaTRDLFdBQVcsQ0FBQyxJQUFJQyxFQUFFbDRDLE9BQU9pNEMsV0FBVyxHQUFHajRDLE9BQU9pNEMsV0FBVyxTQUFTbDVDLEVBQUU0QixHQUFHQSxFQUFFQSxHQUFHLEdBQUcsSUFBSXJCLEVBQUVXLFNBQVN5M0MsWUFBWSxjQUFjLE9BQU9wNEMsRUFBRTY0QyxlQUFlcDVDLElBQUk0QixFQUFFOHNCLFVBQVU5c0IsRUFBRStzQixXQUFXL3NCLEVBQUV3dEIsTUFBTW51QixPQUFPVyxFQUFFa3RCLE9BQU9sdEIsRUFBRWt1QixRQUFRbHVCLEVBQUVtdUIsUUFBUW51QixFQUFFNHRCLFFBQVE1dEIsRUFBRTZ0QixRQUFRN3RCLEVBQUVpdEIsUUFBUWp0QixFQUFFNnNCLE9BQU83c0IsRUFBRXV0QixTQUFTdnRCLEVBQUVvdEIsUUFBUXB0QixFQUFFNHJCLE9BQU81ckIsRUFBRXlzQixlQUFlOXRCLEdBQUc0NEMsRUFBRSxJQUFJLElBQUlFLEtBQUtGLEVBQUVsNEMsT0FBT2k0QyxXQUFXRyxHQUFHRixFQUFFRSxHQUFHcDRDLE9BQU9pNEMsV0FBV3g0QyxVQUFVeTRDLEVBQUV6NEMsV0FBVyxXQUFXLFNBQVNWLEtBQUssU0FBUzRCLEVBQUU1QixFQUFFNEIsR0FBRyxJQUFJNUIsRUFBRTJFLFdBQVcxQyxPQUFPLE1BQU0sR0FBRyxPQUFPakMsRUFBRXVILFVBQVUsS0FBSyt4QyxLQUFLQyxjQUFjLE9BQU8vNUIsRUFBRXZnQixLQUFLZSxFQUFFNEIsR0FBRyxLQUFLMDNDLEtBQUtFLHVCQUF1QixPQUFPdDZDLEVBQUVELEtBQUtlLEVBQUU0QixHQUFHLFFBQVEsT0FBT2hCLEVBQUUzQixLQUFLZSxFQUFFNEIsSUFBSSxJQUFJckIsRUFBRSxvQkFBb0JrNUMsb0JBQW9CbDZDLElBQUkyQixTQUFTbW5CLHlCQUF5QkUsc0JBQXNCbXhCLGtCQUFrQjU2QyxHQUFFLEVBQUcsVUFBVXdTLEtBQUsyOUIsVUFBVUMsWUFBWSxXQUFXLFNBQVNsdkMsRUFBRUEsRUFBRTRCLEdBQUcsR0FBRzVCLGFBQWEwNUMsaUJBQWlCLElBQUksSUFBSW42QyxFQUFFQSxFQUFFUyxFQUFFcUYsWUFBWTlFLEVBQUV0QixLQUFLc0gsS0FBS2hILEVBQUVxQyxRQUFRckIsRUFBRXRCLEtBQUtzSCxLQUFLdkcsRUFBRTRCLEdBQUcsT0FBTzVCLEVBQUVsQixHQUFFLEVBQUcsSUFBSThDLEVBQUUwM0MsS0FBSzU0QyxVQUFVNm5CLFVBQVUrd0IsS0FBSzU0QyxVQUFVNm5CLFVBQVUsU0FBU3ZvQixHQUFHLE9BQU9BLEVBQUU0QixFQUFFM0MsS0FBS3NILEtBQUt2RyxHQUFHdUcsZ0JBQWdCbXpDLG1CQUFtQjE1QyxFQUFFK3pDLFVBQVUyRixpQkFBaUJoNUMsV0FBV1YsR0FBRzA1QyxpQkFBaUJoNUMsVUFBVWdSLGlCQUFpQjZpQyxZQUFZN3pDLFVBQVVnUixpQkFBaUJnb0MsaUJBQWlCaDVDLFVBQVVjLGNBQWMreUMsWUFBWTd6QyxVQUFVYyxjQUFjaEMsT0FBTzYzQyxpQkFBaUJxQyxpQkFBaUJoNUMsVUFBVSxDQUFDNkcsU0FBUyxDQUFDNUgsSUFBSSxXQUFXLE9BQU8yNUMsS0FBS0Usd0JBQXdCMTBCLGNBQWEsR0FBSTYwQixVQUFVLENBQUNoNkMsSUFBSSxhQUFhbWxCLGNBQWEsR0FBSXhVLFNBQVMsQ0FBQzNRLElBQUksV0FBVyxNQUFNLHNCQUFzQm1sQixjQUFhLEtBQU0sSUFBSXZrQixFQUFFKzRDLEtBQUs1NEMsVUFBVW1FLGFBQWF5MEMsS0FBSzU0QyxVQUFVbUUsYUFBYTdFLEVBQUUsSUFBSVQsRUFBRSs1QyxLQUFLNTRDLFVBQVVxRCxZQUFZdTFDLEtBQUs1NEMsVUFBVXFELFlBQVksU0FBU25DLEdBQUcsT0FBT0EsYUFBYTgzQyxpQkFBaUIxNUMsRUFBRWYsS0FBS3NILEtBQUszRSxFQUFFLE1BQU1yQyxFQUFFTixLQUFLc0gsS0FBSzNFLEdBQUdBLEdBQUcsSUFBSWhDLEVBQUUwNUMsS0FBSzU0QyxVQUFVa0UsWUFBWW9KLEVBQUVzckMsS0FBSzU0QyxVQUFVaXlCLGFBQWEybUIsS0FBSzU0QyxVQUFVaXlCLGFBQWEsU0FBUy93QixFQUFFckIsR0FBRyxPQUFPcUIsYUFBYTgzQyxrQkFBa0IxNUMsRUFBRWYsS0FBS3NILEtBQUszRSxFQUFFckIsR0FBR1gsRUFBRVgsS0FBS3NILEtBQUtoRyxJQUFJeU4sRUFBRS9PLEtBQUtzSCxLQUFLM0UsRUFBRXJCLEdBQUdBLEdBQUdxNUMsU0FBU2w1QyxVQUFVMm5CLHVCQUF1QixXQUFXLElBQUlyb0IsRUFBRXVHLEtBQUtoRCxjQUFjLE1BQU0sT0FBT3ZELEVBQUUrekMsVUFBVTJGLGlCQUFpQmg1QyxVQUFVVixHQUFHLElBQUlhLEVBQUUrNEMsU0FBU2w1QyxVQUFVbTVDLFdBQVdELFNBQVNsNUMsVUFBVW01QyxXQUFXLFNBQVM3NUMsRUFBRTRCLEdBQUcsT0FBT0EsRUFBRWYsRUFBRTVCLEtBQUtzSCxLQUFLdkcsRUFBRTRCLElBQUcsR0FBSTVCLGFBQWEwNUMsbUJBQW1COTNDLEVBQUVteUMsVUFBVTJGLGlCQUFpQmg1QyxXQUFXa0IsR0FBOTVDLEdBQW82QyxJQUFJaEMsRUFBRTA1QyxLQUFLNTRDLFVBQVU2bkIsVUFBVXZhLEVBQUU0ckMsU0FBU2w1QyxVQUFVNkMsY0FBYzFDLEVBQUUrNEMsU0FBU2w1QyxVQUFVbTVDLFdBQVc5NkMsRUFBRXU2QyxLQUFLNTRDLFVBQVVrRSxZQUFZekYsRUFBRW02QyxLQUFLNTRDLFVBQVVxRCxZQUFZdXpDLEVBQUVnQyxLQUFLNTRDLFVBQVVpeUIsYUFBYTRrQixFQUFFeFcsVUFBVXJnQyxVQUFVc2dDLGdCQUFnQjVoQyxFQUFFSSxPQUFPczZDLHlCQUF5Qjc0QyxPQUFPc3pDLFlBQVk3ekMsVUFBVSxjQUFjLENBQUNmLElBQUksV0FBVyxPQUFPNEcsS0FBSzhOLFdBQVcwUSxJQUFJLFNBQVMva0IsR0FBR3VHLEtBQUs4TixVQUFVclUsSUFBSXczQyxFQUFFaDRDLE9BQU9zNkMseUJBQXlCNzRDLE9BQU9xNEMsS0FBSzU0QyxVQUFVLGVBQWUsQ0FBQ2YsSUFBSSxXQUFXLE9BQU80RyxLQUFLNUIsYUFBYS9ELEVBQUVtNUMsUUFBUXI1QyxVQUFVZ1IsaUJBQWlCOE4sRUFBRW82QixTQUFTbDVDLFVBQVVnUixpQkFBaUJ4UyxFQUFFdzZDLGlCQUFpQmg1QyxVQUFVZ1IsaUJBQWlCa04sRUFBRSxXQUFXLElBQUlyZSxFQUFFLENBQUMsSUFBSVAsRUFBRWtCLFNBQVNxQyxjQUFjLFlBQVkzQixFQUFFVixTQUFTcUMsY0FBYyxZQUFZLE9BQU8zQixFQUFFNGMsUUFBUXphLFlBQVk3QyxTQUFTcUMsY0FBYyxRQUFRdkQsRUFBRXdlLFFBQVF6YSxZQUFZbkMsR0FBRyxLQUFLNUIsRUFBRUEsRUFBRXVvQixXQUFVLElBQUsvSixRQUFRN1osV0FBVzFDLFFBQVEsSUFBSWpDLEVBQUV3ZSxRQUFRblosV0FBV21aLFFBQVE3WixXQUFXMUMsUUFBUTFDLEdBQTVSLEdBQWtTLEdBQUdnQixFQUFFLENBQUMsSUFBSXMzQyxFQUFFMzJDLFNBQVM0b0MsZUFBZUQsbUJBQW1CLFlBQVlpTyxHQUFFLEVBQUc3cEMsRUFBRS9NLFNBQVNxQyxjQUFjLFNBQVMwSyxFQUFFNkgsWUFBWSwwQkFBMEIsSUFBSXhQLEVBQUVwRixTQUFTUyxLQUFLMkUsRUFBRXpCLGFBQWFvSixFQUFFM0gsRUFBRWloQyxtQkFBbUJ2bkMsRUFBRVUsVUFBVWxCLE9BQU9ZLE9BQU9tMEMsWUFBWTd6QyxXQUFXLElBQUl1M0MsR0FBRy8yQyxTQUFTcUMsY0FBYyxPQUFPNUMsZUFBZSxhQUFhWCxFQUFFZzZDLEVBQUUsU0FBU3A0QyxHQUFHLElBQUlBLEVBQUU0YyxTQUFTNWMsRUFBRXVSLGVBQWVqUyxTQUFTa1MsZ0JBQWdCRCxhQUFhLENBQUN2UixFQUFFNGMsUUFBUXE1QixFQUFFeHZCLHlCQUF5QixJQUFJLElBQUk5bkIsRUFBRUEsRUFBRXFCLEVBQUV5RCxZQUFZbEcsRUFBRUYsS0FBSzJDLEVBQUU0YyxRQUFRamUsR0FBRyxHQUFHMDNDLEVBQUVyMkMsRUFBRW15QyxVQUFVL3pDLEVBQUVVLGVBQWUsR0FBR2tCLEVBQUUybUIsVUFBVSxTQUFTM21CLEdBQUcsT0FBTzVCLEVBQUVpTyxFQUFFMUgsS0FBSzNFLElBQUlrMkMsRUFBRSxJQUFJTSxFQUFFeDJDLEdBQUcyMkMsRUFBRTMyQyxHQUFHLE1BQU01QixHQUFHODNDLEdBQUUsRUFBRzkzQyxFQUFFZ08sRUFBRXBNLEVBQUU0YyxXQUFXLElBQUkwNUIsRUFBRSxDQUFDenZCLE9BQU8sQ0FBQyxVQUFVRSxNQUFNLENBQUMsU0FBU0MsSUFBSSxDQUFDLFdBQVcsU0FBU0MsR0FBRyxDQUFDLFFBQVEsU0FBU1UsR0FBRyxDQUFDLEtBQUssUUFBUSxTQUFTVCxHQUFHLENBQUMsS0FBSyxRQUFRLFVBQVVzdkIsRUFBRSxTQUFTeDJDLEdBQUdwQyxPQUFPQyxlQUFlbUMsRUFBRSxZQUFZLENBQUNqQyxJQUFJLFdBQVcsT0FBT3c1QyxFQUFFNXlDLE9BQU93ZSxJQUFJLFNBQVNuakIsR0FBRyxJQUFJckIsRUFBRTIzQyxHQUFHLGdDQUFnQ2puQyxLQUFLclAsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHeUssZUFBZSxHQUFHOUwsRUFBRSxJQUFJLElBQUloQixFQUFFLEVBQUVBLEVBQUVnQixFQUFFMEIsT0FBTzFDLElBQUlxQyxFQUFFLElBQUlyQixFQUFFaEIsR0FBRyxJQUFJcUMsRUFBRSxLQUFLckIsRUFBRWhCLEdBQUcsSUFBSSxJQUFJczRDLEVBQUVsd0IsS0FBS3RULFVBQVV6UyxFQUFFNUIsRUFBRWdPLEVBQUU2cEMsR0FBR3R4QyxLQUFLaVksUUFBUW5aLFlBQVl0RyxFQUFFRSxLQUFLc0gsS0FBS2lZLFFBQVFqWSxLQUFLaVksUUFBUW5aLFlBQVksR0FBR3pELEVBQUVpMkMsRUFBRWx3QixLQUFLcG5CLEVBQUUsSUFBSWhCLEVBQUUsRUFBRUEsRUFBRWdCLEVBQUUwQixPQUFPMUMsSUFBSXFDLEVBQUVBLEVBQUUyVixVQUFVLEtBQUszVixFQUFFeUQsWUFBWWxHLEVBQUVGLEtBQUtzSCxLQUFLaVksUUFBUTVjLEVBQUV5RCxhQUFheWYsY0FBYSxLQUFNeXpCLEVBQUUsU0FBU3Y0QyxHQUFHUixPQUFPQyxlQUFlTyxFQUFFLFlBQVksQ0FBQ0wsSUFBSSxXQUFXLE1BQU0sYUFBYTRHLEtBQUs4TixVQUFVLGVBQWUwUSxJQUFJLFNBQVMva0IsR0FBRyxJQUFJdUcsS0FBS2IsV0FBVyxNQUFNNUIsTUFBTSx5RkFBeUYsSUFBSSt6QyxFQUFFbHdCLEtBQUt0VCxVQUFVclUsRUFBRUEsRUFBRXVHLEtBQUt5SyxjQUFjcVgseUJBQXlCd3ZCLEVBQUVsd0IsS0FBS3RpQixZQUFZbEcsRUFBRUYsS0FBS2UsRUFBRTYzQyxFQUFFbHdCLEtBQUt0aUIsWUFBWWl5QyxFQUFFcjRDLEtBQUtzSCxLQUFLYixXQUFXMUYsRUFBRXVHLE9BQU91ZSxjQUFhLEtBQU1zekIsRUFBRXA0QyxFQUFFVSxXQUFXNjNDLEVBQUV2NEMsRUFBRVUsV0FBV1YsRUFBRWdPLEVBQUUsU0FBU3pOLEdBQUcsSUFBSSxJQUFJaEIsRUFBRVQsRUFBRSxFQUFFYyxHQUFHVyxFQUFFcUIsRUFBRXJCLEVBQUUsYUFBYTBCLE9BQU9uRCxFQUFFYyxJQUFJTCxFQUFFZ0IsRUFBRXpCLElBQUlBLElBQUlrQixFQUFFZzZDLEVBQUV6NkMsSUFBSTJCLFNBQVN1UyxpQkFBaUIsb0JBQW9CLFdBQVd6VCxFQUFFZ08sRUFBRTlNLGFBQWEwNEMsU0FBU2w1QyxVQUFVNkMsY0FBYyxXQUFXLElBQUkzQixFQUFFb00sRUFBRWpILE1BQU1SLEtBQUtrRCxXQUFXLE1BQU0sYUFBYTdILEVBQUUrM0MsV0FBVzM1QyxFQUFFZzZDLEVBQUVwNEMsR0FBR0EsR0FBR20vQixVQUFVcmdDLFVBQVVzZ0MsZ0JBQWdCLFdBQVcsSUFBSXAvQixFQUFFMjFDLEVBQUV4d0MsTUFBTVIsS0FBS2tELFdBQVcsT0FBT3pKLEVBQUVnTyxFQUFFcE0sR0FBR0EsR0FBR3BDLE9BQU9DLGVBQWU4MEMsWUFBWTd6QyxVQUFVLFlBQVksQ0FBQ2YsSUFBSSxXQUFXLE9BQU93NUMsRUFBRTV5QyxPQUFPd2UsSUFBSSxTQUFTbmpCLEdBQUd4QyxFQUFFMmxCLElBQUk5bEIsS0FBS3NILEtBQUszRSxHQUFHNUIsRUFBRWdPLEVBQUV6SCxPQUFPdWUsY0FBYSxFQUFHcGxCLFlBQVcsSUFBSyxJQUFJZzVDLEVBQUUsY0FBY0csRUFBRSxlQUFlQyxFQUFFLFNBQVM5NEMsR0FBRyxPQUFPQSxHQUFHLElBQUksSUFBSSxNQUFNLFFBQVEsSUFBSSxJQUFJLE1BQU0sT0FBTyxJQUFJLElBQUksTUFBTSxPQUFPLElBQUksSUFBSSxNQUFNLFNBQVMsSUFBSSxJQUFJLE1BQU0sV0FBVys0QyxHQUFHOXFDLEVBQUUsU0FBU2pPLEdBQUcsSUFBSSxJQUFJNEIsRUFBRSxHQUFHckIsRUFBRSxFQUFFQSxFQUFFUCxFQUFFaUMsT0FBTzFCLElBQUlxQixFQUFFNUIsRUFBRU8sS0FBSSxFQUFHLE9BQU9xQixJQUFJLHNGQUFzRndLLE1BQU0sTUFBTTRzQyxFQUFFL3FDLEVBQUUsOERBQThEN0IsTUFBTSxNQUFNK3NDLEVBQUUsU0FBRkEsRUFBV241QyxFQUFFNEIsR0FBRyxhQUFhNUIsRUFBRTI1QyxZQUFZMzVDLEVBQUVBLEVBQUV3ZSxTQUFTLElBQUksSUFBSWplLEVBQUVoQixFQUFFLEdBQUdULEVBQUU4QyxFQUFFQSxFQUFFNUIsR0FBR3czQyxFQUFFNzNDLElBQUlWLEtBQUtlLEdBQUdKLEVBQUUsRUFBRW9PLEVBQUVsUCxFQUFFbUQsT0FBT3JDLEVBQUVvTyxJQUFJek4sRUFBRXpCLEVBQUVjLElBQUlBLElBQUksQ0FBQ0ksRUFBRSxDQUFDLElBQUlhLEVBQUVOLEVBQUV4QixFQUFFaUIsRUFBRWIsRUFBRXlDLEVBQUUsT0FBT2YsRUFBRTBHLFVBQVUsS0FBSyt4QyxLQUFLVyxhQUFhLElBQUksSUFBSTNDLEVBQUV6MkMsRUFBRTg0QyxVQUFVcEMsRUFBRSxJQUFJRCxFQUFFbDRDLEVBQUV5QixFQUFFMkMsV0FBVzVDLEVBQUUsRUFBRTdCLEVBQUVLLEVBQUV3QixHQUFHQSxJQUFJMjJDLEdBQUcsSUFBSXg0QyxFQUFFTSxLQUFLLEtBQUtOLEVBQUVnQixNQUFNa0wsUUFBUXl0QyxFQUFFSSxHQUFHLElBQUl2QixHQUFHLElBQUkxMkMsRUFBRWs0QyxFQUFFekIsR0FBR0MsRUFBRUEsRUFBRTRCLEVBQUV0NEMsRUFBRTFCLEdBQUcsS0FBS200QyxFQUFFLElBQUksTUFBTXQzQyxFQUFFLEtBQUtzNUMsS0FBS1ksVUFBVXI1QyxFQUFFQSxFQUFFbWtCLEtBQUtua0IsRUFBRTlCLEdBQUdpNkMsRUFBRWo2QyxFQUFFNDZDLFdBQVc5NEMsRUFBRUEsRUFBRW9LLFFBQVE0dEMsRUFBRUMsR0FBRyxNQUFNOTRDLEVBQUUsS0FBS3M1QyxLQUFLYSxhQUFhdDVDLEVBQUUsVUFBVUEsRUFBRW1rQixLQUFLLFNBQVMsTUFBTWhsQixFQUFFLFFBQVEsTUFBTWlCLE9BQU8raEIsUUFBUTdYLE1BQU10SyxHQUFHaUQsTUFBTSxvQkFBb0J2RSxHQUFHc0IsRUFBRSxPQUFPdEIsR0FBRyxHQUFHZ0IsR0FBR3FlLEVBQUUsQ0FBQzVlLEVBQUVpTyxFQUFFLFNBQVNqTyxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRVgsRUFBRVgsS0FBS2UsR0FBRSxHQUFJLE9BQU91RyxLQUFLeXpDLEdBQUd6ekMsS0FBS3l6QyxFQUFFejVDLEdBQUdxQixJQUFJekMsRUFBRUYsS0FBS3NCLEVBQUVpZSxRQUFRNWUsRUFBRVgsS0FBS2UsRUFBRXdlLFNBQVEsSUFBSzY2QixFQUFFOTRDLEVBQUVpZSxRQUFReGUsRUFBRXdlLFVBQVVqZSxHQUFHLElBQUk4NEMsRUFBRSxTQUFTOTRDLEVBQUVoQixHQUFHLEdBQUdBLEVBQUVtUyxrQkFBa0IsS0FBS25TLEVBQUVxQyxFQUFFckMsRUFBRSxhQUFhMEMsT0FBTyxJQUFJLElBQUluRCxFQUFFYyxFQUFFb08sRUFBRSxFQUFFbk4sR0FBR04sRUFBRXFCLEVBQUVyQixFQUFFLGFBQWEwQixPQUFPK0wsRUFBRW5OLEVBQUVtTixJQUFJcE8sRUFBRUwsRUFBRXlPLEdBQUdsUCxFQUFFeUIsRUFBRXlOLEdBQUdoTyxHQUFHQSxFQUFFZzZDLEdBQUdoNkMsRUFBRWc2QyxFQUFFcDZDLEdBQUcwM0MsRUFBRXI0QyxLQUFLSCxFQUFFNEcsV0FBVzAwQyxFQUFFbjdDLEtBQUtXLEdBQUUsR0FBSWQsSUFBSXM3QyxFQUFFZCxLQUFLNTRDLFVBQVU2bkIsVUFBVSxTQUFTM21CLEdBQUcsSUFBSTlDLEdBQUdTLEdBQUdnSCxnQkFBZ0JtekMsaUJBQWlCLENBQUMsSUFBSTkzQyxFQUFFLE9BQU8yRSxLQUFLeUssY0FBY3FYLHlCQUF5QixJQUFJOW5CLEVBQUUySixFQUFFakwsS0FBS3NILEtBQUt5SyxjQUFjekssTUFBSyxRQUFTaEcsRUFBRWdHLEtBQUtnQixXQUFXK3hDLEtBQUtXLGNBQWMsYUFBYTF6QyxLQUFLb3pDLFdBQVdwekMsS0FBSzRNLGNBQWNqUyxTQUFTa1MsZ0JBQWdCRCxhQUFhblQsRUFBRWlPLEVBQUUxSCxLQUFLM0UsR0FBR2hDLEVBQUVYLEtBQUtzSCxLQUFLM0UsR0FBRyxPQUFPQSxHQUFHeTNDLEVBQUU5NEMsRUFBRWdHLE1BQU1oRyxHQUFHMkosRUFBRTB2QyxTQUFTbDVDLFVBQVVtNUMsV0FBVyxTQUFTdDVDLEVBQUVoQixHQUFHLEdBQUdBLEVBQUVBLElBQUcsRUFBRyxhQUFhZ0IsRUFBRW81QyxVQUFVLE9BQU8zNUMsRUFBRWlPLEVBQUUxTixFQUFFaEIsR0FBRyxJQUFJVCxFQUFFK0IsRUFBRTVCLEtBQUtzSCxLQUFLaEcsRUFBRWhCLEdBQUcsR0FBR0EsRUFBRSxDQUFDODVDLEVBQUV2NkMsRUFBRXlCLEdBQUdBLEVBQUVxQixFQUFFOUMsRUFBRSwyRkFBMkYsSUFBSSxJQUFJYyxFQUFFYixFQUFFLEVBQUVBLEVBQUV3QixFQUFFMEIsT0FBT2xELElBQUksQ0FBQ2EsRUFBRVcsRUFBRXhCLElBQUlRLEVBQUV5TyxFQUFFL08sS0FBS2lDLFNBQVMsV0FBVzRVLFlBQVlsVyxFQUFFa1csWUFBWSxJQUFJLElBQUkzVyxFQUFFbzRDLEVBQUUzM0MsRUFBRTRELFdBQVdwRSxFQUFFLEVBQUVBLEVBQUVtNEMsRUFBRXQxQyxPQUFPN0MsSUFBSUQsRUFBRW80QyxFQUFFbjRDLEdBQUdHLEVBQUVxRSxhQUFhekUsRUFBRUUsS0FBS0YsRUFBRVksT0FBT3UzQyxFQUFFcjRDLEtBQUtXLEVBQUU4RixXQUFXbkcsRUFBRUssSUFBSSxPQUFPZCxHQUFHeUIsSUFBSVUsT0FBT3c0QyxvQkFBb0J6NUMsR0FBdjVOLEdBQTY1TixJQUFJbzZDLEVBQUUvM0IsV0FBVyxTQUFTblksS0FBSyxTQUFTMG5DLEVBQUU1eEMsR0FBRyxLQUFLdUcsZ0JBQWdCcXJDLEdBQUcsTUFBTSxJQUFJL3ZCLFVBQVUsd0NBQXdDLEdBQUcsbUJBQW1CN2hCLEVBQUUsTUFBTSxJQUFJNmhCLFVBQVUsa0JBQWtCdGIsS0FBSzh6QyxFQUFFLEVBQUU5ekMsS0FBSyt6QyxJQUFHLEVBQUcvekMsS0FBSzZ4QyxPQUFFLEVBQU83eEMsS0FBS2cwQyxFQUFFLEdBQUdQLEVBQUVoNkMsRUFBRXVHLE1BQU0sU0FBU2kwQyxFQUFFeDZDLEVBQUU0QixHQUFHLEtBQUssSUFBSTVCLEVBQUVxNkMsR0FBR3I2QyxFQUFFQSxFQUFFbzRDLEVBQUUsSUFBSXA0QyxFQUFFcTZDLEVBQUVyNkMsRUFBRXU2QyxFQUFFcDNDLEtBQUt2QixJQUFJNUIsRUFBRXM2QyxJQUFHLEVBQUdHLEdBQUcsV0FBVyxJQUFJbDZDLEVBQUUsSUFBSVAsRUFBRXE2QyxFQUFFejRDLEVBQUU4NEMsR0FBRzk0QyxFQUFFKzRDLEdBQUcsR0FBRyxPQUFPcDZDLEdBQUcsSUFBSVAsRUFBRXE2QyxFQUFFTyxFQUFFQyxHQUFHajVDLEVBQUVrNUMsR0FBRzk2QyxFQUFFbzRDLE9BQU8sQ0FBQyxJQUFJLElBQUk3NEMsRUFBRWdCLEVBQUVQLEVBQUVvNEMsR0FBRyxNQUFNcDRDLEdBQUcsWUFBWTY2QyxFQUFFajVDLEVBQUVrNUMsR0FBRzk2QyxHQUFHNDZDLEVBQUVoNUMsRUFBRWs1QyxHQUFHdjdDLFFBQVEsU0FBU3E3QyxFQUFFNTZDLEVBQUU0QixHQUFHLElBQUksR0FBR0EsSUFBSTVCLEVBQUUsTUFBTSxJQUFJNmhCLFVBQVUsNkNBQTZDLEdBQUdqZ0IsSUFBSSxZQUFpQkEsSUFBRyxtQkFBbUJBLEdBQUcsQ0FBQyxJQUFJckIsRUFBRXFCLEVBQUUwZCxLQUFLLEdBQUcxZCxhQUFhZ3dDLEVBQUUsT0FBTzV4QyxFQUFFcTZDLEVBQUUsRUFBRXI2QyxFQUFFbzRDLEVBQUV4MkMsT0FBT3k0QyxFQUFFcjZDLEdBQUcsR0FBRyxtQkFBbUJPLEVBQUUsWUFBWXk1QyxFQUFFLFNBQVNoNkMsRUFBRTRCLEdBQUcsT0FBTyxXQUFXNUIsRUFBRStHLE1BQU1uRixFQUFFNkgsWUFBMUMsQ0FBdURsSixFQUFFcUIsR0FBRzVCLEdBQUdBLEVBQUVxNkMsRUFBRSxFQUFFcjZDLEVBQUVvNEMsRUFBRXgyQyxFQUFFeTRDLEVBQUVyNkMsR0FBRyxNQUFNNEIsR0FBR2k1QyxFQUFFNzZDLEVBQUU0QixJQUFJLFNBQVNpNUMsRUFBRTc2QyxFQUFFNEIsR0FBRzVCLEVBQUVxNkMsRUFBRSxFQUFFcjZDLEVBQUVvNEMsRUFBRXgyQyxFQUFFeTRDLEVBQUVyNkMsR0FBRyxTQUFTcTZDLEVBQUVyNkMsR0FBRyxJQUFJQSxFQUFFcTZDLEdBQUcsSUFBSXI2QyxFQUFFdTZDLEVBQUV0NEMsUUFBUXc0QyxHQUFHLFdBQVd6NkMsRUFBRXM2QyxJQUFJLG9CQUFvQnQzQixTQUFTQSxTQUFTQSxRQUFRQyxLQUFLLHdDQUF3Q2pqQixFQUFFbzRDLE1BQU0sSUFBSSxJQUFJeDJDLEVBQUUsRUFBRXJCLEVBQUVQLEVBQUV1NkMsRUFBRXQ0QyxPQUFPTCxFQUFFckIsRUFBRXFCLElBQUk0NEMsRUFBRXg2QyxFQUFFQSxFQUFFdTZDLEVBQUUzNEMsSUFBSTVCLEVBQUV1NkMsRUFBRSxLQUFLLFNBQVNRLEVBQUUvNkMsRUFBRTRCLEVBQUVyQixHQUFHZ0csS0FBS20wQyxHQUFHLG1CQUFtQjE2QyxFQUFFQSxFQUFFLEtBQUt1RyxLQUFLbzBDLEdBQUcsbUJBQW1CLzRDLEVBQUVBLEVBQUUsS0FBSzJFLEtBQUt1MEMsR0FBR3Y2QyxFQUFFLFNBQVN5NUMsRUFBRWg2QyxFQUFFNEIsR0FBRyxJQUFJckIsR0FBRSxFQUFHLElBQUlQLEdBQUcsU0FBU0EsR0FBR08sSUFBSUEsR0FBRSxFQUFHcTZDLEVBQUVoNUMsRUFBRTVCLE9BQU8sU0FBU0EsR0FBR08sSUFBSUEsR0FBRSxFQUFHczZDLEVBQUVqNUMsRUFBRTVCLE9BQU8sTUFBTUEsR0FBR08sSUFBSUEsR0FBRSxFQUFHczZDLEVBQUVqNUMsRUFBRTVCLEtBQUssU0FBU2c3QyxFQUFFaDdDLEdBQUcsT0FBT0EsR0FBRyxZQUFpQkEsSUFBR0EsRUFBRTZJLGNBQWMrb0MsRUFBRTV4QyxFQUFFLElBQUk0eEMsR0FBRyxTQUFTaHdDLEdBQUdBLEVBQUU1QixNQUFNNHhDLEVBQUVseEMsVUFBVTZpQixNQUFNLFNBQVN2akIsR0FBRyxPQUFPdUcsS0FBSytZLEtBQUssS0FBS3RmLElBQUk0eEMsRUFBRWx4QyxVQUFVNGUsS0FBSyxTQUFTdGYsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUUsSUFBSWdHLEtBQUtzQyxZQUFZcUIsR0FBRyxPQUFPc3dDLEVBQUVqMEMsS0FBSyxJQUFJdzBDLEVBQUUvNkMsRUFBRTRCLEVBQUVyQixJQUFJQSxHQUFHcXhDLEVBQUVseEMsVUFBVXU2QyxRQUFRLFNBQVNqN0MsR0FBRyxJQUFJNEIsRUFBRTJFLEtBQUtzQyxZQUFZLE9BQU90QyxLQUFLK1ksTUFBTSxTQUFTL2UsR0FBRyxPQUFPcUIsRUFBRW9kLFFBQVFoZixLQUFLc2YsTUFBTSxXQUFXLE9BQU8vZSxRQUFRLFNBQVNBLEdBQUcsT0FBT3FCLEVBQUVvZCxRQUFRaGYsS0FBS3NmLE1BQU0sV0FBVyxPQUFPMWQsRUFBRXFkLE9BQU8xZSxVQUFVLElBQUlrNkMsRUFBRSxtQkFBbUI3NEMsR0FBRyxTQUFTNUIsR0FBRzRCLEVBQUU1QixLQUFLLFNBQVNBLEdBQUdvNkMsRUFBRXA2QyxFQUFFLElBQUksSUFBSWlCLE9BQU9pNkMsUUFBUSxDQUFDajZDLE9BQU9pNkMsUUFBUXRKLEVBQUVBLEVBQUVseEMsVUFBVTRlLEtBQUtzeUIsRUFBRWx4QyxVQUFVNGUsS0FBS3N5QixFQUFFendDLElBQUksU0FBU25CLEdBQUcsT0FBTyxJQUFJNHhDLEdBQUcsU0FBU2h3QyxFQUFFckIsR0FBRyxTQUFTaEIsRUFBRVMsRUFBRWdPLEdBQUcsSUFBSSxHQUFHQSxJQUFJLFlBQWlCQSxJQUFHLG1CQUFtQkEsR0FBRyxDQUFDLElBQUluTixFQUFFbU4sRUFBRXNSLEtBQUssR0FBRyxtQkFBbUJ6ZSxFQUFFLFlBQVlBLEVBQUU1QixLQUFLK08sR0FBRyxTQUFTcE0sR0FBR3JDLEVBQUVTLEVBQUU0QixLQUFLckIsR0FBR3pCLEVBQUVrQixHQUFHZ08sRUFBRSxLQUFLcE8sR0FBR2dDLEVBQUU5QyxHQUFHLE1BQU1rQixHQUFHTyxFQUFFUCxJQUFJLElBQUlBLFFBQUcsSUFBU0EsRUFBRWlDLE9BQU8sT0FBTzFCLEVBQUUsSUFBSXNoQixVQUFVLGlDQUFpQyxJQUFJL2lCLEVBQUU2TCxNQUFNakssVUFBVWtHLE1BQU0zSCxLQUFLZSxHQUFHLEdBQUcsSUFBSWxCLEVBQUVtRCxPQUFPLE9BQU9MLEVBQUUsSUFBSSxJQUFJLElBQUloQyxFQUFFZCxFQUFFbUQsT0FBTytMLEVBQUUsRUFBRUEsRUFBRWxQLEVBQUVtRCxPQUFPK0wsSUFBSXpPLEVBQUV5TyxFQUFFbFAsRUFBRWtQLFFBQVE0akMsRUFBRXVKLEtBQUssU0FBU243QyxHQUFHLE9BQU8sSUFBSTR4QyxHQUFHLFNBQVNod0MsRUFBRXJCLEdBQUcsSUFBSVAsUUFBRyxJQUFTQSxFQUFFaUMsT0FBTyxPQUFPMUIsRUFBRSxJQUFJc2hCLFVBQVUsa0NBQWtDLElBQUksSUFBSXRpQixFQUFFLEVBQUVULEVBQUVrQixFQUFFaUMsT0FBTzFDLEVBQUVULEVBQUVTLElBQUl5N0MsRUFBRWg3QyxFQUFFVCxJQUFJK2YsS0FBSzFkLEVBQUVyQixPQUFPcXhDLEVBQUU1eUIsUUFBUWc4QixFQUFFcEosRUFBRTN5QixPQUFPLFNBQVNqZixHQUFHLE9BQU8sSUFBSTR4QyxHQUFHLFNBQVNod0MsRUFBRXJCLEdBQUdBLEVBQUVQLE9BQU8sSUFBSW83QyxFQUFFbDZDLFNBQVN3RCxlQUFlLElBQUk2MUMsRUFBRSxHQUFHLElBQUljLGtCQUFrQixXQUFXLElBQUksSUFBSXI3QyxFQUFFdTZDLEVBQUV0NEMsT0FBT0wsRUFBRSxFQUFFQSxFQUFFNUIsRUFBRTRCLElBQUkyNEMsRUFBRTM0QyxLQUFLMjRDLEVBQUVwMEMsT0FBTyxFQUFFbkcsTUFBTXM3QyxRQUFRRixFQUFFLENBQUNHLGVBQWMsSUFBS2QsRUFBRSxTQUFTejZDLEdBQUd1NkMsRUFBRXAzQyxLQUFLbkQsR0FBR283QyxFQUFFdGxDLFlBQVksRUFBRXNsQyxFQUFFdGxDLFlBQVk3VCxPQUFPLEdBQUcsTUFBTSxTQUFTTCxFQUFFckIsR0FBRyxLQUFLQSxLQUFLcUIsR0FBRyxDQUFDLElBQUlyQyxFQUFFLEVBQU9TLElBQVAsRUFBaUJULEdBQUUwQixPQUFPakIsRUFBRWxCLEVBQUUsRUFBRWMsRUFBRSxHQUFHbUwsS0FBS0MsU0FBU2dELEVBQUUsY0FBY3BPLEVBQUVpQixFQUFFZSxFQUFFNDVDLG9CQUFvQno4QyxFQUFFNkMsRUFBRWs0Qyx5QkFBeUIzNkMsRUFBRXlDLEVBQUV4QixPQUFPazNDLEVBQUUxMUMsRUFBRThCLEtBQUs2ekMsRUFBRTMxQyxFQUFFNjVDLFFBQVE3NUMsRUFBRXhDLEVBQUV3QyxFQUFFbkMsZUFBZSszQyxFQUFFNTFDLEVBQUV5MUMsaUJBQWlCejJDLEVBQUU3QixFQUFFNkMsRUFBRSx1QkFBdUI0ZCxFQUFFNWQsRUFBRWxCLFVBQVV4QixFQUFFc2dCLEVBQUU3ZSxlQUFlaWUsRUFBRVksRUFBRWs4QixxQkFBcUI3RCxFQUFFcjRCLEVBQUV6WixTQUFTK3hDLEVBQUUsU0FBUzkzQyxFQUFFNEIsRUFBRXJCLEdBQUdyQixFQUFFRCxLQUFLZSxFQUFFZ08sSUFBSTVPLEVBQUVZLEVBQUVnTyxFQUFFLENBQUN0TyxZQUFXLEVBQUdvbEIsY0FBYSxFQUFHOEksVUFBUyxFQUFHN3RCLE1BQU0sS0FBS0MsRUFBRWdPLEdBQUcsS0FBS3BNLEdBQUdyQixHQUFHME4sRUFBRSxTQUFTak8sRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVwQixFQUFFYSxHQUFHLE9BQU9hLEVBQUVlLEdBQUcrQixTQUFTLFNBQVMzRCxHQUFHbzRDLEVBQUVuNUMsS0FBSzJDLEVBQUU1QixJQUFJZzVDLEVBQUV6NEMsRUFBRVAsRUFBRTRCLEVBQUU1QixPQUFPTyxHQUFHK0YsRUFBRSxhQUFhMnhDLEVBQUUsU0FBU2o0QyxHQUFHLE9BQU9BLEdBQUdnTyxJQUFJOU8sRUFBRUQsS0FBSzQ1QyxFQUFFNzRDLElBQUlrNEMsRUFBRSxTQUFTbDRDLEdBQUcsT0FBT0EsR0FBR2dPLEdBQUc5TyxFQUFFRCxLQUFLNDVDLEVBQUU3NEMsSUFBSW80QyxFQUFFLFNBQVNwNEMsR0FBRyxJQUFJNEIsRUFBRSxHQUFHNUIsRUFBRSxPQUFPazRDLEVBQUV0MkMsR0FBRzFDLEVBQUVELEtBQUtzSCxLQUFLM0UsSUFBSTJFLEtBQUt5SCxHQUFHLEtBQUtwTSxHQUFHZ2QsRUFBRTNmLEtBQUtzSCxLQUFLdkcsSUFBSXU0QyxFQUFFLFNBQVN2NEMsR0FBRyxPQUFPWixFQUFFb2dCLEVBQUV4ZixFQUFFLENBQUNOLFlBQVcsRUFBR29sQixjQUFhLEVBQUdubEIsSUFBSTJHLEVBQUV5ZSxJQUFJLFNBQVNuakIsR0FBR3kzQyxFQUFFOXlDLEtBQUt2RyxFQUFFLENBQUNOLFlBQVcsRUFBR29sQixjQUFhLEVBQUc4SSxVQUFTLEVBQUc3dEIsTUFBTTZCLElBQUlrMkMsRUFBRXZ4QyxLQUFLdkcsR0FBRSxNQUFPdTNDLEVBQUVzQixFQUFFNzRDLEdBQUdaLEVBQUV3QyxFQUFFNUIsR0FBRyxjQUFjODRDLEtBQUtKLEVBQUUsU0FBUzE0QyxFQUFFNEIsR0FBRyxHQUFHMkUsZ0JBQWdCdkcsRUFBRSxNQUFNLElBQUk2aEIsVUFBVSwrQkFBK0IsT0FBTzAyQixFQUFFLGFBQWE1MUMsT0FBT2YsR0FBRyxHQUFHaEMsSUFBSWQsS0FBSys1QyxFQUFFMTVDLEVBQUUsTUFBTTI1QyxFQUFFLENBQUMvNEMsTUFBTTI0QyxHQUFHSyxFQUFFLFNBQVMvNEMsR0FBRyxPQUFPNjRDLEVBQUU3NEMsSUFBSWc1QyxFQUFFLFNBQVNoNUMsRUFBRTRCLEVBQUVyQixHQUFHLElBQUloQixFQUFFLEdBQUdxQyxFQUFFLEdBQUdzMkMsRUFBRTM0QyxHQUFHLENBQUMsR0FBR3FDLEVBQUV5M0MsRUFBRTk0QyxFQUFFYixXQUFXLENBQUMsSUFBSVosRUFBRUssRUFBRW9CLEdBQUd6QixFQUFFWSxZQUFXLE9BQVFaLEVBQUV5QixFQUFFcUIsRUFBRTVCLEVBQUVULEVBQUVULEdBQUdnNUMsRUFBRTkzQyxFQUFFVCxJQUFJZ0IsRUFBRWIsaUJBQWlCTixFQUFFWSxFQUFFNEIsRUFBRXJCLEdBQUcsT0FBT1AsR0FBR201QyxFQUFFLFNBQVNuNUMsR0FBRyxPQUFPYSxFQUFFYixHQUFHbUUsT0FBTyt6QyxHQUFHM3VDLElBQUl3dkMsSUFBSW40QyxFQUFFYixNQUFNaTVDLEVBQUU1NUMsRUFBRXdDLEVBQUUsaUJBQWlCaEIsR0FBR0EsRUFBRWIsTUFBTW81QyxFQUFFLzVDLEVBQUV3QyxFQUFFckIsRUFBRUssR0FBR0EsRUFBRWIsTUFBTSxTQUFTQyxHQUFHLE9BQU9hLEVBQUViLEdBQUdtRSxPQUFPOHpDLElBQUk3NEMsRUFBRXdDLEVBQUUsc0JBQXNCaEIsR0FBR0EsRUFBRWIsTUFBTSxTQUFTQyxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRTQ0QyxFQUFFdjNDLEdBQUcsT0FBT3JCLEVBQUUwQixPQUFPcTFDLEVBQUUxMUMsR0FBR2UsT0FBT3BDLEdBQUdvRCxTQUFTLFNBQVNwRCxHQUFHNjNDLEVBQUVuNUMsS0FBSzJDLEVBQUVyQixJQUFJeTRDLEVBQUVoNUMsRUFBRU8sRUFBRXFCLEVBQUVyQixPQUFPaTNDLEVBQUV4M0MsRUFBRTRCLEdBQUc1QixHQUFHWixFQUFFd0MsRUFBRSxtQkFBbUJoQixHQUFHQSxFQUFFYixNQUFNcTRDLEVBQUVoNUMsRUFBRW9nQixFQUFFLHVCQUF1QjVlLEdBQUdBLEVBQUViLE1BQU0yNEMsRUFBRXQ1QyxFQUFFRyxFQUFFLFNBQVNxQixHQUFHQSxFQUFFYixNQUFNLFNBQVNDLEdBQUcsT0FBT0EsRUFBRSxhQUFhMkMsT0FBTyxhQUFhM0MsRUFBRUosTUFBTTRmLEVBQUVxNUIsRUFBRTc0QyxHQUFHdTRDLEVBQUV2NEMsSUFBSVosRUFBRXM1QyxFQUFFLE1BQU05M0MsR0FBR0EsRUFBRWIsTUFBTSxTQUFTQyxHQUFHLEdBQUdpNEMsRUFBRWo0QyxHQUFHLE1BQU0sSUFBSTZoQixVQUFVN2hCLEVBQUUsb0JBQW9CLEdBQUdkLEVBQUVELEtBQUs0NUMsRUFBRTc0QyxJQUFLLGdCQUFnQkEsRUFBRUEsRUFBRTRHLE1BQU0sS0FBS0EsTUFBTSxFQUFFLE1BQU01RyxFQUFFQSxFQUFFNEcsTUFBTSxPQUFPaEgsRUFBRyxPQUFPLEdBQUdJLEVBQUVBLEVBQUU0RyxNQUFNLEVBQUU1RyxFQUFFaUMsT0FBT3JDLEVBQUVxQyxTQUFTQSxPQUFPakMsT0FBRSxHQUFRWixFQUFFczVDLEVBQUUsU0FBUzkzQyxHQUFHQSxFQUFFYixNQUFNLFNBQVNDLEVBQUU0QixHQUFHLElBQUlyQixFQUFFeEIsRUFBRWlCLEVBQUU0QixHQUFHLE9BQU9yQixHQUFHMjNDLEVBQUV0MkMsS0FBS3JCLEVBQUViLFdBQVcwNEMsRUFBRW41QyxLQUFLZSxFQUFFNEIsSUFBSXJCLEdBQUduQixFQUFFd0MsRUFBRSwyQkFBMkJoQixHQUFHQSxFQUFFYixNQUFNLFNBQVNDLEVBQUU0QixHQUFHLE9BQU8sSUFBSTZILFVBQVV4SCxhQUFRLElBQVNMLEVBQUV6QyxFQUFFYSxHQUFHaU8sRUFBRWpPLEVBQUU0QixJQUFJeEMsRUFBRXdDLEVBQUUsU0FBU2hCLEdBQUdBLEVBQUViLE1BQU0sV0FBVyxJQUFJQyxFQUFFNjNDLEVBQUU1NEMsS0FBS3NILE1BQU0sTUFBTSxvQkFBb0J2RyxHQUFHazRDLEVBQUUzeEMsTUFBTSxrQkFBa0J2RyxHQUFHWixFQUFFb2dCLEVBQUUsV0FBVzVlLEdBQUcsSUFBSSxJQUFHLElBQUt6QixFQUFFQyxFQUFFLEdBQUcsYUFBYSxDQUFDTyxJQUFJLFdBQVcsT0FBT1AsRUFBRW1ILEtBQUssYUFBYSxDQUFDeEcsT0FBTSxJQUFLLGtCQUFrQixjQUFjLEtBQUssT0FBTyxJQUFJczVDLEVBQUVqNkMsRUFBRSxNQUFNWSxHQUFHcTVDLEVBQUUsU0FBU3I1QyxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUVSLEVBQUV5Z0IsRUFBRTVkLFVBQVU0ZCxFQUFFNWQsR0FBR3hDLEVBQUVZLEVBQUU0QixFQUFFckIsR0FBR25CLEVBQUVvZ0IsRUFBRTVkLEVBQUVyQyxNQUFoNkUsQ0FBdTZFQyxPQUFPLHlCQUF5QixTQUFTUSxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRWhCLEVBQUVTLEVBQUVQLGVBQWVYLEVBQUVrQixFQUFFVSxVQUFVZCxFQUFFZCxFQUFFaUgsU0FBUyxpSEFBaUhxRyxNQUFNLEtBQUt6SSxTQUFTLFNBQVNxSyxHQUFHLEtBQUtBLEtBQUtwTSxHQUFHLE9BQU9yQyxFQUFFcUMsRUFBRW9NLEVBQUUsQ0FBQ2pPLE1BQU02QixFQUFFb00sS0FBS0EsR0FBRyxJQUFJLGVBQWV6TixFQUFFUCxFQUFFODVDLHlCQUF5Qmg3QyxFQUFFLGFBQWFpQixNQUFNLFdBQVcsSUFBSUMsRUFBRUosRUFBRVgsS0FBS3NILE1BQU1oRyxFQUFFLE1BQU1nRyxLQUFLQSxLQUFLM0UsRUFBRTlCLGFBQWF5RyxLQUFLLE9BQU8sTUFBTWhHLEVBQUVQLEVBQUUsV0FBV08sRUFBRSxLQUFLaEIsRUFBRVQsRUFBRSxXQUFXeUIsT0FBemIsQ0FBaWNmLE9BQU9LLFFBQVEsU0FBU0csRUFBRTRCLEVBQUVyQixHQUFHLFNBQVNoQixJQUFJLE9BQU9nSCxLQUFLM0UsRUFBRTVCLEtBQUs0QixFQUFFNUIsR0FBRyxXQUFXLElBQUk0QixFQUFFLEVBQUVyQixFQUFFZ0csS0FBS3pILEVBQUUsQ0FBQzBSLEtBQUssV0FBVyxJQUFJeFEsRUFBRU8sRUFBRTBCLFFBQVFMLEVBQUUsT0FBTzVCLEVBQUUsQ0FBQ3lOLEtBQUt6TixHQUFHLENBQUN5TixLQUFLek4sRUFBRUQsTUFBTVEsRUFBRXFCLFFBQVEsT0FBTzlDLEVBQUVrQixHQUFHVCxFQUFFVCxJQUFJeUIsRUFBRVAsS0FBS08sRUFBRVAsR0FBRyxXQUFXLElBQUk0QixFQUFFK04sT0FBT2dzQyxjQUFjcDdDLEVBQUVnRyxLQUFLekgsRUFBRSxFQUFFYyxFQUFFVyxFQUFFMEIsT0FBTytMLEVBQUUsQ0FBQ3dDLEtBQUssV0FBVyxJQUFJeFEsRUFBRUosR0FBR2QsRUFBRVMsRUFBRVMsRUFBRSxHQUFHNEIsRUFBRXJCLEVBQUVxN0MsWUFBWTk4QyxJQUFJLE9BQU9BLEdBQUdTLEVBQUUwQyxPQUFPakMsRUFBRSxDQUFDeU4sS0FBS3pOLEdBQUcsQ0FBQ3lOLEtBQUt6TixFQUFFRCxNQUFNUixLQUFLLE9BQU95TyxFQUFFaE8sR0FBR1QsRUFBRXlPLElBQWhYLENBQXFYbk8sT0FBT3NNLFNBQVN4QixNQUFNakssVUFBVWlQLE9BQU9qUCxXQUFXLElBQUltN0MsRUFBRXI4QyxPQUFPa0IsVUFBVXFGLFNBQVN2RyxPQUFPa0IsVUFBVXFGLFNBQVMsV0FBVyxZQUFPLElBQVNRLEtBQUsscUJBQXFCLE9BQU9BLEtBQUssZ0JBQWdCczFDLEVBQUU1OEMsS0FBS3NILE9BQU8vRyxPQUFPa0UsS0FBSyxTQUFTMUQsR0FBRyxPQUFPUixPQUFPZzhDLG9CQUFvQng3QyxHQUFHbUUsUUFBUSxTQUFTdkMsR0FBRyxPQUFPQSxFQUFFcEMsT0FBT3M2Qyx5QkFBeUI5NUMsRUFBRTRCLEtBQUtBLEVBQUVsQyxlQUFlc08sSUFBSXVwQyxJQUFJNW5DLE9BQU9qUCxVQUFVYixPQUFPc00sV0FBV3dELE9BQU9qUCxVQUFVazdDLGNBQWM1dEMsSUFBSXVwQyxJQUFJNW5DLE9BQU9qUCxVQUFVYixPQUFPc00sVUFBVSxTQUFTbk0sSUFBSSxJQUFJNEIsRUFBRXJCLEVBQUVnRyxLQUFLLE9BQU9neUMsRUFBRXY0QyxHQUFHLFNBQVNBLEdBQUcsR0FBRyxHQUFHQSxFQUFFZ08sSUFBSXBNLEVBQUUsR0FBRyxHQUFHNUIsRUFBRWdPLEVBQUUsT0FBT3BNLEVBQUVyQixFQUFFMEIsT0FBT2pDLEVBQUVpTyxFQUFFak8sRUFBRU8sRUFBRXFCLEtBQUs1QixFQUFFZ08sRUFBRSxFQUFFaE8sT0FBRSxHQUFRQSxFQUFFNEIsSUFBSTVCLEVBQUVnTyxFQUFFLE9BQU9BLElBQUl1cEMsSUFBSXVFLElBQUlwN0MsVUFBVWIsT0FBT3NNLFlBQVk2QixJQUFJdXBDLElBQUl1RSxJQUFJcDdDLFVBQVViLE9BQU9zTSxVQUFVLFNBQVNuTSxJQUFJLElBQUk0QixFQUFFckIsRUFBRWhCLEVBQUVnSCxLQUFLLE9BQU9neUMsRUFBRXY0QyxHQUFHLFNBQVNBLEdBQUcsR0FBRyxHQUFHQSxFQUFFZ08sSUFBSXBNLEVBQUUsR0FBR3JDLEVBQUVvRSxTQUFTLFNBQVMzRCxHQUFHNEIsRUFBRXVCLEtBQUtuRCxNQUFNTyxFQUFFLEdBQUcsR0FBR1AsRUFBRWdPLEVBQUUsT0FBT3pOLEVBQUVxQixFQUFFSyxPQUFPakMsRUFBRWlPLEVBQUVqTyxFQUFFNEIsRUFBRXJCLEtBQUtQLEVBQUVnTyxFQUFFLEVBQUVoTyxPQUFFLEdBQVFBLEVBQUVPLElBQUlQLEVBQUVnTyxFQUFFLE9BQU9BLElBQUl1cEMsSUFBSXdFLElBQUlyN0MsVUFBVWIsT0FBT3NNLFlBQVk2QixJQUFJdXBDLElBQUl3RSxJQUFJcjdDLFVBQVViLE9BQU9zTSxVQUFVLFNBQVNuTSxJQUFJLElBQUk0QixFQUFFckIsRUFBRWhCLEVBQUVnSCxLQUFLLE9BQU9neUMsRUFBRXY0QyxHQUFHLFNBQVNBLEdBQUcsR0FBRyxHQUFHQSxFQUFFZ08sSUFBSXBNLEVBQUUsR0FBR3JDLEVBQUVvRSxTQUFTLFNBQVMzRCxFQUFFTyxHQUFHcUIsRUFBRXVCLEtBQUssQ0FBQzVDLEVBQUVQLE9BQU9PLEVBQUUsR0FBRyxHQUFHUCxFQUFFZ08sRUFBRSxPQUFPek4sRUFBRXFCLEVBQUVLLE9BQU9qQyxFQUFFaU8sRUFBRWpPLEVBQUU0QixFQUFFckIsS0FBS1AsRUFBRWdPLEVBQUUsRUFBRWhPLE9BQUUsR0FBUUEsRUFBRU8sSUFBSVAsRUFBRWdPLEVBQUUsT0FBTyxJQUFJZ3VDLEVBQUUvNkMsT0FBTys2QyxFQUFFQyxjQUFjRCxFQUFFQyxlQUFlLENBQUNDLE1BQU0sSUFBSSxJQUFJdEUsRUFBRTEyQyxTQUFTTSxjQUFjLHVDQUF1QzI2QyxFQUFFLFVBQVU5RCxFQUFFLEdBQUcsSUFBSUEsRUFBRStELE9BQU8sQ0FBQyxHQUFHamtDLFNBQVNra0MsT0FBT3oxQyxNQUFNLEdBQUd3RixNQUFNLEtBQUt6SSxTQUFTLFNBQVMzRCxHQUFHLElBQUk0QixHQUFHNUIsRUFBRUEsRUFBRW9NLE1BQU0sTUFBTSxLQUFLeEssRUFBRTVCLEVBQUUsR0FBRzRRLE1BQU11ckMsTUFBTTlELEVBQUV6MkMsRUFBRSxJQUFJNUIsRUFBRSxLQUFJLE1BQU80M0MsRUFBRSxJQUFJLElBQUkwRSxFQUFFLEVBQUUvUCxPQUFFLEVBQU9BLEVBQUVxTCxFQUFFcDBDLFdBQVc4NEMsR0FBR0EsSUFBSSxRQUFRL1AsRUFBRWx0QyxPQUFPZzVDLEVBQUU5TCxFQUFFbHRDLE1BQU1rdEMsRUFBRXhzQyxRQUFPLEdBQUksSUFBSXc4QyxHQUFFLEdBQUdsRSxFQUFFbUUsS0FBS25FLEVBQUVtRSxJQUFJcHdDLE9BQU9pc0MsRUFBRW1FLElBQUlwd0MsTUFBTSxLQUFLekksU0FBUyxTQUFTM0QsR0FBR3U4QyxHQUFFdjhDLElBQUcsS0FBTXE0QyxFQUFFbUUsSUFBSUQsR0FBRVAsRUFBRUMsY0FBY0MsTUFBTTdELEVBQUUsSUFBSW9FLEdBQUdwRSxFQUFFcUUsU0FBUyxHQUFHRCxHQUFHLENBQUNULEVBQUVXLFNBQVNYLEVBQUVXLFVBQVUsR0FBR1gsRUFBRVcsU0FBU0MsTUFBTUgsR0FBRyxJQUFJSSxHQUFHeEUsRUFBRXlFLFFBQVFkLEVBQUVXLFNBQVNHLFFBQVEsU0FBU0QsSUFBSUEsR0FBRyxJQUFJRSxHQUFHMUUsRUFBRTJFLFVBQVUzRSxFQUFFNEUsR0FBRyxTQUFTQyxNQUFNLFNBQVNDLEdBQUduOUMsR0FBRyxPQUFPQSxFQUFFbzlDLFVBQVVwOUMsRUFBRW85QyxRQUFRLElBQUlGLElBQUlsOUMsRUFBRW85QyxRQUFRLFNBQVNDLEdBQUdyOUMsR0FBRyxPQUFPQSxHQUFHQSxFQUFFbzlDLFFBQVFMLElBQUk5N0MsT0FBTysxQyxpQkFBaUJnRixFQUFFaEYsZUFBZXNHLGNBQWNQLElBQUlHLEdBQUd4OEMsVUFBVTY4QyxPQUFPLFdBQVcsTUFBTSxJQUFJLElBQUlDLEdBQUd2OEMsT0FBTzA3QyxVQUFVLEdBQUdhLEdBQUdDLE1BQU0xRCxRQUFRcjVDLFVBQVV1ekMsZUFBZXFGLEtBQUs1NEMsVUFBVWltQixhQUFhLElBQUkrMkIsR0FBR2wrQyxPQUFPczZDLHlCQUF5QlIsS0FBSzU0QyxVQUFVLGNBQWMsU0FBU2k5QyxHQUFHMzlDLEdBQUcsT0FBT0EsRUFBRXE5QyxHQUFHcjlDLFVBQUssSUFBU0EsRUFBRXFGLFdBQVcsU0FBU3FoQyxHQUFHMW1DLEdBQUcsT0FBT0EsYUFBYTQ5QyxXQUFXLFNBQVNDLEdBQUc3OUMsR0FBRyxPQUFPQSxHQUFHQSxFQUFFcTlDLEdBQUdyOUMsS0FBS0EsRUFBRW9kLE9BQU8wZ0MsR0FBRzk5QyxHQUFHdzlDLEdBQUd4QyxLQUFLMEMsSUFBSUEsR0FBRzU0QixjQUFjNDRCLEdBQUcvOUMsS0FBSzY5QyxHQUFHTyxHQUFHUCxHQUFHWixRQUFRWSxHQUFHQyxHQUFHRCxHQUFHeEUsRUFBRXdFLEdBQUdWLFVBQVMsRUFBR1UsR0FBR1EsR0FBR1IsR0FBR1Msa0JBQWtCVCxHQUFHeE8sR0FBRyxjQUFjd08sR0FBR3hFLEVBQUV3RSxHQUFHVSxHQUFHalAsVUFBVUMsVUFBVXQrQixNQUFNLFdBQVcsSUFBSXV0QyxHQUFHcEUsUUFBUXI1QyxVQUFVMDlDLEdBQUdELEdBQUdweUMsU0FBU295QyxHQUFHN3BDLGlCQUFpQjZwQyxHQUFHM3BDLG9CQUFvQjJwQyxHQUFHenBDLG1CQUFtQnlwQyxHQUFHMXBDLGtCQUFrQjBwQyxHQUFHNXBDLHNCQUFzQjhwQyxHQUFHbjlDLFNBQVN3RCxlQUFlLElBQUk0NUMsR0FBRyxFQUFFQyxHQUFHLEdBQUcsU0FBU0MsR0FBR3grQyxHQUFHdStDLEdBQUdwN0MsS0FBS25ELEdBQUdxK0MsR0FBR3ZvQyxZQUFZd29DLEtBQUssSUFBSWpELGtCQUFrQixXQUFXLEtBQUtrRCxHQUFHdDhDLFFBQVEsSUFBSXM4QyxHQUFHenNDLE9BQUh5c0MsR0FBYSxNQUFNditDLEdBQUcsTUFBTXErQyxHQUFHdm9DLFlBQVl3b0MsS0FBS3QrQyxNQUFNczdDLFFBQVErQyxHQUFHLENBQUM5QyxlQUFjLElBQUssSUFBSWtELEdBQUd2OUMsU0FBU21NLFNBQVMsU0FBU3JOLEVBQUU0QixHQUFHLE9BQU81QixFQUFFMCtDLHdCQUF3Qjk4QyxJQUFJLFNBQVM1QixFQUFFNEIsR0FBRyxPQUFPNUIsSUFBSTRCLEdBQUc1QixFQUFFb1QsaUJBQWlCcFQsRUFBRW9ULGdCQUFnQnNyQyx3QkFBd0I5OEMsSUFBSSxTQUFTKzhDLEdBQUczK0MsRUFBRTRCLEdBQUcsS0FBS0EsR0FBRyxDQUFDLEdBQUdBLEdBQUc1QixFQUFFLE9BQU0sRUFBRzRCLEVBQUVBLEVBQUVnOUMsbUJBQW1CLE9BQU0sRUFBRyxTQUFTQyxHQUFHNytDLEdBQUcsSUFBSSxJQUFJNEIsRUFBRTVCLEVBQUVpQyxPQUFPLEVBQUUsR0FBR0wsRUFBRUEsSUFBSSxDQUFDLElBQUlyQixFQUFFUCxFQUFFNEIsR0FBR3JDLEVBQUVnQixFQUFFNkgsYUFBYSxPQUFPN0gsRUFBRTZILGFBQWEsUUFBUTdJLEdBQUcsV0FBV0EsR0FBRzRzQyxNQUFNNXNDLEtBQUtTLEVBQUVULEdBQUdnQixHQUFHLE9BQU9QLEVBQUV1QyxLQUFLLFNBQVNYLEdBQUcsT0FBTzVCLEVBQUU0QixJQUFJNUIsRUFBRTgrQyxVQUFVLFNBQVNsOUMsR0FBRyxHQUFHLFdBQVdBLEdBQUd1cUMsTUFBTXZxQyxJQUFJNUIsRUFBRTRCLEdBQUcsT0FBTzVCLEVBQUU0QixHQUFHLElBQUksSUFBSXJCLEVBQUVuQixFQUFFWSxHQUFHVCxFQUFFZ0IsRUFBRWlRLFFBQVFqUixFQUFFa08sS0FBS2xPLEVBQUVnQixFQUFFaVEsT0FBTyxLQUFLalIsRUFBRUEsRUFBRVEsT0FBT3FJLGFBQWEsT0FBTzdJLEVBQUU2SSxhQUFhLFVBQVV4RyxFQUFFLE9BQU9yQyxFQUFFLE9BQU8sTUFBTVMsRUFBRSxTQUFTKytDLEdBQUcvK0MsR0FBRyxJQUFJNEIsRUFBRSxHQUFHLElBQUk1QixFQUFFQSxFQUFFZy9DLDBCQUEwQmgvQyxFQUFFQSxFQUFFQSxFQUFFaS9DLDJCQUEyQnI5QyxFQUFFdUIsS0FBS25ELEdBQUcsT0FBTzRCLEVBQUUsU0FBU3M5QyxHQUFHbC9DLEdBQUcsSUFBSTRCLEVBQUUsR0FBRyxJQUFJNUIsRUFBRUEsRUFBRW0vQyxtQkFBbUJuL0MsRUFBRUEsRUFBRUEsRUFBRW8vQyxvQkFBb0J4OUMsRUFBRXVCLEtBQUtuRCxHQUFHLE9BQU80QixFQUFFLFNBQVN5OUMsR0FBR3IvQyxFQUFFNEIsRUFBRXJCLEdBQUcsR0FBR0EsRUFBRXVrQixjQUFhLEVBQUd2a0IsRUFBRVIsTUFBTUMsRUFBRTRCLEdBQUdyQixFQUFFUixXQUFXLElBQUlQLE9BQU9DLGVBQWVPLEVBQUU0QixFQUFFckIsR0FBRyxNQUFNUCxLQUFLLFNBQVNzL0MsR0FBR3QvQyxFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHLElBQUksSUFBSVQsS0FBS3lCLE9BQUUsSUFBU0EsRUFBRSxHQUFHQSxFQUFFcUIsRUFBRXJDLEdBQUcsR0FBR0EsRUFBRXlILFFBQVFsSSxJQUFJdWdELEdBQUdyL0MsRUFBRU8sRUFBRXpCLEVBQUU4QyxFQUFFOUMsSUFBSSxTQUFTeWdELEdBQUd2L0MsRUFBRTRCLEdBQUcsSUFBSSxJQUFJckIsS0FBS3FCLEVBQUVyQixLQUFLUCxHQUFHcS9DLEdBQUdyL0MsRUFBRU8sRUFBRXFCLEVBQUVyQixJQUFJLFNBQVNpL0MsR0FBR3gvQyxHQUFHLElBQUk0QixFQUFFLEdBQUcsT0FBT3BDLE9BQU9nOEMsb0JBQW9CeDdDLEdBQUcyRCxTQUFTLFNBQVNwRCxHQUFHcUIsRUFBRXJCLEdBQUdmLE9BQU9zNkMseUJBQXlCOTVDLEVBQUVPLE1BQU1xQixFQUFFLFNBQVM2OUMsR0FBR3ovQyxFQUFFNEIsR0FBRyxJQUFJLElBQUlyQixFQUFFaEIsRUFBRUMsT0FBT2c4QyxvQkFBb0I1NUMsR0FBRzlDLEVBQUUsRUFBRUEsRUFBRVMsRUFBRTBDLE9BQU9uRCxJQUFJa0IsRUFBRU8sRUFBRWhCLEVBQUVULElBQUk4QyxFQUFFckIsR0FBRyxJQUFJbS9DLEdBQUdDLEdBQUcsR0FBRyxTQUFTQyxHQUFHNS9DLEdBQUcwL0MsS0FBS0EsSUFBRyxFQUFHbEIsR0FBR3FCLEtBQUtGLEdBQUd4OEMsS0FBS25ELEdBQUcsU0FBUzYvQyxLQUFLSCxJQUFHLEVBQUcsSUFBSSxJQUFJMS9DLElBQUkyL0MsR0FBRzE5QyxPQUFPMDlDLEdBQUcxOUMsUUFBUTA5QyxHQUFHN3RDLE9BQUg2dEMsR0FBYSxPQUFPMy9DLEVBQUUsU0FBUzgvQyxLQUFLdjVDLEtBQUt5SCxHQUFFLEVBQUd6SCxLQUFLdzVDLFdBQVcsR0FBR3g1QyxLQUFLeTVDLGFBQWEsR0FBR3o1QyxLQUFLMDVDLEdBQUcsSUFBSW5FLElBQUkrRCxHQUFHMTlDLEtBQUt3OUMsR0FBR0csR0FBR3AvQyxVQUFVdy9DLE1BQU0sV0FBVyxHQUFHMzVDLEtBQUt5SCxFQUFFLENBQUN6SCxLQUFLeUgsR0FBRSxFQUFHLElBQUloTyxFQUFFdUcsS0FBSzQ1QyxjQUFjbmdELEVBQUVpQyxRQUFRc0UsS0FBSzA1QyxHQUFHdDhDLFNBQVMsU0FBUy9CLEdBQUdBLEVBQUU1QixRQUFROC9DLEdBQUdwL0MsVUFBVXkvQyxZQUFZLFdBQVcsR0FBRzU1QyxLQUFLdzVDLFdBQVc5OUMsUUFBUXNFLEtBQUt5NUMsYUFBYS85QyxPQUFPLENBQUMsSUFBSWpDLEVBQUUsQ0FBQyxDQUFDKy9DLFdBQVd4NUMsS0FBS3c1QyxXQUFXQyxhQUFhejVDLEtBQUt5NUMsZUFBZSxPQUFPejVDLEtBQUt3NUMsV0FBVyxHQUFHeDVDLEtBQUt5NUMsYUFBYSxHQUFHaGdELEVBQUUsTUFBTSxJQUFJLElBQUlvZ0QsR0FBRyxjQUFjQyxHQUFHLGVBQWUsU0FBU0MsR0FBR3RnRCxHQUFHLE9BQU9BLEdBQUcsSUFBSSxJQUFJLE1BQU0sUUFBUSxJQUFJLElBQUksTUFBTSxPQUFPLElBQUksSUFBSSxNQUFNLE9BQU8sSUFBSSxJQUFJLE1BQU0sU0FBUyxJQUFJLElBQUksTUFBTSxVQUFVLFNBQVN1Z0QsR0FBR3ZnRCxHQUFHLElBQUksSUFBSTRCLEVBQUUsR0FBR3JCLEVBQUUsRUFBRUEsRUFBRVAsRUFBRWlDLE9BQU8xQixJQUFJcUIsRUFBRTVCLEVBQUVPLEtBQUksRUFBRyxPQUFPcUIsRUFBRSxJQUFJNCtDLEdBQUdELEdBQUcsc0ZBQXNGbjBDLE1BQU0sTUFBTXEwQyxHQUFHRixHQUFHLDhEQUE4RG4wQyxNQUFNLE1BQU0sU0FBU3MwQyxHQUFHMWdELEVBQUU0QixHQUFHLGFBQWE1QixFQUFFMjVDLFlBQVkzNUMsRUFBRUEsRUFBRXdlLFNBQVMsSUFBSSxJQUFJamUsRUFBRSxHQUFHaEIsRUFBRXFDLEVBQUVBLEVBQUU1QixHQUFHQSxFQUFFMkUsV0FBVzdGLEVBQUUsRUFBRWMsRUFBRUwsRUFBRTBDLE9BQU8rTCxPQUFFLEVBQU9sUCxFQUFFYyxJQUFJb08sRUFBRXpPLEVBQUVULElBQUlBLElBQUksQ0FBQ2tCLEVBQUUsQ0FBQyxJQUFJYSxFQUFFbU4sRUFBRWpQLEVBQUVpQixFQUFFYixFQUFFeUMsRUFBRSxPQUFPZixFQUFFMEcsVUFBVSxLQUFLK3hDLEtBQUtXLGFBQWEsSUFBSSxJQUFJM0MsRUFBRUMsRUFBRSxLQUFLeDRDLEVBQUU4QixFQUFFODRDLFdBQVd2NkMsRUFBRXlCLEVBQUUyQyxXQUFXZzBDLEVBQUUsRUFBRUYsRUFBRWw0QyxFQUFFbzRDLEdBQUdBLElBQUlELEdBQUcsSUFBSUQsRUFBRWo0QyxLQUFLLEtBQUtpNEMsRUFBRXYzQyxNQUFNa0wsUUFBUW0xQyxHQUFHRSxJQUFJLElBQUkvSSxHQUFHLElBQUkxMkMsRUFBRTIvQyxHQUFHemhELEdBQUd3NEMsRUFBRUEsRUFBRW1KLEdBQUc3L0MsRUFBRTFCLEdBQUcsS0FBS0osRUFBRSxJQUFJLE1BQU1pQixFQUFFLEtBQUtzNUMsS0FBS1ksVUFBVXI1QyxFQUFFQSxFQUFFbWtCLEtBQUtua0IsRUFBRTlCLEdBQUcwaEQsR0FBRzFoRCxFQUFFNDZDLFdBQVc5NEMsRUFBRUEsRUFBRW9LLFFBQVFvMUMsR0FBR0MsSUFBSSxNQUFNdGdELEVBQUUsS0FBS3M1QyxLQUFLYSxhQUFhdDVDLEVBQUUsVUFBVUEsRUFBRW1rQixLQUFLLFNBQVMsTUFBTWhsQixFQUFFLFFBQVEsTUFBTWlCLE9BQU8raEIsUUFBUTdYLE1BQU10SyxHQUFHaUQsTUFBTSxvQkFBb0J2RCxHQUFHTSxFQUFFLE9BQU9OLEVBQUUsSUFBSW9nRCxHQUFHbkQsR0FBR3hDLEVBQUU0RixHQUFHLENBQUNwL0MsY0FBYyxTQUFTeEIsR0FBRyxPQUFPdUcsS0FBS3M2Qyw2QkFBNkI3Z0QsSUFBSTBSLGlCQUFpQixTQUFTMVIsR0FBRyxPQUFPdUcsS0FBS3U2QyxnQ0FBZ0M5Z0QsS0FBSytnRCxHQUFHLEdBQUcsU0FBU0MsR0FBR2hoRCxHQUFHK2dELEdBQUcvZ0QsR0FBRyxTQUFTNEIsR0FBRyxPQUFPQSxFQUFFLGtCQUFrQjVCLElBQUksU0FBU2loRCxHQUFHamhELEVBQUU0QixHQUFHLElBQUksSUFBSXJCLEtBQUsrK0MsR0FBR3QvQyxFQUFFNEIsRUFBRSxtQkFBbUJBLEVBQUVvL0MsR0FBR3pnRCxHQUFHLFNBQVMyZ0QsR0FBR2xoRCxFQUFFNEIsR0FBR0EsT0FBRSxJQUFTQSxFQUFFLEdBQUdBLEVBQUUsSUFBSSxJQUFJckIsRUFBRSxFQUFFQSxFQUFFcUIsRUFBRUssT0FBTzFCLElBQUksQ0FBQyxJQUFJaEIsRUFBRXFDLEVBQUVyQixHQUFHekIsRUFBRVUsT0FBT3M2Qyx5QkFBeUI5NUMsRUFBRVQsR0FBR1QsSUFBSVUsT0FBT0MsZUFBZU8sRUFBRSxrQkFBa0JULEVBQUVULEdBQUdBLEVBQUVpQixNQUFNNmdELEdBQUdyaEQsS0FBS3FoRCxHQUFHcmhELEdBQUdULEVBQUVpQixPQUFPaWhELEdBQUd6aEQsS0FBSyxJQUFJNGhELEdBQUdqZ0QsU0FBU2tnRCxpQkFBaUJsZ0QsU0FBU21nRCxXQUFXQyxTQUFTLE1BQUssR0FBSUMsR0FBR3JnRCxTQUFTa2dELGlCQUFpQmxnRCxTQUFTbWdELFdBQVdHLGFBQWEsTUFBSyxHQUFJQyxHQUFHdmdELFNBQVM0b0MsZUFBZUQsbUJBQW1CLFNBQVMsU0FBUzZYLEdBQUcxaEQsR0FBRyxJQUFJLElBQUk0QixFQUFFQSxFQUFFNUIsRUFBRWcvQywyQkFBMkJoL0MsRUFBRTJoRCwyQkFBMkIvL0MsR0FBRyxJQUFJZ2dELEdBQUcsQ0FBQyxvQkFBb0IsbUJBQW1CLFdBQVcscUJBQXFCQyxHQUFHLENBQUMsZ0JBQWdCLG9CQUF3QkMsR0FBR3RDLEdBQUcsQ0FBQyxpQkFBaUIsT0FBT2o1QyxLQUFLdzdDLG9CQUFvQixpQkFBaUIsT0FBT3g3QyxLQUFLNDRDLG9CQUFvQixnQkFBZ0IsT0FBTzU0QyxLQUFLeTdDLG1CQUFtQix3QkFBd0IsT0FBT3o3QyxLQUFLMDdDLDJCQUEyQixlQUFlLE9BQU8xN0MsS0FBSzI3QyxrQkFBa0Isd0JBQXdCLE9BQU8zN0MsS0FBSzQ3QywyQkFBMkIsdUJBQXVCLE9BQU81N0MsS0FBSzY3QywwQkFBMEIsaUJBQWlCLE9BQU83N0MsS0FBSzg3QyxzQkFBc0JDLEdBQUc5QyxHQUFHLENBQUMsa0JBQWtCLE9BQU9qNUMsS0FBS2c4QyxxQkFBcUIsZ0JBQWdCdmlELEdBQUd1RyxLQUFLZzhDLG9CQUFvQnZpRCxHQUFHLGdCQUFnQixPQUFPdUcsS0FBS2k4QyxtQkFBbUIsY0FBY3hpRCxHQUFHLE9BQU91RyxLQUFLaThDLGtCQUFrQnhpRCxLQUFLeWlELEdBQUdqRCxHQUFHLENBQUMsb0JBQW9CLE9BQU9qNUMsS0FBS204Qyx1QkFBdUIsaUJBQWlCLE9BQU9uOEMsS0FBS3E0QyxvQkFBb0Isa0JBQWtCLE9BQU9yNEMsS0FBSzY0QyxxQkFBcUIsc0JBQXNCLE9BQU83NEMsS0FBS284Qyx5QkFBeUIseUJBQXlCLE9BQU9wOEMsS0FBS3E4Qyw0QkFBNEIsNkJBQTZCLE9BQU9yOEMsS0FBS3M4QyxnQ0FBZ0MsZ0JBQWdCLE9BQU90OEMsS0FBS3U4QyxtQkFBbUIsY0FBYzlpRCxHQUFHLE9BQU91RyxLQUFLdThDLGtCQUFrQjlpRCxLQUFLLFNBQVMraUQsR0FBRy9pRCxHQUFHLElBQUksSUFBSTRCLEtBQUs1QixFQUFFLENBQUMsSUFBSU8sRUFBRVAsRUFBRTRCLEdBQUdyQixJQUFJQSxFQUFFYixZQUFXLElBQUtxakQsR0FBR2pCLElBQUlpQixHQUFHVCxJQUFJUyxHQUFHTixJQUFJLElBQUkvSyxHQUFHc0wsR0FBR3hGLEdBQUd4QyxJQUFHLElBQUt3QyxHQUFHeEUsRUFBRWlLLEdBQUdELEdBQUcsYUFBYSxTQUFTaGpELEdBQUcsSUFBSTRCLEVBQUV1N0MsR0FBR245QyxHQUFHNEIsRUFBRXNoRCxLQUFLdGhELEVBQUVzaEQsSUFBRyxFQUFHM0QsR0FBR3YvQyxFQUFFeWlELE1BQU1VLEdBQUdILEdBQUcsYUFBYSxTQUFTaGpELEdBQUcsSUFBSTRCLEVBQUV1N0MsR0FBR245QyxHQUFHNEIsRUFBRXdoRCxLQUFLeGhELEVBQUV3aEQsSUFBRyxFQUFHN0QsR0FBR3YvQyxFQUFFOGhELElBQUk3Z0QsT0FBTysxQyxnQkFBZ0IvMUMsT0FBTysxQyxlQUFlRyw0QkFBNEJxRyxHQUFHeEUsR0FBR3VHLEdBQUd2L0MsRUFBRXNpRCxNQUFNZSxHQUFHLGtCQUFrQi8xQyxLQUFLaWhCLE1BQU0rMEIsSUFBSTVMLEdBQUdsNEMsT0FBT3M2Qyx5QkFBeUJydUIsTUFBTS9xQixVQUFVLGFBQWEsU0FBU1YsR0FBRyxPQUFPMDNDLEdBQUcvM0MsSUFBSVYsS0FBS2UsSUFBSSxLQUFLdWpELEdBQUcsV0FBVyxTQUFTdmpELEtBQUssSUFBSTRCLEdBQUUsRUFBR3JCLEVBQUUsQ0FBQyxjQUFjLE9BQU9xQixHQUFFLEdBQUcsSUFBSyxPQUFPWCxPQUFPd1MsaUJBQWlCLE9BQU96VCxFQUFFTyxHQUFHVSxPQUFPcWlCLG9CQUFvQixPQUFPdGpCLEVBQUVPLEdBQUdxQixFQUF0SixHQUEySixTQUFTNGhELEdBQUd4akQsR0FBRyxHQUFHQSxHQUFHLFlBQWlCQSxHQUFFLElBQUk0QixJQUFJNUIsRUFBRXlqRCxRQUFRbGpELElBQUlQLEVBQUVrZ0IsS0FBSzNnQixJQUFJUyxFQUFFMGpELFFBQVE1a0QsRUFBRWtCLEVBQUU2NEMsT0FBT2ozQyxJQUFJNUIsRUFBRVQsRUFBRWdCLEdBQUUsRUFBRyxNQUFNLENBQUNvakQsR0FBRzdrRCxFQUFFMmtELFFBQVE3aEQsRUFBRXNlLEtBQUszZixFQUFFbWpELFFBQVFua0QsRUFBRXFrRCxHQUFHTCxHQUFHdmpELEVBQUU0QixHQUFHLElBQUlxN0MsR0FBRyxDQUFDNXNCLE1BQUssRUFBR0QsT0FBTSxFQUFHNlAsU0FBUSxFQUFHNGpCLFVBQVMsRUFBRzkxQixPQUFNLEVBQUcrMUIsVUFBUyxFQUFHQyxXQUFVLEVBQUd6ekIsWUFBVyxFQUFHQyxZQUFXLEVBQUd5ekIsV0FBVSxFQUFHQyxVQUFTLEVBQUdDLFdBQVUsRUFBR0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLGFBQVksRUFBR2p3QyxPQUFNLEVBQUdrd0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLGtCQUFpQixFQUFHQyxtQkFBa0IsRUFBR0MsZ0JBQWUsRUFBR0MsWUFBVyxFQUFHQyxVQUFTLEVBQUdDLFdBQVUsRUFBR0MsYUFBWSxFQUFHQyxhQUFZLEVBQUd2MEIsY0FBYSxFQUFHdzBCLGFBQVksRUFBR0MsYUFBWSxFQUFHQyxXQUFVLEVBQUdDLGVBQWMsRUFBR0MsWUFBVyxFQUFHMzBCLGNBQWEsRUFBRzQwQixtQkFBa0IsRUFBR0Msb0JBQW1CLEVBQUdDLFdBQVUsRUFBR0MsTUFBSyxFQUFHQyxXQUFVLEVBQUdDLFdBQVUsRUFBR0MsVUFBUyxFQUFHQyxNQUFLLEVBQUdDLFNBQVEsRUFBR0MsYUFBWSxFQUFHQyxZQUFXLEVBQUdDLGFBQVksRUFBR0MsVUFBUyxHQUFJQyxHQUFHLENBQUNDLGlCQUFnQixFQUFHQyx5QkFBd0IsRUFBR0MsMEJBQXlCLEVBQUdDLHVCQUFzQixFQUFHQyxpQkFBZ0IsRUFBR0MsNkJBQTRCLEVBQUdDLGdCQUFlLEVBQUdDLDRCQUEyQixFQUFHQyxvQkFBbUIsR0FBSSxTQUFTQyxHQUFHNW1ELEdBQUcsT0FBT0EsYUFBYXM1QyxLQUFLdDVDLEVBQUU2bUQsc0JBQXNCN21ELEVBQUUsU0FBUzhtRCxHQUFHOW1ELEVBQUU0QixHQUFHLElBQUlyQixFQUFFLEdBQUdoQixFQUFFUyxFQUFFLElBQUlBLEVBQUU0bUQsR0FBRzVtRCxHQUFHVCxHQUFHZ0IsRUFBRTRDLEtBQUs1RCxHQUFHQSxFQUFFQSxFQUFFd25ELHFCQUFxQnhuRCxFQUFFd25ELHFCQUFxQnhuRCxFQUFFZ0ksV0FBVyt4QyxLQUFLRSx3QkFBd0JqNkMsRUFBRXVtQyxPQUFPbGtDLEdBQUdyQyxJQUFJUyxHQUFHVCxFQUFFdW1DLEtBQUt2bUMsRUFBRXEvQyxtQkFBbUIsT0FBT3IrQyxFQUFFQSxFQUFFMEIsT0FBTyxLQUFLZixVQUFVWCxFQUFFNEMsS0FBS2xDLFFBQVFWLEVBQUUsU0FBU3ltRCxHQUFHaG5ELEVBQUU0QixHQUFHLElBQUk4a0MsR0FBRyxPQUFPMW1DLEVBQUVBLEVBQUU4bUQsR0FBRzltRCxHQUFFLEdBQUksSUFBSSxJQUFJTyxFQUFFaEIsRUFBRVQsRUFBRSxFQUFFYyxPQUFFLEVBQU9vTyxPQUFFLEVBQU9sUCxFQUFFOEMsRUFBRUssT0FBT25ELElBQUksSUFBSVMsRUFBRXFuRCxHQUFHcm1ELEVBQUVxQixFQUFFOUMsT0FBT2MsSUFBSW9PLEVBQUVoTyxFQUFFZ0gsUUFBUXpILEdBQUdLLEVBQUVMLElBQUltbkMsR0FBR25uQyxLQUFLLEVBQUV5TyxFQUFFLE9BQU96TixFQUFFLFNBQVMwbUQsR0FBR2puRCxHQUFHLFNBQVM0QixFQUFFQSxFQUFFckIsR0FBRyxPQUFPcUIsRUFBRSxJQUFJNUIsRUFBRTRCLEVBQUVyQixJQUFJMm1ELFdBQVczbUQsS0FBS0EsRUFBRW1tQixTQUFTOWtCLEVBQUUsT0FBT0EsRUFBRW15QyxVQUFVL3pDLEVBQUU0QixFQUFFbEIsVUFBVVYsRUFBRVUsVUFBVWtCLEVBQUUsSUFBSXVsRCxHQUFHLENBQUMvMkIsT0FBTSxFQUFHQyxNQUFLLEdBQUksU0FBUysyQixHQUFHcG5ELEdBQUcsT0FBT0EsRUFBRXFuRCxXQUFXcm5ELEVBQUVzQixRQUFRdEIsRUFBRXNuRCxrQkFBa0J0bkQsRUFBRXF1QixjQUFjLFNBQVNrNUIsR0FBR3ZuRCxFQUFFNEIsRUFBRXJCLEdBQUcsR0FBR0EsRUFBRXFCLEVBQUU0bEQsWUFBWTVsRCxFQUFFNGxELFdBQVd4bkQsRUFBRTBILE9BQU85RixFQUFFNGxELFdBQVd4bkQsRUFBRTBILE1BQU1uSCxHQUFHLElBQUksSUFBSWhCLEVBQUVULEVBQUUsR0FBR1MsRUFBRWdCLEVBQUV6QixPQUFPc29ELEdBQUdwbkQsSUFBSUEsRUFBRXNCLFNBQVN0QixFQUFFcXVCLGlCQUFpQjl1QixFQUFFTixLQUFLMkMsRUFBRTVCLElBQUlBLEVBQUV5bkQsK0JBQStCM29ELE1BQU0sU0FBUzRvRCxHQUFHMW5ELEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFMm5ELGVBQWVwbkQsRUFBRXFCLEVBQUUySCxLQUFLLFNBQVN2SixHQUFHLE9BQU9nbkQsR0FBR2huRCxFQUFFNEIsTUFBTXJDLEVBQUVTLEVBQUUwdUIsUUFBUWx2QixPQUFPQyxlQUFlTyxFQUFFLGdCQUFnQixDQUFDOGtCLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPcU8sS0FBSyxJQUFJbFAsRUFBRTJzQixNQUFNbThCLGdCQUFnQnBvRCxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQzhrQixjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBT2IsS0FBSyxJQUFJLElBQUljLEVBQUVnQyxFQUFFSyxPQUFPLEVBQUUsR0FBR3JDLEVBQUVBLElBQUksQ0FBQyxJQUFJb08sRUFBRXBNLEVBQUVoQyxHQUFHLEdBQUdkLEVBQUVrUCxJQUFJek4sRUFBRVgsR0FBRzZyQixNQUFNbzhCLFVBQVVwOEIsTUFBTW04QixnQkFBZ0JMLEdBQUd2bkQsRUFBRWdPLEVBQUUsV0FBV2hPLEVBQUU4bkQsR0FBRyxPQUFPLElBQUlsb0QsRUFBRSxFQUFFQSxFQUFFZ0MsRUFBRUssT0FBT3JDLElBQUksQ0FBQyxJQUFJaUIsR0FBR21OLEVBQUVwTSxFQUFFaEMsTUFBTVcsRUFBRVgsR0FBRyxJQUFJaUIsR0FBR3RCLEtBQUtULEVBQUUrQixFQUFFNHFCLE1BQU1vOEIsVUFBVXA4QixNQUFNczhCLGVBQWVSLEdBQUd2bkQsRUFBRWdPLEVBQUUsVUFBVWhPLEVBQUU4bkQsSUFBSSxPQUFPaHBELEVBQUUsRUFBRWtQLEVBQUUsS0FBSyxTQUFTZzZDLEdBQUdob0QsRUFBRTRCLEVBQUVyQixFQUFFaEIsRUFBRVQsRUFBRWMsR0FBRyxJQUFJLElBQUlvTyxFQUFFLEVBQUVBLEVBQUVoTyxFQUFFaUMsT0FBTytMLElBQUksQ0FBQyxJQUFJbk4sRUFBRWIsRUFBRWdPLEdBQUdqUCxFQUFFOEIsRUFBRTZHLEtBQUt2SSxFQUFFMEIsRUFBRTRpRCxRQUFRbk0sRUFBRXoyQyxFQUFFcWYsS0FBS3EzQixFQUFFMTJDLEVBQUU2aUQsUUFBUSxHQUFHOWhELElBQUlmLEVBQUVrSCxNQUFNeEgsSUFBSXhCLEdBQUdRLElBQUlKLEdBQUdMLElBQUl3NEMsR0FBRzEzQyxJQUFJMjNDLEVBQUUsT0FBT3ZwQyxFQUFFLE9BQU8sRUFBRSxTQUFTaTZDLEdBQUdqb0QsR0FBRyxPQUFPNi9DLE1BQU1yQyxHQUFHUSxJQUFJejNDLGdCQUFnQit5QyxPQUFPbUYsR0FBR3Y5QyxTQUFTcUYsT0FBT3ZHLEVBQUVxbkQsVUFBVWEsR0FBR2xvRCxFQUFFdUcsTUFBTW1oRCxHQUFHMW5ELElBQUl1RyxLQUFLNGhELDZCQUE2Qm5vRCxHQUFHLFNBQVNvb0QsR0FBR3BvRCxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUVpa0QsR0FBR2pqRCxHQUFHekIsRUFBRVMsRUFBRWtrRCxRQUFRN2pELEVBQUVMLEVBQUUyZ0IsS0FBS2xTLEVBQUV6TyxFQUFFbWtELFFBQVE3aUQsRUFBRXRCLEVBQUVva0QsR0FBRyxHQUFHcGtELEVBQUVBLEVBQUVxa0QsR0FBR2hpRCxFQUFFLENBQUMsSUFBSTdDLEVBQUMsRUFBUTZDLEdBQUUsSUFBSSxhQUFhN0MsR0FBRyxXQUFXQSxLQUFLLFdBQVdBLEdBQUc2QyxFQUFFeW1ELGFBQWEsbUJBQW1Cem1ELEVBQUV5bUQsYUFBYSxDQUFDLEdBQUduQyxHQUFHbG1ELEdBQUcsT0FBT3VHLEtBQUsraEQsZ0NBQWdDdG9ELEVBQUU0QixFQUFFckMsR0FBRyxJQUFJSixFQUFFMEIsR0FBRzBGLEtBQUssR0FBRzFGLEVBQUVlLEVBQUV5aEQsS0FBSyxJQUFJLEVBQUUyRSxHQUFHbm5ELEVBQUUxQixFQUFFYSxFQUFFbEIsRUFBRWMsRUFBRW9PLEdBQUcsWUFBWXBNLEVBQUV5aEQsSUFBSSxHQUFHeGlELEVBQUUsU0FBU3RCLEdBQUcsR0FBR0ssR0FBRzJHLEtBQUtnaUQsNEJBQTRCdm9ELEVBQUU0QixFQUFFckIsR0FBR2hCLEVBQUU4bkQsVUFBVWEsR0FBRzNvRCxHQUFHSixJQUFJb0gsS0FBSyxDQUFDLElBQUl5SCxFQUFFeE8sT0FBT3M2Qyx5QkFBeUJ2NkMsRUFBRSxpQkFBaUJDLE9BQU9DLGVBQWVGLEVBQUUsZ0JBQWdCLENBQUNJLElBQUksV0FBVyxPQUFPUixHQUFHMmxCLGNBQWEsSUFBSyxJQUFJamtCLEVBQUVyQixPQUFPczZDLHlCQUF5QnY2QyxFQUFFLGNBQWNDLE9BQU9DLGVBQWVGLEVBQUUsYUFBYSxDQUFDdWxCLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPYixFQUFFMnNCLE1BQU1tOEIsZ0JBQWdCbjhCLE1BQU1zOEIsa0JBQWtCLEdBQUd4b0QsRUFBRWlwRCx3QkFBd0JqcEQsRUFBRTJ0QixnQkFBZ0J3WixHQUFHdm5DLElBQUksU0FBU0EsRUFBRXc2QyxZQUFZLEdBQUdwNkMsRUFBRW9vRCxlQUFlM2dELFFBQVE3SCxNQUFNSSxFQUFFbW5CLFdBQVcsRUFBRW5uQixFQUFFb29ELGVBQWUzZ0QsUUFBUTdILElBQUksR0FBR2lvRCxHQUFHN25ELElBQUlBLEVBQUUrQixTQUFTL0IsRUFBRTh1QixjQUFjOXVCLEVBQUV3dkIsYUFBYXRELE1BQU1zOEIsZ0JBQWdCeG9ELEVBQUUrckIsZ0NBQWdDLEdBQUcvckIsRUFBRXd2QixhQUFhdEQsTUFBTW04QixpQkFBaUJyb0QsRUFBRW12QixTQUFTbnZCLEVBQUUrQixTQUFTbkMsR0FBR0EsYUFBYXNwRCxPQUFPLENBQUMsSUFBSW5SLEVBQUUsYUFBYXY0QyxFQUFFNkMsRUFBRTNDLEtBQUtFLEVBQUVJLEdBQUdxQyxFQUFFeW1ELGFBQWF6bUQsRUFBRXltRCxZQUFZOW9ELEdBQUcsT0FBT0osSUFBSW9ILE9BQU95SCxHQUFHeE8sT0FBT0MsZUFBZUYsRUFBRSxnQkFBZ0J5TyxHQUFHQSxFQUFFLGFBQWF6TyxFQUFFMnRCLGNBQWNyc0IsR0FBR3JCLE9BQU9DLGVBQWVGLEVBQUUsYUFBYXNCLEdBQUdBLEVBQUUsYUFBYXRCLEVBQUV3dkIsWUFBWXVvQixJQUFJMTFDLEVBQUV5aEQsSUFBSWxnRCxLQUFLLENBQUM0RSxLQUFLNUksRUFBRXVJLEtBQUsxSCxFQUFFeWpELFFBQVEza0QsRUFBRW9oQixLQUFLdGdCLEVBQUU4akQsUUFBUTExQyxFQUFFMDZDLEdBQUc3bkQsSUFBSTBGLEtBQUtpaEQsV0FBV2poRCxLQUFLaWhELFlBQVksR0FBR2poRCxLQUFLaWhELFdBQVd4bkQsR0FBR3VHLEtBQUtpaEQsV0FBV3huRCxJQUFJLENBQUN5akQsUUFBUSxHQUFHa0YsT0FBTyxJQUFJcGlELEtBQUtpaEQsV0FBV3huRCxHQUFHbEIsRUFBRSxVQUFVLFVBQVVxRSxLQUFLdEMsR0FBR3NtRCxHQUFHbm5ELElBQUl1RyxLQUFLK2hELGdDQUFnQ3RvRCxFQUFFYSxFQUFFdEIsS0FBSyxTQUFTcXBELEdBQUc1b0QsRUFBRTRCLEVBQUVyQixHQUFHLEdBQUdxQixFQUFFLENBQUMsSUFBSXJDLEVBQUVpa0QsR0FBR2pqRCxHQUFHQSxFQUFFaEIsRUFBRWtrRCxRQUFRLElBQUkza0QsRUFBRVMsRUFBRTJnQixLQUFLdGdCLEVBQUVMLEVBQUVta0QsUUFBUTExQyxFQUFFek8sRUFBRW9rRCxHQUFHLEdBQUdwa0QsRUFBRUEsRUFBRXFrRCxHQUFHc0MsR0FBR2xtRCxHQUFHLE9BQU91RyxLQUFLc2lELG1DQUFtQzdvRCxFQUFFNEIsRUFBRXJDLEdBQUcsSUFBSXNCLEVBQUVtTixHQUFHekgsS0FBS3lILE9BQUUsRUFBTyxJQUFJalAsRUFBRSxLQUFLLElBQUlBLEVBQUU2QyxFQUFFeWhELElBQUksTUFBTXJqRCxJQUFJakIsSUFBSyxHQUFHRCxFQUFFa3BELEdBQUdqcEQsRUFBRThCLEVBQUViLEVBQUVPLEVBQUV6QixFQUFFYyxNQUFNb08sRUFBRWpQLEVBQUVvSCxPQUFPckgsRUFBRSxHQUFHLEdBQUc0cEQsR0FBRzNwRCxFQUFFa0QsU0FBU0wsRUFBRXloRCxTQUFJLElBQVU5OEMsS0FBS3NpRCxtQ0FBbUM3b0QsRUFBRWdPLEdBQUdwTSxFQUFFckMsR0FBR3lPLEdBQUd6SCxLQUFLaWhELFlBQVlqaEQsS0FBS2loRCxXQUFXeG5ELEtBQU0sR0FBRzRCLEdBQUc1QixFQUFFdUcsS0FBS2loRCxXQUFXeG5ELEdBQUdPLEVBQUUsVUFBVSxXQUFXeUcsUUFBUWdILEtBQUtoTyxFQUFFbUcsT0FBT3ZFLEVBQUUsSUFBSyxJQUFJa25ELEdBQUd0SixHQUFHLENBQUMsZUFBZSxZQUFPLElBQVNqNUMsS0FBSzJnRCxhQUFhNUQsR0FBRy84QyxLQUFLMmdELFdBQVcsWUFBWTNnRCxLQUFLbUIsTUFBTSxhQUFhbkIsS0FBS21CLE1BQU00N0MsR0FBRy84QyxPQUFNLElBQUtBLEtBQUt3aUQsWUFBWXhpRCxLQUFLMmdELFdBQVdqSyxHQUFHMTJDLEtBQUttQixRQUFRbkIsS0FBSzJnRCxhQUFZLEdBQUlTLGFBQWEsV0FBVyxPQUFPcGhELEtBQUt5aUQsaUJBQWlCemlELEtBQUt5aUQsZUFBZWxDLEdBQUd2Z0QsS0FBSzhnRCxTQUFTOWdELEtBQUttZ0IsV0FBV25nQixLQUFLeWlELGdCQUFnQixhQUFhLE9BQU9oQyxHQUFHemdELEtBQUsybUIsZUFBZTNtQixLQUFLaWlELHdCQUF3QmppRCxLQUFLb2hELGlCQUFpQixvQkFBb0IsT0FBT3BoRCxLQUFLK2dELGlCQUFpQi9nRCxLQUFLMGlELDhCQUE4QjFpRCxLQUFLMGlELDRCQUE0Qm5DLEdBQUd2Z0QsS0FBSytnRCxpQkFBZ0IsSUFBS04sR0FBR3pnRCxLQUFLMm1CLGVBQWUzbUIsS0FBS2lpRCx3QkFBd0JqaUQsS0FBSzBpRCw4QkFBOEIsTUFBTTU5QixnQkFBZ0IsV0FBV0ksTUFBTS9xQixVQUFVMnFCLGdCQUFnQnBzQixLQUFLc0gsTUFBTUEsS0FBS3VoRCxJQUFHLEdBQUl4OEIseUJBQXlCLFdBQVdHLE1BQU0vcUIsVUFBVTRxQix5QkFBeUJyc0IsS0FBS3NILE1BQU1BLEtBQUt1aEQsR0FBR3ZoRCxLQUFLa2hELCtCQUE4QixLQUFNLFNBQVNTLEdBQUdsb0QsRUFBRTRCLEdBQUcsR0FBR0EsT0FBRSxJQUFTQSxFQUFFNUIsRUFBRXNCLE9BQU9NLEVBQUU1QixFQUFFcW5ELFNBQVN6bEQsRUFBRTVCLEVBQUVzbkQsZ0JBQWdCdG5ELEVBQUVxdUIsY0FBY212QixHQUFHeEMsRUFBRSxDQUFDLEtBQUtwNUMsRUFBRXBDLE9BQU9tSCxlQUFlM0csSUFBSVcsZUFBZSx3QkFBd0IsQ0FBQyxJQUFJSixFQUFFZixPQUFPWSxPQUFPd0IsR0FBR3JCLEVBQUUyb0Qsb0JBQW9CdG5ELEVBQUUwOUMsR0FBRy8rQyxFQUFFdW9ELElBQUlsbkQsRUFBRXVuRCxxQkFBcUI1b0QsRUFBRVAsRUFBRSt6QyxVQUFVbnlDLEVBQUV1bkQsMEJBQTBCN0osR0FBR3QvQyxFQUFFOG9ELElBQUksSUFBSU0sR0FBR25DLEdBQUd4N0IsT0FBTzQ5QixHQUFHcEMsR0FBR3JRLGFBQWEwUyxHQUFHckMsR0FBRy9OLFlBQWdCcVEsR0FBRy9wRCxPQUFPZzhDLG9CQUFvQnpCLFFBQVFyNUMsV0FBV3lELFFBQVEsU0FBU25FLEdBQUcsTUFBTSxPQUFPQSxFQUFFMnhDLFVBQVUsRUFBRSxNQUFNNlgsR0FBR2hxRCxPQUFPZzhDLG9CQUFvQmpILFlBQVk3ekMsV0FBV3lELFFBQVEsU0FBU25FLEdBQUcsTUFBTSxPQUFPQSxFQUFFMnhDLFVBQVUsRUFBRSxNQUFNLFNBQVM4WCxHQUFHenBELEdBQUcsTUFBTSxDQUFDK2tCLElBQUksU0FBU25qQixHQUFHLElBQUlyQixFQUFFNDhDLEdBQUc1MkMsTUFBTWhILEVBQUVTLEVBQUUyeEMsVUFBVSxHQUFHcHhDLEVBQUUyM0MsSUFBSTMzQyxFQUFFMjNDLEVBQUUsSUFBSTMzQyxFQUFFMjNDLEVBQUVsNEMsSUFBSXVHLEtBQUsrYyxvQkFBb0IvakIsRUFBRWdCLEVBQUUyM0MsRUFBRWw0QyxJQUFJdUcsS0FBS21qRCx5QkFBeUJucUQsRUFBRXFDLEdBQUdyQixFQUFFMjNDLEVBQUVsNEMsR0FBRzRCLEdBQUdqQyxJQUFJLFdBQVcsSUFBSWlDLEVBQUV5N0MsR0FBRzkyQyxNQUFNLE9BQU8zRSxHQUFHQSxFQUFFczJDLEdBQUd0MkMsRUFBRXMyQyxFQUFFbDRDLElBQUk4a0IsY0FBYSxHQUFJLFNBQVM2a0MsR0FBRzNwRCxFQUFFNEIsR0FBRyxNQUFNLENBQUNnQixNQUFNNUMsRUFBRTRwRCxHQUFHLEdBQUdDLEdBQUdqb0QsR0FBRyxTQUFTa29ELEdBQUc5cEQsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBRyxJQUFJVCxFQUFFLEVBQUVjLEVBQUUsRUFBRW9PLEVBQUUsRUFBRW5OLEVBQUUsRUFBRTlCLEVBQUVnTSxLQUFLZy9DLElBQUlub0QsRUFBRTlDLEVBQUVTLEVBQUVLLEdBQUcsR0FBRyxHQUFHZCxHQUFHLEdBQUdjLEVBQUVJLEVBQUUsQ0FBQyxJQUFJZ08sRUFBRSxFQUFFQSxFQUFFalAsRUFBRWlQLElBQUksR0FBR2hPLEVBQUVnTyxLQUFLek4sRUFBRXlOLEdBQUcsTUFBTWhPLEVBQUVnTyxFQUFFalAsRUFBRSxHQUFHNkMsR0FBRzVCLEVBQUVpQyxRQUFRMUMsR0FBR2dCLEVBQUUwQixPQUFPLENBQUNwQixFQUFFYixFQUFFaUMsT0FBTyxJQUFJLElBQUk5QyxFQUFFb0IsRUFBRTBCLE9BQU9xMUMsRUFBRSxFQUFFQSxFQUFFdjRDLEVBQUVpUCxHQUFHZzhDLEdBQUdocUQsSUFBSWEsR0FBR04sSUFBSXBCLEtBQUttNEMsSUFBSXoyQyxFQUFFeTJDLEVBQUUsR0FBRzEzQyxHQUFHb08sRUFBRXpPLEdBQUdzQixFQUFFLElBQUllLEdBQUdmLElBQUkvQixHQUFHa1AsSUFBSSxHQUFHek8sRUFBRUssRUFBRSxNQUFNLEdBQUcsR0FBR2QsR0FBRzhDLEVBQUUsQ0FBQyxJQUFJQSxFQUFFK25ELEdBQUc3cUQsRUFBRSxHQUFHYyxFQUFFTCxHQUFHcUMsRUFBRWdvRCxHQUFHem1ELEtBQUs1QyxFQUFFWCxNQUFNLE1BQU0sQ0FBQ2dDLEdBQUcsR0FBR2hDLEdBQUdMLEVBQUUsTUFBTSxDQUFDb3FELEdBQUc3cUQsRUFBRThDLEVBQUU5QyxJQUFJLElBQUlTLEVBQUVBLEdBQUd5TyxFQUFFcE8sR0FBRyxFQUFFaUIsRUFBRWUsR0FBRzdDLEVBQUVELEdBQUcsRUFBRThDLEVBQUUrSSxNQUFNcEwsR0FBR0osRUFBRSxFQUFFQSxFQUFFSSxFQUFFSixJQUFJeUMsRUFBRXpDLEdBQUd3TCxNQUFNOUosR0FBR2UsRUFBRXpDLEdBQUcsR0FBR0EsRUFBRSxJQUFJQSxFQUFFLEVBQUVBLEVBQUUwQixFQUFFMUIsSUFBSXlDLEVBQUUsR0FBR3pDLEdBQUdBLEVBQUUsSUFBSUEsRUFBRSxFQUFFQSxFQUFFSSxFQUFFSixJQUFJLElBQUltNEMsRUFBRSxFQUFFQSxFQUFFejJDLEVBQUV5MkMsSUFBSSxHQUFHdDNDLEVBQUVqQixFQUFFdTRDLEVBQUUsS0FBSy8yQyxFQUFFeU4sRUFBRTdPLEVBQUUsR0FBR3lDLEVBQUV6QyxHQUFHbTRDLEdBQUcxMUMsRUFBRXpDLEVBQUUsR0FBR200QyxFQUFFLE9BQU8sQ0FBQyxJQUFJQyxFQUFFMzFDLEVBQUV6QyxFQUFFLEdBQUdtNEMsR0FBRyxFQUFFbDRDLEVBQUV3QyxFQUFFekMsR0FBR200QyxFQUFFLEdBQUcsRUFBRTExQyxFQUFFekMsR0FBR200QyxHQUFHQyxFQUFFbjRDLEVBQUVtNEMsRUFBRW40QyxFQUFFLElBQUlMLEVBQUU2QyxFQUFFSyxPQUFPLEVBQUUrTCxFQUFFcE0sRUFBRSxHQUFHSyxPQUFPLEVBQUUxQyxFQUFFcUMsRUFBRTdDLEdBQUdpUCxHQUFHaE8sRUFBRSxHQUFHLEVBQUVqQixHQUFHLEVBQUVpUCxHQUFHLEdBQUdqUCxHQUFHaUIsRUFBRW1ELEtBQUssR0FBRzZLLEtBQUssR0FBR0EsR0FBR2hPLEVBQUVtRCxLQUFLLEdBQUdwRSxNQUFNOEIsRUFBRWUsRUFBRTdDLEVBQUUsR0FBR2lQLEVBQUUsSUFBSXVwQyxHQUFHcDRDLEVBQUV5QyxFQUFFN0MsRUFBRSxHQUFHaVAsS0FBS3NwQyxFQUFFMTFDLEVBQUU3QyxHQUFHaVAsRUFBRSxJQUFJN08sRUFBRTBCLEVBQUUxQixFQUFFMEIsRUFBRXkyQyxFQUFFejJDLEVBQUV5MkMsRUFBRXoyQyxJQUFJQSxHQUFHQSxHQUFHdEIsRUFBRVMsRUFBRW1ELEtBQUssSUFBSW5ELEVBQUVtRCxLQUFLLEdBQUc1RCxFQUFFc0IsR0FBRzlCLElBQUlpUCxLQUFLdXBDLEdBQUdwNEMsR0FBR2EsRUFBRW1ELEtBQUssR0FBR3BFLElBQUlRLEVBQUVKLElBQUlhLEVBQUVtRCxLQUFLLEdBQUc2SyxJQUFJek8sRUFBRSszQyxJQUFJLElBQUl0M0MsRUFBRXllLFVBQVU3YyxPQUFFLEVBQU83QyxFQUFFLEdBQUdpUCxFQUFFLEVBQUVBLEVBQUVoTyxFQUFFaUMsT0FBTytMLElBQUksT0FBT2hPLEVBQUVnTyxJQUFJLEtBQUssRUFBRXBNLElBQUk3QyxFQUFFb0UsS0FBS3ZCLEdBQUdBLE9BQUUsR0FBUTlDLElBQUljLElBQUksTUFBTSxLQUFLLEVBQUVnQyxJQUFJQSxFQUFFK25ELEdBQUc3cUQsRUFBRSxJQUFJOEMsRUFBRWlvRCxLQUFLL3FELElBQUk4QyxFQUFFZ29ELEdBQUd6bUQsS0FBSzVDLEVBQUVYLElBQUlBLElBQUksTUFBTSxLQUFLLEVBQUVnQyxJQUFJQSxFQUFFK25ELEdBQUc3cUQsRUFBRSxJQUFJOEMsRUFBRWlvRCxLQUFLL3FELElBQUksTUFBTSxLQUFLLEVBQUU4QyxJQUFJQSxFQUFFK25ELEdBQUc3cUQsRUFBRSxJQUFJOEMsRUFBRWdvRCxHQUFHem1ELEtBQUs1QyxFQUFFWCxJQUFJQSxJQUFJLE9BQU9nQyxHQUFHN0MsRUFBRW9FLEtBQUt2QixHQUFHN0MsRUFBRSxTQUFTaXJELEdBQUdocUQsRUFBRTRCLEdBQUcsT0FBTzVCLElBQUk0QixFQUFFLElBQUlxb0QsR0FBR3pLLEdBQUcsQ0FBQzdJLGNBQWNzUixHQUFHeDBDLGlCQUFpQjIwQyxHQUFHOWtDLG9CQUFvQnNsQyxLQUFLc0IsR0FBRyxLQUFLLFNBQVNDLEtBQUssT0FBT0QsS0FBS0EsR0FBR2pwRCxPQUFPbXBELFVBQVVucEQsT0FBT21wRCxTQUFTQyxhQUFhSCxJQUFJLEtBQUssU0FBU0ksR0FBR3RxRCxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUU0cUQsS0FBSyxTQUFTNXFELEdBQUcsVUFBVXFDLElBQUtyQyxFQUFFZ3JELGdCQUFnQnZxRCxFQUFFTyxHQUFHLElBQUksU0FBU2lxRCxHQUFHeHFELEVBQUU0QixHQUFHLElBQUlyQixFQUFFNHBELEtBQUs1cEQsR0FBR0EsRUFBRWtxRCxZQUFZenFELEVBQUU0QixHQUFHLFNBQVM4b0QsR0FBRzFxRCxHQUFHLEdBQUdBLEVBQUV1SCxXQUFXK3hDLEtBQUtXLGFBQWEsTUFBTSxHQUFHLElBQUlyNEMsRUFBRXVvRCxLQUFLLE9BQU92b0QsRUFBRUEsRUFBRStvRCxvQkFBb0IzcUQsR0FBRyxHQUFHLFNBQVM0cUQsR0FBRzVxRCxFQUFFNEIsR0FBRyxHQUFHNUIsRUFBRSxJQUFJQSxFQUFFdUgsV0FBVyt4QyxLQUFLVyxjQUFjcjRDLEVBQUU1QixHQUFHQSxFQUFFQSxFQUFFbS9DLG1CQUFtQm4vQyxFQUFFQSxFQUFFQSxFQUFFby9DLG9CQUFvQnAvQyxFQUFFdUgsV0FBVyt4QyxLQUFLVyxjQUFjMlEsR0FBRzVxRCxFQUFFNEIsR0FBRyxJQUFJaXBELEdBQUc1cEQsT0FBT0MsU0FBUzRwRCxHQUFHdE4sR0FBR1EsR0FBRytNLEdBQUd2ckQsT0FBT3M2Qyx5QkFBeUJSLEtBQUs1NEMsVUFBVSxlQUFlc3FELEdBQUdELElBQUlBLEdBQUdwckQsSUFBSSxTQUFTc3JELEdBQUdqckQsR0FBRyxJQUFJLElBQUk0QixFQUFFQSxFQUFFNUIsRUFBRW0vQyxvQkFBb0JuL0MsRUFBRWtyRCxvQkFBb0J0cEQsR0FBRyxTQUFTdXBELEdBQUduckQsRUFBRTRCLEVBQUVyQixHQUFHLEdBQUdQLEdBQUdBLEVBQUVxOUMsR0FBR3I5QyxLQUFLQSxFQUFFZzhDLEVBQUUsQ0FBQyxHQUFHcDZDLEVBQUUsR0FBR0EsRUFBRTJGLFdBQVcreEMsS0FBS0UsdUJBQXVCLElBQUksSUFBSWo2QyxFQUFFLEVBQUVULEVBQUU4QyxFQUFFK0MsV0FBVzFDLE9BQU8xQyxFQUFFVCxFQUFFUyxJQUFJUyxFQUFFKy9DLFdBQVc1OEMsS0FBS3ZCLEVBQUUrQyxXQUFXcEYsU0FBU1MsRUFBRSsvQyxXQUFXNThDLEtBQUt2QixHQUFHckIsR0FBR1AsRUFBRWdnRCxhQUFhNzhDLEtBQUs1QyxHQUFHLFNBQVNQLEdBQUdBLEVBQUVnTyxJQUFJaE8sRUFBRWdPLEdBQUUsRUFBR3d3QyxJQUFJLFdBQVd4K0MsRUFBRWtnRCxZQUExQyxDQUF1RGxnRCxJQUFJLElBQUlvckQsR0FBRzVMLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSXgvQyxFQUFFcTlDLEdBQUc5MkMsTUFBTSxZQUFPLEtBQVV2RyxFQUFFQSxHQUFHQSxFQUFFMEYsWUFBWTFGLEVBQUV1RyxLQUFLOGtELDJCQUEyQixpQkFBaUIsSUFBSXJyRCxFQUFFcTlDLEdBQUc5MkMsTUFBTSxZQUFPLEtBQVV2RyxFQUFFQSxHQUFHQSxFQUFFcUYsWUFBWXJGLEVBQUV1RyxLQUFLeTRDLDJCQUEyQixnQkFBZ0IsSUFBSWgvQyxFQUFFcTlDLEdBQUc5MkMsTUFBTSxZQUFPLEtBQVV2RyxFQUFFQSxHQUFHQSxFQUFFdVgsV0FBV3ZYLEVBQUV1RyxLQUFLK2tELDBCQUEwQixrQkFBa0IsSUFBSXRyRCxFQUFFcTlDLEdBQUc5MkMsTUFBTSxZQUFPLEtBQVV2RyxFQUFFQSxHQUFHQSxFQUFFMFMsYUFBYTFTLEVBQUV1RyxLQUFLMDRDLDRCQUE0QixzQkFBc0IsSUFBSWovQyxFQUFFcTlDLEdBQUc5MkMsTUFBTSxZQUFPLEtBQVV2RyxFQUFFQSxHQUFHQSxFQUFFdXJELGlCQUFpQnZyRCxFQUFFdUcsS0FBS2lsRCxnQ0FBZ0MsaUJBQWlCLEdBQUc3TixHQUFHcDNDLE1BQU0sQ0FBQyxJQUFJdkcsRUFBRXE5QyxHQUFHOTJDLE1BQU0sSUFBSXZHLEVBQUUyRSxXQUFXLENBQUMzRSxFQUFFMkUsV0FBVyxHQUFHLElBQUksSUFBSS9DLEVBQUUyRSxLQUFLNDRDLG1CQUFtQnY5QyxFQUFFQSxFQUFFQSxFQUFFdzlDLG9CQUFvQnAvQyxFQUFFMkUsV0FBV3hCLEtBQUt2QixHQUFHLElBQUlyQixFQUFFUCxFQUFFMkUsZ0JBQWdCcEUsRUFBRWdHLEtBQUtrbEQsMEJBQTBCLE9BQU9sckQsRUFBRWdDLEtBQUssU0FBU3ZDLEdBQUcsT0FBT08sRUFBRVAsSUFBSU8sR0FBRyxvQkFBb0IsSUFBSVAsRUFBRXE5QyxHQUFHOTJDLE1BQU0sT0FBT3ZHLEVBQUVBLEdBQUdBLEVBQUUwRixhQUFhMUYsRUFBRXVILFdBQVcreEMsS0FBS1csZUFBZWo2QyxFQUFFLFdBQU0sSUFBU0EsRUFBRUEsRUFBRXVHLEtBQUttbEQsOEJBQThCLGtCQUFrQixHQUFHVixJQUFJQSxHQUFHL3JELEtBQUtzSCxNQUFNLE9BQU0sRUFBRyxHQUFHQSxLQUFLZ0IsVUFBVSt4QyxLQUFLRSx1QkFBdUIsT0FBTSxFQUFHLElBQUl4NUMsRUFBRXVHLEtBQUt5SyxjQUFjLEdBQUcsT0FBT2hSLEdBQUd5K0MsR0FBR3orQyxFQUFFdUcsTUFBTSxPQUFNLEVBQUcsSUFBSXZHLEVBQUV1RyxLQUFLdkcsS0FBS0EsYUFBYTQ1QyxXQUFXNTVDLEVBQUVBLEVBQUU0K0MscUJBQXFCbFksR0FBRzFtQyxHQUFHQSxFQUFFOGxDLFVBQUssR0FBUSxTQUFTOWxDLEdBQUdBLGFBQWE0NUMsV0FBVyxrQkFBa0IsR0FBRytELEdBQUdwM0MsTUFBTSxDQUFDLElBQUksSUFBSXZHLEVBQUUsR0FBRzRCLEVBQUUyRSxLQUFLNDRDLG1CQUFtQnY5QyxFQUFFQSxFQUFFQSxFQUFFdzlDLG9CQUFvQng5QyxFQUFFMkYsV0FBVyt4QyxLQUFLYSxjQUFjbjZDLEVBQUVtRCxLQUFLdkIsRUFBRTJnRCxxQkFBcUIsT0FBT3ZpRCxFQUFFb0UsS0FBSyxJQUFJLE9BQU9tQyxLQUFLb2xELDRCQUE0QixnQkFBZ0IzckQsR0FBRyxPQUFPLE1BQU1BLElBQUlBLEVBQUUsSUFBSXVHLEtBQUtnQixVQUFVLEtBQUsreEMsS0FBS1csYUFBYSxLQUFLWCxLQUFLRSx1QkFBdUIsSUFBSW1FLEdBQUdwM0MsT0FBT2kzQyxHQUFHeEMsRUFBRSxDQUFDLElBQUlwNUMsRUFBRTJFLEtBQUs0NEMsb0JBQW9CdjlDLEdBQUcyRSxLQUFLeTdDLG1CQUFtQnBnRCxHQUFHQSxFQUFFMkYsVUFBVSt4QyxLQUFLWSxZQUFZK1EsR0FBRzFrRCxNQUFNQSxLQUFLb2xELDJCQUEyQjNyRCxPQUFPaXJELEdBQUcxa0QsT0FBTyxFQUFFdkcsRUFBRWlDLFFBQVFzRSxLQUFLZ0IsV0FBVyt4QyxLQUFLVyxlQUFlMXpDLEtBQUtxbEQscUJBQXFCMXFELFNBQVN3RCxlQUFlMUUsSUFBSSxNQUFNLFFBQVF1RyxLQUFLd1AsVUFBVS9WLElBQUk2RSxhQUFhLFNBQVM3RSxFQUFFNEIsR0FBRyxHQUFHMkUsS0FBS3lLLGdCQUFnQjY1QyxJQUFJN3FELEVBQUVnUixnQkFBZ0I2NUMsR0FBRyxPQUFPdGtELEtBQUtzbEQsNEJBQTRCN3JELEVBQUU0QixHQUFHNUIsRUFBRSxHQUFHQSxJQUFJdUcsS0FBSyxNQUFNekMsTUFBTSx5RkFBeUYsR0FBR2xDLEVBQUUsQ0FBQyxJQUFJckIsRUFBRTg4QyxHQUFHejdDLEdBQUcsUUFBRyxLQUFVckIsRUFBRUEsR0FBR0EsRUFBRW1GLGFBQWFuRixJQUFJZ0csV0FBTSxJQUFTaEcsR0FBR3FCLEVBQUV5cEQsNEJBQTRCOWtELEtBQUssTUFBTXpDLE1BQU0saUlBQWlJLEdBQUdsQyxJQUFJNUIsRUFBRSxPQUFPQSxFQUFFbXJELEdBQUc1a0QsS0FBS3ZHLEdBQUcsSUFBSVQsRUFBRSxHQUFHVCxHQUFHeUIsRUFBRXVyRCxHQUFHdmxELE9BQU9oRyxFQUFFdWxDLEtBQUs2VCxVQUFVK1EsR0FBR25rRCxNQUFNM0csRUFBRUksRUFBRTQrQyxtQkFBbUIsR0FBR2gvQyxFQUFFLENBQUMsSUFBSW9PLEVBQUUwOEMsR0FBRzFxRCxHQUFHYSxJQUFJTixJQUFJdXJELEdBQUc5ckQsSUFBSThxRCxTQUFJLElBQVN2a0QsS0FBS3dsRCxtQkFBbUJuc0QsRUFBRXNyRCxvQkFBb0JsckQsRUFBRWEsR0FBR2pCLEdBQUUsRUFBRyxJQUFJYixJQUFJK3JELFNBQUksSUFBUzlxRCxFQUFFK3JELHlCQUFvQixJQUFTeGxELEtBQUt3bEQsc0JBQXNCLFNBQVMvckQsRUFBRTRCLEVBQUVyQixHQUFHLElBQUloQixFQUFFNHFELEtBQUssSUFBSTVxRCxFQUFFLE9BQU0sRUFBRyxHQUFHcUMsRUFBRTJGLFdBQVcreEMsS0FBS0UsdUJBQXVCLENBQUMsSUFBSWo2QyxHQUFFLEVBQUdxQyxFQUFFQSxFQUFFdTlDLG1CQUFtQnY5QyxFQUFFQSxFQUFFQSxFQUFFdzlDLG9CQUFvQjcvQyxFQUFFQSxHQUFHUyxFQUFFNEIsRUFBRXJCLEdBQUcsT0FBT2hCLEVBQUUsT0FBT3FDLEVBQUUyRixXQUFXK3hDLEtBQUtXLGNBQWMxNkMsRUFBRW9yRCxvQkFBb0Ivb0QsS0FBS3JCLEVBQXhPLENBQTJPUCxFQUFFbEIsR0FBR0ssRUFBRW9CLElBQUlQLEVBQUUrckQsc0JBQXNCakIsSUFBSTlxRCxFQUFFdUgsV0FBVyt4QyxLQUFLRSx3QkFBd0IsT0FBT3I2QyxHQUFHSixLQUFLQSxJQUFJaVAsRUFBRUEsR0FBRzA4QyxHQUFHMXFELElBQUk0cUQsR0FBRzVxRCxHQUFHLFNBQVNBLEdBQUcsR0FBR2IsR0FBRyxTQUFTYSxFQUFFMjVDLFdBQVdwNkMsRUFBRTRELEtBQUtuRCxHQUFHakIsRUFBRSxDQUFDLElBQUk2QyxFQUFFb00sRUFBRW04QyxPQUFPdm9ELEdBQUc0b0QsR0FBR3hxRCxFQUFFNEIsSUFBSUEsRUFBRXVvRCxPQUFPdm9ELEVBQUVvcUQsVUFBVWhzRCxFQUFFbEIsU0FBU1MsRUFBRTBDLFNBQVNncUQsR0FBRzFyRCxHQUFHQSxFQUFFcEIsRUFBRWdFLEtBQUs0RCxNQUFNeEcsRUFBRXBCLEVBQUVJLGFBQWFvTCxNQUFNcEwsRUFBRWk0QyxFQUFFcDRDLEVBQUVHLEtBQUsyc0QsR0FBRzNyRCxJQUFJbzlDLEdBQUdwM0MsUUFBUSxTQUFTdkcsRUFBRTRCLEVBQUVyQixHQUFHNHJELEdBQUd2cUQsRUFBRSxHQUFHLElBQUlyQyxFQUFFNDlDLEdBQUd2N0MsR0FBRyxRQUFHLElBQVNyQyxFQUFFOEYsYUFBYTlGLEVBQUVvRixXQUFXLE1BQU0zRSxFQUFFdUgsV0FBVyt4QyxLQUFLRSx1QkFBdUIsSUFBSXg1QyxFQUFFQSxFQUFFZy9DLDBCQUEwQmgvQyxFQUFFQSxFQUFFQSxFQUFFaS9DLDJCQUEyQm1OLEdBQUdwc0QsRUFBRTRCLEVBQUVyQyxFQUFFZ0IsUUFBUTZyRCxHQUFHcHNELEVBQUU0QixFQUFFckMsRUFBRWdCLEdBQXhOLENBQTROUCxFQUFFdUcsS0FBSzNFLElBQUlmLEVBQUV3OEMsR0FBRzkyQyxPQUFPNlcsTUFBTXhkLEdBQUUsRUFBR2krQyxHQUFHdDNDLE9BQU8ybEQsR0FBR3JyRCxFQUFFdWMsT0FBTzdjLEdBQUcsU0FBU2dHLEtBQUtvekMsWUFBWS81QyxHQUFFLEVBQUdzc0QsR0FBRzNyRCxLQUFLWCxHQUFHVyxFQUFFbW1DLEdBQUduZ0MsTUFBTUEsS0FBS3UvQixLQUFLdi9CLEtBQUszRSxHQUFHQSxFQUFFLFNBQVM1QixFQUFFNEIsR0FBRyxJQUFJckIsRUFBRXFCLEVBQUUsR0FBR0EsR0FBRyxTQUFTQSxFQUFFKzNDLFVBQVUsQ0FBQyxJQUFJcDZDLEVBQUU4OUMsR0FBR3o3QyxJQUFJckMsRUFBRUEsR0FBR0EsRUFBRXM3QyxLQUFLdDZDLEVBQUVoQixFQUFFMEMsT0FBTzFDLEVBQUUsR0FBR1MsRUFBRTRCLEVBQUV3OUMsc0JBQXNCLE9BQU83K0MsRUFBNUgsQ0FBK0hxQixHQUFHckIsRUFBRXNyRCw0QkFBNEI3ckQsRUFBRTRCLElBQUlyQixFQUFFOHJELDJCQUEyQnJzRCxJQUFJQSxFQUFFZ1IsZ0JBQWdCekssS0FBS3lLLGVBQWV6SyxLQUFLeUssY0FBY3M3QyxVQUFVdHNELEdBQUdBLEdBQUcrRCxZQUFZLFNBQVMvRCxHQUFHLEdBQUd1RyxNQUFNdkcsSUFBSTBtQyxHQUFHMW1DLEdBQUcsT0FBT3VHLEtBQUtxbEQscUJBQXFCNXJELElBQUk0RSxZQUFZLFNBQVM1RSxFQUFFNEIsR0FBRyxHQUFHQSxPQUFFLElBQVNBLEdBQUdBLEVBQUUyRSxLQUFLeUssZ0JBQWdCNjVDLEdBQUcsT0FBT3RrRCxLQUFLbzdDLDJCQUEyQjNoRCxHQUFHLEdBQUdBLEVBQUU0K0MscUJBQXFCcjRDLEtBQUssTUFBTXpDLE1BQU0sdURBQXVEOUQsR0FBR21yRCxHQUFHNWtELEtBQUssS0FBS3ZHLEdBQUcsSUFBSU8sRUFBRXVyRCxHQUFHOXJELEdBQUdULEVBQUVnQixHQUFHLFNBQVNQLEVBQUU0QixHQUFHLEdBQUc1QixFQUFFZ08sRUFBRSxDQUFDdStDLEdBQUd2c0QsR0FBRyxJQUFJTyxFQUFFaEIsRUFBRVMsRUFBRWlPLEVBQUUsSUFBSTFOLEtBQUtoQixFQUFFLElBQUksSUFBSVQsRUFBRVMsRUFBRWdCLEdBQUdYLEVBQUUsRUFBRUEsRUFBRWQsRUFBRW1ELE9BQU9yQyxJQUFJLENBQUMsSUFBSW9PLEVBQUVsUCxFQUFFYyxHQUFHLEdBQUcrK0MsR0FBRy84QyxFQUFFb00sR0FBRyxDQUFDbFAsRUFBRXFILE9BQU92RyxFQUFFLEdBQUcsSUFBSWlCLEVBQUViLEVBQUVnTyxFQUFFaEgsUUFBUWdILEdBQUcsR0FBRyxHQUFHbk4sSUFBSWIsRUFBRWdPLEVBQUU3SCxPQUFPdEYsRUFBRSxJQUFJQSxFQUFFdzhDLEdBQUdydkMsRUFBRTR3QyxzQkFBc0IvOUMsRUFBRTJyRCxJQUFJM3JELEVBQUUyckQsTUFBTTVzRCxJQUFZaUIsR0FBUm1OLEVBQUVxdkMsR0FBR3J2QyxJQUFPNnNDLEVBQUUsSUFBSSxJQUFJOTdDLEVBQUUsRUFBRUEsRUFBRThCLEVBQUVvQixPQUFPbEQsSUFBSSxDQUFDLElBQUlJLEVBQUUwQixFQUFFOUIsR0FBR3U0QyxFQUFFbjRDLEVBQUVrc0QsMEJBQTBCL1QsR0FBR0EsRUFBRXFLLDJCQUEyQnhpRCxHQUFHNk8sRUFBRTZzQyxFQUFFLEdBQUc3c0MsRUFBRXkrQyxjQUFjLEdBQUc1ckQsR0FBRSxHQUFJLE9BQU9BLEdBQXZYLENBQTJYTixFQUFFUCxHQUFHbEIsRUFBRXUrQyxHQUFHOTJDLE1BQU0sR0FBR28zQyxHQUFHcDNDLFFBQVEsU0FBU3ZHLEVBQUU0QixHQUFHLElBQUlyQixFQUFFNDhDLEdBQUduOUMsR0FBV0EsS0FBUjRCLEVBQUV1N0MsR0FBR3Y3QyxJQUFTeUQsYUFBYXpELEVBQUV5RCxXQUFXOUUsRUFBRW1TLGFBQWExUyxJQUFJNEIsRUFBRTJWLFlBQVkzVixFQUFFMlYsVUFBVWhYLEVBQUVnckQsaUJBQWlCdnJELEVBQUVPLEVBQUVnckQsZ0JBQWdCLElBQUloc0QsRUFBRWdCLEVBQUVtUyxZQUFZMVMsSUFBSW05QyxHQUFHbjlDLEdBQUcwUyxZQUFZblQsR0FBR0EsSUFBSTQ5QyxHQUFHNTlDLEdBQUdnc0QsZ0JBQWdCdnJELEdBQUdPLEVBQUVtRixXQUFXbkYsRUFBRWdyRCxnQkFBZ0JockQsRUFBRW1TLGlCQUFZLE9BQU8sSUFBUzlRLEVBQUUrQyxhQUFhL0MsRUFBRStDLFdBQVcsTUFBelQsQ0FBZ1UzRSxFQUFFdUcsTUFBTXMzQyxHQUFHdDNDLE9BQU8sQ0FBQzJsRCxHQUFHcHRELEVBQUVzZSxNQUFNLElBQUl4ZCxHQUFFLEVBQUcsR0FBR3VxRCxPQUFPdm9ELEdBQUdyQixHQUFHUCxFQUFFdUgsV0FBVyt4QyxLQUFLWSxVQUFVLENBQUMsSUFBSWxzQyxFQUFFMDhDLEdBQUcxcUQsR0FBRzRxRCxHQUFHNXFELEdBQUcsU0FBU0EsR0FBR3dxRCxHQUFHeHFELEVBQUVnTyxNQUFNLE9BQU8sU0FBU2hPLEVBQUU0QixHQUFHLElBQUlyQixFQUFFODhDLEdBQUd6N0MsR0FBRyxHQUFHckIsUUFBRyxJQUFTQSxFQUFFbXNELEdBQUcsSUFBSW5zRCxFQUFFcUIsRUFBRXU5QyxtQkFBbUI1K0MsRUFBRUEsRUFBRUEsRUFBRTYrQyxvQkFBb0JwL0MsRUFBRU8sSUFBSXFCLEVBQUV5N0MsR0FBR3o3QyxNQUFNQSxFQUFFOHFELFFBQUcsR0FBekgsQ0FBa0kxc0QsR0FBR08sS0FBS3FCLEVBQUUsU0FBUzJFLEtBQUtvekMsYUFBYS81QyxHQUFFLElBQUtMLEdBQUdxQyxJQUFJc3FELEdBQUczckQsSUFBSVgsSUFBSUEsRUFBRThtQyxHQUFHbmdDLE1BQU1BLEtBQUt1L0IsS0FBS3YvQixPQUFPekgsRUFBRXNlLE1BQU0sU0FBU3BkLEVBQUUyNUMsV0FBVy81QyxJQUFJSSxFQUFFcXJELDRCQUE0QnpyRCxFQUFFK2hELDJCQUEyQjNoRCxJQUFJQSxHQUFHMnlCLGFBQWEsU0FBUzN5QixFQUFFNEIsR0FBRyxPQUFPMkUsS0FBS3FsRCxxQkFBcUI1ckQsRUFBRTRCLEdBQUcyRSxLQUFLMmtELG9CQUFvQnRwRCxHQUFHNUIsR0FBR3VvQixVQUFVLFNBQVN2b0IsR0FBRyxHQUFHLFlBQVl1RyxLQUFLb3pDLFVBQVUsT0FBT3B6QyxLQUFLb21ELHlCQUF5QjNzRCxHQUFHLElBQUk0QixFQUFFMkUsS0FBS29tRCwwQkFBeUIsR0FBSSxHQUFHM3NELEdBQUc0QixFQUFFMkYsV0FBVyt4QyxLQUFLc1QsZUFBZSxDQUFDNXNELEVBQUV1RyxLQUFLNDRDLG1CQUFtQixJQUFJLElBQUk1K0MsRUFBRVAsRUFBRUEsRUFBRUEsRUFBRW8vQyxvQkFBb0I3K0MsRUFBRVAsRUFBRTZzRCxtQkFBa0IsR0FBSWpyRCxFQUFFa3JELG9CQUFvQnZzRCxHQUFHLE9BQU9xQixHQUFHK2tCLFlBQVksU0FBUzNtQixHQUFHLEdBQUd1RyxNQUFNQSxLQUFLZ0IsU0FBUyxDQUFDLElBQUkzRixFQUFFdTdDLEdBQUc1MkMsTUFBTWhHLEVBQUVxQixFQUFFOHFELEdBQUcsWUFBTyxJQUFTbnNELElBQUltbUMsR0FBR25nQyxPQUFPaEcsRUFBRWdHLEtBQUszRSxFQUFFOHFELEdBQUduc0QsSUFBSUEsR0FBR0EsRUFBRWdHLEtBQUtxNEMsb0JBQW9CcitDLEVBQUVzbUQsb0JBQW9CN21ELEdBQUd1RyxLQUFLckYsU0FBU2tTLGdCQUFnQnNyQyx3QkFBd0JuNEMsUUFBUTNFLEVBQUU4cUQsR0FBR25zRCxLQUFLQSxJQUFJOE0sU0FBUyxTQUFTck4sR0FBRyxPQUFPMitDLEdBQUdwNEMsS0FBS3ZHLE1BQU0rc0QsR0FBR3ZOLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSXgvQyxFQUFFdUcsS0FBS3E0QyxtQkFBbUIsT0FBTzUrQyxFQUFFQSxHQUFHQSxFQUFFcWlELHFCQUFxQjJLLEdBQUdodEQsSUFBSUEsRUFBRXE5QyxHQUFHOTJDLFFBQVF2RyxFQUFFaXRELGNBQWMsUUFBUSxTQUFTQyxHQUFHbHRELEVBQUU0QixFQUFFckIsR0FBRyxJQUFJaEIsRUFBRSxHQUFHLE9BQU8sU0FBU1MsRUFBRTRCLEVBQUVyQixFQUFFaEIsRUFBRVQsR0FBRyxJQUFJOEMsRUFBRUEsRUFBRXU5QyxtQkFBbUJ2OUMsRUFBRUEsRUFBRUEsRUFBRXc5QyxvQkFBb0IsQ0FBQyxJQUFJeC9DLEVBQUUsR0FBR0EsRUFBRWdDLEVBQUUyRixXQUFXK3hDLEtBQUtXLGFBQWEsQ0FBQyxJQUFJanNDLEVBQUV6TixFQUFFTSxFQUFFdEIsRUFBRVIsRUFBRUQsRUFBRUssRUFBRTZPLEVBQUVwTyxFQUFFZ0MsR0FBR3pDLEdBQUdKLEVBQUVvRSxLQUFLdkQsR0FBR2lCLEdBQUdBLEVBQUUxQixHQUFHUyxFQUFFVCxHQUFHYSxFQUFFSixFQUFFb08sRUFBRW5OLEVBQUU5QixHQUFHYSxPQUFFLEdBQVEsR0FBR0EsRUFBRSxPQUFsTSxDQUEwTUksRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBR0EsRUFBRSxJQUFJNHRELEdBQUczTixHQUFHLENBQUMsd0JBQXdCLElBQUl4L0MsRUFBRXE5QyxHQUFHOTJDLE1BQU0sR0FBR3ZHLFFBQUcsSUFBU0EsRUFBRXFGLFdBQVcsQ0FBQyxJQUFJckYsRUFBRXVHLEtBQUs0NEMsbUJBQW1Cbi9DLEdBQUdBLEVBQUV1SCxXQUFXK3hDLEtBQUtXLGNBQWNqNkMsRUFBRUEsRUFBRW8vQyxvQkFBb0IsT0FBT3AvQyxFQUFFLE9BQU91RyxLQUFLNm1ELGtDQUFrQyx1QkFBdUIsSUFBSXB0RCxFQUFFcTlDLEdBQUc5MkMsTUFBTSxHQUFHdkcsUUFBRyxJQUFTQSxFQUFFdVgsVUFBVSxDQUFDLElBQUl2WCxFQUFFdUcsS0FBS3k3QyxrQkFBa0JoaUQsR0FBR0EsRUFBRXVILFdBQVcreEMsS0FBS1csY0FBY2o2QyxFQUFFQSxFQUFFMmlELHdCQUF3QixPQUFPM2lELEVBQUUsT0FBT3VHLEtBQUs4bUQsaUNBQWlDLGVBQWUsT0FBTzFQLEdBQUdwM0MsTUFBTXM0QyxHQUFHbDBDLE1BQU1qSyxVQUFVeUQsT0FBT2xGLEtBQUtpZ0QsR0FBRzM0QyxPQUFPLFNBQVN2RyxHQUFHLE9BQU9BLEVBQUV1SCxXQUFXK3hDLEtBQUtXLGlCQUFpQjF6QyxLQUFLK21ELHlCQUF5Qix3QkFBd0IsSUFBSXR0RCxFQUFFdUcsS0FBSzI3QyxpQkFBaUIsT0FBT2xpRCxFQUFFQSxFQUFFaUMsT0FBTyxLQUFLc3JELEdBQUcvTixHQUFHLENBQUNoK0MsY0FBYyxTQUFTeEIsR0FBRyxPQUFPa3RELEdBQUczbUQsTUFBTSxTQUFTM0UsR0FBRyxPQUFPdzhDLEdBQUduL0MsS0FBSzJDLEVBQUU1QixNQUFNLFNBQVNBLEdBQUcsUUFBUUEsS0FBSyxJQUFJLE1BQU0wUixpQkFBaUIsU0FBUzFSLEVBQUU0QixHQUFHLEdBQUdBLEVBQUUsQ0FBQ0EsRUFBRStJLE1BQU1qSyxVQUFVa0csTUFBTTNILEtBQUtzSCxLQUFLdTZDLGdDQUFnQzlnRCxJQUFJLElBQUlPLEVBQUVnRyxLQUFLc2dELHNCQUFzQixPQUFPaEksR0FBR2o5QyxFQUFFdUMsUUFBUSxTQUFTbkUsR0FBRyxPQUFPQSxFQUFFNm1ELHVCQUF1QnRtRCxNQUFNLE9BQU9zK0MsR0FBR3FPLEdBQUczbUQsTUFBTSxTQUFTM0UsR0FBRyxPQUFPdzhDLEdBQUduL0MsS0FBSzJDLEVBQUU1QixVQUFVd3RELEdBQUdoUSxHQUFHUSxLQUFLUixHQUFHeEUsRUFBRXlHLEdBQUcsR0FBRzBOLElBQUlBLEdBQUcxTixHQUFHME4sR0FBR0ksSUFBSSxJQUFJRSxHQUFHeHNELE9BQU9DLFNBQVMsU0FBU3dzRCxHQUFHMXRELEVBQUU0QixHQUFHLEdBQUcsU0FBU0EsRUFBRWk4QyxHQUFHNzlDLEVBQUVBLEVBQUU0K0MscUJBQXFCc04sR0FBRzdPLEdBQUdyOUMsR0FBR29kLFdBQVcsR0FBRyxTQUFTcGQsRUFBRTI1QyxXQUFXLFNBQVMvM0MsSUFBSUEsRUFBRWtxRCxHQUFHOXJELElBQUksQ0FBQyxHQUFHNEIsRUFBRW9NLEVBQUUsQ0FBQ3UrQyxHQUFHM3FELEdBQUcsSUFBSXJCLEVBQUVQLEVBQUUydEQsR0FBR3B1RCxFQUFFcXVELEdBQUc1dEQsR0FBRyxHQUFHVCxJQUFJZ0IsRUFBRSxDQUFDLElBQUl6QixHQUFHeUIsRUFBRXFCLEVBQUVxTSxFQUFFMU4sSUFBSXlHLFFBQVFoSCxHQUFHLEdBQUdsQixHQUFHeUIsRUFBRTRGLE9BQU9ySCxFQUFFLElBQUl5QixFQUFFcUIsRUFBRXFNLEVBQUUxTyxLQUFLcUMsRUFBRXFNLEVBQUUxTyxHQUFHLEtBQUs0RCxLQUFLbkQsR0FBRyxFQUFFTyxFQUFFMEIsU0FBU0wsRUFBRXFNLEVBQUUxTyxHQUFHc3VELEdBQUd0dEQsS0FBSzJyRCxHQUFHdHFELElBQUksSUFBSWtzRCxHQUFHdE8sR0FBRyxDQUFDLDZCQUE2QixJQUFJeC9DLEVBQUVxOUMsR0FBRzkyQyxNQUFNLEdBQUd2RyxRQUFHLElBQVNBLEVBQUV1ckQsZ0JBQWdCLENBQUMsSUFBSXZyRCxFQUFFdUcsS0FBS284Qyx3QkFBd0IzaUQsR0FBR0EsRUFBRXVILFdBQVcreEMsS0FBS1csY0FBY2o2QyxFQUFFQSxFQUFFMmlELHdCQUF3QixPQUFPM2lELEVBQUUsT0FBT3VHLEtBQUt3bkQsdUNBQXVDLHlCQUF5QixJQUFJL3RELEVBQUVxOUMsR0FBRzkyQyxNQUFNLEdBQUd2RyxRQUFHLElBQVNBLEVBQUUwUyxZQUFZLENBQUMsSUFBSTFTLEVBQUV1RyxLQUFLNjRDLG9CQUFvQnAvQyxHQUFHQSxFQUFFdUgsV0FBVyt4QyxLQUFLVyxjQUFjajZDLEVBQUVBLEVBQUVvL0Msb0JBQW9CLE9BQU9wL0MsRUFBRSxPQUFPdUcsS0FBS3luRCxtQ0FBbUMsV0FBVyxPQUFPem5ELEtBQUs2QixhQUFhLFNBQVMsU0FBU3BJLEdBQUd1RyxLQUFLMG5ELHFCQUFxQixPQUFPanVELElBQUksZ0JBQWdCLE9BQU91RyxLQUFLNkIsYUFBYSxVQUFVLElBQUksY0FBY3BJLEdBQUd1RyxLQUFLMG5ELHFCQUFxQixRQUFRanVELElBQUk0RCxhQUFhLFNBQVM1RCxFQUFFNEIsR0FBRzJFLEtBQUt5SyxnQkFBZ0J5OEMsR0FBR2xuRCxLQUFLMm5ELDRCQUE0Qmx1RCxFQUFFNEIsR0FBRzBvRCxHQUFHL2pELEtBQUt2RyxFQUFFNEIsS0FBSzJFLEtBQUsybkQsNEJBQTRCbHVELEVBQUU0QixHQUFHOHJELEdBQUdubkQsS0FBS3ZHLEtBQUsrRSxnQkFBZ0IsU0FBUy9FLEdBQUd1RyxLQUFLeUssZ0JBQWdCeThDLEdBQUdsbkQsS0FBSzRuRCwrQkFBK0JudUQsR0FBR3NxRCxHQUFHL2pELEtBQUt2RyxFQUFFLElBQUksS0FBS3VHLEtBQUs2QixhQUFhcEksSUFBSXVHLEtBQUs0bkQsK0JBQStCbnVELElBQUl1RyxLQUFLNG5ELCtCQUErQm51RCxHQUFHMHRELEdBQUdubkQsS0FBS3ZHLE9BQU93OUMsR0FBR1EsSUFBSXVMLEdBQUc1bEQsU0FBUyxTQUFTM0QsR0FBRzh0RCxHQUFHOXRELEdBQUd5cEQsR0FBR3pwRCxNQUFNLElBQUlvdUQsR0FBRzVPLEdBQUcsQ0FBQ3ZMLGFBQWEsU0FBU2owQyxHQUFHLElBQUl1RyxLQUFLLE1BQU16QyxNQUFNLHdCQUF3QixJQUFJOUQsRUFBRSxNQUFNOEQsTUFBTSx5QkFBeUIsR0FBRzlELEVBQUVxdUQsdUJBQXVCN1EsR0FBR1UsR0FBRyxDQUFDLElBQUl0OEMsRUFBRTVCLEVBQUVxdUQscUJBQXFCLEdBQUd6c0QsRUFBRW15QyxVQUFVNkosV0FBV2w5QyxVQUFVNHRELEdBQUcxc0QsRUFBRTJFLEtBQUt2RyxHQUFHdXVELEdBQUczc0QsRUFBRUEsR0FBRzVCLEVBQUU0QixFQUFFbXFELG1CQUFtQixLQUFLbnFELEVBQUU4UCxpQkFBaUIsUUFBUTlQLEVBQUVtcUQsd0JBQW1CLEVBQU8vckQsR0FBR0EsRUFBRWlDLE9BQU8sQ0FBQyxJQUFJMUIsRUFBRXFCLEVBQUVxcUQsR0FBRzFyRCxHQUFHQSxFQUFFcEIsRUFBRWdFLEtBQUs0RCxNQUFNeEcsRUFBRXBCLEVBQUVhLGFBQWEySyxNQUFNM0ssRUFBRXczQyxFQUFFcDRDLEVBQUVZLEtBQUtrc0QsR0FBR3RxRCxHQUFHQSxFQUFFa2tDLEtBQUt1bUIsMkJBQTJCenFELFFBQVFBLEVBQUUsSUFBSTRzRCxHQUFHQyxHQUFHbG9ELEtBQUt2RyxHQUFHLE9BQU91RyxLQUFLbW9ELGdCQUFnQjlzRCxHQUFHLGlCQUFpQixJQUFJNUIsRUFBRXE5QyxHQUFHOTJDLE1BQU0sT0FBT3ZHLEdBQUdBLEVBQUUydUQsSUFBSSxRQUFRbFAsR0FBR3FPLEdBQUdNLElBQUksSUFBSTFqQyxHQUFHeHBCLFNBQVM0b0MsZUFBZUQsbUJBQW1CLFNBQVMra0IsR0FBR3BQLEdBQUcsQ0FBQyxnQkFBZ0IsT0FBTzdCLEdBQUdwM0MsTUFBTW02QyxHQUFHLGFBQWFuNkMsS0FBS296QyxVQUFVcHpDLEtBQUtpWSxRQUFRalksS0FBSzI0QyxJQUFJMzRDLEtBQUtzb0QsMEJBQTBCLGNBQWM3dUQsR0FBRyxHQUFHLGFBQWF1RyxLQUFLb3pDLFVBQVVwekMsS0FBS3NvRCx5QkFBeUI3dUQsTUFBTSxDQUFDaXJELEdBQUcxa0QsTUFBTSxJQUFJM0UsRUFBRTJFLEtBQUtvekMsV0FBVyxNQUFNLElBQUkvM0MsRUFBRTJFLEtBQUs0TSxjQUFjNU0sS0FBSzRNLGVBQWV1WCxHQUFHdlgsYUFBYXVYLEdBQUdva0MsZ0JBQWdCdm9ELEtBQUs0TSxhQUFhdlIsR0FBRzhvQixHQUFHbm5CLGNBQWMzQixHQUFHNDdDLEdBQUd4QyxFQUFFcDVDLEVBQUVpdEQseUJBQXlCN3VELEVBQUU0QixFQUFFeVMsVUFBVXJVLEVBQUVBLEVBQUU0QixFQUFFdTlDLG9CQUFvQjU0QyxLQUFLcWxELHFCQUFxQjVyRCxPQUFPK3VELEdBQUd2UCxHQUFHLENBQUNudkIsS0FBSyxXQUFXLElBQUlyd0IsRUFBRXE5QyxHQUFHOTJDLE9BQU92RyxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFb2QsT0FBT3BkLEVBQUVvWSxlQUFlcFksRUFBRWd2RCxlQUFlem9ELEtBQUswb0QseUJBQXlCelIsR0FBR1EsSUFBSXdMLEdBQUc3bEQsU0FBUyxTQUFTM0QsR0FBRyt1RCxHQUFHL3VELEdBQUd5cEQsR0FBR3pwRCxNQUFNLElBQUlrdkQsR0FBRzFQLEdBQUcsQ0FBQ2lOLGNBQWMsU0FBU3pzRCxHQUFHLEdBQUcsU0FBU3VHLEtBQUtvekMsVUFBVSxDQUFDLElBQUkvM0MsRUFBRTJFLEtBQUtzZ0Qsc0JBQXNCLE9BQU9qbEQsR0FBRzhrQyxHQUFHOWtDLElBQUlvckQsR0FBR3ByRCxJQUFJQSxFQUFFeTdDLEdBQUc5MkMsU0FBU3ZHLEdBQUdBLEVBQUVtdkQsUUFBUXZ0RCxFQUFFaTVDLEVBQUVqNUMsRUFBRTZxRCxnQkFBZ0IsS0FBS2g1QyxpQkFBaUIsU0FBU3pULEVBQUU0QixFQUFFckIsR0FBRyxHQUFHLFNBQVNnRyxLQUFLb3pDLFdBQVcsZUFBZTM1QyxFQUFFb29ELEdBQUducEQsS0FBS3NILEtBQUt2RyxFQUFFNEIsRUFBRXJCLE9BQU8sQ0FBQyxZQUFpQkEsS0FBSUEsRUFBRSxDQUFDa2pELFVBQVVsakQsSUFBSSxJQUFJaEIsRUFBRWdILEtBQUtxNEMsbUJBQW1CLElBQUlyL0MsRUFBRSxNQUFNdUUsTUFBTSxxRUFBcUV2RCxFQUFFczRDLEVBQUV0eUMsS0FBS2hILEVBQUVtcUQseUJBQXlCMXBELEVBQUU0QixFQUFFckIsS0FBSytpQixvQkFBb0IsU0FBU3RqQixFQUFFNEIsRUFBRXJCLEdBQUcsR0FBRyxTQUFTZ0csS0FBS296QyxXQUFXLGVBQWUzNUMsRUFBRTRvRCxHQUFHM3BELEtBQUtzSCxLQUFLdkcsRUFBRTRCLEVBQUVyQixPQUFPLENBQUMsWUFBaUJBLEtBQUlBLEVBQUUsQ0FBQ2tqRCxVQUFVbGpELElBQUksSUFBSWhCLEVBQUVnSCxLQUFLcTRDLG1CQUFtQixJQUFJci9DLEVBQUUsTUFBTXVFLE1BQU0scUVBQXFFdkQsRUFBRXM0QyxFQUFFdHlDLEtBQUtoSCxFQUFFZ3BELDRCQUE0QnZvRCxFQUFFNEIsRUFBRXJCLE9BQU82dUQsR0FBRzVQLEdBQUcsQ0FBQ3R1QyxlQUFlLFNBQVNsUixHQUFHLE1BQU0sS0FBS0EsRUFBRSxLQUFLa3RELEdBQUczbUQsTUFBTSxTQUFTM0UsR0FBRyxPQUFPQSxFQUFFWSxJQUFJeEMsS0FBSyxTQUFTQSxHQUFHLFFBQVFBLEtBQUssSUFBSSxRQUFRcXZELEdBQUc3UCxHQUFHLENBQUMsb0JBQW9CLElBQUl4L0MsRUFBRXc5QyxHQUFHeEMsRUFBRTk1QyxTQUFTb3VELDZCQUE2QnB1RCxTQUFTa1gsY0FBYyxJQUFJcFksSUFBSUEsRUFBRXVILFNBQVMsT0FBTyxLQUFLLElBQUkzRixJQUFJOGtDLEdBQUduZ0MsTUFBTSxLQUFLQSxPQUFPckYsVUFBVVUsR0FBRzJFLEtBQUt1L0IsT0FBTzlsQyxHQUFHdUcsS0FBS3UvQixLQUFLNFksd0JBQXdCMStDLElBQUksT0FBTyxLQUFLLElBQUk0QixFQUFFa3FELEdBQUc5ckQsR0FBRzRCLEdBQUdBLElBQUkyRSxNQUFNM0UsRUFBRWtxRCxHQUFHOXJELEVBQUU0QixFQUFFa2tDLE1BQU0sT0FBT3YvQixPQUFPckYsU0FBU1UsRUFBRSxLQUFLNUIsRUFBRTRCLElBQUkyRSxLQUFLdkcsRUFBRSxRQUFRdXZELEdBQUd0dUQsT0FBT0MsU0FBU3N1RCxHQUFHaFEsR0FBRyxDQUFDM0YsV0FBVyxTQUFTNzVDLEVBQUU0QixHQUFHLEdBQUc1QixFQUFFZ1IsZ0JBQWdCdStDLElBQUksYUFBYXZ2RCxFQUFFMjVDLFVBQVUsT0FBT3B6QyxLQUFLa3BELDBCQUEwQnp2RCxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRWdHLEtBQUtrcEQsMEJBQTBCenZELEdBQUUsR0FBSSxHQUFHNEIsRUFBRSxJQUFJNUIsRUFBRUEsRUFBRW0vQyxtQkFBbUJuL0MsRUFBRUEsRUFBRUEsRUFBRW8vQyxvQkFBb0J4OUMsRUFBRTJFLEtBQUttcEQsbUJBQW1CMXZELEdBQUUsR0FBSU8sRUFBRXVzRCxvQkFBb0JsckQsR0FBRyxPQUFPckIsS0FBS292RCxHQUFHblEsR0FBRyxDQUFDN0ksY0FBY3NSLEdBQUd4MEMsaUJBQWlCMjBDLEdBQUc5bkQsS0FBS1csUUFBUXFpQixvQkFBb0JzbEMsR0FBR3RvRCxLQUFLVyxVQUFVd0gsR0FBRyxHQUFHakosT0FBT3M2Qyx5QkFBeUJ2RixZQUFZN3pDLFVBQVUsbUJBQW1CK0gsR0FBR2l1QyxjQUFjMFUsR0FBRzFVLGVBQWVsM0MsT0FBT3M2Qyx5QkFBeUJ2RixZQUFZN3pDLFVBQVUsY0FBYytILEdBQUc0RSxTQUFTKzlDLEdBQUcvOUMsVUFBVTdOLE9BQU9zNkMseUJBQXlCdkYsWUFBWTd6QyxVQUFVLGNBQWMrSCxHQUFHZ1YsU0FBUzB2QyxHQUFHMXZDLFVBQVVqZSxPQUFPczZDLHlCQUF5QnZGLFlBQVk3ekMsVUFBVSxlQUFlK0gsR0FBRzRMLFVBQVV1NkMsR0FBR3Y2QyxXQUFXN1UsT0FBT3M2Qyx5QkFBeUJ2RixZQUFZN3pDLFVBQVUsZUFBZStILEdBQUdrTCxVQUFVbTZDLEdBQUduNkMsV0FBVyxJQUFJaThDLEdBQUcsQ0FBQ0MsWUFBWSxDQUFDNUYsSUFBSTNRLEtBQUssQ0FBQzhSLEdBQUducUQsT0FBTzR1RCxZQUFZLEtBQUs1RixJQUFJNkYsS0FBSyxDQUFDL0MsSUFBSWdELFFBQVEsQ0FBQ2hELElBQUlpRCxhQUFhLENBQUNqRCxJQUFJa0Qsc0JBQXNCLENBQUNsRCxJQUFJaFQsUUFBUSxDQUFDK1QsR0FBR1gsR0FBR0osSUFBSXZQLEdBQUd4QyxHQUFHLGNBQWNqQixRQUFRcjVDLFVBQVVrdUQsR0FBRyxLQUFLM3RELE9BQU9pdkQsZ0JBQWdCLEtBQUtoQixJQUFJM2EsWUFBWSxDQUFDd2EsR0FBR3RtRCxJQUFJeW5ELGdCQUFnQixDQUFDaEIsSUFBSXhWLGlCQUFpQixDQUFDOFQsR0FBRzRCLElBQUl4VixTQUFTLENBQUM0VixHQUFHaEMsR0FBRzRCLEdBQUdDLElBQUk1RyxPQUFPLENBQUNrSCxLQUFLUSxHQUFHM1MsR0FBR3hDLEVBQUUsS0FBSyxDQUFDLFlBQVksZUFBZSxTQUFTb1YsR0FBR3B3RCxFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHcUMsRUFBRStCLFNBQVMsU0FBUy9CLEdBQUcsT0FBTzVCLEdBQUc0QixHQUFHMDlDLEdBQUd0L0MsRUFBRTRCLEVBQUVyQixFQUFFaEIsTUFBTSxTQUFTOHdELEdBQUdyd0QsR0FBRyxJQUFJNEIsRUFBRXJCLEVBQUVQLEVBQUUsS0FBS213RCxHQUFHLElBQUl2dUQsS0FBS2d1RCxHQUFHUSxHQUFHbnZELE9BQU9XLElBQUlYLE9BQU9XLEdBQUdsQixVQUFVa3ZELEdBQUdodUQsR0FBRzVCLEVBQUVPLEdBQUcsU0FBUyt2RCxHQUFHdHdELEdBQUcsT0FBT0EsRUFBRXV3RCx3QkFBdUIsRUFBR0gsR0FBR3B3RCxFQUFFNHZELEdBQUdDLGFBQWFPLEdBQUdwd0QsRUFBRTR2RCxHQUFHdFcsTUFBTThXLEdBQUdwd0QsRUFBRTR2RCxHQUFHN1YsU0FBU3FXLEdBQUdwd0QsRUFBRTR2RCxHQUFHcmIsYUFBYTZiLEdBQUdwd0QsRUFBRTR2RCxHQUFHTSxpQkFBaUJsd0QsRUFBRSxDQUFDLE9BQU8sVUFBVSxlQUFlLHlCQUF5QjJELFNBQVMsU0FBUzNELEdBQUcsSUFBSTRCLEVBQUVYLE9BQU9qQixHQUFHTyxFQUFFZixPQUFPWSxPQUFPd0IsRUFBRWxCLFdBQVdILEVBQUVnd0Qsd0JBQXVCLEVBQUdILEdBQUc3dkQsRUFBRXF2RCxHQUFHQyxhQUFhTyxHQUFHN3ZELEVBQUVxdkQsR0FBR3RXLE1BQU1zVyxHQUFHNXZELElBQUlvd0QsR0FBRzd2RCxFQUFFcXZELEdBQUc1dkQsSUFBSTRCLEVBQUVsQixVQUFVeW9ELHFCQUFxQjVvRCxLQUFLLElBQUlpd0QsR0FBR2hULEdBQUd4TyxHQUFHeWhCLEdBQUdqVCxHQUFHeEMsRUFBRSxTQUFTbVIsR0FBR25zRCxFQUFFNEIsR0FBRyxHQUFHNHVELEtBQUt4d0QsRUFBRXV3RCx5QkFBeUI3cEIsR0FBRzFtQyxHQUFHLENBQUMsSUFBSU8sRUFBRWYsT0FBT21ILGVBQWUzRyxHQUFHVCxFQUFFZ0IsRUFBRUksZUFBZSx5QkFBeUJKLEVBQUU0b0QscUJBQXFCNXBELElBQUkrd0QsR0FBRy93RCxFQUFFQyxPQUFPWSxPQUFPRyxJQUFJQSxFQUFFNG9ELHFCQUFxQjVwRCxHQUFHQyxPQUFPczBDLGVBQWU5ekMsRUFBRVQsR0FBR2t4RCxLQUFLLElBQUk3dUQsRUFBRXFoRCxHQUFHampELEdBQUcsSUFBSTRCLEdBQUd1aEQsR0FBR25qRCxJQUFJLFNBQVNvc0QsR0FBR3BzRCxFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHNHNELEdBQUduc0QsRUFBRSxHQUFHVCxFQUFFQSxHQUFHLEtBQUssSUFBSVQsRUFBRXErQyxHQUFHbjlDLEdBQUdKLEVBQUVMLEVBQUU0OUMsR0FBRzU5QyxHQUFHLEtBQUtULEVBQUV5c0QsZ0JBQWdCaHNELEVBQUVLLEVBQUUyckQsZ0JBQWdCM3BELEVBQUVvZ0QsbUJBQW1CcGlELEVBQUV5OUMsR0FBR3YrQyxFQUFFeXNELG9CQUFvQjNyRCxFQUFFOFMsWUFBWTFTLElBQUlKLEVBQUV5OUMsR0FBR3YrQyxFQUFFNFQsWUFBWW5ULE1BQU1LLEVBQUUyckQsZ0JBQWdCdnJELEdBQUdsQixFQUFFNEcsV0FBVzlELEVBQUVyQyxFQUFFQSxJQUFJZ0IsRUFBRThFLGFBQWE5RSxFQUFFOEUsV0FBV3JGLElBQUlPLEVBQUVnWCxVQUFVdlgsRUFBRU8sRUFBRThFLGFBQWE5RSxFQUFFOEUsV0FBV3JGLElBQUlPLEVBQUVvRSxXQUFXLEtBQUssU0FBUzRwRCxHQUFHdnVELEVBQUU0QixHQUFHLElBQUlyQixFQUFFNDhDLEdBQUduOUMsR0FBRyxHQUFHNEIsUUFBRyxJQUFTckIsRUFBRThFLFdBQVcsQ0FBQzlFLEVBQUVvRSxXQUFXLEtBQUssSUFBSXBGLEVBQUVnQixFQUFFOEUsV0FBV3JGLEVBQUVnL0MsMEJBQTBCLElBQUl6K0MsRUFBRWdYLFVBQVV2WCxFQUFFc3JELHlCQUF5QmEsR0FBR25zRCxFQUFFLEdBQUdPLEVBQUVoQixFQUFFQSxPQUFFLEVBQU9nQixFQUFFQSxFQUFFQSxFQUFFMCtDLDJCQUEyQixDQUFDLElBQUluZ0QsRUFBRXErQyxHQUFHNThDLEdBQUd6QixFQUFFNEcsV0FBVzlELEdBQUc1QixFQUFFbEIsRUFBRTRULFlBQVluUyxFQUFFMCtDLDJCQUEyQm5nRCxFQUFFeXNELGdCQUFnQmhzRCxHQUFHLEtBQUtBLEVBQUVnQixFQUFFNHJELEdBQUc1ckQsRUFBRSxLQUFLLElBQUltd0QsR0FBR2xSLEdBQUcsQ0FBQy9yQyxpQkFBaUIsU0FBU3pULEVBQUU0QixFQUFFckIsR0FBRyxZQUFpQkEsS0FBSUEsRUFBRSxDQUFDa2pELFVBQVVsakQsSUFBSUEsRUFBRXM0QyxFQUFFdDRDLEVBQUVzNEMsR0FBR3R5QyxLQUFLQSxLQUFLdS9CLEtBQUs0akIseUJBQXlCMXBELEVBQUU0QixFQUFFckIsSUFBSStpQixvQkFBb0IsU0FBU3RqQixFQUFFNEIsRUFBRXJCLEdBQUcsWUFBaUJBLEtBQUlBLEVBQUUsQ0FBQ2tqRCxVQUFVbGpELElBQUlBLEVBQUVzNEMsRUFBRXQ0QyxFQUFFczRDLEdBQUd0eUMsS0FBS0EsS0FBS3UvQixLQUFLeWlCLDRCQUE0QnZvRCxFQUFFNEIsRUFBRXJCLE1BQU0sU0FBU293RCxHQUFHM3dELEVBQUU0QixHQUFHMDlDLEdBQUd0L0MsRUFBRTB3RCxHQUFHOXVELEdBQUcwOUMsR0FBR3QvQyxFQUFFcXZELEdBQUd6dEQsR0FBRzA5QyxHQUFHdC9DLEVBQUU0dUQsR0FBR2h0RCxHQUFHMDlDLEdBQUd0L0MsRUFBRW10RCxHQUFHdnJELEdBQUc0N0MsR0FBR3hFLElBQUlwM0MsR0FBRzA5QyxHQUFHdC9DLEVBQUVvckQsR0FBR3hwRCxHQUFHMDlDLEdBQUd0L0MsRUFBRW92RCxHQUFHeHRELElBQUk0N0MsR0FBR3hDLElBQUlzRSxHQUFHdC9DLEVBQUV5aUQsSUFBSW5ELEdBQUd0L0MsRUFBRThoRCxJQUFJeEMsR0FBR3QvQyxFQUFFc2lELEtBQUssSUFBSXNPLEdBQUduQyxHQUFHLEdBQUdvQyxHQUFHclQsR0FBR3NULDBCQUEwQixZQUFZNXZELFNBQVN3aUIsV0FBVyxTQUFTcXRDLEdBQUcvd0QsR0FBRyxJQUFJNEIsRUFBRSxHQUFHLEdBQUdBLEVBQUV3VCxRQUFRcFYsU0FBU0EsRUFBRUEsRUFBRTQrQyxvQkFBb0IsT0FBT2g5QyxFQUFFLFNBQVM0c0QsR0FBR3h1RCxFQUFFNEIsRUFBRXJCLEdBQUcsR0FBR1AsSUFBSXl1RCxHQUFHLE1BQU0sSUFBSTVzQyxVQUFVLHVCQUF1QnRiLEtBQUt5SCxFQUFFLEtBQUtzZ0QsR0FBRy9uRCxLQUFLM0UsRUFBRXJCLEdBQUcsU0FBUyt0RCxHQUFHdHVELEVBQUU0QixFQUFFckIsR0FBRyxHQUFHUCxFQUFFOGxDLEtBQUtsa0MsRUFBRTVCLEVBQUVDLEtBQUtNLEdBQUdBLEVBQUVOLEtBQUtzdUQsR0FBR3Z1RCxFQUFFOGxDLE9BQU9sa0MsRUFBRXU3QyxHQUFHbjlDLEVBQUU4bEMsT0FBTzFvQixLQUFLcGQsRUFBRTRCLEVBQUUrc0QsR0FBRyxXQUFXM3VELEVBQUVDLEtBQUtELEVBQUUsTUFBTTRCLEVBQUV1N0MsR0FBR245QyxJQUFJcUYsV0FBV3pELEVBQUUyVixVQUFVM1YsRUFBRThELFdBQVc5RCxFQUFFOFEsWUFBWTlRLEVBQUUycEQsZ0JBQWdCLEtBQUsvTixHQUFHUyxrQkFBa0IsS0FBS3I4QyxFQUFFNUIsRUFBRThsQyxLQUFLa1osMkJBQTJCaC9DLEVBQUU4bEMsS0FBSzZiLDJCQUEyQi8vQyxRQUFRc3FELEdBQUdsc0QsR0FBRyxTQUFTa3NELEdBQUdsc0QsR0FBR0EsRUFBRTA0QyxJQUFJMTRDLEVBQUUwNEMsR0FBRSxFQUFHa0gsSUFBSSxXQUFXLE9BQU9vTixHQUFHaHRELE9BQU8sU0FBU2d0RCxHQUFHaHRELEdBQUcsSUFBSTRCLEVBQUUsR0FBR0EsRUFBRTVCLEVBQUUwNEMsRUFBRSxDQUFDLElBQUksSUFBSW40QyxFQUFFUCxHQUFHQSxFQUFFMDRDLElBQUluNEMsRUFBRVAsR0FBRzBtQyxHQUFHMW1DLEdBQUc0QixFQUFFNUIsR0FBRzhsQyxLQUFLK2dCLHlCQUF5QmpsRCxFQUFFeTdDLEdBQUd6N0MsRUFBRWtrQyxRQUFRLEVBQUVsa0MsRUFBRTRxRCxLQUFLeHNELE9BQUUsR0FBUTRCLEVBQUVyQixHQUFHQSxFQUFFcUIsSUFBSXJCLEVBQUV5d0QsY0FBYyxTQUFTQyxHQUFHanhELEVBQUU0QixFQUFFckIsR0FBRyxJQUFJaEIsRUFBRTQ5QyxHQUFHdjdDLEdBQUc5QyxFQUFFUyxFQUFFMnhELEdBQUczeEQsRUFBRTJ4RCxHQUFHLEtBQUszd0QsSUFBSUEsR0FBR1AsRUFBRUEsRUFBRWlPLEVBQUVyTSxFQUFFdXZELGNBQWMsZ0JBQWdCbnhELEVBQUUsSUFBSU8sR0FBRzQ4QyxHQUFHNThDLEdBQUdrc0QsY0FBY3RwRCxLQUFLdkIsR0FBR3JDLEVBQUUwdEQsYUFBYTFzRCxHQUFHaEIsRUFBRTB0RCxrQkFBYSxFQUFPbnVELElBQUlTLEVBQUUwdEQsY0FBYzF0RCxFQUFFMHRELGVBQWU5UCxHQUFHNTlDLEVBQUUwdEQsY0FBY21FLElBQUcsR0FBSSxTQUFTQyxHQUFHcnhELEVBQUU0QixFQUFFckIsR0FBRyxJQUFJLElBQUloQixFQUFFLEVBQUVULE9BQUUsRUFBT1MsRUFBRWdCLEVBQUUwQixTQUFTbkQsRUFBRXlCLEVBQUVoQixJQUFJQSxJQUFJLEdBQUcsUUFBUVQsRUFBRTY2QyxVQUFVLENBQUMsSUFBSS81QyxFQUFFeTlDLEdBQUd2K0MsR0FBRzJ0RCxjQUFjN3NELEdBQUdBLEVBQUVxQyxRQUFRb3ZELEdBQUdyeEQsRUFBRTRCLEVBQUVoQyxRQUFRZ0MsRUFBRXVCLEtBQUs1QyxFQUFFaEIsSUFBSSxTQUFTK3hELEdBQUd0eEQsRUFBRTRCLEdBQUdBLEVBQUV1bUQsNkJBQTZCLElBQUkxOEIsTUFBTSxnQkFBZ0I3cEIsRUFBRXk3QyxHQUFHejdDLElBQUlxckQsY0FBY3FFLEdBQUd0eEQsRUFBRTRCLEVBQUVxckQsY0FBYyxTQUFTaEIsR0FBR2pzRCxHQUFHQSxFQUFFYixFQUFFYSxFQUFFYixHQUFHLEdBQUdhLEVBQUVnTyxFQUFFaE8sRUFBRWdPLEdBQUcsR0FBR2hPLEVBQUVpTyxFQUFFak8sRUFBRWlPLEdBQUcsR0FBRyxTQUFTcytDLEdBQUd2c0QsR0FBRyxHQUFHQSxFQUFFYixHQUFHYSxFQUFFYixFQUFFOEMsT0FBTyxDQUFDLElBQUksSUFBSUwsRUFBRXJCLEVBQUVQLEVBQUViLEVBQUVJLEVBQUUsRUFBRUEsRUFBRWdCLEVBQUUwQixPQUFPMUMsSUFBSSxDQUFDLElBQUlULEVBQUV5QixFQUFFaEIsR0FBR2d2RCxHQUFHenZELEdBQUcsSUFBSWMsRUFBRWQsRUFBRTgvQyxtQkFBbUIyUCxHQUFHM3VELElBQUlBLEVBQUV5OUMsR0FBR3o5QyxJQUFJNHNELElBQUk1c0QsRUFBRTRzRCxJQUFJLEdBQUcsRUFBRTVzRCxFQUFFZ3VELEdBQUc5dUQsR0FBR2tCLEVBQUVpTyxFQUFFck8sS0FBS2dDLEVBQUVBLEdBQUcsSUFBSWhDLElBQUcsRUFBR0ksRUFBRWlPLEVBQUVyTyxHQUFHdUQsS0FBS3JFLElBQUlrQixFQUFFaU8sRUFBRXJPLEdBQUcsQ0FBQ2QsR0FBR2tCLEVBQUVnTyxFQUFFN0ssS0FBS3JFLEdBQUcsR0FBRzhDLEVBQUUsSUFBSSxJQUFJb00sS0FBS3BNLEVBQUU1QixFQUFFaU8sRUFBRUQsR0FBRzYvQyxHQUFHN3RELEVBQUVpTyxFQUFFRCxJQUFJaE8sRUFBRWIsRUFBRSxJQUFJLFNBQVN5dUQsR0FBRzV0RCxHQUFHLElBQUk0QixFQUFFNUIsRUFBRVgsTUFBTVcsRUFBRW9JLGFBQWEsU0FBUyxhQUFhLE9BQU9wSSxFQUFFMnRELEdBQUcvckQsRUFBRSxTQUFTaXNELEdBQUc3dEQsR0FBRyxPQUFPQSxFQUFFb0ssTUFBTSxTQUFTcEssRUFBRTRCLEdBQUc1QixFQUFFK3dELEdBQUcvd0QsR0FBRyxJQUFJLElBQUlPLEVBQUV3d0QsR0FBR252RCxHQUFHckMsRUFBRSxFQUFFQSxFQUFFUyxFQUFFaUMsT0FBTzFDLElBQUksQ0FBQ3FDLEVBQUU1QixFQUFFVCxHQUFHLElBQUlULEVBQUV5QixFQUFFaEIsR0FBRyxHQUFHcUMsSUFBSTlDLEVBQUUsT0FBT2tCLEVBQUVrL0MsR0FBR3Q5QyxFQUFFZzlDLHFCQUFxQjUzQyxRQUFRcEYsR0FBRzVCLEVBQUVnSCxRQUFRbEksT0FBTyxTQUFTZy9DLEdBQUc5OUMsR0FBRyxPQUFPdXNELEdBQUd2c0QsTUFBTUEsRUFBRWdPLElBQUloTyxFQUFFZ08sRUFBRS9MLFFBQVEsR0FBR3VzRCxHQUFHOXRELFVBQVVzd0QsWUFBWSxXQUFXLElBQUloeEQsRUFBRTZ3RCxHQUFHLEdBQUdBLElBQUcsRUFBR3RxRCxLQUFLbXlDLEdBQUUsRUFBR255QyxLQUFLeUgsRUFBRSxDQUFDdStDLEdBQUdobUQsTUFBTSxJQUFJLElBQUkzRSxFQUFFckIsRUFBRSxFQUFFQSxFQUFFZ0csS0FBS3lILEVBQUUvTCxPQUFPMUIsSUFBSSxDQUFDLElBQUloQixFQUFFODlDLEdBQUd6N0MsRUFBRTJFLEtBQUt5SCxFQUFFek4sSUFBSXpCLEVBQUVTLEVBQUVrdEQsY0FBYyxHQUFHbHRELEVBQUVrdEQsY0FBYyxHQUFHbHRELEVBQUVzN0MsRUFBRSxHQUFHdDdDLEVBQUVneUQsR0FBR3p5RCxFQUFFLElBQUlTLEVBQUUsRUFBRUEsRUFBRVQsRUFBRW1ELE9BQU8xQyxJQUFJLENBQUMsSUFBSUssRUFBRXk5QyxHQUFHditDLEVBQUVTLElBQUlLLEVBQUVzeEQsR0FBR3R4RCxFQUFFcXRELGFBQWFydEQsRUFBRXF0RCxlQUFlcnJELElBQUloQyxFQUFFcXRELGFBQWEsT0FBTyxJQUFJMXNELEVBQUVnRyxLQUFLdS9CLEtBQUtxWixtQkFBbUI1K0MsRUFBRUEsRUFBRUEsRUFBRTYrQyxvQkFBb0I2UixHQUFHMXFELEtBQUtoRyxHQUFHLElBQUlBLEVBQUUsRUFBRUEsRUFBRWdHLEtBQUt5SCxFQUFFL0wsT0FBTzFCLElBQUksQ0FBQyxLQUFLekIsRUFBRXUrQyxHQUFHejdDLEVBQUUyRSxLQUFLeUgsRUFBRXpOLEtBQUtrc0QsY0FBY3hxRCxPQUFPLElBQUkxQyxFQUFFcUMsRUFBRXU5QyxtQkFBbUI1L0MsRUFBRUEsRUFBRUEsRUFBRTYvQyxvQkFBb0I2UixHQUFHMXFELEtBQUtoSCxFQUFFcUMsR0FBRyxJQUFJckMsR0FBR0EsRUFBRTg5QyxHQUFHejdDLEVBQUVnOUMsc0JBQXNCci9DLEVBQUU2ZCxRQUFRMGdDLEdBQUd2K0MsSUFBSUEsRUFBRW01QyxJQUFJbjVDLEVBQUV5eEQsY0FBY0ssR0FBRzlxRCxLQUFLekgsRUFBRSs3QyxFQUFFLzdDLEVBQUUydEQsZUFBZWx0RCxFQUFFVCxFQUFFeXlELEdBQUcsQ0FBQyxJQUFJM3hELEVBQUUsRUFBRUEsRUFBRUwsRUFBRTBDLE9BQU9yQyxJQUFJeTlDLEdBQUc5OUMsRUFBRUssSUFBSXN4RCxHQUFHLEtBQUtweUQsRUFBRXl5RCxHQUFHLEtBQUtoeUQsRUFBRTBDLE9BQU9uRCxFQUFFMnRELGNBQWN4cUQsU0FBU25ELEVBQUVzeUQsSUFBRyxHQUFJdHlELEVBQUVzeUQsS0FBS3R5RCxFQUFFc3lELElBQUcsRUFBR0UsR0FBRy9xRCxLQUFLM0UsSUFBSSxJQUFJQSxFQUFFMkUsS0FBS3lILEVBQUV6TixFQUFFLEdBQUd6QixFQUFFLEVBQUVBLEVBQUU4QyxFQUFFSyxPQUFPbkQsS0FBS2MsRUFBRXk5QyxHQUFHOTlDLEVBQUVxQyxFQUFFOUMsR0FBRzgvQyxzQkFBc0JoL0MsRUFBRXdkLFFBQVEsRUFBRTdjLEVBQUV5RyxRQUFRekgsS0FBS2dCLEVBQUU0QyxLQUFLNUQsR0FBRyxJQUFJcUMsRUFBRSxFQUFFQSxFQUFFckIsRUFBRTBCLE9BQU9MLElBQUksQ0FBQyxJQUFJOUMsR0FBR2MsRUFBRVcsRUFBRXFCLE1BQU0yRSxLQUFLQSxLQUFLdS9CLEtBQUtsbUMsRUFBRUwsRUFBRSxHQUFHSyxFQUFFQSxFQUFFdS9DLG1CQUFtQnYvQyxFQUFFQSxFQUFFQSxFQUFFdy9DLG9CQUFvQixHQUFHLFFBQVF4L0MsRUFBRSs1QyxVQUFVLElBQUksSUFBSTNyQyxFQUFFcXZDLEdBQUd6OUMsR0FBR2k3QyxFQUFFaDZDLEVBQUUsRUFBRUEsRUFBRW1OLEVBQUUvTCxPQUFPcEIsSUFBSXRCLEVBQUU0RCxLQUFLNkssRUFBRW5OLFNBQVN0QixFQUFFNEQsS0FBS3ZELEdBQUdBLEVBQUVtL0MsR0FBR2pnRCxHQUFHa1AsRUFBRTg3QyxHQUFHdnFELEVBQUVBLEVBQUUwQyxPQUFPckMsRUFBRUEsRUFBRXFDLFFBQVEsSUFBSSxJQUFJbEQsRUFBRThCLEVBQUUsRUFBRTFCLE9BQUUsRUFBTzBCLEVBQUVtTixFQUFFL0wsU0FBUzlDLEVBQUU2TyxFQUFFbk4sSUFBSUEsSUFBSSxDQUFDLElBQUksSUFBSXkyQyxFQUFFLEVBQUVDLE9BQUUsRUFBT0QsRUFBRW40QyxFQUFFeXFELEdBQUczbkQsU0FBU3MxQyxFQUFFcDRDLEVBQUV5cUQsR0FBR3RTLElBQUlBLElBQUlDLEVBQUU4VCw0QkFBNEJ2c0QsR0FBR0EsRUFBRTZpRCwyQkFBMkJwSyxHQUFHMzNDLEVBQUV1RyxPQUFPaEgsRUFBRXlELE1BQU03RCxFQUFFLEdBQUdBLEdBQUdJLEVBQUUwcUQsR0FBRyxJQUFJOXFELEVBQUUsRUFBRUksT0FBRSxFQUFPSixFQUFFaVAsRUFBRS9MLFNBQVM5QyxFQUFFNk8sRUFBRWpQLElBQUlBLElBQUksSUFBSThCLEVBQUVqQixFQUFFVCxFQUFFeUQsT0FBTzAwQyxFQUFFbjRDLEVBQUV5RCxNQUFNMDBDLEVBQUVuNEMsRUFBRXlELE1BQU16RCxFQUFFMHFELEdBQUd2UyxJQUFJQyxFQUFFaDRDLEVBQUUrM0MsR0FBR3g0QyxFQUFFK3NELDRCQUE0QnRVLEVBQUUxMkMsR0FBR2pCLEVBQUV1RyxPQUFPbXhDLEVBQUUsRUFBRUMsSUFBSSxJQUFJaUcsR0FBR1Msb0JBQW9CMTNDLEtBQUtpckQsR0FBRyxJQUFJanhELEVBQUVnRyxLQUFLdS9CLEtBQUtxWixtQkFBbUI1K0MsRUFBRUEsRUFBRUEsRUFBRTYrQyxvQkFBb0J4OUMsRUFBRXk3QyxHQUFHOThDLEdBQUdBLEVBQUU4cUQsNEJBQTRCOWtELEtBQUt1L0IsTUFBTSxTQUFTdmxDLEVBQUVvNUMsV0FBVy8zQyxFQUFFcXJELGNBQWMxbUQsS0FBS3UvQixLQUFLNmIsMkJBQTJCcGhELEdBQUdnRyxLQUFLaXJELElBQUcsRUFBR1gsR0FBRzd3RCxFQUFFNHdELElBQUlBLE1BQU0sU0FBUzV3RCxHQUFHQSxFQUFFK3pDLFVBQVUyRixpQkFBaUJoNUMsVUFBVWl3RCxHQUFHM3dELEVBQUUsWUFBWTJ3RCxHQUFHM3dELEdBQUdSLE9BQU82M0MsaUJBQWlCcjNDLEVBQUUsQ0FBQ3VILFNBQVMsQ0FBQ3hILE1BQU11NUMsS0FBS0UsdUJBQXVCMTBCLGNBQWEsR0FBSXhVLFNBQVMsQ0FBQ3ZRLE1BQU0scUJBQXFCK2tCLGNBQWEsR0FBSS9PLFVBQVUsQ0FBQ2hXLE1BQU0sS0FBSytrQixjQUFhLEtBQU0sQ0FBQyxZQUFZLGVBQWUsVUFBVW5oQixTQUFTLFNBQVMvQixHQUFHcEMsT0FBT0MsZUFBZU8sRUFBRTRCLEVBQUUsQ0FBQzdCLFdBQU0sRUFBTytrQixjQUFhLE9BQVEsQ0FBQyxnQkFBZ0IsVUFBVSxlQUFlbmhCLFNBQVMsU0FBUy9CLEdBQUdwQyxPQUFPQyxlQUFlTyxFQUFFNEIsRUFBRSxDQUFDakMsSUFBSSxXQUFXLE9BQU80RyxLQUFLdS9CLEtBQUtsa0MsSUFBSWtqQixjQUFhLE9BQXBnQixDQUE2Z0IwcEMsR0FBRzl0RCxXQUFXTyxPQUFPKzFDLGdCQUFnQi8xQyxPQUFPKzFDLGVBQWVDLFFBQVF1RyxHQUFHTyxLQUFLUCxHQUFHUyxrQkFBa0IsQ0FBQyxJQUFJd1QsR0FBRyxJQUFJMVYsSUFBSTZVLEdBQUcsV0FBVyxJQUFJNXdELEVBQUUsR0FBR3l4RCxHQUFHOXRELFNBQVMsU0FBUy9CLEVBQUVyQixHQUFHUCxFQUFFbUQsS0FBSyxDQUFDNUMsRUFBRXFCLE9BQU82dkQsR0FBR0MsUUFBUSxJQUFJLElBQUk5dkQsRUFBRSxFQUFFQSxFQUFFNUIsRUFBRWlDLE9BQU9MLElBQUksQ0FBQyxJQUFJckIsRUFBRVAsRUFBRTRCLEdBQUcsR0FBRzVCLEVBQUU0QixHQUFHLEdBQUdyQixFQUFFb3hELCtCQUErQnB4RCxFQUFFcXhELG9DQUFvQ2YsSUFBSTN2RCxTQUFTdVMsaUJBQWlCLG9CQUFvQixXQUFXbzlDLElBQUcsRUFBR0QsT0FBTyxDQUFDMXdDLE1BQUssSUFBSyxJQUFJMnhDLEdBQUc1d0QsT0FBTysxQyxlQUFlQyxPQUFPNmEsR0FBRyxTQUFTOXhELEVBQUU0QixHQUFHLElBQUlyQixFQUFFcUIsRUFBRWxCLFVBQVV5ekMsa0JBQWtCNTBDLEVBQUVxQyxFQUFFbEIsVUFBVXF4RCxxQkFBcUJGLEdBQUc1eUQsS0FBS2dDLE9BQU8rMUMsZUFBZWgzQyxFQUFFLFNBQVNBLEVBQUU0QixFQUFFckIsR0FBRyxJQUFJaEIsRUFBRSxFQUFFVCxFQUFFLGdCQUFnQlMsSUFBSSxPQUFPcUMsR0FBR3JCLEtBQUtQLEVBQUVVLFVBQVV5ekMsa0JBQWtCbjBDLEVBQUVVLFVBQVVpeEQsNkJBQTZCLFdBQVdkLEdBQUdZLEdBQUcxc0MsSUFBSXhlLE1BQUssR0FBSUEsS0FBS3pILEtBQUt5SCxLQUFLekgsSUFBRyxFQUFHOEMsR0FBR0EsRUFBRTNDLEtBQUtzSCxRQUFRdkcsRUFBRVUsVUFBVXF4RCxxQkFBcUIveEQsRUFBRVUsVUFBVWt4RCxnQ0FBZ0MsV0FBV2YsR0FBR3RxRCxLQUFLeXJELGFBQWFQLEdBQUcxc0MsSUFBSXhlLE1BQUssR0FBSUEsS0FBS3pILEtBQUt5SCxLQUFLekgsSUFBRyxFQUFHeUIsR0FBR0EsRUFBRXRCLEtBQUtzSCxTQUFTdkcsRUFBOVcsQ0FBaVg0QixFQUFFckIsRUFBRWhCLElBQUlxQyxFQUFFbEIsVUFBVXl6QyxrQkFBa0I1ekMsRUFBRXFCLEVBQUVsQixVQUFVcXhELHFCQUFxQnh5RCxHQUFHMEIsT0FBTysxQyxlQUFlQyxPQUFPNmEsR0FBR3R5RCxPQUFPQyxlQUFld0IsT0FBT2d4RCxzQkFBc0J2eEQsVUFBVSxTQUFTLENBQUNYLE1BQU0reEQsR0FBR2h0QyxjQUFhLElBQUssU0FBU2duQyxHQUFHOXJELEdBQUcsR0FBRzBtQyxHQUFHMW1DLEVBQUVBLEVBQUU2bUQsdUJBQXVCLE9BQU83bUQsRUFBRSxTQUFTa3lELEdBQUdseUQsR0FBR3VHLEtBQUt3QixLQUFLL0gsRUFBRSxTQUFTbXlELEdBQUdueUQsR0FBR1IsT0FBT0MsZUFBZXl5RCxHQUFHeHhELFVBQVVWLEVBQUUsQ0FBQ0wsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBSyxXQUFXL0gsSUFBSStrQixJQUFJLFNBQVNuakIsR0FBRzJFLEtBQUt3QixLQUFLLFdBQVcvSCxHQUFHNEIsR0FBR2tqQixjQUFhLEtBQU12a0IsRUFBRTJ4RCxHQUFHeHhELFdBQVcrUyxpQkFBaUIsU0FBU3pULEVBQUU0QixFQUFFckIsR0FBRyxPQUFPZ0csS0FBS3dCLEtBQUsyaEQseUJBQXlCMXBELEVBQUU0QixFQUFFckIsSUFBSUEsRUFBRStpQixvQkFBb0IsU0FBU3RqQixFQUFFNEIsRUFBRXJCLEdBQUcsT0FBT2dHLEtBQUt3QixLQUFLd2dELDRCQUE0QnZvRCxFQUFFNEIsRUFBRXJCLElBQUlBLEVBQUV3RCxZQUFZLFNBQVMvRCxHQUFHLE9BQU91RyxLQUFLd0IsS0FBSytrRCxvQkFBb0I5c0QsSUFBSU8sRUFBRXNFLGFBQWEsU0FBUzdFLEVBQUU0QixHQUFHLE9BQU8yRSxLQUFLd0IsS0FBSzZqRCxxQkFBcUI1ckQsRUFBRTRCLElBQUlyQixFQUFFcUUsWUFBWSxTQUFTNUUsR0FBRyxPQUFPdUcsS0FBS3dCLEtBQUttakQsb0JBQW9CbHJELElBQUlPLEVBQUVveUIsYUFBYSxTQUFTM3lCLEVBQUU0QixHQUFHLE9BQU8yRSxLQUFLd0IsS0FBS3FxRCxxQkFBcUJweUQsRUFBRTRCLElBQUlyQixFQUFFZ29CLFVBQVUsU0FBU3ZvQixHQUFHLE9BQU91RyxLQUFLd0IsS0FBSzhrRCxrQkFBa0I3c0QsSUFBSU8sRUFBRW9tQixZQUFZLFNBQVMzbUIsR0FBRyxPQUFPdUcsS0FBS3dCLEtBQUs4K0Msb0JBQW9CN21ELElBQUlPLEVBQUU4TSxTQUFTLFNBQVNyTixHQUFHLE9BQU91RyxLQUFLd0IsS0FBS3NxRCxpQkFBaUJyeUQsSUFBSU8sRUFBRW8yQyxjQUFjLFNBQVMzMkMsR0FBRyxPQUFPdUcsS0FBS3dCLEtBQUt1cUQsc0JBQXNCdHlELElBQUlPLEVBQUVxRCxhQUFhLFNBQVM1RCxFQUFFNEIsR0FBRzJFLEtBQUt3QixLQUFLa21ELHFCQUFxQmp1RCxFQUFFNEIsSUFBSXJCLEVBQUU2SCxhQUFhLFNBQVNwSSxHQUFHLE9BQU91RyxLQUFLd0IsS0FBS3dxRCw0QkFBNEJ2eUQsSUFBSU8sRUFBRWl5RCxhQUFhLFNBQVN4eUQsR0FBRyxPQUFPdUcsS0FBS3dCLEtBQUswcUQsNEJBQTRCenlELElBQUlPLEVBQUV3RSxnQkFBZ0IsU0FBUy9FLEdBQUd1RyxLQUFLd0IsS0FBSzJxRCx3QkFBd0IxeUQsSUFBSU8sRUFBRTB6QyxhQUFhLFNBQVNqMEMsR0FBRyxPQUFPdUcsS0FBS3dCLEtBQUs0cUQscUJBQXFCM3lELElBQUlPLEVBQUU2dkIsTUFBTSxXQUFXN3BCLEtBQUt3QixLQUFLNnFELHdCQUF3QnJ5RCxFQUFFOHZCLEtBQUssV0FBVzlwQixLQUFLd0IsS0FBS2luRCxnQkFBZ0J6dUQsRUFBRXM1QyxXQUFXLFNBQVM3NUMsRUFBRTRCLEdBQUcsR0FBRzJFLEtBQUt3QixLQUFLUixXQUFXK3hDLEtBQUtDLGNBQWMsT0FBT2h6QyxLQUFLd0IsS0FBSzJuRCxtQkFBbUIxdkQsRUFBRTRCLElBQUlyQixFQUFFMlEsZUFBZSxTQUFTbFIsR0FBRyxHQUFHdUcsS0FBS3dCLEtBQUtSLFdBQVcreEMsS0FBS0MsY0FBYyxPQUFPaHpDLEtBQUt3QixLQUFLOHFELHVCQUF1Qjd5RCxJQUFJTyxFQUFFaUIsY0FBYyxTQUFTeEIsR0FBRyxPQUFPdUcsS0FBS3dCLEtBQUsrcUQsc0JBQXNCOXlELElBQUlPLEVBQUVtUixpQkFBaUIsU0FBUzFSLEVBQUU0QixHQUFHLE9BQU8yRSxLQUFLd0IsS0FBS2dyRCx5QkFBeUIveUQsRUFBRTRCLElBQUlyQixFQUFFa3NELGNBQWMsU0FBU3pzRCxHQUFHLEdBQUcsU0FBU3VHLEtBQUt3QixLQUFLNHhDLFVBQVUsT0FBT3B6QyxLQUFLd0IsS0FBS2lyRCxzQkFBc0JoekQsSUFBSUosRUFBRUosT0FBTzYzQyxpQkFBaUI2YSxHQUFHeHhELFVBQVUsQ0FBQzBYLGNBQWMsQ0FBQzBNLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxHQUFHK21DLEdBQUduZ0MsS0FBS3dCLE9BQU94QixLQUFLd0IsS0FBS1IsV0FBVyt4QyxLQUFLQyxjQUFjLE9BQU9oekMsS0FBS3dCLEtBQUtrckQsd0JBQXdCQyxlQUFlLENBQUNwdUMsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLNlIsZ0JBQWdCMHRCLEtBQUssQ0FBQ2hoQixjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsR0FBRyttQyxHQUFHbmdDLEtBQUt3QixNQUFNLE9BQU94QixLQUFLd0IsS0FBSys5QixPQUFPcGdDLFdBQVcsQ0FBQ29mLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUs2MkMscUJBQXFCdjVDLFdBQVcsQ0FBQ3lmLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUtvM0MscUJBQXFCNW5DLFVBQVUsQ0FBQ3VOLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUtpNkMsb0JBQW9CdHZDLFlBQVksQ0FBQ29TLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUtxM0Msc0JBQXNCbU0sZ0JBQWdCLENBQUN6bUMsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBSzQ2QywwQkFBMEJoK0MsV0FBVyxDQUFDbWdCLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUtnNkMscUJBQXFCckwsY0FBYyxDQUFDNXhCLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUsyNkMsd0JBQXdCbmIsa0JBQWtCLENBQUN6aUIsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBS282Qyw0QkFBNEJnUixpQkFBaUIsQ0FBQ3J1QyxjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBTzRHLEtBQUt3QixLQUFLcTZDLDJCQUEyQmdSLG1CQUFtQixDQUFDdHVDLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxPQUFPNEcsS0FBS3dCLEtBQUs2NkMsNkJBQTZCeVEsdUJBQXVCLENBQUN2dUMsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBSzg2QyxpQ0FBaUNwbEMsU0FBUyxDQUFDcUgsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBS202QyxtQkFBbUJvUixrQkFBa0IsQ0FBQ3h1QyxjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBTzRHLEtBQUt3QixLQUFLazZDLDRCQUE0Qi9OLFdBQVcsQ0FBQ3B2QixjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBTzRHLEtBQUt3QixLQUFLczZDLHFCQUFxQjRLLGFBQWEsQ0FBQ25vQyxjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBTzRHLEtBQUt3QixLQUFLZy9DLHVCQUF1QmlMLFlBQVksQ0FBQ2x0QyxjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBTzRHLEtBQUt3QixLQUFLd3JELHNCQUFzQmwvQyxVQUFVLENBQUN5USxjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBTzRHLEtBQUt3QixLQUFLeTZDLG1CQUFtQno5QixJQUFJLFNBQVMva0IsR0FBR3VHLEtBQUt3QixLQUFLeTZDLGtCQUFrQnhpRCxJQUFJOFYsWUFBWSxDQUFDZ1AsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBS3c2QyxxQkFBcUJ4OUIsSUFBSSxTQUFTL2tCLEdBQUd1RyxLQUFLd0IsS0FBS3c2QyxvQkFBb0J2aUQsSUFBSXd6RCxLQUFLLENBQUMxdUMsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBS29wRCxjQUFjcHNDLElBQUksU0FBUy9rQixHQUFHdUcsS0FBS3dCLEtBQUtvcEQsYUFBYW54RCxJQUFJMlQsVUFBVSxDQUFDbVIsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU80RyxLQUFLd0IsS0FBSys2QyxtQkFBbUIvOUIsSUFBSSxTQUFTL2tCLEdBQUcsT0FBT3VHLEtBQUt3QixLQUFLKzZDLGtCQUFrQjlpRCxNQUFNdXBELEdBQUc1bEQsU0FBUyxTQUFTM0QsR0FBRyxPQUFPbXlELEdBQUdueUQsTUFBTXdwRCxHQUFHN2xELFNBQVMsU0FBUzNELEdBQUcsT0FBT215RCxHQUFHbnlELE1BQU0sSUFBSXl6RCxHQUFHLElBQUlDLFFBQVEsU0FBU0MsR0FBRzN6RCxHQUFHLEdBQUcwbUMsR0FBRzFtQyxJQUFJQSxhQUFha3lELEdBQUcsT0FBT2x5RCxFQUFFLElBQUk0QixFQUFFNnhELEdBQUc5ekQsSUFBSUssR0FBRyxPQUFPNEIsSUFBSUEsRUFBRSxJQUFJc3dELEdBQUdseUQsR0FBR3l6RCxHQUFHMXVDLElBQUkva0IsRUFBRTRCLElBQUlBLEVBQUUsR0FBRzQ3QyxHQUFHTyxHQUFHLENBQUMsSUFBSTZWLEdBQUdwVyxHQUFHeEMsRUFBRSxTQUFTaDdDLEdBQUcsT0FBT0EsR0FBRyxTQUFTQSxHQUFHLE9BQU9takQsR0FBR25qRCxHQUFHaWpELEdBQUdqakQsR0FBR0EsR0FBRzZ6RCxHQUFHLENBQUNDLE1BQU10VyxHQUFHTyxHQUFHZ1csTUFBTUgsR0FBR0ksWUFBWXR0QixHQUFHdXRCLFFBQVFyVSxHQUFHTSxNQUFNTCxHQUFHcVUsYUFBYSxTQUFTbDBELElBQUlBLEVBQUV3eEQsSUFBSXh4RCxFQUFFMDRDLEdBQUdzVSxHQUFHaHRELElBQUlpa0MsU0FBU3VaLEdBQUcyVyxnQkFBZ0IsU0FBU24wRCxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRXFCLEVBQUUra0IsY0FBYyxPQUFPM21CLEVBQUV1SixLQUFLLFNBQVN2SixHQUFHLElBQUk0QixFQUFFckIsSUFBSVAsRUFBRXNCLE9BQU9xbEIsY0FBYyxHQUFHL2tCLEdBQUc1QixFQUFFKy9DLFlBQVksSUFBSW4rQyxFQUFFLEdBQUdnRixNQUFNM0gsS0FBS2UsRUFBRSsvQyxZQUFZNTdDLFFBQVEsU0FBU25FLEdBQUcsT0FBT08sSUFBSVAsRUFBRTJtQixrQkFBa0Ixa0IsT0FBTyxPQUFPakMsRUFBRVIsT0FBT1ksT0FBT0osR0FBR1IsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE1BQU02QixFQUFFa2pCLGNBQWEsSUFBSzlrQixPQUFPLEdBQUc0QixFQUFFLE9BQU81QixLQUFLbUUsUUFBUSxTQUFTbkUsR0FBRyxPQUFPQSxNQUFNbzBELGdCQUFnQixTQUFTcDBELEVBQUU0QixHQUFHLElBQUlyQixFQUFFNDhDLEdBQUduOUMsR0FBR08sRUFBRXk3QyxJQUFJejdDLEVBQUV5N0MsRUFBRSxJQUFJOEQsSUFBSXYvQyxFQUFFeTdDLEVBQUVpRSxHQUFHaGlDLElBQUlyYyxHQUFHLElBQUlyQyxFQUFFZ0IsRUFBRXk3QyxFQUFFLE1BQU0sQ0FBQ3FZLEdBQUd6eUQsRUFBRTIyQyxFQUFFaDVDLEVBQUUrMEQsR0FBR3QwRCxFQUFFbWdELFlBQVksV0FBVyxPQUFPNWdELEVBQUU0Z0QsaUJBQWlCb1Usa0JBQWtCLFNBQVN2MEQsR0FBRyxJQUFJNEIsRUFBRTVCLEdBQUdBLEVBQUV1NEMsRUFBRTMyQyxJQUFJQSxFQUFFcStDLEdBQUd1VSxPQUFPeDBELEVBQUVxMEQsSUFBSXp5RCxFQUFFcStDLEdBQUd3VSxPQUFPdFgsR0FBR245QyxFQUFFczBELElBQUl0WSxFQUFFLFFBQVE4VSx5QkFBeUJ0VCxHQUFHc1QseUJBQXlCN1Msa0JBQWtCVCxHQUFHUyxrQkFBa0J5Vyx1QkFBc0IsRUFBRzdxQyxLQUFLMnpCLEdBQUd4RSxFQUFFMmEsR0FBR0MsR0FBR2UsY0FBYSxJQUFLblgsR0FBR3hFLEVBQUUyYSxHQUFHLFNBQVMzekQsR0FBRyxPQUFPQSxHQUFHNDBELFFBQVExQyxHQUFHdkssYUFBYSxTQUFTM25ELEdBQUcsT0FBT0EsRUFBRWdwRCxpQkFBaUJocEQsRUFBRWdwRCxlQUFlbEMsR0FBRzltRCxFQUFFc0IsUUFBTyxJQUFLdEIsRUFBRWdwRCxnQkFBZ0JsTSxRQUFRVSxHQUFHeEUsRUFBRTZiLGNBQWNyWCxHQUFHeE8sR0FBRzhsQixjQUFjbFUsR0FBR21VLFdBQVdoVSxHQUFHaVUsa0JBQWtCMUUsSUFBSXJ2RCxPQUFPMDdDLFNBQVNrWCxHQUFHLFdBQVcsSUFBSTd6RCxFQUFFLENBQUMsZ0JBQWdCLG1CQUFtQix1QkFBdUJpQixPQUFPNHVELFlBQVkzTyxHQUFHamdELE9BQU80dUQsWUFBWW52RCxVQUFVVixJQUFJa2hELEdBQUc1SCxLQUFLNTRDLFVBQVVWLEdBQUdraEQsR0FBR3VILE9BQU8vbkQsVUFBVVYsSUFBSTJnRCxHQUFHTyxHQUFHNUgsS0FBSzU0QyxVQUFVLG1HQUFtRzBMLE1BQU0sTUFBTTYwQyxHQUFHM0gsS0FBSzU0QyxVQUFVLENBQUNnRixXQUFXLENBQUMvRixJQUFJLFdBQVcsT0FBT3doRCxHQUFHOFQsWUFBWTF1RCxLQUFLNDZDLEdBQUd6N0MsZUFBZUwsV0FBVyxDQUFDMUYsSUFBSSxXQUFXLE9BQU93aEQsR0FBRzhULFlBQVkxdUQsS0FBSzQ2QyxHQUFHOTdDLGVBQWVrUyxVQUFVLENBQUM1WCxJQUFJLFdBQVcsT0FBT3doRCxHQUFHOFQsWUFBWTF1RCxLQUFLNDZDLEdBQUc1cEMsY0FBY2cwQyxnQkFBZ0IsQ0FBQzVyRCxJQUFJLFdBQVcsT0FBT3doRCxHQUFHOFQsWUFBWTF1RCxLQUFLNDZDLEdBQUdvSyxvQkFBb0I3NEMsWUFBWSxDQUFDL1MsSUFBSSxXQUFXLE9BQU93aEQsR0FBRzhULFlBQVkxdUQsS0FBSzQ2QyxHQUFHenVDLGdCQUFnQi9OLFdBQVcsQ0FBQ2hGLElBQUksV0FBVyxJQUFJSyxFQUFFLEdBQUdtaEQsR0FBRzhULFlBQVkxdUQsS0FBSyxJQUFJLElBQUkzRSxFQUFFdS9DLEdBQUc5N0MsYUFBYXpELEdBQUc1QixFQUFFbUQsS0FBS3ZCLEdBQUdBLEVBQUV1L0MsR0FBR3p1QyxjQUFjLE9BQU8xUyxJQUFJMDJDLGNBQWMsQ0FBQy8yQyxJQUFJLFdBQVcsT0FBTzRoRCxHQUFHMFQsWUFBWTF1RCxLQUFLZzdDLEdBQUc3N0MsZUFBZW9RLFlBQVksQ0FBQ25XLElBQUksV0FBVyxPQUFPNEcsS0FBS2dCLFVBQVUsS0FBSyt4QyxLQUFLVyxhQUFhLEtBQUtYLEtBQUtFLHVCQUF1QixJQUFJLElBQUl4NUMsRUFBRTRCLEVBQUVWLFNBQVNrZ0QsaUJBQWlCNzZDLEtBQUs4NkMsV0FBVzZULFVBQVUsTUFBSyxHQUFJMzBELEVBQUUsR0FBR1AsRUFBRTRCLEVBQUV1ekQsWUFBWTUwRCxHQUFHUCxFQUFFK1YsVUFBVSxPQUFPeFYsRUFBRSxRQUFRLE9BQU9nRyxLQUFLd1AsWUFBWWdQLElBQUksU0FBUy9rQixHQUFHLE9BQU8sTUFBTUEsSUFBSUEsRUFBRSxJQUFJdUcsS0FBS2dCLFVBQVUsS0FBSyt4QyxLQUFLVyxhQUFhLEtBQUtYLEtBQUtFLHVCQUF1QmtJLEdBQUduN0MsT0FBTyxFQUFFdkcsRUFBRWlDLFFBQVFzRSxLQUFLZ0IsV0FBVyt4QyxLQUFLVyxlQUFlMXpDLEtBQUtzbEQsNEJBQTRCM3FELFNBQVN3RCxlQUFlMUUsUUFBRyxHQUFRLE1BQU0sUUFBUXVHLEtBQUt3UCxVQUFVL1YsT0FBT2toRCxHQUFHNUgsS0FBSzU0QyxVQUFVLHVFQUF1RTBMLE1BQU0sTUFBTTgwQyxHQUFHM00sWUFBWTd6QyxVQUFVLENBQUMsZ0JBQWdCLGFBQWFWLEVBQUUsQ0FBQ3VuQyxrQkFBa0IsQ0FBQzVuQyxJQUFJLFdBQVcsT0FBTzRoRCxHQUFHMFQsWUFBWTF1RCxLQUFLZzdDLEdBQUdsOEMsZUFBZTh0RCxpQkFBaUIsQ0FBQ3h6RCxJQUFJLFdBQVcsT0FBTzRoRCxHQUFHMFQsWUFBWTF1RCxLQUFLZzdDLEdBQUdocUMsY0FBY2tHLFNBQVMsQ0FBQzlkLElBQUksV0FBVyxJQUFJSyxFQUFFLEdBQUd1aEQsR0FBRzBULFlBQVkxdUQsS0FBSyxJQUFJLElBQUkzRSxFQUFFMi9DLEdBQUdsOEMsYUFBYXpELEdBQUc1QixFQUFFbUQsS0FBS3ZCLEdBQUdBLEVBQUUyL0MsR0FBRzd1QyxjQUFjLE9BQU9tc0MsR0FBRzcrQyxLQUFLc3pELGtCQUFrQixDQUFDM3pELElBQUksV0FBVyxPQUFPNEcsS0FBS2tYLFNBQVNsWCxLQUFLa1gsU0FBU3hiLE9BQU8sS0FBSzArQyxJQUFJTyxHQUFHbkgsUUFBUXI1QyxVQUFVa2hELElBQUlWLEdBQUduSCxRQUFRcjVDLFVBQVUsQ0FBQyx5QkFBeUIscUJBQXFCLFlBQVksY0FBY3dnRCxHQUFHM00sWUFBWTd6QyxVQUFVLENBQUMsV0FBVyxZQUFZLGdCQUFnQnVnRCxHQUFHbEgsUUFBUXI1QyxVQUFVVixHQUFHaWhELEdBQUdsSCxRQUFRcjVDLFVBQVUsQ0FBQzJ5RCx1QkFBdUIsQ0FBQzF6RCxJQUFJLFdBQVcsT0FBTzRoRCxHQUFHMFQsWUFBWTF1RCxLQUFLZzdDLEdBQUdnSyxvQkFBb0I2SCxtQkFBbUIsQ0FBQ3p6RCxJQUFJLFdBQVcsT0FBTzRoRCxHQUFHMFQsWUFBWTF1RCxLQUFLZzdDLEdBQUc3dUMsZ0JBQWdCMkIsVUFBVSxDQUFDMVUsSUFBSSxXQUFXLE9BQU8rZ0QsR0FBR242QyxLQUFLdzRDLEtBQUtoNkIsSUFBSSxTQUFTL2tCLEdBQUcsSUFBSTRCLEVBQUUsYUFBYTJFLEtBQUtvekMsVUFBVXB6QyxLQUFLaVksUUFBUWpZLEtBQUttN0MsR0FBRzkvQyxHQUFHLElBQUlyQixFQUFFZ0csS0FBS296QyxXQUFXLE1BQU0sS0FBS3A1QyxFQUFFZ0csS0FBSzRNLGNBQWM1TSxLQUFLNE0sZUFBZXN1QyxHQUFHdHVDLGFBQWFzdUMsR0FBR3FOLGdCQUFnQnZvRCxLQUFLNE0sYUFBYTVTLEdBQUdraEQsR0FBR2wrQyxjQUFjaEQsSUFBSThULFVBQVVyVSxFQUFFQSxFQUFFLGFBQWF1RyxLQUFLb3pDLFVBQVVwNUMsRUFBRWllLFFBQVFqZSxFQUFFQSxFQUFFUCxFQUFFZy9DLDJCQUEyQnA5QyxFQUFFaXFELDRCQUE0QnRyRCxPQUFFLEtBQVVvVCxVQUFVLENBQUNoVSxJQUFJLFdBQVcsT0FBTzRHLEtBQUs2QixhQUFhLFVBQVUsSUFBSTJjLElBQUksU0FBUy9rQixHQUFHdUcsS0FBSzNDLGFBQWEsUUFBUTVELFFBQVFraEQsR0FBR25ILFFBQVFyNUMsVUFBVSxvRUFBb0UwTCxNQUFNLE1BQU04MEMsR0FBR25ILFFBQVFyNUMsVUFBVW1oRCxJQUFJWCxHQUFHM00sWUFBWTd6QyxVQUFVLENBQUMsUUFBUSxTQUFTTyxPQUFPdzRDLHFCQUFxQnlILEdBQUdqZ0QsT0FBT3c0QyxvQkFBb0IvNEMsVUFBVSxDQUFDLGNBQWNpZ0QsR0FBR08sR0FBR3hILGlCQUFpQmg1QyxVQUFVa2hELElBQUlYLEdBQUd2SCxpQkFBaUJoNUMsVUFBVVYsR0FBR2toRCxHQUFHeEgsaUJBQWlCaDVDLFVBQVVtaEQsSUFBSWxCLElBQUlPLEdBQUd0SCxTQUFTbDVDLFVBQVVraEQsSUFBSVYsR0FBR3RILFNBQVNsNUMsVUFBVSxDQUFDLG1CQUFtQnVnRCxHQUFHckgsU0FBU2w1QyxVQUFVVixHQUFHa2hELEdBQUd0SCxTQUFTbDVDLFVBQVUsQ0FBQyxhQUFhLG1CQUFtQndnRCxHQUFHdEgsU0FBU2w1QyxVQUFVbWhELElBQW4wRyxHQUEwMEd3TyxHQUFHLFlBQVk3d0QsT0FBT0MsZUFBZXlCLFNBQVMsaUJBQWlCbXVELEdBQUdqM0MsZUFBZWtuQyxHQUFHbUosT0FBTy9uRCxVQUFVaXZELEdBQUcsWUFBWW5TLEdBQUd4RSxFQUFFd0UsR0FBR3hPLElBQUlzUSxHQUFHdkYsUUFBUXI1QyxVQUFVMHRELEtBQUtpQyxLQUFLLFdBQVcsSUFBSS9NLElBQUk5akQsT0FBT3M2Qyx5QkFBeUJydUIsTUFBTS9xQixVQUFVLGFBQWEsQ0FBQyxJQUFJVixFQUFFLFdBQVcsSUFBSUEsRUFBRSxJQUFJazVDLFdBQVcsUUFBUSxDQUFDeHFCLFNBQVEsRUFBR0MsWUFBVyxFQUFHakksVUFBUyxJQUFLbmdCLEtBQUsrckQsc0JBQXNCdHlELElBQUkrNUMsUUFBUXI1QyxVQUFVcXRCLE1BQU1nc0IsUUFBUXI1QyxVQUFVcXRCLE1BQU0vdEIsRUFBRXUwQyxZQUFZN3pDLFVBQVVxdEIsUUFBUXdtQixZQUFZN3pDLFVBQVVxdEIsTUFBTS90QixJQUFsVCxJQUEwVCxXQUFXLElBQUksSUFBSUEsS0FBS21uRCxHQUFHbG1ELE9BQU9xbkQsZ0NBQWdDdG9ELEdBQUcsU0FBU0EsR0FBR0EsRUFBRXFuRCxXQUFXYSxHQUFHbG9ELEdBQUcwbkQsR0FBRzFuRCxPQUFNLEdBQTdHLEdBQW9IaUIsT0FBT3dxQixNQUFNMjlCLEdBQUdub0QsT0FBTzIxQyxZQUFZeVMsR0FBR3BvRCxPQUFPaTRDLFdBQVdvUSxHQUFHcm9ELE9BQU8yOEMsV0FBVzRRLEdBQUcsSUFBSTRHLEdBQUduMEQsT0FBTzI0QyxTQUFTbDVDLFVBQVU2QyxjQUFjOHhELEdBQUdwMEQsT0FBTzI0QyxTQUFTbDVDLFVBQVVvdUQsZ0JBQWdCanlCLEdBQUc1N0IsT0FBTzI0QyxTQUFTbDVDLFVBQVVtNUMsV0FBV3liLEdBQUdyMEQsT0FBTzI0QyxTQUFTbDVDLFVBQVU2eEIsUUFBUWdqQyxHQUFHdDBELE9BQU8yNEMsU0FBU2w1QyxVQUFVNHhCLE9BQU9rakMsR0FBR3YwRCxPQUFPeTRDLGlCQUFpQmg1QyxVQUFVNnhCLFFBQVFrakMsR0FBR3gwRCxPQUFPeTRDLGlCQUFpQmg1QyxVQUFVNHhCLE9BQU9vakMsR0FBR3owRCxPQUFPcTRDLEtBQUs1NEMsVUFBVTZuQixVQUFVb3RDLEdBQUcxMEQsT0FBT3E0QyxLQUFLNTRDLFVBQVVxRCxZQUFZNnhELEdBQUczMEQsT0FBT3E0QyxLQUFLNTRDLFVBQVVtRSxhQUFhZ3hELEdBQUc1MEQsT0FBT3E0QyxLQUFLNTRDLFVBQVVrRSxZQUFZa3hELEdBQUc3MEQsT0FBT3E0QyxLQUFLNTRDLFVBQVVpeUIsYUFBYW9qQyxHQUFHdjJELE9BQU9zNkMseUJBQXlCNzRDLE9BQU9xNEMsS0FBSzU0QyxVQUFVLGVBQWVzMUQsR0FBRy8wRCxPQUFPODRDLFFBQVFyNUMsVUFBVXV6QyxhQUFhZ2lCLEdBQUd6MkQsT0FBT3M2Qyx5QkFBeUI3NEMsT0FBTzg0QyxRQUFRcjVDLFVBQVUsYUFBYXcxRCxHQUFHajFELE9BQU84NEMsUUFBUXI1QyxVQUFVMEgsYUFBYSt0RCxHQUFHbDFELE9BQU84NEMsUUFBUXI1QyxVQUFVa0QsYUFBYXd5RCxHQUFHbjFELE9BQU84NEMsUUFBUXI1QyxVQUFVcUUsZ0JBQWdCc3hELEdBQUdwMUQsT0FBTzg0QyxRQUFRcjVDLFVBQVU0MUQsZUFBZUMsR0FBR3QxRCxPQUFPODRDLFFBQVFyNUMsVUFBVTgxRCxlQUFlQyxHQUFHeDFELE9BQU84NEMsUUFBUXI1QyxVQUFVZzJELGtCQUFrQkMsR0FBRzExRCxPQUFPODRDLFFBQVFyNUMsVUFBVWsyRCxzQkFBc0JDLEdBQUc1MUQsT0FBTzg0QyxRQUFRcjVDLFVBQVVvMkQsbUJBQW1CQyxHQUFHOTFELE9BQU84NEMsUUFBUXI1QyxVQUFVNnhCLFFBQVF5a0MsR0FBRy8xRCxPQUFPODRDLFFBQVFyNUMsVUFBVTR4QixPQUFPMmtDLEdBQUdoMkQsT0FBTzg0QyxRQUFRcjVDLFVBQVU4eEIsT0FBTzBrQyxHQUFHajJELE9BQU84NEMsUUFBUXI1QyxVQUFVK3hCLE1BQU0wa0MsR0FBR2wyRCxPQUFPODRDLFFBQVFyNUMsVUFBVWd5QixZQUFZMGtDLEdBQUduMkQsT0FBTzg0QyxRQUFRcjVDLFVBQVU0RCxPQUFPK3lELEdBQUdwMkQsT0FBT3N6QyxZQUFZK2lCLEdBQUc5M0QsT0FBT3M2Qyx5QkFBeUI3NEMsT0FBT3N6QyxZQUFZN3pDLFVBQVUsYUFBYTYyRCxHQUFHdDJELE9BQU9zekMsWUFBWTd6QyxVQUFVazJELHNCQUFzQlksR0FBR3YyRCxPQUFPc3pDLFlBQVk3ekMsVUFBVW8yRCxtQkFBbUJXLEdBQUcsSUFBSTNiLElBQUksU0FBUzRiLEdBQUcxM0QsR0FBRyxJQUFJNEIsRUFBRTYxRCxHQUFHNTVDLElBQUk3ZCxHQUFHLE9BQU9BLEVBQUUsa0NBQWtDc1IsS0FBS3RSLElBQUk0QixHQUFHNUIsRUFBRSxtSEFBbUhvTSxNQUFNLEtBQUt6SSxTQUFTLFNBQVMzRCxHQUFHLE9BQU95M0QsR0FBR3g1QyxJQUFJamUsTUFBTSxJQUFJMjNELEdBQUd6MkQsU0FBU21NLFNBQVNuTSxTQUFTbU0sU0FBUy9NLEtBQUtZLFVBQVVBLFNBQVNrUyxnQkFBZ0IvRixTQUFTL00sS0FBS1ksU0FBU2tTLGlCQUFpQixTQUFTd2tELEdBQUc1M0QsR0FBRyxJQUFJNEIsRUFBRTVCLEVBQUVneUQsWUFBWSxRQUFHLElBQVNwd0QsRUFBRSxPQUFPQSxFQUFFLEdBQUcrMUQsR0FBRzMzRCxHQUFHLE9BQU0sRUFBRyxLQUFLQSxLQUFLQSxFQUFFNjNELHVCQUF1QjczRCxhQUFhNDVDLFdBQVc1NUMsRUFBRUEsRUFBRTBGLGFBQWF6RSxPQUFPMjhDLFlBQVk1OUMsYUFBYTQ5QyxXQUFXNTlDLEVBQUU4bEMsVUFBSyxHQUFRLFNBQVM5bEMsS0FBS0EsRUFBRTYzRCx1QkFBdUI3M0QsYUFBYTQ1QyxXQUFXLFNBQVNrZSxHQUFHOTNELEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFeWQsU0FBUyxHQUFHN2IsRUFBRSxPQUFPK0ksTUFBTWpLLFVBQVVrRyxNQUFNM0gsS0FBSzJDLEdBQUcsSUFBSUEsRUFBRSxHQUFHNUIsRUFBRUEsRUFBRXFGLFdBQVdyRixFQUFFQSxFQUFFQSxFQUFFMFMsWUFBWTFTLEVBQUV1SCxXQUFXK3hDLEtBQUtXLGNBQWNyNEMsRUFBRXVCLEtBQUtuRCxHQUFHLE9BQU80QixFQUFFLFNBQVNtMkQsR0FBRy8zRCxFQUFFNEIsR0FBRyxLQUFLQSxHQUFHQSxJQUFJNUIsSUFBSTRCLEVBQUU4USxhQUFhOVEsRUFBRUEsRUFBRThELFdBQVcsT0FBTzlELEdBQUdBLElBQUk1QixFQUFFNEIsRUFBRThRLFlBQVksS0FBSyxTQUFTc2xELEtBQUssSUFBSWg0RCxJQUFJLE1BQU1pNEQsS0FBS0EsR0FBR0MsZ0NBQWdDdDJELElBQUksTUFBTXEyRCxLQUFLQSxHQUFHRSxrQkFBa0I1eEQsS0FBSzQxQyxFQUFFLEdBQUc1MUMsS0FBS3lILEVBQUUsR0FBR3pILEtBQUtxMEMsR0FBRSxFQUFHcjBDLEtBQUs0eEQsaUJBQWlCdjJELEVBQUUyRSxLQUFLNnhELElBQUlwNEQsRUFBRSxTQUFTcTRELEdBQUdyNEQsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBRyxJQUFJVCxFQUFFbUMsT0FBT3EzRCxTQUFTLEdBQUd0NEQsRUFBRW00RCxrQkFBa0JyNUQsR0FBR0EsRUFBRWcxRCxPQUFPLEdBQUdseUQsRUFBRTJGLFdBQVcreEMsS0FBS1csY0FBYzE1QyxFQUFFcUIsR0FBR0EsRUFBRThQLGlCQUFpQixJQUFJMVIsRUFBRWxCLEVBQUVnMkQsY0FBY3BqRCxpQkFBaUJ6UyxLQUFLMkMsRUFBRSxLQUFLQSxFQUFFLEVBQUVBLEVBQUU1QixFQUFFaUMsT0FBT0wsSUFBSXJCLEVBQUVQLEVBQUU0QixTQUFTLFNBQVM1QixFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHLElBQUksSUFBSVQsRUFBRThDLEVBQUU5QyxHQUFHLENBQUMsR0FBR0EsRUFBRXlJLFdBQVcreEMsS0FBS1csYUFBYSxDQUFDLElBQUlyNkMsRUFBRWQsRUFBRXlCLEVBQUVYLEdBQUcsSUFBSW9PLEVBQUVwTyxFQUFFKzVDLFVBQVUsR0FBRyxTQUFTM3JDLEdBQUcsV0FBV3BPLEVBQUV3SSxhQUFhLE9BQU8sQ0FBQyxHQUFHdEosRUFBRWMsRUFBRTI0RCxZQUFPLElBQVNoNUQsSUFBSUEsRUFBRSxJQUFJdThDLEtBQUtoOUMsYUFBYXc2QyxPQUFPLzVDLEVBQUVzZSxJQUFJL2UsR0FBRyxJQUFJUyxFQUFFMGUsSUFBSW5mLEdBQUdBLEVBQUVBLEVBQUV1RyxXQUFXdkcsRUFBRUEsRUFBRUEsRUFBRTRULFlBQVkxUyxFQUFFbEIsRUFBRXlCLEVBQUVoQixHQUFHVCxFQUFFaTVELEdBQUduMkQsRUFBRWhDLEdBQUcsU0FBUyxHQUFHLGFBQWFvTyxFQUFFLENBQUNsUCxFQUFFaTVELEdBQUduMkQsRUFBRWhDLEdBQUcsU0FBUyxHQUFHQSxFQUFFQSxFQUFFOHVELGdCQUFnQixJQUFJOXVELEVBQUVBLEVBQUV5RixXQUFXekYsRUFBRUEsRUFBRUEsRUFBRThTLFlBQVkxUyxFQUFFSixFQUFFVyxFQUFFaEIsR0FBR1QsRUFBRUEsRUFBRXVHLFdBQVd2RyxFQUFFdUcsV0FBVzB5RCxHQUFHbjJELEVBQUU5QyxJQUE5YSxDQUFtYjhDLEVBQUVyQixFQUFFaEIsR0FBRyxTQUFTaTVELEdBQUd4NEQsRUFBRTRCLEdBQUc1QixFQUFFNDZDLEdBQUd5ZCxHQUFHcjRELEVBQUU0QixHQUFHLFNBQVNBLEdBQUcsT0FBTzYyRCxHQUFHejRELEVBQUU0QixNQUFNLFNBQVM2MkQsR0FBR3o0RCxFQUFFNEIsR0FBRyxHQUFHNUIsRUFBRTQ2QyxJQUFJaDVDLEVBQUU4MkQsYUFBYSxDQUFDOTJELEVBQUU4MkQsY0FBYSxFQUFHLElBQUksSUFBSW40RCxFQUFFLEVBQUVBLEVBQUVQLEVBQUVtOEMsRUFBRWw2QyxPQUFPMUIsSUFBSVAsRUFBRW04QyxFQUFFNTdDLEdBQUdxQixHQUFHLElBQUlyQixFQUFFLEVBQUVBLEVBQUVQLEVBQUVnTyxFQUFFL0wsT0FBTzFCLElBQUlQLEVBQUVnTyxFQUFFek4sR0FBR3FCLElBQUksU0FBUysyRCxHQUFHMzRELEVBQUU0QixHQUFHLElBQUlyQixFQUFFLEdBQUcsSUFBSTgzRCxHQUFHcjRELEVBQUU0QixHQUFHLFNBQVM1QixHQUFHLE9BQU9PLEVBQUU0QyxLQUFLbkQsTUFBTTRCLEVBQUUsRUFBRUEsRUFBRXJCLEVBQUUwQixPQUFPTCxJQUFJLENBQUMsSUFBSXJDLEVBQUVnQixFQUFFcUIsR0FBRyxJQUFJckMsRUFBRXE1RCxXQUFXNTRELEVBQUVtMEMsa0JBQWtCNTBDLEdBQUdzNUQsR0FBRzc0RCxFQUFFVCxJQUFJLFNBQVN1NUQsR0FBRzk0RCxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRSxHQUFHLElBQUk4M0QsR0FBR3I0RCxFQUFFNEIsR0FBRyxTQUFTNUIsR0FBRyxPQUFPTyxFQUFFNEMsS0FBS25ELE1BQU00QixFQUFFLEVBQUVBLEVBQUVyQixFQUFFMEIsT0FBT0wsSUFBSSxDQUFDLElBQUlyQyxFQUFFZ0IsRUFBRXFCLEdBQUcsSUFBSXJDLEVBQUVxNUQsWUFBWTU0RCxFQUFFK3hELHFCQUFxQnh5RCxJQUFJLFNBQVN3NUQsR0FBRy80RCxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEdBQUdnQixPQUFFLElBQVNBLEVBQUUsR0FBR0EsR0FBR3k0RCxHQUFHbDZELEVBQUV5QixFQUFFMDRELFNBQVMsU0FBU3IzRCxHQUFHLE9BQU9pM0QsR0FBRzc0RCxFQUFFNEIsSUFBSWhDLEVBQUUsR0FBRyxJQUFJeTRELEdBQUdyNEQsRUFBRTRCLEdBQUcsU0FBU0EsR0FBRyxHQUFHNUIsRUFBRTQ2QyxHQUFHNmQsR0FBR3o0RCxFQUFFNEIsR0FBRyxTQUFTQSxFQUFFKzNDLFdBQVcsV0FBVy8zQyxFQUFFd0csYUFBYSxPQUFPLENBQUMsSUFBSTdILEVBQUVxQixFQUFFMjJELE9BQU9oNEQsYUFBYSs0QyxPQUFPLzRDLEVBQUVzM0QsdUJBQXNCLEVBQUd0M0QsRUFBRTI0RCxjQUFjaDRELFNBQVNnNEQsZUFBZTM0RCxHQUFHLGFBQWFBLEVBQUVtakIsV0FBV25qQixFQUFFNDRELDBCQUF5QixFQUFHdjNELEVBQUU2UixpQkFBaUIsUUFBUSxXQUFXLElBQUlsVCxFQUFFcUIsRUFBRTIyRCxPQUFPLElBQUloNEQsRUFBRTQ0RCx5QkFBeUIsQ0FBQzU0RCxFQUFFNDRELDBCQUF5QixFQUFHLElBQUl2NUQsRUFBRSxJQUFJazhDLElBQUl2OEMsSUFBSUEsRUFBRW9FLFNBQVMsU0FBUzNELEdBQUcsT0FBT0osRUFBRXFlLElBQUlqZSxNQUFNSixFQUFFNDBELE9BQU9qMEQsSUFBSXc0RCxHQUFHLzRELEVBQUVPLEVBQUUsQ0FBQ3k0RCxHQUFHcDVELEVBQUVxNUQsUUFBUW42RCxhQUFhYyxFQUFFdUQsS0FBS3ZCLEtBQUtyQyxHQUFHcUMsRUFBRSxFQUFFQSxFQUFFaEMsRUFBRXFDLE9BQU9MLElBQUk5QyxFQUFFYyxFQUFFZ0MsSUFBSSxTQUFTaTNELEdBQUc3NEQsRUFBRTRCLEdBQUcsSUFBSSxJQUFJckIsRUFBRXFCLEVBQUVvUCxjQUFjelIsRUFBRWdCLEVBQUUyNEQsY0FBY3A2RCxFQUFFUyxJQUFJZ0IsRUFBRWdULGFBQWFoVCxFQUFFczNELHVCQUF1QnVCLEdBQUc3NUQsRUFBRXFDLEVBQUUrM0MsZ0JBQVcsRUFBTyxHQUFHNzZDLFFBQUcsSUFBUzhDLEVBQUVnM0QsV0FBVyxDQUFDOTVELEVBQUV1NkQsa0JBQWtCbDJELEtBQUt2QixHQUFHLElBQUksSUFBSSxHQUFHLElBQUk5QyxFQUFFdzZELHNCQUFzQjEzRCxFQUFFLE1BQU1rQyxNQUFNLDhFQUFqRCxRQUF1SWhGLEVBQUV1NkQsa0JBQWtCbnJELE9BQU8sTUFBTWxPLEdBQUcsTUFBTTRCLEVBQUVnM0QsV0FBVyxFQUFFNTRELEVBQUUsR0FBRzRCLEVBQUVnM0QsV0FBVyxFQUFFaDNELEVBQUUyM0QsZ0JBQWdCejZELEVBQUVBLEVBQUU2MUMsMEJBQTBCL3lDLEVBQUU0M0QsZ0JBQWdCLENBQUMsSUFBSTU1RCxFQUFFZCxFQUFFMjZELG1CQUFtQixJQUFJMzZELEVBQUUsRUFBRUEsRUFBRWMsRUFBRXFDLE9BQU9uRCxJQUFJLENBQUMsSUFBSWtQLEVBQUVwTyxFQUFFZCxHQUFHK0IsRUFBRWUsRUFBRXdHLGFBQWE0RixHQUFHLE9BQU9uTixHQUFHYixFQUFFMjBDLHlCQUF5Qi95QyxFQUFFb00sRUFBRSxLQUFLbk4sRUFBRSxPQUFPKzJELEdBQUdoMkQsSUFBSTVCLEVBQUVtMEMsa0JBQWtCdnlDLElBQUksTUFBTTVCLEdBQUcwNUQsR0FBRzE1RCxJQUFJLFNBQVMyNUQsR0FBRzM1RCxFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHLElBQUlULEVBQUU4QyxFQUFFczNELGNBQWMsR0FBR3A2RCxJQUFJLE9BQU9TLEdBQUcsaUNBQWlDQSxLQUFLVCxFQUFFczZELEdBQUd0NkQsRUFBRXlCLElBQUksSUFBSSxJQUFJWCxFQUFFLElBQUlkLEVBQUV3NkQsb0JBQW9CLFFBQUcsSUFBUzE1RCxFQUFFZzVELGlCQUFZLElBQVNoNUQsRUFBRTI1RCxnQkFBZ0IsTUFBTXoxRCxNQUFNLHdCQUF3QnZELEVBQUUsK0VBQStFLEdBQUcsaUNBQWlDWCxFQUFFdVQsYUFBYSxNQUFNclAsTUFBTSx3QkFBd0J2RCxFQUFFLHNFQUFzRSxHQUFHWCxFQUFFNDVELGdCQUFnQixNQUFNMTFELE1BQU0sd0JBQXdCdkQsRUFBRSw0REFBNEQsR0FBRyxPQUFPWCxFQUFFeUYsV0FBVyxNQUFNdkIsTUFBTSx3QkFBd0J2RCxFQUFFLDBEQUEwRCxHQUFHLE9BQU9YLEVBQUU4RixXQUFXLE1BQU01QixNQUFNLHdCQUF3QnZELEVBQUUsMkRBQTJELEdBQUdYLEVBQUVvUixnQkFBZ0JwUCxFQUFFLE1BQU1rQyxNQUFNLHdCQUF3QnZELEVBQUUsNkRBQTZELEdBQUdYLEVBQUUrNUMsWUFBWXA1QyxFQUFFLE1BQU11RCxNQUFNLHdCQUF3QnZELEVBQUUseURBQXlELE9BQU9YLEVBQUUsTUFBTWQsR0FBRyxPQUFPNDZELEdBQUc1NkQsR0FBRzhDLEVBQUUsT0FBT3JDLEVBQUU2MUQsR0FBR24yRCxLQUFLMkMsRUFBRXJCLEdBQUc4MEQsR0FBR3AyRCxLQUFLMkMsRUFBRXJDLEVBQUVnQixHQUFHZixPQUFPczBDLGVBQWVseUMsRUFBRWc0RCxtQkFBbUJsNUQsV0FBV2tCLEVBQUVnM0QsV0FBVyxFQUFFaDNELEVBQUUyM0QscUJBQWdCLEVBQU9kLEdBQUd6NEQsRUFBRTRCLEdBQUdBLEVBQUUsT0FBTzYyRCxHQUFHejRELEVBQUU0QixFQUFFLE9BQU9yQyxFQUFFNjFELEdBQUduMkQsS0FBSzJDLEVBQUVyQixHQUFHODBELEdBQUdwMkQsS0FBSzJDLEVBQUVyQyxFQUFFZ0IsSUFBSXFCLEVBQUUsU0FBUzgzRCxHQUFHMTVELEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFa2pCLFFBQVEzaUIsRUFBRVAsRUFBRTY1RCxXQUFXNzVELEVBQUU4NUQsVUFBVSxHQUFHdjZELEVBQUVTLEVBQUUrNUQsTUFBTS81RCxFQUFFZzZELFlBQVksRUFBRWw3RCxFQUFFa0IsRUFBRWk2RCxRQUFRajZELEVBQUVrNkQsY0FBYyxFQUFFdDZELE9BQUUsT0FBTyxJQUFTdTZELFdBQVd6NUQsVUFBVTA1RCxlQUFleDZELEVBQUUsSUFBSXU2RCxXQUFXLFFBQVEsQ0FBQ3hyQyxZQUFXLEVBQUd6TCxRQUFRdGhCLEVBQUV5NEQsU0FBUzk1RCxFQUFFKzVELE9BQU8vNkQsRUFBRWc3RCxNQUFNejdELEVBQUVxTSxNQUFNbkwsTUFBTUosRUFBRXNCLFNBQVN5M0MsWUFBWSxlQUFleWhCLGVBQWUsU0FBUSxHQUFHLEVBQUd4NEQsRUFBRXJCLEVBQUVoQixHQUFHSyxFQUFFMnJCLGVBQWUsV0FBVy9yQixPQUFPQyxlQUFlOEcsS0FBSyxtQkFBbUIsQ0FBQ3VlLGNBQWEsRUFBR25sQixJQUFJLFdBQVcsT0FBTSxZQUFRLElBQVNDLEVBQUV1TCxPQUFPM0wsT0FBT0MsZUFBZUcsRUFBRSxRQUFRLENBQUNrbEIsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0MsSUFBSSxXQUFXLE9BQU9LLEtBQUtpQixPQUFPMDFDLGNBQWMvMkMsR0FBR0EsRUFBRXd1QixrQkFBa0JwTCxRQUFRN1gsTUFBTW5MLEdBQUcsU0FBU3c2RCxLQUFLLElBQUl4NkQsRUFBRXVHLEtBQUtBLEtBQUs2eEMsT0FBRSxFQUFPN3hDLEtBQUtrMEQsR0FBRyxJQUFJdmYsU0FBUyxTQUFTdDVDLEdBQUc1QixFQUFFZ08sRUFBRXBNLEtBQUssU0FBUzg0RCxHQUFHMTZELEdBQUcsSUFBSTRCLEVBQUVWLFNBQVNxRixLQUFLZ3lDLE9BQUUsRUFBT2h5QyxLQUFLd3lDLEVBQUUvNEMsRUFBRXVHLEtBQUt5SCxFQUFFcE0sRUFBRW0zRCxHQUFHeHlELEtBQUt3eUMsRUFBRXh5QyxLQUFLeUgsR0FBRyxZQUFZekgsS0FBS3lILEVBQUUwVixhQUFhbmQsS0FBS2d5QyxFQUFFLElBQUk4QyxpQkFBaUI5MEMsS0FBSzBILEVBQUUzTixLQUFLaUcsT0FBT0EsS0FBS2d5QyxFQUFFK0MsUUFBUS8wQyxLQUFLeUgsRUFBRSxDQUFDMnNELFdBQVUsRUFBR0MsU0FBUSxLQUFNLFNBQVNDLEdBQUc3NkQsR0FBR0EsRUFBRXU0QyxHQUFHdjRDLEVBQUV1NEMsRUFBRXVpQixhQUFhLFNBQVNDLEdBQUcvNkQsR0FBR3VHLEtBQUt5MEQsR0FBRyxJQUFJamYsSUFBSXgxQyxLQUFLMDBELEdBQUcsSUFBSWxmLElBQUl4MUMsS0FBSzIwRCxHQUFHLElBQUluZixJQUFJeDFDLEtBQUs0MEQsSUFBRyxFQUFHNTBELEtBQUs2MEQsR0FBRyxJQUFJcmYsSUFBSXgxQyxLQUFLODBELEdBQUcsU0FBU3I3RCxHQUFHLE9BQU9BLEtBQUt1RyxLQUFLNnpDLEdBQUUsRUFBRzd6QyxLQUFLKzBELEdBQUcsR0FBRy8wRCxLQUFLd3lDLEVBQUUvNEMsRUFBRXVHLEtBQUtnMUQsR0FBR3Y3RCxFQUFFbzRELEdBQUcsSUFBSXNDLEdBQUcxNkQsUUFBRyxFQUFPLFNBQVN3N0QsR0FBR3g3RCxFQUFFNEIsR0FBRyxJQUFJODFELEdBQUc5MUQsR0FBRyxNQUFNLElBQUk2NUQsWUFBWSxxQkFBcUI3NUQsRUFBRSxtQkFBbUIsR0FBR3czRCxHQUFHcDVELEVBQUU0QixHQUFHLE1BQU1rQyxNQUFNLCtCQUErQmxDLEVBQUUsK0JBQStCLEdBQUc1QixFQUFFbTdELEdBQUcsTUFBTXIzRCxNQUFNLDhDQUE4QyxTQUFTNDNELEdBQUcxN0QsRUFBRTRCLEVBQUVyQixHQUFHLElBQUloQixFQUFFUyxFQUFFbTdELElBQUcsRUFBRyxJQUFJLElBQUlyOEQsRUFBRXlCLEVBQUVHLFVBQVUsS0FBSzVCLGFBQWFVLFFBQVEsTUFBTSxJQUFJcWlCLFVBQVUsZ0VBQWdFLElBQUlqaUIsRUFBRSxTQUFTSSxHQUFHLElBQUk0QixFQUFFOUMsRUFBRWtCLEdBQUcsUUFBRyxJQUFTNEIsS0FBS0EsYUFBYSt4QyxVQUFVLE1BQU03dkMsTUFBTSxRQUFROUQsRUFBRSxrQ0FBa0MsT0FBTzRCLEdBQUdvTSxFQUFFcE8sRUFBRSxxQkFBcUJpQixFQUFFakIsRUFBRSx3QkFBd0JiLEVBQUVhLEVBQUUsbUJBQW1CVCxHQUFHSSxFQUFFSyxFQUFFLDhCQUE4QlcsRUFBRWs1RCxvQkFBb0IsR0FBRyxNQUFNejVELEdBQUcsTUFBTUEsRUFBcGEsUUFBOGFBLEVBQUVtN0QsSUFBRyxFQUFHLE9BQU81NkQsRUFBRSxDQUFDbzVDLFVBQVUvM0MsRUFBRTAzRCxvQkFBb0IvNEQsRUFBRTR6QyxrQkFBa0JubUMsRUFBRStqRCxxQkFBcUJseEQsRUFBRTg2RCxnQkFBZ0I1OEQsRUFBRTQxQyx5QkFBeUJwMUMsRUFBRWs2RCxtQkFBbUJ0NkQsRUFBRWs2RCxrQkFBa0IsSUFBSXI1RCxFQUFFaTdELEdBQUdsMkMsSUFBSW5qQixFQUFFckIsR0FBR1AsRUFBRWs3RCxHQUFHbjJDLElBQUl4a0IsRUFBRSs0RCxvQkFBb0IvNEQsR0FBR0EsRUFBRSxTQUFTcTdELEdBQUc1N0QsR0FBRyxJQUFHLElBQUtBLEVBQUVvNkMsRUFBRSxDQUFDcDZDLEVBQUVvNkMsR0FBRSxFQUFHLElBQUksSUFBSXg0QyxFQUFFLEdBQUdyQixFQUFFUCxFQUFFczdELEdBQUcvN0QsRUFBRSxJQUFJdzhDLElBQUlqOUMsRUFBRSxFQUFFQSxFQUFFeUIsRUFBRTBCLE9BQU9uRCxJQUFJUyxFQUFFd2xCLElBQUl4a0IsRUFBRXpCLEdBQUcsSUFBSSxJQUFJaTZELEdBQUcvNEQsRUFBRSs0QyxFQUFFNzNDLFNBQVMsQ0FBQyszRCxRQUFRLFNBQVMxNEQsR0FBRyxRQUFHLElBQVNBLEVBQUVxNEQsV0FBVyxDQUFDLElBQUk5NUQsRUFBRXlCLEVBQUVvNUMsVUFBVS81QyxFQUFFTCxFQUFFSSxJQUFJYixHQUFHYyxFQUFFQSxFQUFFdUQsS0FBSzVDLEdBQUdQLEVBQUVpN0QsR0FBR3A5QyxJQUFJL2UsSUFBSThDLEVBQUV1QixLQUFLNUMsT0FBT3pCLEVBQUUsRUFBRUEsRUFBRThDLEVBQUVLLE9BQU9uRCxJQUFJKzVELEdBQUc3NEQsRUFBRSs0QyxFQUFFbjNDLEVBQUU5QyxJQUFJLElBQUlBLEVBQUUsRUFBRUEsRUFBRXlCLEVBQUUwQixPQUFPbkQsSUFBSSxDQUFDLElBQUksSUFBSWMsRUFBRVcsRUFBRXpCLEdBQUdrUCxFQUFFek8sRUFBRUksSUFBSUMsR0FBR2lCLEVBQUUsRUFBRUEsRUFBRW1OLEVBQUUvTCxPQUFPcEIsSUFBSWc0RCxHQUFHNzRELEVBQUUrNEMsRUFBRS9xQyxFQUFFbk4sS0FBS2pCLEVBQUVJLEVBQUVvN0QsR0FBR3o3RCxJQUFJQyxLQUFLQSxFQUFFb2YsYUFBUSxHQUFRemUsRUFBRTBCLE9BQU8sR0FBRyxTQUFTbTNELEdBQUdwNUQsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVQLEVBQUVpN0QsR0FBR3Q3RCxJQUFJaUMsR0FBRyxHQUFHckIsRUFBRSxPQUFPQSxFQUFFLEdBQUdBLEVBQUVQLEVBQUVnN0QsR0FBR3I3RCxJQUFJaUMsR0FBRyxDQUFDNUIsRUFBRWc3RCxHQUFHeEcsT0FBTzV5RCxHQUFHLElBQUksT0FBTzg1RCxHQUFHMTdELEVBQUU0QixFQUFFckIsS0FBSyxNQUFNUCxHQUFHMDVELEdBQUcxNUQsS0FBSyxTQUFTNjdELEdBQUc3N0QsRUFBRTRCLEVBQUVyQixHQUFHLFNBQVNoQixFQUFFcUMsR0FBRyxPQUFPLFNBQVNyQixHQUFHLElBQUksSUFBSWhCLEVBQUUsR0FBR1QsRUFBRSxFQUFFQSxFQUFFMkssVUFBVXhILFNBQVNuRCxFQUFFUyxFQUFFVCxHQUFHMkssVUFBVTNLLEdBQUdBLEVBQUUsR0FBRyxJQUFJLElBQUljLEVBQUUsR0FBR29PLEVBQUUsRUFBRUEsRUFBRXpPLEVBQUUwQyxPQUFPK0wsSUFBSSxDQUFDLElBQUluTixFQUFFdEIsRUFBRXlPLEdBQUcsR0FBR25OLGFBQWFrNUMsU0FBUzZkLEdBQUcvMkQsSUFBSWpCLEVBQUV1RCxLQUFLdEMsR0FBR0EsYUFBYTY0QyxpQkFBaUIsSUFBSTc0QyxFQUFFQSxFQUFFd0UsV0FBV3hFLEVBQUVBLEVBQUVBLEVBQUU2UixZQUFZNVQsRUFBRXFFLEtBQUt0QyxRQUFRL0IsRUFBRXFFLEtBQUt0QyxHQUFHLElBQUllLEVBQUVtRixNQUFNUixLQUFLaEgsR0FBR0EsRUFBRSxFQUFFQSxFQUFFSyxFQUFFcUMsT0FBTzFDLElBQUl1NUQsR0FBRzk0RCxFQUFFSixFQUFFTCxJQUFJLEdBQUdxNEQsR0FBR3J4RCxNQUFNLElBQUloSCxFQUFFLEVBQUVBLEVBQUVULEVBQUVtRCxPQUFPMUMsS0FBS0ssRUFBRWQsRUFBRVMsY0FBY3c2QyxTQUFTNGUsR0FBRzM0RCxFQUFFSixTQUFJLElBQVNXLEVBQUVneUIsVUFBVTN3QixFQUFFMndCLFFBQVFoekIsRUFBRWdCLEVBQUVneUIsZUFBVSxJQUFTaHlCLEVBQUUreEIsU0FBUzF3QixFQUFFMHdCLE9BQU8veUIsRUFBRWdCLEVBQUUreEIsU0FBd3NIMGxDLEdBQUd0M0QsVUFBVXl6QyxrQkFBa0IsU0FBU24wQyxHQUFHLElBQUk0QixFQUFFNUIsRUFBRXU1RCxnQkFBZ0IsR0FBRzMzRCxFQUFFdXlDLGtCQUFrQixJQUFJdnlDLEVBQUV1eUMsa0JBQWtCbDFDLEtBQUtlLEdBQUcsTUFBTUEsR0FBRzA1RCxHQUFHMTVELEtBQUtnNEQsR0FBR3QzRCxVQUFVcXhELHFCQUFxQixTQUFTL3hELEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFdTVELGdCQUFnQixHQUFHMzNELEVBQUVtd0QscUJBQXFCLElBQUlud0QsRUFBRW13RCxxQkFBcUI5eUQsS0FBS2UsR0FBRyxNQUFNQSxHQUFHMDVELEdBQUcxNUQsS0FBS2c0RCxHQUFHdDNELFVBQVVpMEMseUJBQXlCLFNBQVMzMEMsRUFBRTRCLEVBQUVyQixFQUFFaEIsRUFBRVQsR0FBRyxJQUFJYyxFQUFFSSxFQUFFdTVELGdCQUFnQixHQUFHMzVELEVBQUUrMEMsMkJBQTJCLEVBQUUvMEMsRUFBRTY1RCxtQkFBbUJ6eUQsUUFBUXBGLEdBQUcsSUFBSWhDLEVBQUUrMEMseUJBQXlCMTFDLEtBQUtlLEVBQUU0QixFQUFFckIsRUFBRWhCLEVBQUVULEdBQUcsTUFBTWtCLEdBQUcwNUQsR0FBRzE1RCxLQUFLdzZELEdBQUc5NUQsVUFBVXNlLFFBQVEsU0FBU2hmLEdBQUcsR0FBR3VHLEtBQUs2eEMsRUFBRSxNQUFNdDBDLE1BQU0scUJBQXFCeUMsS0FBSzZ4QyxFQUFFcDRDLEVBQUV1RyxLQUFLeUgsRUFBRWhPLElBQUkwNkQsR0FBR2g2RCxVQUFVdU4sRUFBRSxTQUFTak8sR0FBRyxJQUFJNEIsRUFBRTJFLEtBQUt5SCxFQUFFMFYsV0FBVyxJQUFJLGdCQUFnQjloQixHQUFHLGFBQWFBLEdBQUdpNUQsR0FBR3QwRCxNQUFNM0UsRUFBRSxFQUFFQSxFQUFFNUIsRUFBRWlDLE9BQU9MLElBQUksSUFBSSxJQUFJckIsRUFBRVAsRUFBRTRCLEdBQUdtK0MsV0FBV3hnRCxFQUFFLEVBQUVBLEVBQUVnQixFQUFFMEIsT0FBTzFDLElBQUl3NUQsR0FBR3h5RCxLQUFLd3lDLEVBQUV4NEMsRUFBRWhCLE1BQU1nQixFQUFFdzZELEdBQUdyNkQsV0FBV283RCxHQUFHLFNBQVM5N0QsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVnRyxLQUFLLEtBQUszRSxhQUFhK3hDLFVBQVUsTUFBTSxJQUFJOXhCLFVBQVUseURBQXlEMjVDLEdBQUdqMUQsS0FBS3ZHLEdBQUd1RyxLQUFLeTBELEdBQUdqMkMsSUFBSS9rQixFQUFFNEIsR0FBRzJFLEtBQUsrMEQsR0FBR240RCxLQUFLbkQsR0FBR3VHLEtBQUs2ekMsSUFBSTd6QyxLQUFLNnpDLEdBQUUsRUFBRzd6QyxLQUFLODBELElBQUksV0FBVyxPQUFPTyxHQUFHcjdELFFBQVFBLEVBQUUwMkMsT0FBTyxTQUFTajNDLEVBQUU0QixHQUFHLElBQUlyQixFQUFFZ0csS0FBSyxLQUFLM0UsYUFBYSt4QyxVQUFVLE1BQU0sSUFBSTl4QixVQUFVLGtEQUFrRDI1QyxHQUFHajFELEtBQUt2RyxHQUFHMDdELEdBQUduMUQsS0FBS3ZHLEVBQUU0QixHQUFHMkUsS0FBSyswRCxHQUFHbjRELEtBQUtuRCxHQUFHdUcsS0FBSzZ6QyxJQUFJN3pDLEtBQUs2ekMsR0FBRSxFQUFHN3pDLEtBQUs4MEQsSUFBSSxXQUFXLE9BQU9PLEdBQUdyN0QsUUFBUUEsRUFBRTA0RCxRQUFRLFNBQVNqNUQsR0FBRys0RCxHQUFHeHlELEtBQUt3eUMsRUFBRS80QyxJQUFJTyxFQUFFWixJQUFJLFNBQVNLLEdBQUcsR0FBR0EsRUFBRW81RCxHQUFHN3lELEtBQUt2RyxHQUFHLE9BQU9BLEVBQUVzNUQscUJBQXFCLzRELEVBQUV3N0QsWUFBWSxTQUFTLzdELEdBQUcsSUFBSTAzRCxHQUFHMTNELEdBQUcsT0FBT2s3QyxRQUFRajhCLE9BQU8sSUFBSXc4QyxZQUFZLElBQUl6N0QsRUFBRSwwQ0FBMEMsSUFBSTRCLEVBQUUyRSxLQUFLNjBELEdBQUd6N0QsSUFBSUssR0FBRyxHQUFHNEIsRUFBRSxPQUFPQSxFQUFFNjRELEdBQUc3NEQsRUFBRSxJQUFJNDRELEdBQUdqMEQsS0FBSzYwRCxHQUFHcjJDLElBQUkva0IsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVnRyxLQUFLMDBELEdBQUdwOUMsSUFBSTdkLElBQUl1RyxLQUFLeTBELEdBQUduOUMsSUFBSTdkLEdBQUcsT0FBT0EsR0FBRyxJQUFJdUcsS0FBSyswRCxHQUFHdDBELFFBQVFoSCxHQUFHTyxHQUFHUCxHQUFHNEIsRUFBRW9kLGFBQVEsR0FBUXBkLEVBQUU2NEQsSUFBSWw2RCxFQUFFNDJDLDBCQUEwQixTQUFTbjNDLEdBQUd1RyxLQUFLZzFELElBQUlWLEdBQUd0MEQsS0FBS2cxRCxJQUFJLElBQUkzNUQsRUFBRTJFLEtBQUs4MEQsR0FBRzkwRCxLQUFLODBELEdBQUcsU0FBUzk2RCxHQUFHLE9BQU9QLEdBQUcsV0FBVyxPQUFPNEIsRUFBRXJCLFFBQVFVLE9BQU9neEQsc0JBQXNCOEksR0FBR0EsR0FBR3I2RCxVQUFVdTJDLE9BQU84akIsR0FBR3I2RCxVQUFVdTJDLE9BQU84akIsR0FBR3I2RCxVQUFVdTRELFFBQVE4QixHQUFHcjZELFVBQVV1NEQsUUFBUThCLEdBQUdyNkQsVUFBVWYsSUFBSW83RCxHQUFHcjZELFVBQVVmLElBQUlvN0QsR0FBR3I2RCxVQUFVcTdELFlBQVloQixHQUFHcjZELFVBQVVxN0QsWUFBWWhCLEdBQUdyNkQsVUFBVXM3RCxtQkFBbUJqQixHQUFHcjZELFVBQVVvN0QsR0FBR2YsR0FBR3I2RCxVQUFVeTJDLDBCQUEwQjRqQixHQUFHcjZELFVBQVV5MkMsMEJBQTBCLElBQUk4a0IsR0FBRyxHQUFPaEUsR0FBR2gzRCxPQUFPKzFDLGVBQWUsU0FBU2tsQixLQUFLLElBQUlsOEQsRUFBRSxJQUFJZzRELElBQUksU0FBU2g0RCxHQUFHLFNBQVM0QixJQUFJLElBQUlBLEVBQUUyRSxLQUFLc0MsWUFBWXRJLEVBQUVXLFNBQVNnNEQsY0FBY2dDLEdBQUd2N0QsSUFBSWlDLEdBQUcsSUFBSXJCLEVBQUUsTUFBTXVELE1BQU0sbUdBQW1HLElBQUl2RSxFQUFFZ0IsRUFBRTg0RCxrQkFBa0IsR0FBRyxJQUFJOTVELEVBQUUwQyxPQUFPLE9BQU8xQyxFQUFFNjFELEdBQUduMkQsS0FBS2lDLFNBQVNYLEVBQUVvNUMsV0FBV242QyxPQUFPczBDLGVBQWV2MEMsRUFBRXFDLEVBQUVsQixXQUFXbkIsRUFBRXE1RCxXQUFXLEVBQUVyNUQsRUFBRWc2RCxnQkFBZ0JoNUQsRUFBRWs0RCxHQUFHejRELEVBQUVULEdBQUdBLEVBQUUsSUFBSVQsRUFBRVMsRUFBRTBDLE9BQU8sRUFBRXJDLEVBQUVMLEVBQUVULEdBQUcsR0FBR2MsSUFBSXE4RCxHQUFHLE1BQU1uNEQsTUFBTSx3QkFBd0J2RCxFQUFFbzVDLFVBQVUsNENBQTRDLE9BQU9wNkMsRUFBRVQsR0FBR205RCxHQUFHejhELE9BQU9zMEMsZUFBZWwwQyxFQUFFZ0MsRUFBRWxCLFdBQVcrM0QsR0FBR3o0RCxFQUFFSixHQUFHQSxFQUFFZ0MsRUFBRWxCLFVBQVUyMkQsR0FBRzMyRCxVQUFVbEIsT0FBT0MsZUFBZTgwQyxZQUFZN3pDLFVBQVUsY0FBYyxDQUFDa3RCLFVBQVMsRUFBRzlJLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdLLE1BQU02QixJQUFJWCxPQUFPc3pDLFlBQVkzeUMsRUFBbHNCLENBQXFzQjVCLEdBQUcsU0FBU0EsR0FBRzQ1QyxTQUFTbDVDLFVBQVU2QyxjQUFjLFNBQVMzQixHQUFHLE9BQU8rM0QsR0FBRzM1RCxFQUFFdUcsS0FBSzNFLEVBQUUsT0FBT2c0QyxTQUFTbDVDLFVBQVVtNUMsV0FBVyxTQUFTajRDLEVBQUVyQixHQUFHLE9BQU9xQixFQUFFaTdCLEdBQUc1OUIsS0FBS3NILEtBQUszRSxJQUFJckIsR0FBR2dHLEtBQUsyeUQsY0FBY0gsR0FBRy80RCxFQUFFNEIsR0FBRzQyRCxHQUFHeDRELEVBQUU0QixHQUFHQSxHQUFHZzRDLFNBQVNsNUMsVUFBVW91RCxnQkFBZ0IsU0FBU2x0RCxFQUFFckIsR0FBRyxPQUFPbzVELEdBQUczNUQsRUFBRXVHLEtBQUtoRyxFQUFFcUIsSUFBSWk2RCxHQUFHNzdELEVBQUU0NUMsU0FBU2w1QyxVQUFVLENBQUM2eEIsUUFBUStpQyxHQUFHaGpDLE9BQU9pakMsS0FBclQsQ0FBMlR2MUQsR0FBRzY3RCxHQUFHNzdELEVBQUUwNUMsaUJBQWlCaDVDLFVBQVUsQ0FBQzZ4QixRQUFRaWpDLEdBQUdsakMsT0FBT21qQyxLQUFLLFNBQVN6MUQsR0FBRyxTQUFTNEIsRUFBRUEsRUFBRXJCLEdBQUdmLE9BQU9DLGVBQWVtQyxFQUFFLGNBQWMsQ0FBQ2xDLFdBQVdhLEVBQUViLFdBQVdvbEIsY0FBYSxFQUFHbmxCLElBQUlZLEVBQUVaLElBQUlvbEIsSUFBSSxTQUFTbmpCLEdBQUcsR0FBRzJFLEtBQUtnQixXQUFXK3hDLEtBQUtZLFVBQVUzNUMsRUFBRXdrQixJQUFJOWxCLEtBQUtzSCxLQUFLM0UsT0FBTyxDQUFDLElBQUlyQyxPQUFFLEVBQU8sR0FBR2dILEtBQUtsQixXQUFXLENBQUMsSUFBSXZHLEVBQUV5SCxLQUFLNUIsV0FBVy9FLEVBQUVkLEVBQUVtRCxPQUFPLEdBQUcsRUFBRXJDLEdBQUdnNEQsR0FBR3J4RCxNQUFNLENBQUNoSCxFQUFFb0wsTUFBTS9LLEdBQUcsSUFBSSxJQUFJb08sRUFBRSxFQUFFQSxFQUFFcE8sRUFBRW9PLElBQUl6TyxFQUFFeU8sR0FBR2xQLEVBQUVrUCxJQUFJLEdBQUd6TixFQUFFd2tCLElBQUk5bEIsS0FBS3NILEtBQUszRSxHQUFHckMsRUFBRSxJQUFJcUMsRUFBRSxFQUFFQSxFQUFFckMsRUFBRTBDLE9BQU9MLElBQUlrM0QsR0FBRzk0RCxFQUFFVCxFQUFFcUMsUUFBUTAzQyxLQUFLNTRDLFVBQVVtRSxhQUFhLFNBQVNqRCxFQUFFckIsR0FBRyxHQUFHcUIsYUFBYTgzQyxpQkFBaUIsQ0FBQyxJQUFJbjZDLEVBQUV1NEQsR0FBR2wyRCxHQUFHLEdBQUdBLEVBQUVnMEQsR0FBRzMyRCxLQUFLc0gsS0FBSzNFLEVBQUVyQixHQUFHcTNELEdBQUdyeEQsTUFBTSxJQUFJaEcsRUFBRSxFQUFFQSxFQUFFaEIsRUFBRTBDLE9BQU8xQixJQUFJbzRELEdBQUczNEQsRUFBRVQsRUFBRWdCLElBQUksT0FBT3FCLEVBQUUsT0FBT3JDLEVBQUVxQyxhQUFhbTRDLFNBQVM2ZCxHQUFHaDJELEdBQUdyQixFQUFFcTFELEdBQUczMkQsS0FBS3NILEtBQUszRSxFQUFFckIsR0FBR2hCLEdBQUd1NUQsR0FBRzk0RCxFQUFFNEIsR0FBR2cyRCxHQUFHcnhELE9BQU9veUQsR0FBRzM0RCxFQUFFNEIsR0FBR3JCLEdBQUcrNEMsS0FBSzU0QyxVQUFVcUQsWUFBWSxTQUFTbkMsR0FBRyxHQUFHQSxhQUFhODNDLGlCQUFpQixDQUFDLElBQUluNUMsRUFBRXUzRCxHQUFHbDJELEdBQUcsR0FBR0EsRUFBRSt6RCxHQUFHMTJELEtBQUtzSCxLQUFLM0UsR0FBR2cyRCxHQUFHcnhELE1BQU0sSUFBSSxJQUFJaEgsRUFBRSxFQUFFQSxFQUFFZ0IsRUFBRTBCLE9BQU8xQyxJQUFJbzVELEdBQUczNEQsRUFBRU8sRUFBRWhCLElBQUksT0FBT3FDLEVBQUUsT0FBT3JCLEVBQUVxQixhQUFhbTRDLFNBQVM2ZCxHQUFHaDJELEdBQUdyQyxFQUFFbzJELEdBQUcxMkQsS0FBS3NILEtBQUszRSxHQUFHckIsR0FBR3U0RCxHQUFHOTRELEVBQUU0QixHQUFHZzJELEdBQUdyeEQsT0FBT295RCxHQUFHMzRELEVBQUU0QixHQUFHckMsR0FBRys1QyxLQUFLNTRDLFVBQVU2bkIsVUFBVSxTQUFTM21CLEdBQUcsT0FBT0EsRUFBRTh6RCxHQUFHejJELEtBQUtzSCxPQUFPM0UsR0FBRzJFLEtBQUt5SyxjQUFja29ELGNBQWNILEdBQUcvNEQsRUFBRTRCLEdBQUc0MkQsR0FBR3g0RCxFQUFFNEIsR0FBR0EsR0FBRzAzQyxLQUFLNTRDLFVBQVVrRSxZQUFZLFNBQVNoRCxHQUFHLElBQUlyQixFQUFFcUIsYUFBYW00QyxTQUFTNmQsR0FBR2gyRCxHQUFHckMsRUFBRXMyRCxHQUFHNTJELEtBQUtzSCxLQUFLM0UsR0FBRyxPQUFPckIsR0FBR3U0RCxHQUFHOTRELEVBQUU0QixHQUFHckMsR0FBRys1QyxLQUFLNTRDLFVBQVVpeUIsYUFBYSxTQUFTL3dCLEVBQUVyQixHQUFHLEdBQUdxQixhQUFhODNDLGlCQUFpQixDQUFDLElBQUluNkMsRUFBRXU0RCxHQUFHbDJELEdBQUcsR0FBR0EsRUFBRWswRCxHQUFHNzJELEtBQUtzSCxLQUFLM0UsRUFBRXJCLEdBQUdxM0QsR0FBR3J4RCxNQUFNLElBQUl1eUQsR0FBRzk0RCxFQUFFTyxHQUFHQSxFQUFFLEVBQUVBLEVBQUVoQixFQUFFMEMsT0FBTzFCLElBQUlvNEQsR0FBRzM0RCxFQUFFVCxFQUFFZ0IsSUFBSSxPQUFPcUIsRUFBRXJDLEVBQUVxQyxhQUFhbTRDLFNBQVM2ZCxHQUFHaDJELEdBQUcsSUFBSTlDLEVBQUVnM0QsR0FBRzcyRCxLQUFLc0gsS0FBSzNFLEVBQUVyQixHQUFHWCxFQUFFZzRELEdBQUdyeEQsTUFBTSxPQUFPM0csR0FBR2s1RCxHQUFHOTRELEVBQUVPLEdBQUdoQixHQUFHdTVELEdBQUc5NEQsRUFBRTRCLEdBQUdoQyxHQUFHKzRELEdBQUczNEQsRUFBRTRCLEdBQUc5QyxHQUFHaTNELElBQUlBLEdBQUdwMkQsSUFBSWlDLEVBQUUwM0MsS0FBSzU0QyxVQUFVcTFELElBQUksU0FBUy8xRCxFQUFFNEIsR0FBRzVCLEVBQUU0NkMsR0FBRSxFQUFHNTZDLEVBQUVtOEMsRUFBRWg1QyxLQUFLdkIsR0FBOUIsQ0FBa0M1QixHQUFHLFNBQVNBLEdBQUc0QixFQUFFNUIsRUFBRSxDQUFDTixZQUFXLEVBQUdvbEIsY0FBYSxFQUFHbmxCLElBQUksV0FBVyxJQUFJLElBQUlLLEVBQUUsR0FBRzRCLEVBQUUyRSxLQUFLbEIsV0FBV3pELEVBQUVBLEVBQUVBLEVBQUU4USxZQUFZOVEsRUFBRTJGLFdBQVcreEMsS0FBS2EsY0FBY242QyxFQUFFbUQsS0FBS3ZCLEVBQUVrVSxhQUFhLE9BQU85VixFQUFFb0UsS0FBSyxLQUFLMmdCLElBQUksU0FBUy9rQixHQUFHLEtBQUt1RyxLQUFLbEIsWUFBWXd3RCxHQUFHNTJELEtBQUtzSCxLQUFLQSxLQUFLbEIsWUFBWSxNQUFNckYsR0FBRyxLQUFLQSxHQUFHMjFELEdBQUcxMkQsS0FBS3NILEtBQUtyRixTQUFTd0QsZUFBZTFFLFVBQWx1RCxDQUE2dURBLEdBQS9sUixTQUFZQSxHQUFHLFNBQVM0QixFQUFFQSxFQUFFckIsR0FBR2YsT0FBT0MsZUFBZW1DLEVBQUUsWUFBWSxDQUFDbEMsV0FBV2EsRUFBRWIsV0FBV29sQixjQUFhLEVBQUdubEIsSUFBSVksRUFBRVosSUFBSW9sQixJQUFJLFNBQVNuakIsR0FBRyxJQUFJckMsRUFBRWdILEtBQUt6SCxPQUFFLEVBQU8sR0FBRzg0RCxHQUFHcnhELFFBQVF6SCxFQUFFLEdBQUd1NUQsR0FBR3I0RCxFQUFFdUcsTUFBTSxTQUFTdkcsR0FBR0EsSUFBSVQsR0FBR1QsRUFBRXFFLEtBQUtuRCxPQUFPTyxFQUFFd2tCLElBQUk5bEIsS0FBS3NILEtBQUszRSxHQUFHOUMsRUFBRSxJQUFJLElBQUljLEVBQUUsRUFBRUEsRUFBRWQsRUFBRW1ELE9BQU9yQyxJQUFJLENBQUMsSUFBSW9PLEVBQUVsUCxFQUFFYyxHQUFHLElBQUlvTyxFQUFFNHFELFlBQVk1NEQsRUFBRSt4RCxxQkFBcUIvakQsR0FBRyxPQUFPekgsS0FBS3lLLGNBQWNrb0QsY0FBY0gsR0FBRy80RCxFQUFFdUcsTUFBTWl5RCxHQUFHeDRELEVBQUV1RyxNQUFNM0UsS0FBSyxTQUFTckIsRUFBRXFCLEVBQUVyQixHQUFHcUIsRUFBRWcxRCxzQkFBc0IsU0FBU2gxRCxFQUFFckMsR0FBRyxJQUFJVCxFQUFFODRELEdBQUdyNEQsR0FBRyxPQUFPcUMsRUFBRXJCLEVBQUV0QixLQUFLc0gsS0FBSzNFLEVBQUVyQyxHQUFHVCxHQUFHZzZELEdBQUc5NEQsRUFBRVQsR0FBR3E0RCxHQUFHaDJELElBQUkrMkQsR0FBRzM0RCxFQUFFVCxHQUFHcUMsR0FBRyxTQUFTckMsRUFBRXFDLEVBQUVyQixHQUFHLFNBQVNoQixFQUFFcUMsRUFBRXJCLEdBQUcsSUFBSSxJQUFJaEIsRUFBRSxHQUFHcUMsSUFBSXJCLEVBQUVxQixFQUFFQSxFQUFFOFEsWUFBWW5ULEVBQUU0RCxLQUFLdkIsR0FBRyxJQUFJckIsRUFBRSxFQUFFQSxFQUFFaEIsRUFBRTBDLE9BQU8xQixJQUFJdzRELEdBQUcvNEQsRUFBRVQsRUFBRWdCLElBQUlxQixFQUFFazFELG1CQUFtQixTQUFTOTJELEVBQUU0QixHQUFHLEdBQUcsaUJBQWlCNUIsRUFBRUEsRUFBRXFNLGVBQWUsQ0FBQyxJQUFJdk4sRUFBRXlILEtBQUtnbEQsZ0JBQWdCaHJELEVBQUV0QixLQUFLc0gsS0FBS3ZHLEVBQUU0QixHQUFHckMsRUFBRVQsR0FBR3lILEtBQUtiLFdBQVdMLFdBQVdrQixXQUFXLEdBQUcsZUFBZXZHLEVBQUVsQixFQUFFeUgsS0FBS2xCLFdBQVc5RSxFQUFFdEIsS0FBS3NILEtBQUt2RyxFQUFFNEIsR0FBR3JDLEVBQUVnSCxLQUFLbEIsV0FBV3ZHLFFBQVEsR0FBRyxjQUFja0IsRUFBRWxCLEVBQUV5SCxLQUFLZ1IsVUFBVWhYLEVBQUV0QixLQUFLc0gsS0FBS3ZHLEVBQUU0QixHQUFHckMsRUFBRVQsR0FBR3lILEtBQUtsQixXQUFXLFVBQVUsQ0FBQyxHQUFHLGFBQWFyRixFQUFFLE1BQU0sSUFBSXk3RCxZQUFZLHVCQUF1QjlyRCxPQUFPM1AsR0FBRyw0RUFBNEVsQixFQUFFeUgsS0FBS21NLFlBQVluUyxFQUFFdEIsS0FBS3NILEtBQUt2RyxFQUFFNEIsR0FBR3JDLEVBQUVnSCxLQUFLbU0sWUFBWTVULEtBQUtrM0QsS0FBS2pjLFFBQVFyNUMsVUFBVXV6QyxhQUFhLFNBQVNyeUMsR0FBRyxHQUFHQSxFQUFFbzBELEdBQUcvMkQsS0FBS3NILEtBQUszRSxHQUFHNUIsRUFBRTQ2QyxJQUFJaDVDLEVBQUU4MkQsYUFBYSxDQUFDOTJELEVBQUU4MkQsY0FBYSxFQUFHLElBQUksSUFBSW40RCxFQUFFLEVBQUVBLEVBQUVQLEVBQUVtOEMsRUFBRWw2QyxPQUFPMUIsSUFBSVAsRUFBRW04QyxFQUFFNTdDLEdBQUdxQixHQUFHLE9BQU8yRSxLQUFLbW9ELGdCQUFnQjlzRCxJQUFJcTBELElBQUlBLEdBQUd0MkQsSUFBSWlDLEVBQUVtNEMsUUFBUXI1QyxVQUFVdTFELElBQUlxQixJQUFJQSxHQUFHMzNELElBQUlpQyxFQUFFMnlDLFlBQVk3ekMsVUFBVTQyRCxJQUFJLFNBQVN0M0QsRUFBRTRCLEdBQUc1QixFQUFFNDZDLEdBQUUsRUFBRzU2QyxFQUFFZ08sRUFBRTdLLEtBQUt2QixHQUE5QixDQUFrQzVCLEdBQUcsU0FBU0EsR0FBRzRCLEVBQUU1QixFQUFFLENBQUNOLFlBQVcsRUFBR29sQixjQUFhLEVBQUdubEIsSUFBSSxXQUFXLE9BQU8rMUQsR0FBR3oyRCxLQUFLc0gsTUFBSyxHQUFJOE4sV0FBVzBRLElBQUksU0FBUy9rQixHQUFHLElBQUk0QixFQUFFLGFBQWEyRSxLQUFLb3pDLFVBQVVwNUMsRUFBRXFCLEVBQUUyRSxLQUFLaVksUUFBUWpZLEtBQUtoSCxFQUFFODFELEdBQUdwMkQsS0FBS2lDLFNBQVNxRixLQUFLNE0sYUFBYTVNLEtBQUtvekMsV0FBVyxJQUFJcDZDLEVBQUU4VSxVQUFVclUsRUFBRSxFQUFFTyxFQUFFb0UsV0FBVzFDLFFBQVE0ekQsR0FBRzUyRCxLQUFLc0IsRUFBRUEsRUFBRW9FLFdBQVcsSUFBSSxJQUFJM0UsRUFBRTRCLEVBQUVyQyxFQUFFaWYsUUFBUWpmLEVBQUUsRUFBRVMsRUFBRTJFLFdBQVcxQyxRQUFRMHpELEdBQUcxMkQsS0FBS3NCLEVBQUVQLEVBQUUyRSxXQUFXLFVBQVVvMUMsUUFBUXI1QyxVQUFVa0QsYUFBYSxTQUFTaEMsRUFBRXJCLEdBQUcsR0FBRyxJQUFJZ0csS0FBS3F5RCxXQUFXLE9BQU96QyxHQUFHbDNELEtBQUtzSCxLQUFLM0UsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUUyMkQsR0FBR2ozRCxLQUFLc0gsS0FBSzNFLEdBQUd1MEQsR0FBR2wzRCxLQUFLc0gsS0FBSzNFLEVBQUVyQixHQUFHQSxFQUFFMjFELEdBQUdqM0QsS0FBS3NILEtBQUszRSxHQUFHNUIsRUFBRTIwQyx5QkFBeUJwdUMsS0FBSzNFLEVBQUVyQyxFQUFFZ0IsRUFBRSxPQUFPdzVDLFFBQVFyNUMsVUFBVTgxRCxlQUFlLFNBQVM1MEQsRUFBRXJCLEVBQUVoQixHQUFHLEdBQUcsSUFBSWdILEtBQUtxeUQsV0FBVyxPQUFPckMsR0FBR3QzRCxLQUFLc0gsS0FBSzNFLEVBQUVyQixFQUFFaEIsR0FBRyxJQUFJVCxFQUFFdTNELEdBQUdwM0QsS0FBS3NILEtBQUszRSxFQUFFckIsR0FBR2cyRCxHQUFHdDNELEtBQUtzSCxLQUFLM0UsRUFBRXJCLEVBQUVoQixHQUFHQSxFQUFFODJELEdBQUdwM0QsS0FBS3NILEtBQUszRSxFQUFFckIsR0FBR1AsRUFBRTIwQyx5QkFBeUJwdUMsS0FBS2hHLEVBQUV6QixFQUFFUyxFQUFFcUMsSUFBSW00QyxRQUFRcjVDLFVBQVVxRSxnQkFBZ0IsU0FBU25ELEdBQUcsR0FBRyxJQUFJMkUsS0FBS3F5RCxXQUFXLE9BQU94QyxHQUFHbjNELEtBQUtzSCxLQUFLM0UsR0FBRyxJQUFJckIsRUFBRTIxRCxHQUFHajNELEtBQUtzSCxLQUFLM0UsR0FBR3cwRCxHQUFHbjNELEtBQUtzSCxLQUFLM0UsR0FBRyxPQUFPckIsR0FBR1AsRUFBRTIwQyx5QkFBeUJwdUMsS0FBSzNFLEVBQUVyQixFQUFFLEtBQUssT0FBT3c1QyxRQUFRcjVDLFVBQVVnMkQsa0JBQWtCLFNBQVM5MEQsRUFBRXJCLEdBQUcsR0FBRyxJQUFJZ0csS0FBS3F5RCxXQUFXLE9BQU9uQyxHQUFHeDNELEtBQUtzSCxLQUFLM0UsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUU4MkQsR0FBR3AzRCxLQUFLc0gsS0FBSzNFLEVBQUVyQixHQUFHazJELEdBQUd4M0QsS0FBS3NILEtBQUszRSxFQUFFckIsR0FBRyxJQUFJekIsRUFBRXUzRCxHQUFHcDNELEtBQUtzSCxLQUFLM0UsRUFBRXJCLEdBQUdoQixJQUFJVCxHQUFHa0IsRUFBRTIwQyx5QkFBeUJwdUMsS0FBS2hHLEVBQUVoQixFQUFFVCxFQUFFOEMsSUFBSTIxRCxHQUFHaDNELEVBQUVnMEMsWUFBWTd6QyxVQUFVNjJELElBQUlaLElBQUlwMkQsRUFBRXc1QyxRQUFRcjVDLFVBQVVpMkQsSUFBSWEsR0FBR2o0RCxFQUFFZzFDLFlBQVk3ekMsVUFBVTgyRCxJQUFJWCxJQUFJdDNELEVBQUV3NkMsUUFBUXI1QyxVQUFVbTJELElBQUlnRixHQUFHNzdELEVBQUUrNUMsUUFBUXI1QyxVQUFVLENBQUM2eEIsUUFBUXdrQyxHQUFHemtDLE9BQU8wa0MsS0FBSyxTQUFTaDNELEdBQUcsU0FBUzRCLEVBQUVBLEdBQUcsT0FBTyxTQUFTckIsR0FBRyxJQUFJLElBQUloQixFQUFFLEdBQUdULEVBQUUsRUFBRUEsRUFBRTJLLFVBQVV4SCxTQUFTbkQsRUFBRVMsRUFBRVQsR0FBRzJLLFVBQVUzSyxHQUFHQSxFQUFFLEdBQUcsSUFBSSxJQUFJYyxFQUFFLEdBQUdvTyxFQUFFLEVBQUVBLEVBQUV6TyxFQUFFMEMsT0FBTytMLElBQUksQ0FBQyxJQUFJbk4sRUFBRXRCLEVBQUV5TyxHQUFHLEdBQUduTixhQUFhazVDLFNBQVM2ZCxHQUFHLzJELElBQUlqQixFQUFFdUQsS0FBS3RDLEdBQUdBLGFBQWE2NEMsaUJBQWlCLElBQUk3NEMsRUFBRUEsRUFBRXdFLFdBQVd4RSxFQUFFQSxFQUFFQSxFQUFFNlIsWUFBWTVULEVBQUVxRSxLQUFLdEMsUUFBUS9CLEVBQUVxRSxLQUFLdEMsR0FBRyxJQUFJZSxFQUFFbUYsTUFBTVIsS0FBS2hILEdBQUdBLEVBQUUsRUFBRUEsRUFBRUssRUFBRXFDLE9BQU8xQyxJQUFJdTVELEdBQUc5NEQsRUFBRUosRUFBRUwsSUFBSSxHQUFHcTRELEdBQUdyeEQsTUFBTSxJQUFJaEgsRUFBRSxFQUFFQSxFQUFFVCxFQUFFbUQsT0FBTzFDLEtBQUtLLEVBQUVkLEVBQUVTLGNBQWN3NkMsU0FBUzRlLEdBQUczNEQsRUFBRUosSUFBSSxJQUFJVyxFQUFFdzVDLFFBQVFyNUMsZUFBVSxJQUFTdTJELEtBQUsxMkQsRUFBRWl5QixPQUFPNXdCLEVBQUVxMUQsVUFBSyxJQUFTQyxLQUFLMzJELEVBQUVreUIsTUFBTTd3QixFQUFFczFELFVBQUssSUFBU0MsS0FBSzUyRCxFQUFFbXlCLFlBQVksU0FBUzl3QixHQUFHLElBQUksSUFBSXJCLEVBQUUsR0FBR2hCLEVBQUUsRUFBRUEsRUFBRWtLLFVBQVV4SCxTQUFTMUMsRUFBRWdCLEVBQUVoQixHQUFHa0ssVUFBVWxLLEdBQUdBLEVBQUUsR0FBRyxJQUFJLElBQUlULEVBQUUsR0FBR2MsRUFBRSxFQUFFQSxFQUFFVyxFQUFFMEIsT0FBT3JDLElBQUksQ0FBQyxJQUFJb08sRUFBRXpOLEVBQUVYLEdBQUcsR0FBR29PLGFBQWErckMsU0FBUzZkLEdBQUc1cEQsSUFBSWxQLEVBQUVxRSxLQUFLNkssR0FBR0EsYUFBYTByQyxpQkFBaUIsSUFBSTFyQyxFQUFFQSxFQUFFM0ksV0FBVzJJLEVBQUVBLEVBQUVBLEVBQUUwRSxZQUFZblQsRUFBRTRELEtBQUs2SyxRQUFRek8sRUFBRTRELEtBQUs2SyxHQUFHLElBQUlwTyxFQUFFZzRELEdBQUdyeEQsTUFBTTR3RCxHQUFHcHdELE1BQU1SLEtBQUtoRyxHQUFHQSxFQUFFLEVBQUVBLEVBQUV6QixFQUFFbUQsT0FBTzFCLElBQUl1NEQsR0FBRzk0RCxFQUFFbEIsRUFBRXlCLElBQUksR0FBR1gsRUFBRSxJQUFJazVELEdBQUc5NEQsRUFBRXVHLE1BQU1oRyxFQUFFLEVBQUVBLEVBQUVoQixFQUFFMEMsT0FBTzFCLEtBQUt6QixFQUFFUyxFQUFFZ0IsY0FBY3c1QyxTQUFTNGUsR0FBRzM0RCxFQUFFbEIsVUFBSyxJQUFTczRELEtBQUs3MkQsRUFBRStELE9BQU8sV0FBVyxJQUFJMUMsRUFBRWcyRCxHQUFHcnhELE1BQU02d0QsR0FBR240RCxLQUFLc0gsTUFBTTNFLEdBQUdrM0QsR0FBRzk0RCxFQUFFdUcsUUFBdDlCLENBQSs5QnZHLEdBQXM2Sm04RCxDQUFHbjhELEdBQUdBLEVBQUUsSUFBSSs2RCxHQUFHLzZELEdBQUdrQixTQUFTZzRELGNBQWNsNUQsRUFBRVIsT0FBT0MsZUFBZXdCLE9BQU8saUJBQWlCLENBQUM2akIsY0FBYSxFQUFHcGxCLFlBQVcsRUFBR0ssTUFBTUMsSUFBSSxTQUFTbzhELEtBQUs3MUQsS0FBSzRELElBQUk1RCxLQUFLNlEsTUFBTSxFQUFFN1EsS0FBSzgxRCxNQUFNOTFELEtBQUs4USxPQUFPOVEsS0FBSysxRCxTQUFTLEtBQUsvMUQsS0FBSy9CLFFBQVErQixLQUFLZzJELGNBQWMsR0FBR2gyRCxLQUFLaTJELFFBQU8sRUFBR2oyRCxLQUFLbUIsS0FBSyxFQUFFbkIsS0FBS2syRCxlQUFlbDJELEtBQUtnQyxTQUFTaEMsS0FBS20yRCxjQUFjLEdBQUcsU0FBU0MsR0FBRzM4RCxHQUFHLElBQUk0QixFQUFFNUIsRUFBRUEsRUFBRWlMLFFBQVFoRixHQUFHLElBQUlnRixRQUFRMnhELEdBQUcsSUFBSXI4RCxFQUFFLElBQUk2N0QsR0FBRzc3RCxFQUFFNlcsTUFBTSxFQUFFN1csRUFBRTRKLElBQUl2SSxFQUFFSyxPQUFPLElBQUksSUFBSTFDLEVBQUVnQixFQUFFekIsRUFBRSxFQUFFYyxFQUFFZ0MsRUFBRUssT0FBT25ELEVBQUVjLEVBQUVkLElBQUksR0FBRyxNQUFNOEMsRUFBRTlDLEdBQUcsQ0FBQ1MsRUFBRTg4RCxRQUFROThELEVBQUU4OEQsTUFBTSxJQUFJLElBQUlydUQsRUFBRXpPLEVBQUVzQixFQUFFbU4sRUFBRXF1RCxNQUFNcnVELEVBQUVxdUQsTUFBTXA2RCxPQUFPLElBQUksTUFBTTFDLEVBQUUsSUFBSTY4RCxJQUFJaGxELE1BQU10WSxFQUFFLEVBQUVTLEVBQUU4WCxPQUFPckosRUFBRXpPLEVBQUUrOEQsU0FBU3o3RCxFQUFFbU4sRUFBRXF1RCxNQUFNbDVELEtBQUs1RCxPQUFPLE1BQU1xQyxFQUFFOUMsS0FBS1MsRUFBRTRLLElBQUlyTCxFQUFFLEVBQUVTLEVBQUVBLEVBQUU4WCxRQUFROVcsR0FBRyxPQUFPLFNBQVNQLEVBQUU0QixFQUFFckIsR0FBRyxJQUFJaEIsRUFBRWdCLEVBQUVveEMsVUFBVS92QyxFQUFFd1YsTUFBTXhWLEVBQUV1SSxJQUFJLEdBQUcsR0FBR3ZJLEVBQUUyNkQsY0FBYzM2RCxFQUFFNEMsUUFBUWpGLEVBQUU2c0MsT0FBT3hxQyxFQUFFeVYsU0FBUzlYLEdBQUdBLEdBQUdBLEVBQUUsU0FBU1MsR0FBRyxPQUFPQSxFQUFFaUwsUUFBUSx5QkFBeUIsU0FBU2pMLEVBQUU0QixHQUFHLElBQUlBLEVBQUUsR0FBRzVCLEVBQUU0QixHQUFHSyxPQUFPTCxLQUFLNUIsRUFBRSxJQUFJQSxFQUFFLE1BQU0sS0FBS0EsS0FBakgsQ0FBdUhULEVBQUVnQixFQUFFb3hDLFVBQVUvdkMsRUFBRTA2RCxTQUFTMTZELEVBQUUwNkQsU0FBU255RCxJQUFJdkksRUFBRXlWLE9BQU9ELE1BQU14VixFQUFFd1YsTUFBTSxLQUFLbk0sUUFBUTR4RCxHQUFHLE1BQU1sckIsVUFBVXB5QyxFQUFFdTlELFlBQVksS0FBSyxHQUFHdjlELEVBQUVxQyxFQUFFNjZELGVBQWU3NkQsRUFBRTJHLFNBQVNoSixFQUFFNnNDLE9BQU94cUMsRUFBRTQ2RCxPQUFPLElBQUlqOUQsRUFBRXlILFFBQVEsS0FBS3BGLEVBQUU0NkQsT0FBTyxJQUFJajlELEVBQUV5SCxRQUFRLFVBQVVwRixFQUFFOEYsS0FBS3ExRCxHQUFHeDlELEVBQUVxUixNQUFNb3NELE1BQU1wN0QsRUFBRThGLEtBQUt1MUQsR0FBR3I3RCxFQUFFODZELGNBQWM5NkQsRUFBRTJHLFNBQVM2RCxNQUFNeXdELElBQUkzdUQsT0FBT3RNLEVBQUU4RixLQUFLLElBQUluSSxFQUFFeUgsUUFBUSxNQUFNazJELEdBQUdDLElBQUk1OUQsRUFBRXFDLEVBQUV5NkQsTUFBTSxJQUFJLElBQUl2OUQsRUFBRSxFQUFFYyxFQUFFTCxFQUFFMEMsT0FBTytMLE9BQUUsRUFBT2xQLEVBQUVjLElBQUlvTyxFQUFFek8sRUFBRVQsSUFBSUEsSUFBSWtCLEVBQUVnTyxFQUFFek4sR0FBRyxPQUFPcUIsRUFBdG5CLENBQXluQnJCLEVBQUVQLEdBQUdpNEQsS0FBS0EsR0FBRzNhLGVBQWUsbUJBQW1CMmEsR0FBR2hoQixRQUFRLG1CQUFtQmdoQixHQUFHdDRELEtBQUt1OEQsS0FBS2o3RCxPQUFPbThELHFCQUFxQmxCLEdBQUcsSUFBSW1CLEdBQUdDLEdBQUdILEdBQUcsRUFBRUYsR0FBRyxFQUFFRixHQUFHLEVBQUVHLEdBQUcsSUFBSWozRCxHQUFHLG9DQUFvQzIyRCxHQUFHLG1CQUFtQlcsR0FBRyxvREFBb0RDLEdBQUcsNkRBQTZEQyxHQUFHLDBDQUEwQ0MsR0FBRyw0Q0FBNENWLEdBQUcsb0JBQW9CSCxHQUFHLE9BQU9jLEtBQUsxOEQsT0FBTzA3QyxVQUFVMTdDLE9BQU8wN0MsU0FBU21YLE9BQU8sU0FBUzhKLEdBQUc1OUQsR0FBR3E5RCxLQUFLcjlELElBQUlBLEVBQUU2OUQscUJBQXFCRixNQUFNMXVCLFVBQVVDLFVBQVV0K0IsTUFBTSwrQkFBK0IzUCxPQUFPNjhELE1BQU1BLElBQUlDLFdBQVdELElBQUlDLFNBQVMsYUFBYSxzQkFBc0I5OEQsT0FBT21wRCxlQUFVLElBQVNucEQsT0FBT21wRCxTQUFTNFQsV0FBV1YsR0FBR3I4RCxPQUFPbXBELFNBQVM0VCxVQUFVLElBQUlDLE1BQU1oOUQsT0FBT21wRCxXQUFXbnBELE9BQU9tcEQsU0FBUzhULGdCQUFnQmo5RCxPQUFPbXBELGVBQVUsSUFBU25wRCxPQUFPbXBELFNBQVMrVCxVQUFVZCxHQUFHcDhELE9BQU9tcEQsU0FBUytULFVBQVVsOUQsT0FBT21wRCxVQUFVd1QsR0FBRzM4RCxPQUFPbXBELFVBQVVucEQsT0FBT21wRCxjQUFTLEdBQVF3VCxHQUFHMzhELE9BQU9nN0MsZUFBZWg3QyxPQUFPZzdDLGNBQWNDLE9BQU8sSUFBSWtpQixHQUFHZixHQUFHZ0IsR0FBRywwSEFBMEhDLEdBQUcsdUNBQXVDQyxHQUFHLDRCQUE0QkMsR0FBRyx1Q0FBdUNDLEdBQUcsZUFBZUMsR0FBRyxhQUFhQyxHQUFHLElBQUk3aUIsSUFBSSxTQUFTOGlCLEdBQUc1K0QsRUFBRTRCLEdBQUcsT0FBTzVCLEdBQUcsaUJBQWlCQSxJQUFJQSxFQUFFMjhELEdBQUczOEQsSUFBSTRCLEdBQUdpOUQsR0FBRzcrRCxFQUFFNEIsR0FBRyxTQUFTNUIsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBR0EsT0FBRSxJQUFTQSxFQUFFLEdBQUdBLEVBQUUsSUFBSVQsRUFBRSxHQUFHLEdBQUc4QyxFQUFFNEMsU0FBUzVDLEVBQUV5NkQsTUFBTSxDQUFDLElBQUl6OEQsRUFBRW9PLEVBQUVwTSxFQUFFeTZELE1BQU0sSUFBSXo4RCxFQUFFb08sS0FBS3BPLEtBQUtBLEVBQUVvTyxFQUFFLEtBQUtwTyxFQUFFMkksVUFBVSxJQUFJM0ksRUFBRTJJLFNBQVN2QixRQUFRLFFBQVFwSCxFQUFFLENBQUNBLEVBQUUsRUFBRSxJQUFJLElBQUlpQixFQUFFbU4sRUFBRS9MLE9BQU9sRCxPQUFFLEVBQU9hLEVBQUVpQixJQUFJOUIsRUFBRWlQLEVBQUVwTyxJQUFJQSxJQUFJZCxFQUFFa0IsRUFBRWpCLEVBQUV3QixFQUFFekIsUUFBdUdBLEdBQTdGeUIsRUFBRkEsRUFBSXFCLEVBQUU0QyxTQUFXakUsR0FBR0EsRUFBRXFCLEVBQUU0QyxTQUFTeUcsUUFBUXN5RCxHQUFHLElBQUl0eUQsUUFBUXV5RCxHQUFHLEtBQUt2eUQsUUFBUXd5RCxHQUFHLElBQUl4eUQsUUFBUXl5RCxHQUFHLEtBQVN0eEIsVUFBVXR0QyxFQUFFLEtBQUtBLEVBQUUsTUFBTSxPQUFPQSxJQUFJOEMsRUFBRTJHLFdBQVdoSixHQUFHcUMsRUFBRTJHLFNBQVMsUUFBUWhKLEdBQUdULEVBQUU4QyxFQUFFMkcsV0FBV2hKLEdBQUcsVUFBVUEsRUFBdGEsQ0FBeWFTLEVBQUVvK0QsS0FBSyxHQUFHLFNBQVNVLEdBQUc5K0QsR0FBRyxPQUFPQSxFQUFFKytELFlBQVkvK0QsRUFBRThWLGNBQWM5VixFQUFFKytELFdBQVdwQyxHQUFHMzhELEVBQUU4VixjQUFjOVYsRUFBRSsrRCxZQUFZLEtBQUssU0FBU0MsR0FBR2gvRCxHQUFHLFFBQVFBLEVBQUVxWCxRQUFRclgsRUFBRXFYLE9BQU8zUCxPQUFPdTFELEdBQUcsU0FBUzRCLEdBQUc3K0QsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBRyxHQUFHUyxFQUFFLENBQUMsSUFBSWxCLEdBQUUsRUFBR2MsRUFBRUksRUFBRTBILEtBQUssR0FBR25JLEdBQUdLLElBQUltOUQsR0FBRyxDQUFDLElBQUkvdUQsRUFBRWhPLEVBQUV1SSxTQUFTcUksTUFBTTZ0RCxJQUFJendELElBQUkvTSxPQUFPZytELFdBQVdqeEQsRUFBRSxJQUFJakMsVUFBVWpOLEdBQUUsSUFBSyxHQUFHYyxJQUFJdTlELEdBQUd2N0QsRUFBRTVCLEdBQUdPLEdBQUdYLElBQUlxOUQsR0FBRzE4RCxFQUFFUCxHQUFHSixJQUFJczlELEtBQUtwK0QsR0FBRSxJQUFLa0IsRUFBRUEsRUFBRXE4RCxTQUFTdjlELEVBQUUsSUFBSUEsRUFBRSxFQUFFYyxFQUFFSSxFQUFFaUMsT0FBTytMLE9BQUUsRUFBT2xQLEVBQUVjLElBQUlvTyxFQUFFaE8sRUFBRWxCLElBQUlBLElBQUkrL0QsR0FBRzd3RCxFQUFFcE0sRUFBRXJCLEVBQUVoQixJQUFJLFNBQVMyL0QsR0FBR2wvRCxFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHLElBQUlULEVBQUVvQyxTQUFTcUMsY0FBYyxTQUFTLE9BQU8zQixHQUFHOUMsRUFBRThFLGFBQWEsUUFBUWhDLEdBQUc5QyxFQUFFZ1gsWUFBWTlWLEVBQUVtL0QsR0FBR3JnRSxFQUFFeUIsRUFBRWhCLEdBQUdULEVBQUUsSUFBSXNnRSxHQUFHLEtBQUssU0FBU0MsR0FBR3IvRCxHQUFHQSxFQUFFa0IsU0FBUzBTLGNBQWMseUJBQXlCNVQsRUFBRSxLQUFLLElBQUk0QixFQUFFVixTQUFTUyxLQUFLLE9BQU9DLEVBQUVpRCxhQUFhN0UsR0FBR28vRCxHQUFHQSxHQUFHMXNELFlBQVksT0FBTzlRLEVBQUV5RCxZQUFZKzVELEdBQUdwL0QsRUFBRSxTQUFTbS9ELEdBQUduL0QsRUFBRTRCLEVBQUVyQixJQUFJcUIsRUFBRUEsR0FBR1YsU0FBU1MsTUFBTWtELGFBQWE3RSxFQUFFTyxHQUFHQSxFQUFFbVMsYUFBYTlRLEVBQUV5RCxZQUFZKzVELEdBQUdwL0QsRUFBRTRVLHdCQUF3QndxRCxNQUFNOWxCLEtBQUtnbUIsOEJBQThCRixHQUFHcC9ELEdBQUdvL0QsR0FBR3AvRCxFQUFFLFNBQVN1L0QsR0FBR3YvRCxFQUFFNEIsR0FBRyxJQUFJLElBQUlyQixFQUFFLEVBQUVoQixFQUFFUyxFQUFFaUMsT0FBT0wsRUFBRXJDLEVBQUVxQyxJQUFJLEdBQUcsTUFBTTVCLEVBQUU0QixHQUFHckIsU0FBUyxHQUFHLE1BQU1QLEVBQUU0QixJQUFJLEtBQUtyQixFQUFFLE9BQU9xQixFQUFFLE9BQU8sRUFBRSxTQUFTNDlELEdBQUd4L0QsRUFBRTRCLEdBQUcrN0QsR0FBRzM5RCxFQUFFNEQsYUFBYSxRQUFRaEMsR0FBR1gsT0FBTzA3QyxTQUFTbVksY0FBY2x4RCxhQUFhM0UsS0FBS2UsRUFBRSxRQUFRNEIsR0FBRyxJQUFJNjlELEdBQUd4K0QsT0FBTzA3QyxVQUFVMTdDLE9BQU8wN0MsU0FBUzl5QixNQUFNLFNBQVM3cEIsR0FBRyxPQUFPQSxHQUFHLFNBQVMwL0QsR0FBRzEvRCxHQUFHLElBQUk0QixFQUFFNUIsRUFBRTI1QyxVQUFVcDVDLEVBQUUsR0FBRyxPQUFPcUIsR0FBRyxFQUFFQSxFQUFFb0YsUUFBUSxPQUFPekcsRUFBRXFCLEVBQUVBLEVBQUU1QixFQUFFb0ksY0FBY3BJLEVBQUVvSSxhQUFhLE9BQU8sS0FBS3hHLEVBQUU1QixFQUFFMGMsR0FBR25jLEVBQUVQLEVBQUUyL0QsU0FBUyxDQUFDampELEdBQUc5YSxFQUFFZytELEdBQUdyL0QsR0FBRyxTQUFTcy9ELEdBQUc3L0QsR0FBRyxJQUFJLElBQUk0QixFQUFFLEdBQUdyQixFQUFFLEdBQUdoQixFQUFFLEVBQUUsR0FBR0EsR0FBR0EsRUFBRVMsRUFBRWlDLE9BQU8xQyxJQUFJLEdBQUcsTUFBTVMsRUFBRVQsR0FBRyxDQUFDLElBQUlULEVBQUV5Z0UsR0FBR3YvRCxFQUFFVCxHQUFHZ0IsR0FBR1AsRUFBRTRHLE1BQU1ySCxFQUFFVCxFQUFFLEdBQUdTLEVBQUVULE1BQU0sTUFBTWtCLEVBQUVULElBQUlxQyxFQUFFdUIsS0FBSzVDLEdBQUdBLEVBQUUsSUFBSUEsR0FBR1AsRUFBRVQsR0FBRyxPQUFPZ0IsR0FBR3FCLEVBQUV1QixLQUFLNUMsR0FBR3FCLEVBQUUsU0FBU2srRCxHQUFHOS9ELEdBQUcsUUFBRyxJQUFTczlELEdBQUcsT0FBT0EsR0FBRyxRQUFHLElBQVN0OUQsRUFBRSsvRCxXQUFXLENBQUMsSUFBSW4rRCxFQUFFNUIsRUFBRW9JLGFBQWEsYUFBYSxHQUFHeEcsRUFBRTVCLEVBQUUrL0QsV0FBV24rRCxNQUFNLENBQUMsR0FBRyxNQUFNQSxHQUFHQSxFQUFFLGFBQWE1QixFQUFFMjVDLFVBQVUzNUMsRUFBRXdlLFFBQVFuWixXQUFXckYsRUFBRXFGLHNCQUFzQjBxRCxTQUFTLGVBQWVudUQsRUFBRUEsRUFBRWtVLFlBQVlzMkIsT0FBT2hnQyxNQUFNLE1BQU0sR0FBR3hLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSXJCLEVBQUUsYUFBYVAsRUFBRTI1QyxVQUFVMzVDLEVBQUV3ZSxRQUFRblosV0FBV3JGLEVBQUVxRixXQUFXOUUsRUFBRW1GLFdBQVdkLFlBQVlyRSxHQUFHUCxFQUFFKy9ELFdBQVduK0QsR0FBRyxPQUFPNUIsRUFBRSsvRCxZQUFZLEdBQUcsU0FBU0MsR0FBR2hnRSxHQUFHLFFBQVEsTUFBTUEsT0FBRSxJQUFTQSxFQUFFLEdBQUdBLEtBQUtvK0QsTUFBTVQsR0FBRyxXQUFXMzlELEVBQUUsVUFBVUEsR0FBRyxTQUFTaWdFLE1BQU0sU0FBU0MsR0FBR2xnRSxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUUsR0FBR3FDLEVBQUUyRixXQUFXK3hDLEtBQUtXLGNBQWMxNUMsRUFBRXFCLEdBQUdyQyxFQUFFLGFBQWFxQyxFQUFFKzNDLFdBQVcvM0MsRUFBRTRjLFNBQVM1YyxFQUFFdStELFVBQVV2K0QsR0FBRytDLFdBQVcvQyxFQUFFNmIsVUFBVTdiLEVBQUUrQyxXQUFXLElBQUkvQyxFQUFFLEVBQUVBLEVBQUVyQyxFQUFFMEMsT0FBT0wsSUFBSXMrRCxHQUFHbGdFLEVBQUVULEVBQUVxQyxHQUFHckIsR0FBRyxTQUFTNi9ELEdBQUdwZ0UsRUFBRTRCLEVBQUVyQixHQUFHLEdBQUdxQixFQUFFLEdBQUc1QixFQUFFNHRDLFVBQVVydEMsR0FBR1AsRUFBRTR0QyxVQUFVdHBDLE9BQU8sZUFBZXRFLEVBQUU0dEMsVUFBVXRwQyxPQUFPMUMsS0FBSzVCLEVBQUU0dEMsVUFBVTN2QixJQUFJLGVBQWVqZSxFQUFFNHRDLFVBQVUzdkIsSUFBSXJjLFNBQVMsR0FBRzVCLEVBQUVvSSxhQUFhLENBQUMsSUFBSTdJLEVBQUVTLEVBQUVvSSxhQUFhLFNBQVM3SCxFQUFFaEIsR0FBR2lnRSxHQUFHeC9ELEVBQUU0QixFQUFFckMsRUFBRTBMLFFBQVEsY0FBYyxJQUFJQSxRQUFRckosRUFBRSxLQUFLNDlELEdBQUd4L0QsR0FBR1QsRUFBRUEsRUFBRSxJQUFJLElBQUksZUFBZXFDLElBQUksU0FBU3krRCxHQUFHcmdFLEVBQUU0QixFQUFFckIsR0FBRzIvRCxHQUFHSSxHQUFHdGdFLEdBQUcsU0FBU0EsR0FBR29nRSxHQUFHcGdFLEVBQUU0QixHQUFFLEdBQUl3K0QsR0FBR3BnRSxFQUFFTyxNQUFNLFNBQVNnZ0UsR0FBR3ZnRSxFQUFFNEIsR0FBR3MrRCxHQUFHSSxHQUFHdGdFLEdBQUcsU0FBU0EsR0FBR29nRSxHQUFHcGdFLEVBQUU0QixHQUFHLElBQUcsTUFBTyxTQUFTaW5CLEdBQUc3b0IsRUFBRTRCLEVBQUVyQixFQUFFaEIsRUFBRVQsR0FBRyxJQUFJYyxFQUFFMGdFLEdBQUcsTUFBTSxNQUFNeGhFLE9BQUUsSUFBU0EsRUFBRSxHQUFHQSxLQUFxQ0EsRUFBaEM2K0QsSUFBSSxnQkFBVyxJQUFTcCtELEVBQUUsR0FBR0EsR0FBS3EvRCxHQUFHaDlELEVBQUVyQixHQUFLLFNBQVNQLEVBQUU0QixFQUFFckIsRUFBRWhCLEVBQUVULEdBQUcsSUFBSWMsRUFBRTRnRSxHQUFHamdFLEVBQUVoQixHQUFHLE9BQU9nQixFQUFFQSxFQUFFLElBQUlBLEVBQUUsR0FBR3ErRCxHQUFHaDlELEdBQUcsU0FBU0EsR0FBR0EsRUFBRXpDLElBQUl5QyxFQUFFMkcsU0FBUzNHLEVBQUUwRSxFQUFFbTZELEdBQUd6Z0UsRUFBRTRCLEVBQUU1QixFQUFFaU8sRUFBRTFOLEVBQUVYLEdBQUdnQyxFQUFFekMsR0FBRSxHQUFJTCxHQUFHQSxFQUFFOEMsRUFBRXJCLEVBQUVYLE1BQTlILENBQXFJQSxFQUFFZ0MsR0FBRzVCLEVBQUUwL0QsR0FBRzEvRCxJQUFJMGMsR0FBRzFjLEVBQUU0L0QsR0FBR3IvRCxHQUFHLFFBQVF6QixFQUFFc3RDLE9BQU8sU0FBU28wQixHQUFHeGdFLEVBQUU0QixHQUFHLE9BQU9BLEVBQUUsT0FBTzVCLEVBQUUsSUFBSUEsRUFBRSxTQUFTeWdFLEdBQUd6Z0UsRUFBRTRCLEVBQUVyQixFQUFFaEIsRUFBRVQsR0FBRyxJQUFJYyxFQUFFaWdFLEdBQUdqK0QsRUFBRTJHLFVBQVUsSUFBSXkyRCxHQUFHcDlELEdBQUcsQ0FBQ0EsRUFBRSxFQUFFLElBQUksSUFBSW9NLEVBQUVwTyxFQUFFcUMsT0FBT3BCLE9BQUUsRUFBT2UsRUFBRW9NLElBQUluTixFQUFFakIsRUFBRWdDLElBQUlBLElBQUloQyxFQUFFZ0MsR0FBR3JCLEVBQUV0QixLQUFLZSxFQUFFYSxFQUFFdEIsRUFBRVQsR0FBRyxPQUFPYyxFQUFFdUUsUUFBUSxTQUFTbkUsR0FBRyxRQUFRQSxLQUFLb0UsS0FBSyxLQUFLLFNBQVNzOEQsR0FBRzFnRSxHQUFHLE9BQU9BLEVBQUVpTCxRQUFRMDFELElBQUksU0FBUzNnRSxFQUFFNEIsRUFBRXJCLEdBQUcsT0FBTyxFQUFFQSxFQUFFeUcsUUFBUSxLQUFLekcsRUFBRUEsRUFBRTBLLFFBQVEsTUFBTSxRQUFRLEVBQUUxSyxFQUFFeUcsUUFBUSxTQUFTekcsRUFBRUEsRUFBRTBLLFFBQVEsT0FBTyxNQUFNLElBQUlySixFQUFFLElBQUlyQixFQUFFLE9BQU8sU0FBU3FnRSxHQUFHNWdFLEVBQUU0QixHQUFHNUIsRUFBRUEsRUFBRW9NLE1BQU0sYUFBYSxJQUFJLElBQUk3TCxFQUFFLEdBQUdoQixFQUFFLEVBQUVBLEVBQUVTLEVBQUVpQyxPQUFPMUMsSUFBSSxHQUFHLEdBQUdBLEVBQUUsRUFBRWdCLEVBQUU0QyxLQUFLbkQsRUFBRVQsUUFBUSxDQUFDLElBQUlULEVBQUVrQixFQUFFVCxHQUFHLEtBQUtULEdBQUdTLElBQUlTLEVBQUVpQyxPQUFPLEtBQUtuRCxFQUFFQSxFQUFFc04sTUFBTSxNQUFNLElBQUl4SyxFQUFFckIsRUFBRTRDLEtBQUtyRSxFQUFFc0YsS0FBSyxPQUFPLE9BQU83RCxFQUFFNkQsS0FBSyxJQUFJLFNBQVN5OEQsR0FBRzdnRSxHQUFHLFVBQVVBLEVBQUV1SSxXQUFXdkksRUFBRXVJLFNBQVMsUUFBUTAzRCxHQUFHdi9ELFVBQVV1TixFQUFFLFNBQVNqTyxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEdBQUUsRUFBR1MsRUFBRUEsRUFBRW9zQyxPQUFPLElBQUl0dEMsRUFBRTZoRSxHQUFHcnZELEtBQUt0UixHQUFHbEIsSUFBSWtCLEVBQUUwZ0UsR0FBRzFnRSxFQUFFQSxFQUFFaUwsUUFBUTAxRCxJQUFJLFNBQVMzZ0UsRUFBRTRCLEVBQUVyQixHQUFHLE1BQU0sSUFBSXFCLEVBQUUsSUFBSXJCLEVBQUUwSyxRQUFRLE1BQU0sSUFBSSxTQUFTLElBQUlyTCxFQUFFa2hFLEdBQUd4dkQsS0FBS3RSLEdBQUcsR0FBR0osRUFBRSxDQUFDLElBQUlvTyxFQUFFLFNBQVNoTyxHQUFHLElBQUksSUFBSTRCLEVBQUVyQixFQUFFLEdBQUdxQixFQUFFNUIsRUFBRTRRLE1BQU1rd0QsS0FBSyxDQUFDLElBQUl2aEUsRUFBRXFDLEVBQUVnQixNQUFNOUQsRUFBRXlnRSxHQUFHdi9ELEVBQUVULEdBQUcsSUFBSSxJQUFJVCxFQUFFLE1BQU1nRixNQUFNbEMsRUFBRXdTLE1BQU0seUJBQXlCeFMsRUFBRTVCLEVBQUU0RyxNQUFNckgsRUFBRVQsRUFBRSxHQUFHa0IsRUFBRUEsRUFBRWlMLFFBQVFySixFQUFFLEtBQUtyQixFQUFFNEMsS0FBS3ZCLEdBQUcsTUFBTSxDQUFDbS9ELEdBQUcvZ0UsRUFBRStMLFFBQVF4TCxHQUE1TCxDQUFnTVAsR0FBR0EsRUFBRWdPLEVBQUUreUQsR0FBRy95RCxFQUFFQSxFQUFFakMsUUFBUSxPQUFPL0wsR0FBR0EsRUFBRUEsRUFBRWlMLFFBQVErMUQsR0FBRyxhQUFhLzFELFFBQVFnMkQsSUFBSSxTQUFTamhFLEVBQUVsQixFQUFFYyxHQUFHLE9BQU9MLElBQUlTLEVBQUUsU0FBU0EsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBRyxJQUFJVCxFQUFFa0IsRUFBRWdILFFBQVEsYUFBYSxHQUFHLEdBQUdoSCxFQUFFZ0gsUUFBUSxTQUFTaEgsRUFBRSxTQUFTQSxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRVAsRUFBRTRRLE1BQU1zd0QsSUFBSSxPQUFPM2dFLEVBQUVBLEdBQUdBLEVBQUUsR0FBRzZyQyxRQUFRLElBQUk3ckMsRUFBRSxHQUFHcVEsTUFBTXV3RCxJQUFJbmhFLEVBQUVpTCxRQUFRaTJELElBQUksU0FBU2xoRSxFQUFFTyxFQUFFaEIsR0FBRyxPQUFPcUMsRUFBRXJDLEtBQUtnQixFQUFFNkwsTUFBTSswRCxJQUFJLEtBQUt2L0QsRUFBRXJCLEVBQUUsbUJBQW1CUCxFQUFFaUwsUUFBUSxRQUFRckosR0FBbEwsQ0FBc0w1QixFQUFFVCxHQUFHLElBQUlULElBQUlrQixFQUFFTyxFQUFFcWdFLEdBQUc1Z0UsRUFBRU8sR0FBR1AsR0FBR08sR0FBRSxFQUFHLEdBQUd6QixJQUFJOEMsRUFBRSxHQUFHckIsR0FBRSxHQUFJQSxFQUFFLENBQUMsSUFBSVgsR0FBRSxFQUFHVyxJQUFJUCxFQUFFQSxFQUFFaUwsUUFBUW0yRCxJQUFJLFNBQVNwaEUsRUFBRTRCLEdBQUcsTUFBTSxNQUFNQSxNQUFNLE1BQU0sQ0FBQzdCLE1BQU1DLEVBQUVxaEUsR0FBR3ovRCxFQUFFcWtCLEtBQUtybUIsR0FBNVksQ0FBZ1pBLEVBQUVkLEVBQUU4QyxFQUFFckIsR0FBR2hCLEVBQUVBLEdBQUdTLEVBQUVpbUIsS0FBS25uQixFQUFFa0IsRUFBRXFoRSxHQUFHemhFLEVBQUVJLEVBQUVELE9BQU9qQixFQUFFYyxLQUFLQSxJQUFJSSxFQUFFLFNBQVNBLEVBQUU0QixHQUFHLElBQUlyQixFQUFFUCxFQUFFb00sTUFBTSxLQUFLLE9BQU94SyxFQUFFMC9ELFFBQVEsU0FBU3RoRSxFQUFFNEIsRUFBRXJDLEdBQUcsT0FBT1MsRUFBRTRCLEVBQUVyQixFQUFFaEIsRUFBRSxLQUFLZ0IsRUFBRSxJQUF4RixDQUE2RlAsRUFBRWdPLElBQUlsUCxJQUFJa0IsRUFBRTBnRSxHQUFHMWdFLElBQUlBLEVBQUVpTCxRQUFRczJELElBQUksU0FBU3ZoRSxFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHLE1BQU0sU0FBU2dCLEVBQUUsTUFBTXFCLEVBQUVyQyxFQUFFLEtBQUtxQyxFQUFFLFNBQVNyQixFQUFFLEtBQUtoQixNQUFNMGdFLEdBQUd2L0QsVUFBVXZCLEVBQUUsU0FBU2EsR0FBRyxPQUFPQSxFQUFFNFEsTUFBTSxTQUFTLEdBQUc1USxFQUFFNFEsTUFBTSxhQUFhckssS0FBSzBILEVBQUVqTyxFQUFFLHNCQUFzQjRnRSxHQUFHNWdFLEVBQUVvc0MsT0FBTyx1QkFBdUJ4c0MsRUFBRUosT0FBTzYzQyxpQkFBaUI0b0IsR0FBR3YvRCxVQUFVLENBQUNzTixFQUFFLENBQUM4VyxjQUFhLEVBQUdwbEIsWUFBVyxFQUFHQyxJQUFJLFdBQVcsTUFBTSxrQkFBa0IsSUFBSWdoRSxHQUFHLDBCQUEwQk0sR0FBRyx5Q0FBeUNFLEdBQUcsVUFBVUgsR0FBRyxlQUFlRSxHQUFHLDJDQUEyQ0UsR0FBRyxpREFBaURHLEdBQUcsZ0NBQWdDVCxHQUFHLHVDQUF1Q1IsR0FBRyxJQUFJTCxHQUFHLFNBQVN1QixHQUFHeGhFLEVBQUU0QixFQUFFckIsRUFBRWhCLEVBQUVULEdBQUd5SCxLQUFLdzBDLEVBQUUvNkMsR0FBRyxLQUFLdUcsS0FBSzBILEVBQUVyTSxHQUFHLEtBQUsyRSxLQUFLazdELEdBQUdsaEUsR0FBRyxHQUFHZ0csS0FBS2kwQyxFQUFFLEtBQUtqMEMsS0FBS3kzRCxTQUFTbC9ELEdBQUcsR0FBR3lILEtBQUtxNUQsR0FBR3JnRSxHQUFHLEdBQUdnSCxLQUFLeUgsRUFBRXpILEtBQUtzMUMsRUFBRXQxQyxLQUFLNHlDLEVBQUUsS0FBSyxTQUFTdW9CLEdBQUcxaEUsR0FBRyxPQUFPQSxFQUFFQSxFQUFFMmhFLFlBQVksS0FBSyxTQUFTQyxHQUFHNWhFLEVBQUU0QixHQUFHLE9BQU81QixFQUFFMmhFLFlBQVkvL0QsRUFBRSxTQUFTaWdFLEdBQUc3aEUsR0FBRyxJQUFJNEIsRUFBRTJFLEtBQUt3RixTQUFTeEYsS0FBSytOLGlCQUFpQi9OLEtBQUtpTyxvQkFBb0JqTyxLQUFLbU8sbUJBQW1Cbk8sS0FBS2tPLGtCQUFrQmxPLEtBQUtnTyxzQkFBc0IsT0FBTzNTLEdBQUdBLEVBQUUzQyxLQUFLc0gsS0FBS3ZHLEdBQUd3aEUsR0FBRzlnRSxVQUFVdkIsRUFBRSxXQUFXLE9BQU9vSCxLQUFLdzBDLEdBQUd5bUIsR0FBRzlnRSxVQUFVb2hFLGVBQWVOLEdBQUc5Z0UsVUFBVXZCLEVBQUUsSUFBSTRpRSxHQUFHLGVBQWVDLEdBQUcveUIsVUFBVUMsVUFBVXQrQixNQUFNLFdBQVcsU0FBU3F4RCxNQUFNLFNBQVNDLEdBQUdsaUUsR0FBRyxJQUFJQSxFQUFFNGUsRUFBRSxDQUFDLElBQUloZCxFQUFFLEdBQUdyQixFQUFFLEdBQUc0aEUsR0FBR25pRSxFQUFFTyxLQUFLcUIsRUFBRTA2QyxFQUFFLzdDLEVBQUVQLEVBQUVxOEQsTUFBTSxNQUFNejZELEVBQUU0QyxRQUFReEUsRUFBRXU4RCxjQUFjdHhELFFBQVF5ekQsR0FBRyxJQUFJenpELFFBQVFvekQsR0FBRyxJQUFJcitELEVBQUU0ZSxFQUFFaGQsR0FBRyxTQUFTdWdFLEdBQUduaUUsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVQLEVBQUU0ZSxFQUFFLElBQUlyZSxFQUFFLENBQUNBLEVBQUVQLEVBQUV1OEQsY0FBYyxJQUFJLElBQUloOUQsRUFBRVMsRUFBRXErRCxHQUFHcHRELEtBQUsxUSxJQUFJLGFBQWFoQixHQUFHUyxFQUFFLElBQUlBLEVBQUUsSUFBSW9zQyxTQUFTLFVBQVU3c0MsSUFBSXFDLEVBQUU1QixFQUFFLEdBQUdvc0MsUUFBUTdzQyxHQUFHQSxHQUFFLEVBQUcsT0FBT0EsRUFBRSxHQUFHZ0IsRUFBRSs3QyxFQUFFLE9BQU85OEMsT0FBT2k1QyxPQUFPNzJDLEVBQUVyQixFQUFFKzdDLElBQUcsRUFBRyxTQUFTOGxCLEdBQUdwaUUsRUFBRTRCLEVBQUVyQixHQUFHLE9BQU9xQixJQUFJQSxFQUFFLEdBQUdBLEVBQUVvRixRQUFRLEtBQUtxN0QsR0FBR3JpRSxFQUFFNEIsRUFBRXJCLEdBQUcsU0FBU1AsRUFBRTRCLEVBQUVyQixHQUFHLElBQUloQixFQUFFcUMsRUFBRW9GLFFBQVEsUUFBUSxJQUFJLElBQUl6SCxFQUFFLE9BQU9nQixFQUFFcUIsRUFBRSxHQUFHLEdBQUcsSUFBSSxJQUFJOUMsRUFBRXlnRSxHQUFHMzlELEVBQUVyQyxFQUFFLEdBQUdLLEVBQUVnQyxFQUFFK3ZDLFVBQVVweUMsRUFBRSxFQUFFVCxHQUFHLE9BQU9TLEVBQUVxQyxFQUFFK3ZDLFVBQVUsRUFBRXB5QyxHQUFHcUMsRUFBRTVCLEVBQUU0QixFQUFFK3ZDLFVBQVU3eUMsRUFBRSxHQUFHeUIsSUFBSSxLQUFLekIsRUFBRWMsRUFBRW9ILFFBQVEsTUFBTXpHLEVBQUVoQixFQUFFSyxFQUFFd3NDLE9BQU8sR0FBR3hxQyxHQUFHckIsRUFBRWhCLEVBQUVLLEVBQUUreEMsVUFBVSxFQUFFN3lDLEdBQUdzdEMsT0FBT3hzQyxFQUFFK3hDLFVBQVU3eUMsRUFBRSxHQUFHc3RDLE9BQU94cUMsR0FBN1AsQ0FBaVFBLEdBQUcsU0FBU0EsRUFBRXJDLEVBQUVULEVBQUVjLEdBQUcsT0FBT0wsSUFBSUEsRUFBRTZpRSxHQUFHcGlFLEVBQUVPLEVBQUVoQixHQUFHZ0IsS0FBSyxZQUFZaEIsRUFBRSx1QkFBdUJBLElBQUlBLEVBQUUsV0FBV0EsRUFBRTZpRSxHQUFHcGlFLEVBQUVPLEVBQUV6QixJQUFJQSxFQUFFeUIsSUFBSXpCLEVBQUU4QyxHQUFHckMsR0FBRyxJQUFJSyxHQUFHZ0MsRUFBRWhDLE1BQU1nQyxHQUFHQSxFQUFFd3FDLFFBQVEsR0FBRyxTQUFTaTJCLEdBQUdyaUUsRUFBRTRCLEVBQUVyQixHQUFHcUIsRUFBRUEsRUFBRXdLLE1BQU0sS0FBSyxJQUFJLElBQUk3TSxFQUFFVCxFQUFFYyxFQUFFLEVBQUVBLEVBQUVnQyxFQUFFSyxPQUFPckMsSUFBSSxHQUFHTCxFQUFFcUMsRUFBRWhDLEdBQUcsQ0FBQyxHQUFHMCtELEdBQUdnRSxVQUFVLEVBQUV4akUsRUFBRXcvRCxHQUFHcnRELEtBQUsxUixHQUFHQSxFQUFFNmlFLEdBQUdwaUUsRUFBRU8sRUFBRXpCLEVBQUUsSUFBSXlCLFFBQVEsSUFBSSxLQUFLekIsRUFBRVMsRUFBRXlILFFBQVEsTUFBTSxDQUFDLElBQUlnSCxFQUFFek8sRUFBRW95QyxVQUFVN3lDLEdBQUdrUCxFQUFFbzBELEdBQUdwaUUsRUFBRWdPLEVBQUVBLEVBQUVvK0IsT0FBTzdyQyxJQUFJeU4sRUFBRXpPLEVBQUVBLEVBQUVveUMsVUFBVSxFQUFFN3lDLEdBQUdrUCxFQUFFcE0sRUFBRWhDLEdBQUdMLEdBQUdBLEVBQUV1OUQsWUFBWSxPQUFPdjlELEVBQUUwQyxPQUFPLEVBQUUxQyxFQUFFcUgsTUFBTSxHQUFHLEdBQUdySCxHQUFHLEdBQUcsT0FBT3FDLEVBQUV3QyxLQUFLLEtBQTA3QyxTQUFTbStELEdBQUd2aUUsR0FBRyxPQUFPLFNBQVM0QixHQUFHLE9BQU9BLEVBQUVxSixRQUFRakwsRUFBRWpCLEVBQUVpQixFQUFFZ08sSUFBSSxTQUFTdzBELEdBQUd4aUUsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVraUUsR0FBR2xqRSxFQUFFdS9ELEdBQUc5K0QsR0FBR0EsRUFBRThWLFlBQVk4b0QsR0FBR3IvRCxHQUFHLFNBQVNTLEdBQUcsSUFBSVQsRUFBRVMsRUFBRXdFLFFBQVF4RSxFQUFFdThELGNBQWN2OEQsRUFBRTRlLEdBQUc1ZSxFQUFFNGUsRUFBRXBhLFVBQVVqRixFQUFFQSxFQUFFMEwsUUFBUXN5RCxHQUFHLElBQUl0eUQsUUFBUXV5RCxHQUFHLElBQUl4OUQsRUFBRXdFLFFBQVE2OUQsR0FBRzloRSxFQUFFaEIsRUFBRXFDLE9BQU9oQyxFQUFFSixPQUFPNjNDLGlCQUFpQjRxQixHQUFHdmhFLFVBQVUsQ0FBQ3NOLEVBQUUsQ0FBQzhXLGNBQWEsRUFBR3BsQixZQUFXLEVBQUdDLElBQUksV0FBVyxNQUFNLGNBQWMsSUFBSThpRSxHQUFHLElBQUlSLEdBQUdTLEdBQUcsR0FBR0MsR0FBRzFoRSxPQUFPKzFDLGVBQWUsR0FBRzJyQixLQUFLaEYsS0FBS00sR0FBRyxDQUFDLElBQUkyRSxHQUFHRCxHQUFHMXJCLE9BQU8wckIsR0FBRzFyQixPQUFPLFNBQVNqM0MsRUFBRTRCLEVBQUVyQixHQUFHbWlFLEdBQUcxaUUsS0FBSzBpRSxHQUFHMWlFLEdBQUdxL0QsR0FBR3IvRCxJQUFJNGlFLEdBQUczakUsS0FBSzBqRSxHQUFHM2lFLEVBQUU0QixFQUFFckIsSUFBSSxTQUFTc2lFLEtBQUt0OEQsS0FBS3FMLE1BQU0sR0FBRyxTQUFTa3hELE1BQU1ELEdBQUduaUUsVUFBVXFpRSxNQUFNLFNBQVMvaUUsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBRyxJQUFJVCxFQUFFeUgsS0FBS3FMLE1BQU01UixJQUFJLEdBQUdsQixFQUFFcUUsS0FBSyxDQUFDbTVDLEVBQUUxNkMsRUFBRW9oRSxhQUFhemlFLEVBQUVzN0MsRUFBRXQ4QyxJQUFJLElBQUlULEVBQUVtRCxRQUFRbkQsRUFBRWdULFFBQVF2TCxLQUFLcUwsTUFBTTVSLEdBQUdsQixHQUFHLElBQUlta0UsR0FBRyxJQUFJejBELE9BQU84eEQsR0FBR3R5RCxFQUFFLGlCQUFpQixTQUFTazFELEdBQUdsakUsR0FBRyxPQUFPQSxHQUFHQSxFQUFFNHRDLFdBQVc1dEMsRUFBRTR0QyxVQUFVN3RDLE1BQU1DLEVBQUU0dEMsVUFBVTd0QyxNQUFNQyxFQUFFb0ksYUFBYSxVQUFVLElBQUl3SSxNQUFNcXlELEtBQUtqakUsRUFBRSxHQUFHLEdBQUcsU0FBU21qRSxHQUFHbmpFLEdBQUcsSUFBSTRCLEVBQUU2OUQsR0FBR3ovRCxHQUFHMm1CLGNBQWMsT0FBTy9rQixJQUFJNUIsR0FBRzRCLElBQUk1QixFQUFFZ1IsY0FBYyxJQUFJaFIsRUFBRTRCLEVBQUVra0MsTUFBTTQ1QixHQUFHMS9ELEdBQUcwYyxHQUFHLEdBQUcsU0FBUzBtRCxHQUFHcGpFLEdBQUcsSUFBSSxJQUFJNEIsRUFBRSxFQUFFQSxFQUFFNUIsRUFBRWlDLE9BQU9MLElBQUksQ0FBQyxJQUFJckIsRUFBRVAsRUFBRTRCLEdBQUcsR0FBR3JCLEVBQUVlLFNBQVNKLFNBQVNrUyxpQkFBaUI3UyxFQUFFZSxTQUFTSixTQUFTUyxLQUFLLElBQUksSUFBSXBDLEVBQUUsRUFBRUEsRUFBRWdCLEVBQUV3L0MsV0FBVzk5QyxPQUFPMUMsSUFBSSxDQUFDLElBQUlULEVBQUV5QixFQUFFdy9DLFdBQVd4Z0QsR0FBRyxHQUFHVCxFQUFFeUksV0FBVyt4QyxLQUFLVyxhQUFhLENBQUMsSUFBSXI2QyxFQUFFZCxFQUFFNm5CLGNBQWMzWSxFQUFFazFELEdBQUdwa0UsR0FBRyxHQUFHa1AsR0FBR3BPLElBQUlkLEVBQUVrUyxnQkFBZ0IsVUFBVWxTLEVBQUU2NkMsV0FBVyxhQUFhNzZDLEVBQUU2NkMsV0FBVyxLQUFLbW1CLEdBQUdoaEUsSUFBSXloRSxHQUFHemhFLEVBQUVrUCxRQUFRLEdBQUdwTyxhQUFhZytDLFdBQVcsS0FBS2grQyxFQUFFdWpFLEdBQUdya0UsTUFBTWtQLEdBQUdxeUQsR0FBR3ZoRSxFQUFFa1AsRUFBRXBPLEdBQUdkLEVBQUVtQyxPQUFPMDdDLFNBQVNtWSxjQUFjcGpELGlCQUFpQnpTLEtBQUtILEVBQUUsU0FBU3doRSxHQUFHdHlELEVBQUUsS0FBS0EsRUFBRSxFQUFFQSxFQUFFbFAsRUFBRW1ELE9BQU8rTCxJQUFJLENBQUMsSUFBSW5OLEVBQUVzaUUsR0FBR3ZqRSxFQUFFZCxFQUFFa1AsSUFBSW5OLEdBQUd1L0QsR0FBR3hnRSxFQUFFaUIsT0FBTyxLQUFLODhELElBQUkxOEQsT0FBTzA3QyxVQUFVMTdDLE9BQU8wN0MsU0FBUytYLHVCQUF1QixDQUFDLElBQUkyTyxHQUFHLElBQUlob0IsaUJBQWlCK25CLElBQUlFLEdBQUcsU0FBU3RqRSxHQUFHcWpFLEdBQUcvbkIsUUFBUXQ3QyxFQUFFLENBQUMyNkQsV0FBVSxFQUFHQyxTQUFRLEtBQU0sR0FBRzM1RCxPQUFPKzFDLGlCQUFpQi8xQyxPQUFPKzFDLGVBQWVHLDBCQUEwQm1zQixHQUFHcGlFLGNBQWMsQ0FBQyxJQUFJcWlFLEdBQUcsV0FBV0QsR0FBR3BpRSxTQUFTeW1CLE9BQU8xbUIsT0FBT3VpRSxZQUFZdmlFLE9BQU91aUUsWUFBWUMsVUFBVUYsSUFBSWxwQyx1QkFBdUIsV0FBVyxHQUFHLFlBQVluNUIsU0FBU3dpQixXQUFXLENBQTJFeGlCLFNBQVN1UyxpQkFBaUIsb0JBQTlGLFNBQUZ6VCxJQUFhdWpFLEtBQUtyaUUsU0FBU29pQixvQkFBb0IsbUJBQW1CdGpCLFdBQXlEdWpFLFFBQVFULEdBQUcsV0FBV00sR0FBR0MsR0FBR2xqQixnQkFBZ0IsSUFBSXVqQixHQUFHLEdBQUdDLEdBQUd6b0IsUUFBUWw4QixVQUFVLFNBQVM0a0QsR0FBRzVqRSxJQUFJQSxFQUFFMGpFLEdBQUcxakUsTUFBTUEsRUFBRTZqRSx5QkFBeUI3akUsRUFBRTZqRSwwQkFBMEIsRUFBRTdqRSxFQUFFOGpFLDRCQUE0QjlqRSxFQUFFOGpFLDZCQUE2QixFQUFFOWpFLEVBQUUrakUsdUJBQXVCL2pFLEVBQUUrakUsdUJBQXVCLEdBQUcsR0FBRyxTQUFTQyxHQUFHaGtFLEdBQUcsT0FBT0EsRUFBRTZqRSwyQkFBMkI3akUsRUFBRStqRSxzQkFBc0IsSUFBSUUsR0FBRyxHQUFHQyxHQUFHLElBQUlyQixHQUFHLFNBQVNzQixLQUFLNTlELEtBQUtxeEMsRUFBRSxHQUFHcnhDLEtBQUtwSCxFQUFFK0IsU0FBU2tTLGdCQUFnQixJQUFJcFQsRUFBRSxJQUFJbzhELEdBQUdwOEQsRUFBRXE4RCxNQUFNLEdBQUc5MUQsS0FBS3hILEVBQUU2aUUsR0FBR3I3RCxLQUFLcEgsRUFBRSxJQUFJcWlFLEdBQUd4aEUsSUFBSXVHLEtBQUs4eEMsR0FBRSxFQUFHOXhDLEtBQUt5SCxFQUFFekgsS0FBSzBILEVBQUUsS0FBSyxTQUFTbTJELEdBQUdwa0UsR0FBRyxJQUFJNEIsRUFBRTg5RCxHQUFHMS9ELEdBQUdPLEVBQUVxQixFQUFFOGEsR0FBRzlhLEVBQUVBLEVBQUVnK0QsR0FBRyxJQUFJcmdFLEVBQUVtakUsR0FBR25pRSxJQUFJLEtBQUt6QixFQUFFNGtFLEdBQUduakUsR0FBRyxHQUFHekIsRUFBRSxPQUFPOGlFLEdBQUc1aEUsRUFBRTRCLEVBQUUsSUFBSTQvRCxHQUFHamhFLEVBQUV6QixFQUFFdWxFLFVBQVU5a0UsRUFBRVQsRUFBRWtQLEVBQUVwTSxFQUFFOUMsRUFBRWdoRSxHQUFHaGhFLEtBQUs4QyxFQUFFLFNBQVMwaUUsR0FBR3RrRSxHQUFHLElBQUlBLEVBQUVpTyxHQUFHaE4sT0FBT21wRCxVQUFVbnBELE9BQU9tcEQsU0FBU21hLFVBQVUsQ0FBQ3ZrRSxFQUFFaU8sRUFBRWhOLE9BQU9tcEQsU0FBU21hLFVBQVV2a0UsRUFBRWlPLEVBQUV1MkQsZ0JBQWdCWixHQUFHLElBQUloaUUsR0FBRSxPQUFRQSxHQUFFLEVBQUcsT0FBTyxTQUFTNUIsSUFBSUEsRUFBRWdPLEdBQUcvTSxPQUFPbXBELFVBQVVucEQsT0FBT21wRCxTQUFTcWEsdUJBQXVCemtFLEVBQUVnTyxFQUFFL00sT0FBT21wRCxTQUFTcWEscUJBQXFCemtFLEVBQUVnTyxFQUFFMDJELGtCQUFrQixTQUFTOWlFLEdBQUc1QixFQUFFMmtFLEdBQUcvaUUsSUFBSTVCLEVBQUVnTyxFQUFFNDJELGlCQUFpQixXQUFXdnFDLHVCQUF1QixZQUFZcjZCLEVBQUVnTyxFQUFFNjJELFVBQVU3a0UsRUFBRXE0QyxJQUFJcjRDLEVBQUU4a0UseUJBQXZQLENBQWlSOWtFLEdBQUc0QixFQUFFLFNBQVNtakUsR0FBRy9rRSxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSWhCLEVBQUVtZ0UsR0FBRzk5RCxHQUFHOGEsR0FBRyxHQUFHbmMsRUFBRWk2QyxFQUFFLENBQUMsSUFBSTE3QyxFQUFFYyxFQUFFVyxFQUFFaTZDLEVBQUUsSUFBSTE3QyxLQUFLYyxFQUFFLE9BQU9kLEVBQUU4QyxFQUFFMEIsTUFBTTBoRSxlQUFlbG1FLEdBQUc4QyxFQUFFMEIsTUFBTTgwQixZQUFZdDVCLEVBQUVjLEVBQUVkLE1BQU1jLEVBQUU4akUsR0FBR25rRSxLQUFLcUMsSUFBSTVCLEVBQUViLEdBQUdTLEdBQUcsS0FBS2tnRSxHQUFHbGdFLEtBQUtBLElBQUlBLEVBQUVxbEUsUUFBUWpCLEdBQUdwa0UsTUFBTW9rRSxHQUFHcGtFLElBQUlBLEVBQUVra0UsOEJBQThCbGtFLEVBQUVta0UseUJBQXlCTyxHQUFHdGtFLEdBQUdBLEVBQUVpTyxHQUFHak8sRUFBRWlPLEVBQUVpM0QsZUFBZXRsRSxFQUFFeWtFLFVBQVU5a0UsR0FBR0ssRUFBRXFsRSxPQUFPbnZELFlBQVkrUyxHQUFHam5CLEVBQUVyQixFQUFFdzZDLEdBQUcsU0FBUy82QyxHQUFHQSxFQUFFOGpFLDRCQUE0QjlqRSxFQUFFK2pFLHNCQUFzQi9qRSxFQUFFbWxFLGNBQWNubEUsRUFBRW1sRSxhQUFZLEVBQUd4QixHQUFHcmtELE1BQU0sV0FBV3RmLEVBQUU2akUseUJBQXlCN2pFLEVBQUUrakUsc0JBQXNCL2pFLEVBQUVtbEUsYUFBWSxNQUF4TCxDQUFnTXZsRSxJQUFJKzlELEtBQUszOUQsRUFBRTRCLEVBQUVzeUMsY0FBY2wwQyxFQUFFQSxFQUFFd0IsY0FBYyxZQUFZeEIsRUFBRThWLFlBQVkrUyxHQUFHam5CLEVBQUVyQixFQUFFdzZDLElBQUl4NkMsRUFBRXc2QyxFQUFFbjdDLEVBQUV5a0UsV0FBVyxTQUFTZSxHQUFHcGxFLEVBQUU0QixHQUFHLE9BQU9BLEVBQUU2OUQsR0FBRzc5RCxHQUFHK2tCLGNBQWNtZixNQUFNNDdCLEdBQUc5L0QsSUFBSXdpRSxHQUFHeGlFLEdBQUdBLEVBQUV3akUsR0FBR3BsRSxFQUFFNEIsR0FBRzVCLEVBQUViLEVBQUUsU0FBU3NpRSxHQUFHemhFLEVBQUU0QixFQUFFckIsR0FBRyxJQUFJaEIsRUFBRTZsRSxHQUFHcGxFLEVBQUU0QixHQUFHOUMsRUFBRTRpRSxHQUFHbmlFLEdBQUdLLEVBQUVkLEVBQUVxNkMsRUFBRSxJQUFJLElBQUluckMsS0FBS3pPLElBQUlTLEVBQUViLEdBQUdTLElBQUk2aEUsR0FBR3poRSxFQUFFVCxFQUFFVCxHQUFHYyxFQUFFZCxFQUFFcTZDLEdBQUduNUMsRUFBRVIsT0FBT1ksT0FBT1IsR0FBRyxNQUFNTCxFQUFudEssU0FBWVMsRUFBRTRCLEVBQUVyQixHQUFHLElBQUloQixFQUFFLEdBQUdULEVBQUUsR0FBRyxPQUFPKy9ELEdBQUdqOUQsR0FBRyxTQUFTQSxJQUFJLFNBQVM1QixFQUFFNEIsRUFBRXJCLEVBQUVoQixHQUFHLEdBQUdxQyxFQUFFZ2QsR0FBR3NqRCxHQUFHdGdFLEdBQUdBLEVBQUVnZCxFQUFFMDlCLEVBQUUsQ0FBQyxJQUFJeDlDLEVBQUU0Z0UsR0FBRzEvRCxHQUFHQSxFQUFFbEIsRUFBRTRkLEdBQUc1ZCxFQUFFQSxFQUFFOGdFLEdBQUc5Z0UsRUFBRWtCLEVBQUV3Z0UsR0FBR3hnRSxFQUFFbEIsR0FBRyxPQUFPLElBQUljLEVBQUVnQyxFQUFFNjZELGVBQWV6dUQsSUFBSXBPLEVBQUVnUixNQUFNbXhELEtBQUssU0FBU2pqRSxJQUFJLEVBQUVjLEVBQUVvSCxRQUFRLFFBQVFuRyxFQUFFLElBQUlqQixFQUFFb0gsUUFBUSxXQUFXZ0gsRUFBRSxVQUFVek4sSUFBSU0sSUFBSW1OLEVBQUVwTyxJQUFJZCxFQUFFLFFBQVFBLElBQUksSUFBSWMsRUFBRW9ILFFBQVEsVUFBVSxJQUFJcEgsRUFBRW9ILFFBQVFsSSxLQUFLa1AsR0FBR25OLEtBQUtOLEVBQUV6QixFQUFFK0IsSUFBSWUsRUFBRTBFLElBQUkxRSxFQUFFMEUsRUFBRW02RCxHQUFHSCxHQUFHMStELEVBQUUwK0QsR0FBR3J5RCxFQUFFak8sRUFBRSxJQUFJQSxFQUFFLEdBQUdsQixJQUFJeUIsRUFBRXFCLEVBQUUwRSxHQUFHeEgsR0FBR2tQLEdBQUcsU0FBU2xQLElBQUl5QixFQUFFcUIsRUFBRTBFLEdBQUcxRSxFQUFFeTJDLEdBQUc5NEMsRUFBRSxDQUFDd2hFLEdBQUd4Z0UsRUFBRThrRSxHQUFHeGtFLEVBQUV5a0UsR0FBR3QzRCxNQUF2WCxDQUE4WGhPLEVBQUU0QixFQUFFckIsR0FBRyxTQUFTQSxHQUFHc2hFLEdBQUc1aUUsS0FBS2UsRUFBRXVsRSxVQUFVdmxFLEVBQUVPLEVBQUV3Z0UsTUFBTXhnRSxFQUFFOGtFLEdBQUdsRCxHQUFHdmdFLEVBQUVyQyxHQUFHNGlFLEdBQUd2Z0UsRUFBRTlDLFNBQVMsTUFBSyxHQUFJLENBQUMwbUUsR0FBRzFtRSxFQUFFMm1FLEdBQUdsbUUsR0FBOHJKbW1FLENBQUc5akUsRUFBRXJCLEVBQUV3NkMsRUFBRXg2QyxFQUFFeTlELFVBQVVwOEQsRUFBRSxTQUFTNUIsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUUsR0FBR2hCLEVBQUUsR0FBRyxPQUFPcy9ELEdBQUc3K0QsR0FBRyxTQUFTQSxHQUFHQSxFQUFFNGUsR0FBR3NqRCxHQUFHbGlFLEdBQUcsSUFBSWxCLEVBQUVrQixFQUFFc0csR0FBR3RHLEVBQUV5OEQsZUFBZTc2RCxHQUFHNUIsRUFBRTRlLEVBQUUwOUIsR0FBR3g5QyxHQUFHK2lFLEdBQUc1aUUsS0FBSzJDLEVBQUU5QyxLQUFLcWpFLEdBQUduaUUsRUFBRU8sR0FBR1AsRUFBRUEsRUFBRTRDLE1BQU05RCxFQUFFZzNCLFNBQVM5MUIsRUFBRSxHQUFHLElBQUlULEVBQUVULElBQUlTLEVBQUVULElBQUksR0FBRyxHQUFHa0IsRUFBRSxNQUFNLE1BQUssR0FBSSxDQUFDczhDLEVBQUUvN0MsRUFBRUYsSUFBSWQsR0FBMU0sQ0FBOE1ULEVBQUVpOEMsRUFBRW41QyxHQUFHMDZDLEVBQUU5OEMsT0FBT2k1QyxPQUFPejRDLEVBQUVULEVBQUVrbUUsR0FBRzdqRSxFQUFFckMsRUFBRWltRSxJQUFJNWpFLEVBQUVyQixFQUFFaTZDLElBQUkxN0MsRUFBRThDLEVBQUVvTSxLQUFLLElBQUlsUCxLQUFLa0IsRUFBRWdPLEdBQUdsUCxHQUFHLElBQUlrUCxFQUFFeTBELEdBQUc3Z0UsRUFBRXBDLE9BQU9nOEMsb0JBQW9CeDdDLEdBQUdsQixFQUFFLEVBQUVBLEVBQUU4QyxFQUFFSyxPQUFPbkQsSUFBSWtCLEVBQUVULEVBQUVxQyxFQUFFOUMsSUFBSXNqRSxHQUFHcDBELEVBQUVoTyxFQUFFVCxHQUFHUyxHQUFHTyxFQUFFNDRDLEVBQUVuNUMsR0FBR08sRUFBRTRqRSxHQUFHempFLFdBQVd3L0MsTUFBTSxXQUFXNGlCLE1BQU12aUUsRUFBRW9sRSxHQUFHLFNBQVMzbEUsR0FBRyxPQUFPOCtELEdBQUc5K0QsSUFBSU8sRUFBRXFsRSxHQUFHLFNBQVM1bEUsR0FBRyxPQUFPNCtELEdBQUc1K0QsSUFBSU8sRUFBRXNsRSxnQkFBZ0IsU0FBUzdsRSxFQUFFNEIsRUFBRXJCLEdBQUdnRyxLQUFLdS9ELG1CQUFtQjlsRSxFQUFFNEIsR0FBRzJFLEtBQUt3L0Qsc0JBQXNCL2xFLEVBQUU0QixFQUFFckIsSUFBSUEsRUFBRXdsRSxzQkFBc0IsU0FBUy9sRSxFQUFFNEIsRUFBRXJCLEdBQUcsSUFBSVAsRUFBRWdtRSxZQUFZL0gsR0FBRyxDQUFDTixJQUFJK0UsR0FBRzlnRSxLQUFLOGdFLEdBQUc5Z0UsR0FBR3k5RCxHQUFHejlELElBQUk1QixFQUFFZ21FLFdBQVUsRUFBR2htRSxFQUFFWCxLQUFLdUMsRUFBRTVCLEVBQUUyL0QsUUFBUXAvRCxFQUFFbWpFLEdBQUc5aEUsR0FBRzVCLEVBQUUsSUFBSVQsRUFBRXVnRSxHQUFHOS9ELEdBQUdsQixFQUFFa2hFLEdBQUd6Z0UsR0FBR2dCLEVBQUUsQ0FBQ21jLEdBQUc5YSxFQUFFKzlELFFBQVFwL0QsR0FBRyxJQUFJLElBQUlYLEVBQUUsR0FBR29PLEVBQUVoTyxFQUFFd2UsUUFBUTlNLGlCQUFpQixTQUFTN1EsRUFBRSxFQUFFQSxFQUFFbU4sRUFBRS9MLE9BQU9wQixJQUFJLENBQUMsSUFBSTlCLEVBQUVpUCxFQUFFbk4sR0FBRyxHQUFHOUIsRUFBRXl6RCxhQUFhLG1CQUFtQixJQUFJbUwsR0FBRyxDQUFDLElBQUl4K0QsRUFBRUosRUFBRStXLFlBQVksSUFBSTZvRCxHQUFHOWdELElBQUkxZSxHQUFHLENBQUN3L0QsR0FBRzFnRCxJQUFJOWUsR0FBRyxJQUFJbTRDLEVBQUVwMkMsU0FBU3FDLGNBQWMsU0FBUyt6QyxFQUFFMXpDLGFBQWEsaUJBQWlCLElBQUkwekMsRUFBRXhoQyxZQUFZM1csRUFBRStCLFNBQVNTLEtBQUtvQyxZQUFZdXpDLEdBQUd2NEMsRUFBRTJHLFdBQVdkLFlBQVk3RixTQUFTYSxFQUFFdUQsS0FBS3BFLEVBQUUrVyxhQUFhL1csRUFBRTJHLFdBQVdkLFlBQVk3RixHQUFHYSxFQUFFQSxFQUFFd0UsS0FBSyxJQUFJZ29DLFFBQVE2M0IsR0FBR3JpRSxJQUFJLElBQUkwaUUsR0FBRy85RCxNQUFNekgsS0FBS2tQLEdBQUd6TyxLQUFLeU8sRUFBRXN3RCxHQUFHaHRELEtBQUsxUixJQUFJeStELEdBQUcvc0QsS0FBSzFSLEdBQUcwK0QsR0FBR2dFLFVBQVUsRUFBRWpFLEdBQUdpRSxVQUFVLEdBQUd6aEUsRUFBRTg3RCxHQUFHLzhELEdBQUdvTyxHQUFHb3dELElBQUk3M0QsS0FBSzBILEdBQUcxSCxLQUFLMEgsRUFBRWkzRCxlQUFlcmtFLEVBQUVlLEdBQUc1QixFQUFFcWtFLFVBQVV4akUsR0FBR21OLEVBQUUsR0FBR293RCxLQUFLcHdELEVBQUUsU0FBU2hPLEdBQUcsSUFBSTRCLEVBQUUsR0FBR3JCLEVBQUUsR0FBR2hCLEVBQUUsRUFBRSxJQUFJLElBQUlULEtBQUsrL0QsR0FBRzcrRCxHQUFHLFNBQVNBLEdBQUdraUUsR0FBR2xpRSxHQUFHQSxFQUFFNEMsTUFBTXJELElBQUlTLEVBQUVBLEVBQUU0ZSxFQUFFcGEsUUFBUSxJQUFJLElBQUlqRSxFQUFFQSxFQUFFZytELEdBQUd0dEQsS0FBS2pSLElBQUksQ0FBQyxJQUFJbEIsRUFBRXlCLEVBQUUsR0FBRyxNQUFNQSxFQUFFLEtBQUtxQixFQUFFOUMsSUFBRyxPQUFRLFNBQVNrQixHQUFHTyxFQUFFNEMsS0FBS25ELE1BQU1BLEVBQUVpTyxFQUFFMU4sRUFBRVAsRUFBRSxHQUFHNEIsRUFBRTVCLEVBQUVtRCxLQUFLckUsR0FBRyxPQUFPa0IsRUFBbE4sQ0FBcU5BLEVBQUVxa0UsWUFBWXIyRCxFQUFFL0wsU0FBU204RCxLQUFLdjlELEVBQUU4OEQsR0FBRzM5RCxFQUFFd2UsUUFBUSxLQUFLNWMsRUFBRThnRSxHQUFHOWdFLElBQUksS0FBS3JDLEdBQUdBLEVBQUVzcEIsR0FBR3RvQixFQUFFUCxFQUFFcWtFLFVBQVUsS0FBSzlrRSxFQUFFVCxFQUFFYyxFQUFFLEtBQUtxQyxPQUFPaTlELEdBQUczL0QsRUFBRWdCLEVBQUVtYyxHQUFHN2IsRUFBRWUsR0FBRyxLQUFLNUIsRUFBRWlsRSxPQUFPMWxFLEdBQUdTLEVBQUVnTyxFQUFFQSxJQUFJek4sRUFBRTBsRSxHQUFHLFNBQVNqbUUsRUFBRTRCLEdBQUdxaUUsR0FBR3JpRSxHQUFHNUIsRUFBRW9FLEtBQUssTUFBTTdELEVBQUV1bEUsbUJBQW1CLFNBQVM5bEUsRUFBRTRCLEdBQUcsSUFBSXE4RCxHQUFHLENBQUMsSUFBSTE5RCxFQUFFdS9ELEdBQUc5L0QsR0FBRzI5RCxJQUFJLFVBQVVwOUQsR0FBR1AsRUFBRWttRSxlQUFlbG1FLEVBQUVrbUUsY0FBYSxFQUFHLFNBQVNsbUUsRUFBRTRCLEdBQUdzK0QsR0FBR0ksR0FBR3RnRSxHQUFHLFNBQVNBLEdBQUdvZ0UsR0FBR3BnRSxFQUFFNEIsR0FBRyxPQUEzQyxDQUFtRDVCLEVBQUV3ZSxRQUFRNWMsTUFBTXJCLEVBQUV1a0Usa0JBQWtCLFdBQVcsSUFBSTdHLEdBQUcsQ0FBQyxJQUFJaitELEVBQUVza0UsR0FBRy85RCxNQUFNLEdBQUdBLEtBQUt5SCxFQUFFLENBQUMsSUFBSXBNLEVBQUUyRSxLQUFLeUgsRUFBRW00RCxnQkFBZ0IsSUFBSW5tRSxHQUFHdUcsS0FBS3lILEVBQUU2MkQsWUFBWTdFLEdBQUd6NUQsS0FBS3hILEVBQUVpL0QsVUFBVSxDQUFDLEdBQUdJLElBQUksSUFBSTczRCxLQUFLeEgsRUFBRWkvRCxTQUFTLElBQUloK0QsRUFBRSxFQUFFQSxFQUFFNEIsRUFBRUssT0FBT2pDLElBQUksQ0FBQyxJQUFJTyxFQUFFZ0csS0FBS3lILEVBQUVvNEQsdUJBQXVCeGtFLEVBQUU1QixJQUFJLEdBQUdPLEdBQUc2OUQsSUFBSTczRCxLQUFLMEgsRUFBRSxDQUFDLElBQUkxTyxFQUFFdS9ELEdBQUd2K0QsR0FBRytqRSxHQUFHLzlELE1BQU1BLEtBQUswSCxFQUFFaTNELGVBQWUzbEUsR0FBR2dCLEVBQUV1VixZQUFZOG9ELEdBQUdyL0QsU0FBUyxDQUFDLElBQUksU0FBU1MsRUFBRTRCLElBQUlBLEVBQUVBLEVBQUUySCxLQUFLLFNBQVMzSCxHQUFHLE9BQU81QixFQUFFZ08sRUFBRW80RCx1QkFBdUJ4a0UsTUFBTXVDLFFBQVEsU0FBU25FLEdBQUcsUUFBUUEsTUFBTW9LLE1BQU0sU0FBU3BLLEVBQUU0QixHQUFHLE9BQU81QixFQUFFNEIsRUFBRWdULHdCQUF3QjVVLElBQUlzNUMsS0FBSytzQiw0QkFBNEIsRUFBRXJtRSxFQUFFczVDLEtBQUtnbUIsNkJBQTZCLEVBQUUsS0FBS3QvRCxFQUFFakIsRUFBRWc4QyxFQUFFc2hCLE1BQU16NkQsRUFBRTJILEtBQUssU0FBU3ZKLEdBQUcsT0FBTzgrRCxHQUFHOStELE1BQWhTLENBQXVTdUcsS0FBSzNFLEdBQUc2L0QsR0FBR2w3RCxLQUFLQSxLQUFLcEgsRUFBRW9ILEtBQUt4SCxHQUFHaUIsRUFBRSxFQUFFQSxFQUFFNEIsRUFBRUssT0FBT2pDLEtBQUtPLEVBQUVnRyxLQUFLeUgsRUFBRW80RCx1QkFBdUJ4a0UsRUFBRTVCLE1BQU13aUUsR0FBR2ppRSxFQUFFZ0csS0FBS3hILEVBQUVvNkMsR0FBRzV5QyxLQUFLOHhDLEdBQUc5eEMsS0FBSysvRCxnQkFBZ0IvL0QsS0FBS3lILEVBQUU2MkQsVUFBUyxNQUFPdGtFLEVBQUV5aUUsYUFBYSxTQUFTaGpFLEVBQUU0QixHQUFHLEdBQUdxOEQsSUFBSSxHQUFHcjhELEVBQUUsQ0FBQzgvRCxHQUFHMWhFLElBQUk0aEUsR0FBRzVoRSxFQUFFLElBQUl3aEUsR0FBRyxPQUFPLElBQUlqaEUsRUFBRW1oRSxHQUFHMWhFLEdBQUdPLEVBQUVpNkMsRUFBRWo2QyxFQUFFaTZDLEdBQUcsR0FBR2g3QyxPQUFPaTVDLE9BQU9sNEMsRUFBRWk2QyxFQUFFNTRDLEdBQUdtakUsR0FBR3grRCxLQUFLdkcsRUFBRU8sU0FBUyxHQUFHQSxFQUFFbWhFLEdBQUcxaEUsSUFBSW9rRSxHQUFHcGtFLEdBQUcsR0FBR0EsSUFBSXVHLEtBQUtwSCxJQUFJb0gsS0FBSzh4QyxHQUFFLEdBQUl6MkMsSUFBSXJCLEVBQUVpNkMsRUFBRWo2QyxFQUFFaTZDLEdBQUcsR0FBR2g3QyxPQUFPaTVDLE9BQU9sNEMsRUFBRWk2QyxFQUFFNTRDLElBQUl3OEQsR0FBRzJHLEdBQUd4K0QsS0FBS3ZHLEVBQUVPLFFBQVEsR0FBR2dHLEtBQUsyNUMsUUFBUXVoQixHQUFHbDdELEtBQUt2RyxFQUFFTyxHQUFHQSxFQUFFa2hFLElBQUlsaEUsRUFBRWtoRSxHQUFHeC9ELE9BQU8sQ0FBQyxJQUFJMUMsRUFBRXFDLEVBQUU4OUQsR0FBRzEvRCxHQUFHMGMsR0FBRzFjLEVBQUUsQ0FBQyxHQUFHVCxFQUFFMmtFLEdBQUd0eUQsTUFBTWhRLEdBQUcsSUFBSSxJQUFJOUMsRUFBRVMsRUFBRTBDLE9BQU8sRUFBRSxHQUFHbkQsRUFBRUEsSUFBSSxDQUFDLElBQUljLEVBQUVMLEVBQUVULEdBQUc4QyxFQUFFLENBQUMsSUFBSSxJQUFJb00sRUFBRXpOLEVBQUVraEUsR0FBRzVnRSxFQUFFLEVBQUVBLEVBQUVtTixFQUFFL0wsT0FBT3BCLElBQUksQ0FBQyxJQUFJOUIsRUFBRWlQLEVBQUVuTixHQUFHLEdBQUdqQixFQUFFMDhDLEVBQUV2OUMsS0FBS3dCLEVBQUU0NEMsRUFBRXA2QyxHQUFHLENBQUNpUCxHQUFFLEVBQUcsTUFBTXBNLEdBQUdvTSxHQUFFLEVBQUcsR0FBR0EsRUFBRSxDQUFDek8sRUFBRUssRUFBRSxNQUFNSSxHQUFHVCxPQUFFLEVBQU95TyxFQUFFek8sRUFBRUEsRUFBRXlqRSxhQUFhLEtBQUtsa0UsRUFBRXlCLEVBQUVzN0MsR0FBR2o4QyxFQUFFTCxHQUFHQSxFQUFFczhDLEtBQUtqOEMsRUFBRWdDLEVBQUUsS0FBS2hDLEVBQUUyRyxLQUFLcXhDLEVBQUVoMkMsSUFBSTJFLEtBQUtxeEMsRUFBRWgyQyxJQUFJLEdBQUcsSUFBSXJCLEVBQUVzN0MsRUFBRWo4QyxFQUFFQSxFQUFFVyxFQUFFczdDLEVBQUVoN0MsRUFBRTRoRSxHQUFHNWhFLEVBQUVtTixFQUFFQSxFQUFFOEgsYUFBYSxHQUF2NFAsU0FBWTlWLEVBQUU0QixFQUFFckIsRUFBRWhCLEdBQUcsSUFBSVQsRUFBRTRnRSxHQUFHOTlELEdBQUdoQyxFQUFFNGdFLEdBQUcxaEUsRUFBRTRkLEdBQUc1ZCxFQUFFOGdFLElBQUk1eEQsRUFBRSxJQUFJUSxPQUFPLGlCQUFpQjVNLEVBQUUrOUQsUUFBUSxLQUFLLy9ELEVBQUVnSCxNQUFNLEdBQUcsR0FBRyxNQUFNaEgsR0FBRyxtQkFBbUJpQixFQUFFNmdFLEdBQUc5L0QsR0FBRzlDLEVBQUUrQixFQUFFazZDLEVBQUVsNkMsRUFBRUEsRUFBRW05RCxTQUFTLElBQUlqL0QsRUFBRSxTQUFTaUIsRUFBRTRCLEdBQUc1QixFQUFFQSxFQUFFaU8sRUFBRSxJQUFJMU4sRUFBRSxHQUFHLElBQUlvOUQsSUFBSTM5RCxFQUFFLElBQUksSUFBSVQsRUFBRSxFQUFFVCxFQUFFa0IsRUFBRVQsR0FBR0EsRUFBRVMsRUFBRWlDLE9BQU9uRCxFQUFFa0IsSUFBSVQsR0FBRyxDQUFDLElBQUlLLEVBQUVkLEVBQUVrUCxFQUFFcE0sRUFBRWhDLEVBQUViLEVBQUUsSUFBSXlQLE9BQU8sTUFBTTVPLEVBQUU4OEQsY0FBYyxZQUFZLEtBQUs5OEQsRUFBRW9PLEVBQUVwTyxFQUFFODhELGNBQWMsSUFBSTF1RCxFQUFFcE8sRUFBRTBHLEVBQUUxRyxFQUFFMEcsR0FBRzFHLEVBQUUySSxTQUFTM0ksRUFBRTJJLFNBQVMzSSxFQUFFMEcsRUFBRTJFLFFBQVFyTCxFQUFFODhELGNBQWM5OEQsRUFBRW9PLEdBQUd6TixFQUFFekIsRUFBRTQ5RCxlQUFlNkYsR0FBR3pqRSxHQUFHLE9BQU95QixFQUEzUSxDQUE4UXpCLEVBQUVTLEdBQUcsT0FBT3NwQixHQUFHam5CLEVBQUU5QyxHQUFHLFNBQVM4QyxHQUFHLElBQUk5QyxFQUFFLEdBQUcsR0FBRzhDLEVBQUVnZCxHQUFHc2pELEdBQUd0Z0UsR0FBR0EsRUFBRWdkLEVBQUVwYSxVQUFVMUYsRUFBRXVqRSxHQUFHcmlFLEVBQUU0QixFQUFFZ2QsRUFBRXBhLFFBQVFqRSxJQUFJcUIsRUFBRTRDLFFBQVExRixHQUFHNitELEtBQUtxQixHQUFHcDlELElBQUlBLEVBQUU0QyxRQUFRLENBQUMsSUFBSTNELEVBQUUvQixFQUFFOEMsRUFBRTRDLFFBQVEsR0FBRyxNQUFNNUMsRUFBRTJrRSxLQUFLM2tFLEVBQUUya0UsR0FBRy9ILEdBQUdsdEQsS0FBS3hTLElBQUk4QyxFQUFFMmtFLEdBQUcsR0FBRyxNQUFNM2tFLEVBQUU0a0UsR0FBRyxJQUFJLElBQUlybkUsS0FBS3lDLEVBQUU0a0UsR0FBRyxHQUFHem5FLEVBQUVELEtBQUsrQixHQUFHQSxFQUFFOUIsRUFBRUksSUFBSUwsTUFBTUEsRUFBRStCLEVBQUVlLEVBQUU0a0UsR0FBR3JqRSxLQUFLaEUsUUFBUSxDQUFDLElBQUlBLEVBQUUsRUFBRUEsRUFBRXlDLEVBQUU0a0UsR0FBR3ZrRSxTQUFTOUMsRUFBRUwsR0FBRytCLEVBQUU5QixFQUFFNkMsRUFBRTRrRSxHQUFHcm5FLEtBQUtMLEdBQUcrQixFQUFFL0IsRUFBRThDLEVBQUU0QyxRQUFRM0QsRUFBRWUsRUFBRTBFLEVBQUUxRSxFQUFFMEUsR0FBRzFFLEVBQUUyRyxTQUFTekosRUFBRSxJQUFJUyxFQUFFc0IsRUFBRSxFQUFFLElBQUksSUFBSXkyQyxHQUFHbjRDLEVBQUUwZ0UsR0FBR2orRCxFQUFFMEUsSUFBSXJFLE9BQU9zMUMsT0FBRSxFQUFPMTJDLEVBQUV5MkMsSUFBSUMsRUFBRXA0QyxFQUFFMEIsSUFBSUEsSUFBSTFCLEVBQUUwQixHQUFHMDJDLEVBQUUzbUMsTUFBTTVDLEdBQUd1cEMsRUFBRXRzQyxRQUFRckwsRUFBRWQsR0FBR0EsRUFBRSxJQUFJeTRDLEVBQUUzMUMsRUFBRTJHLFNBQVNwSixFQUFFaUYsS0FBSyxRQUFRdkQsR0FBay9ONGxFLENBQUc1bEUsRUFBRWIsRUFBRU8sRUFBRTQ0QyxFQUFFdjVDLEdBQUcsSUFBSVQsR0FBR0osRUFBRTJpRSxHQUFHMWhFLElBQUlnTyxFQUFFN08sSUFBSXcrRCxJQUFJeCtELElBQUk2TyxJQUFJN08sRUFBRXVuRSxZQUFZLEdBQUd2bkUsRUFBRXVuRSxXQUFXdm5FLEVBQUV1RyxZQUFZdkcsRUFBRXVHLFdBQVdkLFlBQVl6RixJQUFJdytELEdBQUc1K0QsRUFBRWlQLEdBQUdqUCxFQUFFaVAsRUFBRThILFlBQVlqVixFQUFFbU4sRUFBRWpQLEVBQUVpUCxHQUFHbk4sSUFBSW1OLEVBQUVreEQsR0FBR3IrRCxFQUFFakIsRUFBRUksRUFBRWswQyxXQUFXbjFDLEVBQUVrUCxJQUFJRCxFQUFFQSxFQUFFdEksYUFBYXM4RCxLQUFLLEVBQUVuaEUsRUFBRW1HLFFBQVEsWUFBWWdILEVBQUU4SCxZQUFZalYsR0FBR3MrRCxHQUFHbnhELEVBQUUsS0FBS2pQLEVBQUVrUCxJQUFJcE4sSUFBSW1OLEVBQUVreEQsR0FBR3IrRCxFQUFFakIsRUFBRSxLQUFLYixFQUFFa1AsSUFBSUQsSUFBSUEsRUFBRTA0RCxVQUFVMTRELEVBQUUwNEQsV0FBVyxFQUFFM25FLEVBQUVpUCxHQUFHQSxHQUFHQSxFQUFFMDRELFlBQVkzbkUsRUFBRWlQLEVBQUVBLEdBQUdwTyxFQUFFb08sRUFBRTJ2RCxLQUFLM3ZELEVBQUV6TixFQUFFczdDLEVBQUU5OEMsRUFBRThCLEVBQUViLEVBQUVvSSxhQUFhLFVBQVUsR0FBR3RKLElBQUlDLEVBQUU4QixFQUFFb0ssUUFBUSxJQUFJdUQsT0FBTyxrQkFBa0IxUCxFQUFFLE9BQU8sS0FBSyxNQUFNK0IsS0FBSzlCLElBQUlBLEVBQUUsSUFBSSxJQUFJLFdBQVdpUCxJQUFJd3hELEdBQUd4L0QsRUFBRWpCLElBQUlRLEdBQUcya0UsR0FBR25CLE1BQU1uaEUsRUFBRXJCLEVBQUU0NEMsRUFBRXY1QyxFQUFFVyxFQUFFczdDLEtBQUt0N0MsRUFBRStsRSxjQUFjLFNBQVN0bUUsR0FBR3VHLEtBQUtvZ0UsYUFBYXBnRSxLQUFLcEgsRUFBRWEsSUFBSU8sRUFBRW9tRSxhQUFhLFNBQVMzbUUsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUVrL0QsR0FBR3ovRCxHQUFHVCxFQUFFZ0IsRUFBRTJ6QyxXQUFXcDFDLEVBQUVrQixJQUFJdUcsS0FBS3BILEVBQUUsSUFBSUksR0FBR1QsSUFBSXlILEtBQUt5OEQsYUFBYWhqRSxFQUFFNEIsR0FBRzVCLEVBQUVsQixFQUFFeUIsRUFBRWhCLEVBQUUsSUFBSVMsRUFBRTJLLE1BQU02dEMsS0FBS3g0QyxFQUFFMFIsaUJBQWlCLE1BQU12TixRQUFRLFNBQVNuRSxHQUFHLE9BQU95L0QsR0FBR3ovRCxHQUFHazBDLGNBQWN0eUMsRUFBRSxFQUFFQSxFQUFFNUIsRUFBRWlDLE9BQU9MLElBQUkyRSxLQUFLb2dFLGFBQWEzbUUsRUFBRTRCLEtBQUtyQixFQUFFb2tFLEdBQUcsU0FBUzNrRSxHQUFHLElBQUk0QixFQUFFMkUsS0FBS2hHLEVBQUV1L0QsR0FBRzkvRCxHQUFHLEdBQUdPLElBQUlnRyxLQUFLeEgsRUFBRWkvRCxXQUFXejNELEtBQUt4SCxFQUFFaS9ELFNBQVN6OUQsSUFBSXkvRCxHQUFHei9ELEdBQUcsQ0FBQyxJQUFJaEIsRUFBRXUvRCxHQUFHOStELEdBQUc2K0QsR0FBR3QvRCxHQUFHLFNBQVNTLEdBQUcsR0FBRzI5RCxHQUFHa0QsR0FBRzdnRSxPQUFPLENBQUMsSUFBSVQsRUFBRStnRSxHQUFHdGdFLEVBQUV1SSxTQUFTdkksRUFBRXk4RCxlQUFlb0UsR0FBRzdnRSxHQUFHQSxFQUFFdUksU0FBU3ZJLEVBQUVzRyxFQUFFbTZELEdBQUdsaEUsRUFBRVMsRUFBRVQsRUFBRUosT0FBRSxPQUFPLEdBQVFpL0QsSUFBSSxLQUFLNzlELElBQUkrakUsR0FBRzFpRSxHQUFHQSxFQUFFcU0sR0FBR3JNLEVBQUVxTSxFQUFFMjRELGNBQWM1bUUsT0FBT28rRCxHQUFHcCtELEVBQUU4VixZQUFZOG9ELEdBQUdyL0QsR0FBR2dILEtBQUt4SCxFQUFFZzhDLEVBQUVzaEIsTUFBTWw1RCxLQUFLNUQsS0FBS2dCLEVBQUVzbUUsc0JBQXNCLFNBQVM3bUUsRUFBRTRCLEdBQUcsSUFBSXJCLEVBQUUsT0FBTzY5RCxLQUFLNzlELEdBQUdtaEUsR0FBRzFoRSxJQUFJMGhFLEdBQUcwRCxHQUFHNytELEtBQUt2RyxLQUFLbTVDLEVBQUV2M0MsS0FBS3JCLEVBQUVBLEdBQUdVLE9BQU9teUIsaUJBQWlCcHpCLEdBQUc2ekIsaUJBQWlCanlCLElBQUlyQixFQUFFNnJDLE9BQU8sSUFBSTdyQyxFQUFFdW1FLEdBQUcsU0FBUzltRSxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRWhCLEVBQUVrZ0UsR0FBR3ovRCxHQUFHMm1CLGNBQWMsR0FBR3BtQixFQUFFcUIsR0FBRyxpQkFBaUJBLEVBQUVBLEVBQUUrTixPQUFPL04sSUFBSXdLLE1BQU0sTUFBTSxLQUFLeEssRUFBRXJDLEVBQUV1bUMsTUFBTXZtQyxFQUFFdW1DLEtBQUs2VCxhQUFhcDZDLEVBQUVTLEVBQUVvSSxhQUFhLFVBQVUsQ0FBQzdJLEVBQUVBLEVBQUU2TSxNQUFNLE1BQU0sSUFBSSxJQUFJdE4sRUFBRSxFQUFFQSxFQUFFUyxFQUFFMEMsT0FBT25ELElBQUksR0FBR1MsRUFBRVQsS0FBS3doRSxHQUFHdHlELEVBQUUsQ0FBQ3BNLEVBQUVyQyxFQUFFVCxFQUFFLEdBQUcsT0FBTzhDLEdBQUdyQixFQUFFNEMsS0FBS205RCxHQUFHdHlELEVBQUVwTSxHQUFHdzhELEtBQUt4OEQsRUFBRTgvRCxHQUFHMWhFLEtBQUs0QixFQUFFaTZDLEdBQUd0N0MsRUFBRTRDLEtBQUtzL0QsR0FBR3owRCxFQUFFcE0sRUFBRWk2QyxHQUFHMmpCLEdBQUd4L0QsRUFBRU8sRUFBRTZELEtBQUssT0FBTzdELEVBQUV3bUUsR0FBRyxTQUFTL21FLEdBQUcsT0FBTzBoRSxHQUFHMWhFLElBQUlPLEVBQUV5bUUsR0FBRyxTQUFTaG5FLEVBQUU0QixHQUFHdytELEdBQUdwZ0UsRUFBRTRCLElBQUlyQixFQUFFMG1FLEdBQUcsU0FBU2puRSxFQUFFNEIsR0FBR3crRCxHQUFHcGdFLEVBQUU0QixHQUFFLElBQUtyQixFQUFFMm1FLEdBQUcsU0FBU2xuRSxHQUFHLE9BQU9takUsR0FBR25qRSxJQUFJTyxFQUFFNG1FLEdBQUcsU0FBU25uRSxHQUFHLE9BQU9rakUsR0FBR2xqRSxJQUFJbWtFLEdBQUd6akUsVUFBVXcvQyxNQUFNaWtCLEdBQUd6akUsVUFBVXcvQyxNQUFNaWtCLEdBQUd6akUsVUFBVW1sRSxnQkFBZ0IxQixHQUFHempFLFVBQVVtbEUsZ0JBQWdCMUIsR0FBR3pqRSxVQUFVc2lFLGFBQWFtQixHQUFHempFLFVBQVVzaUUsYUFBYW1CLEdBQUd6akUsVUFBVTRsRSxjQUFjbkMsR0FBR3pqRSxVQUFVNGxFLGNBQWNuQyxHQUFHempFLFVBQVVpbUUsYUFBYXhDLEdBQUd6akUsVUFBVWltRSxhQUFheEMsR0FBR3pqRSxVQUFVbW1FLHNCQUFzQjFDLEdBQUd6akUsVUFBVW1tRSxzQkFBc0IxQyxHQUFHempFLFVBQVU2cEQsZ0JBQWdCNFosR0FBR3pqRSxVQUFVb21FLEdBQUczQyxHQUFHempFLFVBQVUwbUUsa0JBQWtCakQsR0FBR3pqRSxVQUFVcW1FLEdBQUc1QyxHQUFHempFLFVBQVUybUUsZ0NBQWdDbEQsR0FBR3pqRSxVQUFVaWtFLEdBQUdSLEdBQUd6akUsVUFBVTRtRSxZQUFZbkQsR0FBR3pqRSxVQUFVaWxFLEdBQUd4QixHQUFHempFLFVBQVU2bUUsaUJBQWlCcEQsR0FBR3pqRSxVQUFVa2xFLEdBQUd6QixHQUFHempFLFVBQVVva0Usa0JBQWtCWCxHQUFHempFLFVBQVVva0Usa0JBQWtCWCxHQUFHempFLFVBQVVzckQsVUFBVW1ZLEdBQUd6akUsVUFBVXNtRSxHQUFHN0MsR0FBR3pqRSxVQUFVK3BELFlBQVkwWixHQUFHempFLFVBQVV1bUUsR0FBRzlDLEdBQUd6akUsVUFBVThtRSxhQUFhckQsR0FBR3pqRSxVQUFVd21FLEdBQUcvQyxHQUFHempFLFVBQVVpcUQsb0JBQW9Cd1osR0FBR3pqRSxVQUFVeW1FLEdBQUdoRCxHQUFHempFLFVBQVUrbUUsc0JBQXNCdEQsR0FBR3pqRSxVQUFVdWxFLEdBQUd6bUUsT0FBTzYzQyxpQkFBaUI4c0IsR0FBR3pqRSxVQUFVLENBQUNnbkUsYUFBYSxDQUFDL25FLElBQUksV0FBVyxPQUFPZytELEtBQUtRLFVBQVUsQ0FBQ3grRCxJQUFJLFdBQVcsT0FBT3krRCxPQUFPLElBQUkvQyxHQUFHRixHQUFHakssR0FBRyxJQUFJaVQsR0FBR2xqRSxPQUFPbXBELFdBQVdpUixHQUFHcDZELE9BQU9tcEQsU0FBU21hLFVBQVVwSixHQUFHbDZELE9BQU9tcEQsU0FBU3FhLHNCQUFzQnhqRSxPQUFPbXBELFNBQVMsQ0FBQ0MsWUFBWTZHLEdBQUcyVSxnQkFBZ0IsU0FBUzdsRSxFQUFFNEIsRUFBRXJCLEdBQUcyd0QsR0FBRzRULG9CQUFvQjVULEdBQUcyVSxnQkFBZ0I3bEUsRUFBRTRCLEVBQUVyQixJQUFJdWxFLG1CQUFtQixTQUFTOWxFLEVBQUU0QixHQUFHc3ZELEdBQUc0VSxtQkFBbUI5bEUsRUFBRTRCLElBQUlta0Usc0JBQXNCLFNBQVMvbEUsRUFBRTRCLEVBQUVyQixHQUFHMndELEdBQUc0VCxvQkFBb0I1VCxHQUFHNlUsc0JBQXNCL2xFLEVBQUU0QixFQUFFckIsSUFBSW9tRSxhQUFhLFNBQVMzbUUsRUFBRTRCLEdBQUdzdkQsR0FBRzRULG9CQUFvQjVULEdBQUd5VixhQUFhM21FLEVBQUU0QixJQUFJb2hFLGFBQWEsU0FBU2hqRSxHQUFHa3hELEdBQUc0VCxvQkFBb0I1VCxHQUFHOFIsYUFBYWhqRSxJQUFJc21FLGNBQWMsU0FBU3RtRSxHQUFHa3hELEdBQUc0VCxvQkFBb0I1VCxHQUFHb1YsY0FBY3RtRSxJQUFJOGtFLGtCQUFrQixXQUFXNVQsR0FBRzRULHFCQUFxQitCLHNCQUFzQixTQUFTN21FLEVBQUU0QixHQUFHLE9BQU9zdkQsR0FBRzJWLHNCQUFzQjdtRSxFQUFFNEIsSUFBSXU4RCxVQUFVQyxHQUFHc0osYUFBYS9KLEdBQUdLLFNBQVNWLEdBQUdZLGVBQWVELElBQUk1QyxLQUFLcDZELE9BQU9tcEQsU0FBU21hLFVBQVVsSixJQUFJRixLQUFLbDZELE9BQU9tcEQsU0FBU3FhLHFCQUFxQnRKLElBQUksU0FBU243RCxHQUFHLFNBQVM0QixFQUFFNUIsR0FBRyxNQUFNLElBQUlBLElBQUlKLEVBQUVYLEtBQUtzSCxNQUFNQSxLQUFLZ3hDLEdBQUUsR0FBSXYzQyxFQUFFcU0sY0FBYyxTQUFTOUwsRUFBRVAsR0FBRyxJQUFJNEIsRUFBRTVCLEVBQUVpUSxXQUFXLEdBQUcsT0FBTyxHQUFHck8sR0FBRyxJQUFJQSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSW9GLFFBQVFwRixHQUFHNUIsRUFBRWtGLG1CQUFtQmxGLEdBQUcsU0FBU1QsRUFBRVMsR0FBRyxJQUFJNEIsRUFBRTVCLEVBQUVpUSxXQUFXLEdBQUcsT0FBTyxHQUFHck8sR0FBRyxJQUFJQSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUlvRixRQUFRcEYsR0FBRzVCLEVBQUVrRixtQkFBbUJsRixHQUFHLFNBQVNsQixFQUFFa0IsRUFBRWxCLEVBQUVrUCxHQUFHLFNBQVNuTixFQUFFYixHQUFHNGUsRUFBRXpiLEtBQUtuRCxHQUFHLElBQUlqQixFQUFFRCxHQUFHLGVBQWUwNEMsRUFBRSxFQUFFNTJDLEVBQUUsR0FBRzRlLEdBQUUsRUFBR3RnQixHQUFFLEVBQUcwZixFQUFFLEdBQUc1ZSxFQUFFLE1BQU0sTUFBTUEsRUFBRXczQyxFQUFFLElBQUksR0FBR0EsS0FBS2p4QyxLQUFLZ3hDLEdBQUcsQ0FBQyxJQUFJTSxFQUFFNzNDLEVBQUV3M0MsR0FBRyxPQUFPejRDLEdBQUcsSUFBSSxlQUFlLElBQUk4NEMsSUFBSU4sRUFBRWptQyxLQUFLdW1DLEdBQUcsQ0FBQyxHQUFHLzRDLEVBQUUsQ0FBQytCLEVBQUUsbUJBQW1CLE1BQU1iLEVBQUVZLEVBQUUsR0FBRzdCLEVBQUUsWUFBWSxTQUFTNkIsR0FBR2kzQyxFQUFFeHJDLGNBQWN0TixFQUFFLFNBQVMsTUFBTSxJQUFJLFNBQVMsR0FBRzg0QyxHQUFHejRDLEVBQUVrUyxLQUFLdW1DLEdBQUdqM0MsR0FBR2kzQyxFQUFFeHJDLGtCQUFrQixDQUFDLEdBQUcsS0FBS3dyQyxFQUFFLENBQUMsR0FBRy80QyxFQUFFLENBQUMsTUFBTSs0QyxHQUFHaDNDLEVBQUUscUNBQXFDZzNDLEdBQUcsTUFBTTczQyxFQUFFWSxFQUFFLEdBQUc0MkMsRUFBRSxFQUFFejRDLEVBQUUsWUFBWSxTQUFTLEdBQUd3SCxLQUFLdXhDLEVBQUVsM0MsRUFBRUEsRUFBRSxHQUFHOUIsRUFBRSxNQUFNa0IsT0FBRSxJQUFTYixFQUFFb0gsS0FBS3V4QyxLQUFLdnhDLEtBQUs4eUMsR0FBRSxHQUFJdDZDLEVBQUUsUUFBUXdILEtBQUt1eEMsRUFBRSxXQUFXdnhDLEtBQUs4eUMsR0FBR3JyQyxHQUFHQSxFQUFFOHBDLEdBQUd2eEMsS0FBS3V4QyxFQUFFLHdCQUF3QnZ4QyxLQUFLOHlDLEVBQUUsd0JBQXdCLGNBQWMsTUFBTSxJQUFJLGNBQWMsS0FBS3hCLEdBQUd0eEMsS0FBS2hILEVBQUUsSUFBSVIsRUFBRSxTQUFTLEtBQUs4NEMsR0FBR3R4QyxLQUFLK3dDLEVBQUUsSUFBSXY0QyxFQUFFLFlBQVksTUFBTTg0QyxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsR0FBRyxNQUFNQSxJQUFJdHhDLEtBQUtvaEUsSUFBSXBuRSxFQUFFczNDLElBQUksTUFBTSxJQUFJLFlBQVksR0FBRzdwQyxRQUFHLElBQVM3TyxFQUFFNk8sRUFBRThwQyxHQUFHLENBQUMvNEMsRUFBRSxXQUFXLFNBQVM4QixFQUFFLG1CQUFtQmpCLEVBQUVYLEtBQUtzSCxNQUFNQSxLQUFLZ3hDLEdBQUUsRUFBRyxNQUFNLElBQUksd0JBQXdCLEdBQUcsS0FBS00sR0FBRyxLQUFLNzNDLEVBQUV3M0MsRUFBRSxHQUFHLENBQUMzMkMsRUFBRSxvQkFBb0JnM0MsR0FBRzk0QyxFQUFFLFdBQVcsU0FBU0EsRUFBRSwyQkFBMkIsTUFBTSxJQUFJLFdBQVcsR0FBR3dILEtBQUs4eUMsR0FBRSxFQUFHLFFBQVE5eUMsS0FBS3V4QyxJQUFJdnhDLEtBQUt1eEMsRUFBRTlwQyxFQUFFOHBDLEdBQUcsTUFBTUQsRUFBRSxDQUFDdHhDLEtBQUt6SCxFQUFFa1AsRUFBRWxQLEVBQUV5SCxLQUFLckgsRUFBRThPLEVBQUU5TyxFQUFFcUgsS0FBSzJELEVBQUU4RCxFQUFFOUQsRUFBRXRELFFBQVFMLEtBQUtoSCxFQUFFeU8sRUFBRXpPLEVBQUVnSCxLQUFLMUYsRUFBRW1OLEVBQUVuTixFQUFFMEYsS0FBS2l4QyxFQUFFeHBDLEVBQUV3cEMsRUFBRSxNQUFNeDNDLEVBQUUsR0FBRyxLQUFLNjNDLEdBQUcsTUFBTUEsRUFBRSxNQUFNQSxHQUFHaDNDLEVBQUUsZ0NBQWdDOUIsRUFBRSxzQkFBc0IsR0FBRyxLQUFLODRDLEVBQUV0eEMsS0FBS3pILEVBQUVrUCxFQUFFbFAsRUFBRXlILEtBQUtySCxFQUFFOE8sRUFBRTlPLEVBQUVxSCxLQUFLMkQsRUFBRThELEVBQUU5RCxFQUFFdEQsUUFBUUwsS0FBS2hILEVBQUUsSUFBSWdILEtBQUsxRixFQUFFbU4sRUFBRW5OLEVBQUUwRixLQUFLaXhDLEVBQUV4cEMsRUFBRXdwQyxFQUFFejRDLEVBQUUsWUFBWSxDQUFDLEdBQUcsS0FBSzg0QyxFQUFFLENBQUM5NEMsRUFBRWlCLEVBQUV3M0MsRUFBRSxHQUFHLElBQUlNLEVBQUU5M0MsRUFBRXczQyxFQUFFLElBQUksUUFBUWp4QyxLQUFLdXhDLElBQUlQLEVBQUVqbUMsS0FBS3VtQyxJQUFJLEtBQUs5NEMsR0FBRyxLQUFLQSxHQUFHLE1BQU0rNEMsR0FBRyxLQUFLQSxHQUFHLE1BQU1BLEdBQUcsS0FBS0EsR0FBRyxLQUFLQSxLQUFLdnhDLEtBQUt6SCxFQUFFa1AsRUFBRWxQLEVBQUV5SCxLQUFLckgsRUFBRThPLEVBQUU5TyxFQUFFcUgsS0FBSzFGLEVBQUVtTixFQUFFbk4sRUFBRTBGLEtBQUtpeEMsRUFBRXhwQyxFQUFFd3BDLEVBQUVqeEMsS0FBSzJELEVBQUU4RCxFQUFFOUQsRUFBRXRELFFBQVFMLEtBQUsyRCxFQUFFZ0UsT0FBT25QLEVBQUUsZ0JBQWdCLFNBQVN3SCxLQUFLekgsRUFBRWtQLEVBQUVsUCxFQUFFeUgsS0FBS3JILEVBQUU4TyxFQUFFOU8sRUFBRXFILEtBQUsyRCxFQUFFOEQsRUFBRTlELEVBQUV0RCxRQUFRTCxLQUFLaEgsRUFBRXlPLEVBQUV6TyxFQUFFZ0gsS0FBSyt3QyxFQUFFLElBQUkvd0MsS0FBSzFGLEVBQUVtTixFQUFFbk4sRUFBRTBGLEtBQUtpeEMsRUFBRXhwQyxFQUFFd3BDLEVBQUV6NEMsRUFBRSxXQUFXLE1BQU0sSUFBSSxpQkFBaUIsR0FBRyxLQUFLODRDLEdBQUcsTUFBTUEsRUFBRSxDQUFDLFFBQVF0eEMsS0FBS3V4QyxJQUFJdnhDLEtBQUt6SCxFQUFFa1AsRUFBRWxQLEVBQUV5SCxLQUFLckgsRUFBRThPLEVBQUU5TyxFQUFFcUgsS0FBSzFGLEVBQUVtTixFQUFFbk4sRUFBRTBGLEtBQUtpeEMsRUFBRXhwQyxFQUFFd3BDLEdBQUd6NEMsRUFBRSxnQkFBZ0IsU0FBUyxNQUFNODRDLEdBQUdoM0MsRUFBRSxnQ0FBZ0M5QixFQUFFLFFBQVF3SCxLQUFLdXhDLEVBQUUsWUFBWSwyQkFBMkIsTUFBTSxJQUFJLHdCQUF3QixHQUFHLEtBQUtELEVBQUUsQ0FBQ2gzQyxFQUFFLHNCQUFzQmczQyxHQUFHOTRDLEVBQUUsMkJBQTJCLFNBQVNBLEVBQUUseUJBQXlCLE1BQU0sSUFBSSx5QkFBeUIsR0FBR0EsRUFBRSwyQkFBMkIsS0FBSzg0QyxFQUFFLENBQUNoM0MsRUFBRSxzQkFBc0JnM0MsR0FBRyxTQUFTLE1BQU0sSUFBSSwyQkFBMkIsR0FBRyxLQUFLQSxHQUFHLE1BQU1BLEVBQUUsQ0FBQzk0QyxFQUFFLFlBQVksU0FBUzhCLEVBQUUsNEJBQTRCZzNDLEdBQUcsTUFBTSxJQUFJLFlBQVksR0FBRyxLQUFLQSxFQUFFLENBQUMsSUFBSXI0QixJQUFJM2UsRUFBRSxtQkFBbUJELEdBQUcsT0FBTzRlLEdBQUUsRUFBR3E0QixFQUFFLEVBQUVBLEVBQUVqM0MsRUFBRXFCLE9BQU80MUMsSUFBSSxPQUFPQyxFQUFFbDNDLEVBQUVpM0MsS0FBSyxNQUFNQyxHQUFHLE1BQU1BLEVBQUVqM0MsRUFBRSxvQ0FBb0MsS0FBS2kzQyxHQUFHLE9BQU92eEMsS0FBS2l4QyxFQUFFanhDLEtBQUtpeEMsRUFBRSxJQUFJTSxFQUFFdjNDLEVBQUV1M0MsR0FBRyxPQUFPdnhDLEtBQUtpeEMsRUFBRWp4QyxLQUFLaXhDLEdBQUdNLEVBQUV2eEMsS0FBSzFGLEdBQUdpM0MsR0FBR2wzQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLE1BQU1pM0MsR0FBRyxLQUFLQSxHQUFHLE1BQU1BLEdBQUcsS0FBS0EsR0FBRyxLQUFLQSxFQUFFLENBQUNMLEdBQUc1MkMsRUFBRXFCLE9BQU9yQixFQUFFLEdBQUc3QixFQUFFLE9BQU8sU0FBUzZCLEdBQUdpM0MsRUFBRSxNQUFNLElBQUksWUFBWSxHQUFHLE1BQU1BLEdBQUcsS0FBS0EsR0FBRyxNQUFNQSxHQUFHLEtBQUtBLEdBQUcsS0FBS0EsRUFBRSxDQUFDLEdBQUdqM0MsRUFBRXFCLFNBQVNzMUMsRUFBRWptQyxLQUFLMVEsRUFBRSxLQUFLLEtBQUtBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLElBQUksR0FBR0EsRUFBRXFCLFNBQVNzRSxLQUFLekgsRUFBRThDLEVBQUUzQyxLQUFLc0gsS0FBSzNGLEdBQUdBLEVBQUUsSUFBSTdCLEVBQUUsdUJBQXVCQSxFQUFFLGdCQUFnQixTQUFTLE1BQU04NEMsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEVBQUVoM0MsRUFBRSxvQ0FBb0NELEdBQUdpM0MsRUFBRSxNQUFNLElBQUksT0FBTyxJQUFJLFdBQVcsR0FBRyxLQUFLQSxHQUFHMzRDLEVBQUUsQ0FBQyxHQUFHLE1BQU0yNEMsR0FBRyxLQUFLQSxHQUFHLE1BQU1BLEdBQUcsS0FBS0EsR0FBRyxLQUFLQSxFQUFFLENBQUMsR0FBR3R4QyxLQUFLekgsRUFBRThDLEVBQUUzQyxLQUFLc0gsS0FBSzNGLEdBQUdBLEVBQUUsR0FBRzdCLEVBQUUsc0JBQXNCRCxFQUFFLE1BQU1rQixFQUFFLFNBQVMsTUFBTTYzQyxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsR0FBRyxLQUFLQSxFQUFFMzRDLEdBQUUsRUFBRyxLQUFLMjRDLElBQUkzNEMsR0FBRSxHQUFJMEIsR0FBR2kzQyxHQUFHaDNDLEVBQUUsd0NBQXdDZzNDLFFBQVEsR0FBR3R4QyxLQUFLekgsRUFBRThDLEVBQUUzQyxLQUFLc0gsS0FBSzNGLEdBQUdBLEVBQUUsR0FBRzdCLEVBQUUsT0FBTyxZQUFZRCxFQUFFLE1BQU1rQixFQUFFLE1BQU0sSUFBSSxPQUFPLEdBQUcsUUFBUXNSLEtBQUt1bUMsR0FBR2ozQyxHQUFHaTNDLE1BQU0sQ0FBQyxHQUFHLE1BQU1BLEdBQUcsS0FBS0EsR0FBRyxNQUFNQSxHQUFHLEtBQUtBLEdBQUcsS0FBS0EsR0FBRy80QyxFQUFFLENBQUMsR0FBRyxJQUFJOEIsS0FBS0EsRUFBRWsxQixTQUFTbDFCLEVBQUUsTUFBTXpCLEVBQUVvSCxLQUFLdXhDLEtBQUt2eEMsS0FBS3JILEVBQUUwQixFQUFFLElBQUlBLEVBQUUsSUFBSTlCLEVBQUUsTUFBTWtCLEVBQUVqQixFQUFFLHNCQUFzQixTQUFTLE1BQU04NEMsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEVBQUVoM0MsRUFBRSwrQkFBK0JnM0MsSUFBSWo0QyxFQUFFWCxLQUFLc0gsTUFBTUEsS0FBS2d4QyxHQUFFLEdBQUksTUFBTSxJQUFJLHNCQUFzQixHQUFHLE1BQU1NLEdBQUdoM0MsRUFBRSw2QkFBNkI5QixFQUFFLGdCQUFnQixLQUFLODRDLEdBQUcsTUFBTUEsRUFBRSxTQUFTLE1BQU0sSUFBSSxnQkFBZ0IsTUFBTUEsR0FBRyxLQUFLQSxHQUFHLE1BQU1BLElBQUkvNEMsR0FBRyxLQUFLKzRDLEdBQUcsS0FBS0EsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsSUFBSWozQyxHQUFHTCxFQUFFczNDLEtBQUssTUFBTUEsR0FBR2gzQyxFQUFFLHFDQUFxQ2kzQyxFQUFFUixFQUFFMTJDLEVBQUV5TCxrQkFBa0J6TCxFQUFFazNDLEdBQUcsTUFBTWwzQyxHQUFHMkYsS0FBSzJELEVBQUVnRSxNQUFNLEtBQUsycEMsR0FBRyxNQUFNQSxHQUFHdHhDLEtBQUsyRCxFQUFFL0csS0FBSyxLQUFLLEtBQUt2QyxHQUFHLEtBQUtpM0MsR0FBRyxNQUFNQSxFQUFFdHhDLEtBQUsyRCxFQUFFL0csS0FBSyxJQUFJLEtBQUt2QyxJQUFJLFFBQVEyRixLQUFLdXhDLEdBQUcsR0FBR3Z4QyxLQUFLMkQsRUFBRWpJLFFBQVEsR0FBR3JCLEVBQUVxQixRQUFRczFDLEVBQUVqbUMsS0FBSzFRLEVBQUUsS0FBSyxLQUFLQSxFQUFFLEtBQUtBLEVBQUVBLEVBQUUsR0FBRyxLQUFLMkYsS0FBSzJELEVBQUUvRyxLQUFLdkMsSUFBSUEsRUFBRSxHQUFHLEtBQUtpM0MsR0FBR3R4QyxLQUFLaEgsRUFBRSxJQUFJUixFQUFFLFNBQVMsS0FBSzg0QyxJQUFJdHhDLEtBQUsrd0MsRUFBRSxJQUFJdjRDLEVBQUUsYUFBYSxNQUFNLElBQUksUUFBUUQsR0FBRyxLQUFLKzRDLEVBQUUsTUFBTUEsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsSUFBSXR4QyxLQUFLaEgsR0FBR0EsRUFBRXM0QyxLQUFLdHhDLEtBQUsrd0MsRUFBRSxJQUFJdjRDLEVBQUUsWUFBWSxNQUFNLElBQUksV0FBVyxNQUFNODRDLEdBQUcsTUFBTUEsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLElBQUl0eEMsS0FBSyt3QyxHQUFHTyxHQUFHTCxLQUFLLFNBQVM1M0MsSUFBSTJHLEtBQUsxRixFQUFFMEYsS0FBS29oRSxHQUFHcGhFLEtBQUt1eEMsRUFBRSxHQUFHdnhDLEtBQUtpeEMsRUFBRSxLQUFLanhDLEtBQUtySCxFQUFFcUgsS0FBS3pILEVBQUUsR0FBR3lILEtBQUsyRCxFQUFFLEdBQUczRCxLQUFLK3dDLEVBQUUvd0MsS0FBS2hILEVBQUUsR0FBR2dILEtBQUs4eUMsRUFBRTl5QyxLQUFLZ3hDLEdBQUUsRUFBRyxTQUFTdnBDLEVBQUVoTyxFQUFFNEIsUUFBRyxJQUFTQSxHQUFHQSxhQUFhb00sSUFBSXBNLEVBQUUsSUFBSW9NLEVBQUUyQixPQUFPL04sS0FBSzJFLEtBQUt5SCxFQUFFaE8sRUFBRUosRUFBRVgsS0FBS3NILE1BQU16SCxFQUFFRyxLQUFLc0gsS0FBS0EsS0FBS3lILEVBQUUvQyxRQUFRLCtCQUErQixJQUFJLEtBQUtySixHQUFHLElBQUlmLEdBQUUsRUFBRyxJQUFJLElBQUk5QixFQUFFLElBQUk2b0UsSUFBSSxJQUFJLFlBQVk3b0UsRUFBRThvRSxTQUFTLFFBQVFobkUsRUFBRSxtQkFBbUI5QixFQUFFdVosS0FBSyxNQUFNdFksSUFBSSxJQUFJYSxFQUFFLENBQUMsSUFBSTFCLEVBQUVLLE9BQU9ZLE9BQU8sTUFBTWpCLEVBQUUyb0UsSUFBSSxHQUFHM29FLEVBQUUyWixLQUFLLEVBQUUzWixFQUFFNG9FLE9BQU8sR0FBRzVvRSxFQUFFNm9FLEtBQUssR0FBRzdvRSxFQUFFOG9FLE1BQU0sSUFBSTlvRSxFQUFFK29FLEdBQUcsR0FBRy9vRSxFQUFFZ3BFLElBQUksSUFBSSxJQUFJN3dCLEVBQUU5M0MsT0FBT1ksT0FBTyxNQUFNazNDLEVBQUUsT0FBTyxJQUFJQSxFQUFFLFFBQVEsS0FBS0EsRUFBRSxRQUFRLEtBQUtBLEVBQUUsVUFBVSxLQUFLLElBQUlDLEVBQUUsV0FBV240QyxFQUFFLG9CQUFvQjRPLEVBQUV0TixVQUFVLENBQUNxRixTQUFTLFdBQVcsT0FBT1EsS0FBSytSLE1BQU0sV0FBVyxHQUFHL1IsS0FBS2d4QyxFQUFFLE9BQU9oeEMsS0FBS3lILEVBQUUsSUFBSWhPLEVBQUUsR0FBRyxNQUFNLElBQUl1RyxLQUFLMUYsR0FBRyxNQUFNMEYsS0FBS2l4QyxJQUFJeDNDLEVBQUV1RyxLQUFLMUYsR0FBRyxNQUFNMEYsS0FBS2l4QyxFQUFFLElBQUlqeEMsS0FBS2l4QyxFQUFFLElBQUksS0FBS2p4QyxLQUFLaTlCLFVBQVVqOUIsS0FBSzh5QyxFQUFFLEtBQUtyNUMsRUFBRXVHLEtBQUt1L0IsS0FBSyxJQUFJdi9CLEtBQUtzaEUsU0FBU3RoRSxLQUFLaEgsRUFBRWdILEtBQUsrd0MsR0FBRyxTQUFTdDNDLEdBQUdKLEVBQUVYLEtBQUtzSCxNQUFNekgsRUFBRUcsS0FBS3NILEtBQUt2RyxJQUFJLGVBQWUsT0FBT3VHLEtBQUt1eEMsRUFBRSxLQUFLLGFBQWE5M0MsR0FBR3VHLEtBQUtneEMsR0FBR3o0QyxFQUFFRyxLQUFLc0gsS0FBS3ZHLEVBQUUsSUFBSSxpQkFBaUIsV0FBVyxPQUFPdUcsS0FBS2d4QyxFQUFFLEdBQUdoeEMsS0FBS3JILEVBQUVxSCxLQUFLekgsRUFBRSxJQUFJeUgsS0FBS3JILEVBQUVxSCxLQUFLekgsR0FBRyxTQUFTa0IsSUFBSXVHLEtBQUtneEMsR0FBR2h4QyxLQUFLOHlDLEdBQUd2NkMsRUFBRUcsS0FBS3NILEtBQUt2RyxFQUFFLFNBQVMsZUFBZSxPQUFPdUcsS0FBS3pILEdBQUcsYUFBYWtCLElBQUl1RyxLQUFLZ3hDLEdBQUdoeEMsS0FBSzh5QyxHQUFHdjZDLEVBQUVHLEtBQUtzSCxLQUFLdkcsRUFBRSxhQUFhLFdBQVcsT0FBT3VHLEtBQUtySCxHQUFHLFNBQVNjLElBQUl1RyxLQUFLZ3hDLEdBQUdoeEMsS0FBSzh5QyxHQUFHdjZDLEVBQUVHLEtBQUtzSCxLQUFLdkcsRUFBRSxTQUFTLGVBQWUsT0FBT3VHLEtBQUtneEMsRUFBRSxHQUFHaHhDLEtBQUs4eUMsRUFBRSxJQUFJOXlDLEtBQUsyRCxFQUFFOUYsS0FBSyxLQUFLbUMsS0FBS29oRSxJQUFJLGFBQWEzbkUsSUFBSXVHLEtBQUtneEMsR0FBR2h4QyxLQUFLOHlDLElBQUk5eUMsS0FBSzJELEVBQUUsR0FBR3BMLEVBQUVHLEtBQUtzSCxLQUFLdkcsRUFBRSx5QkFBeUIsYUFBYSxPQUFPdUcsS0FBS2d4QyxJQUFJaHhDLEtBQUtoSCxHQUFHLEtBQUtnSCxLQUFLaEgsRUFBRSxHQUFHZ0gsS0FBS2hILEdBQUcsV0FBV1MsSUFBSXVHLEtBQUtneEMsR0FBR2h4QyxLQUFLOHlDLElBQUk5eUMsS0FBS2hILEVBQUUsSUFBSSxLQUFLUyxFQUFFLEtBQUtBLEVBQUVBLEVBQUU0RyxNQUFNLElBQUk5SCxFQUFFRyxLQUFLc0gsS0FBS3ZHLEVBQUUsV0FBVyxXQUFXLE9BQU91RyxLQUFLZ3hDLElBQUloeEMsS0FBSyt3QyxHQUFHLEtBQUsvd0MsS0FBSyt3QyxFQUFFLEdBQUcvd0MsS0FBSyt3QyxHQUFHLFNBQVN0M0MsR0FBR3VHLEtBQUtneEMsSUFBSXYzQyxHQUFHdUcsS0FBSyt3QyxFQUFFLElBQUksS0FBS3QzQyxFQUFFLEtBQUtBLEVBQUVBLEVBQUU0RyxNQUFNLElBQUk5SCxFQUFFRyxLQUFLc0gsS0FBS3ZHLEVBQUUsYUFBYXVHLEtBQUsrd0MsRUFBRSxLQUFLLGFBQWEsSUFBSXQzQyxFQUFFLEdBQUd1RyxLQUFLZ3hDLElBQUloeEMsS0FBS3V4QyxFQUFFLE1BQU0sR0FBRyxPQUFPdnhDLEtBQUt1eEMsR0FBRyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFNBQVMsTUFBTSxPQUFPLE9BQU85M0MsRUFBRXVHLEtBQUt1L0IsTUFBTXYvQixLQUFLdXhDLEVBQUUsTUFBTTkzQyxFQUFFLEtBQUssSUFBSXczQyxFQUFFeDNDLEVBQUU0bkUsSUFBSXB3QixJQUFJeHBDLEVBQUVvNkQsZ0JBQWdCLFNBQVNwb0UsR0FBRyxPQUFPdzNDLEVBQUU0d0IsZ0JBQWdCcmhFLE1BQU15d0MsRUFBRS90QyxZQUFZdUUsRUFBRXE2RCxnQkFBZ0IsU0FBU3JvRSxHQUFHdzNDLEVBQUU2d0IsZ0JBQWdCcm9FLEtBQUtBLEVBQUU0bkUsSUFBSTU1RCxHQUFsOU0sQ0FBczlNL00sUUFBUXpCLE9BQU9zNkMseUJBQXlCUixLQUFLNTRDLFVBQVUsWUFBWWxCLE9BQU9DLGVBQWU2NUMsS0FBSzU0QyxVQUFVLFVBQVUsQ0FBQ2YsSUFBSSxXQUFXLElBQUlLLEdBQUd1RyxLQUFLeUssZUFBZXpLLE1BQU0vRSxjQUFjLGNBQWMsT0FBT3hCLEdBQUdBLEVBQUVzWSxNQUFNclgsT0FBT2tYLFNBQVNHLE1BQU13TSxjQUFhLEVBQUdwbEIsWUFBVyxJQUFLLElBQUltcUQsR0FBRzNvRCxTQUFTcUMsY0FBYyxTQUFTc21ELEdBQUcvekMsWUFBWSx1SUFBdUksSUFBSXM3QyxHQUFHbHdELFNBQVNNLGNBQWMsUUFBUTR2RCxHQUFHdnNELGFBQWFnbEQsR0FBR3VILEdBQUcvckQsWUFBWSxJQUFJMjRDLEdBQUcvOEMsT0FBTysxQyxlQUFlK0csSUFBRyxFQUFHMk8sR0FBRyxLQUFLLFNBQVNrVCxLQUFLMytELE9BQU93NEMsb0JBQW9CNnVCLFdBQVdybkUsT0FBT3c0QyxvQkFBb0I2dUIsVUFBVXJuRSxPQUFPQyxVQUFVd3JELElBQUlBLEtBQUszTyxJQUFHLEVBQUc5OEMsT0FBT2c3QyxjQUFjMytCLE9BQU0sRUFBR3BjLFNBQVN5MUMsY0FBYyxJQUFJQyxZQUFZLHFCQUFxQixDQUFDbG9CLFNBQVEsS0FBTXN2QixHQUFHN0csMkJBQTJCNkcsR0FBRzdHLDJCQUEyQixTQUFTbjNDLEdBQUcwc0QsR0FBRzFzRCxFQUFFKzlDLElBQUkvOUMsT0FBTyxhQUFha0IsU0FBU3dpQixZQUFZemlCLE9BQU93UyxpQkFBaUIsT0FBT21zRCxJQUFJMytELE9BQU93UyxpQkFBaUIsb0JBQW9CLFdBQVd4UyxPQUFPcWlCLG9CQUFvQixPQUFPczhDLElBQUlBLFNBQVNBLE9BQU8zZ0UsS0FBS3NILFFBQVF0SCxLQUFLc0gsS0FBS2hHLEVBQUUsR0FBR0EsRUFBRSxHQUFHZ29FLGVBQWUsU0FBU3ZvRSxFQUFFNEIsRUFBRXJCLElBQUcsU0FBVVAsR0FBRyxJQUFJVCxPQUFFLElBQVNTLEdBQUdBLEdBQUcsb0JBQW9Ca2QsTUFBTUEsTUFBTWpjLE9BQU9uQyxFQUFFNjBDLFNBQVNqekMsVUFBVXFHLE1BQU0sU0FBU25ILEVBQUVJLEVBQUU0QixHQUFHMkUsS0FBS2lpRSxJQUFJeG9FLEVBQUV1RyxLQUFLa2lFLFNBQVM3bUUsRUFBRUEsRUFBRXlnQixXQUFXLFdBQVcsT0FBTyxJQUFJemlCLEVBQUVkLEVBQUVHLEtBQUtvakIsV0FBVzlpQixFQUFFa0ssV0FBV3UwQixlQUFlcDhCLEVBQUU4bUUsWUFBWSxXQUFXLE9BQU8sSUFBSTlvRSxFQUFFZCxFQUFFRyxLQUFLeXBFLFlBQVlucEUsRUFBRWtLLFdBQVdrL0QsZ0JBQWdCL21FLEVBQUVvOEIsYUFBYXA4QixFQUFFK21FLGNBQWMsU0FBUzNvRSxHQUFHQSxHQUFHQSxFQUFFNG9FLFNBQVNocEUsRUFBRWMsVUFBVW1vRSxNQUFNanBFLEVBQUVjLFVBQVVvb0UsSUFBSSxhQUFhbHBFLEVBQUVjLFVBQVVrb0UsTUFBTSxXQUFXcmlFLEtBQUtraUUsU0FBU3hwRSxLQUFLTSxFQUFFZ0gsS0FBS2lpRSxNQUFNNW1FLEVBQUVtbkUsT0FBTyxTQUFTL29FLEVBQUU0QixHQUFHbzhCLGFBQWFoK0IsRUFBRWdwRSxnQkFBZ0JocEUsRUFBRWlwRSxhQUFhcm5FLEdBQUdBLEVBQUVzbkUsU0FBUyxTQUFTbHBFLEdBQUdnK0IsYUFBYWgrQixFQUFFZ3BFLGdCQUFnQmhwRSxFQUFFaXBFLGNBQWMsR0FBR3JuRSxFQUFFdW5FLGFBQWF2bkUsRUFBRXVoQyxPQUFPLFNBQVNuakMsR0FBR2crQixhQUFhaCtCLEVBQUVncEUsZ0JBQWdCLElBQUlwbkUsRUFBRTVCLEVBQUVpcEUsYUFBYXJuRSxHQUFHLElBQUk1QixFQUFFZ3BFLGVBQWUzbUQsWUFBWSxXQUFXcmlCLEVBQUVvcEUsWUFBWXBwRSxFQUFFb3BFLGVBQWV4bkUsS0FBS3JCLEVBQUUsR0FBR3FCLEVBQUUybUUsYUFBYSxvQkFBb0JyckQsTUFBTUEsS0FBS3FyRCxtQkFBYyxJQUFTdm9FLEdBQUdBLEVBQUV1b0UsY0FBY2hpRSxNQUFNQSxLQUFLZ2lFLGFBQWEzbUUsRUFBRXluRSxlQUFlLG9CQUFvQm5zRCxNQUFNQSxLQUFLbXNELHFCQUFnQixJQUFTcnBFLEdBQUdBLEVBQUVxcEUsZ0JBQWdCOWlFLE1BQU1BLEtBQUs4aUUsaUJBQWlCcHFFLEtBQUtzSCxLQUFLaEcsRUFBRSxLQUFLLFNBQVNQLEVBQUU0QixFQUFFckIsSUFBRyxTQUFVUCxFQUFFNEIsSUFBSSxTQUFTNUIsRUFBRU8sR0FBRyxhQUFhLElBQUlQLEVBQUV1b0UsYUFBYSxDQUFDLElBQUlocEUsRUFBRVQsRUFBRWMsRUFBRW9PLEVBQUVuTixFQUFFOUIsRUFBRSxFQUFFSSxFQUFFLEdBQUdtNEMsR0FBRSxFQUFHQyxFQUFFdjNDLEVBQUVrQixTQUFTOUIsRUFBRUksT0FBT21ILGdCQUFnQm5ILE9BQU9tSCxlQUFlM0csR0FBR1osRUFBRUEsR0FBR0EsRUFBRWlqQixXQUFXampCLEVBQUVZLEVBQUUscUJBQXFCLEdBQUcrRixTQUFTOUcsS0FBS2UsRUFBRWdpQixTQUFTemlCLEVBQUUsU0FBU1MsR0FBRzRCLEVBQUUwbkUsVUFBVSxXQUFXMW9FLEVBQUVaLE9BQVEsV0FBVyxHQUFHQSxFQUFFdXBFLGNBQWN2cEUsRUFBRXdwRSxjQUFjLENBQUMsSUFBSTVuRSxHQUFFLEVBQUdyQixFQUFFUCxFQUFFeXBFLFVBQVUsT0FBT3pwRSxFQUFFeXBFLFVBQVUsV0FBVzduRSxHQUFFLEdBQUk1QixFQUFFdXBFLFlBQVksR0FBRyxLQUFLdnBFLEVBQUV5cEUsVUFBVWxwRSxFQUFFcUIsR0FBOUksSUFBK2dCb00sRUFBRSxnQkFBZ0JqRCxLQUFLQyxTQUFTLElBQUluSyxFQUFFLFNBQVNlLEdBQUdBLEVBQUUwa0IsU0FBU3RtQixHQUFHLGlCQUFpQjRCLEVBQUVvakIsTUFBTSxJQUFJcGpCLEVBQUVvakIsS0FBS2hlLFFBQVFnSCxJQUFJcE4sR0FBR2dCLEVBQUVvakIsS0FBS3BlLE1BQU1vSCxFQUFFL0wsVUFBVWpDLEVBQUV5VCxpQkFBaUJ6VCxFQUFFeVQsaUJBQWlCLFVBQVU1UyxHQUFFLEdBQUliLEVBQUUwVCxZQUFZLFlBQVk3UyxHQUFHdEIsRUFBRSxTQUFTcUMsR0FBRzVCLEVBQUV1cEUsWUFBWXY3RCxFQUFFcE0sRUFBRSxPQUExbkI1QixFQUFFMHBFLGlCQUFpQjlwRSxFQUFFLElBQUk4cEUsZ0JBQWdCQyxNQUFNRixVQUFVLFNBQVN6cEUsR0FBR1ksRUFBRVosRUFBRWdsQixPQUFPemxCLEVBQUUsU0FBU1MsR0FBR0osRUFBRWdxRSxNQUFNTCxZQUFZdnBFLEtBQUt1M0MsR0FBRyx1QkFBdUJBLEVBQUVoMEMsY0FBYyxXQUFXekUsRUFBRXk0QyxFQUFFbmtDLGdCQUFnQjdULEVBQUUsU0FBU1MsR0FBRyxJQUFJNEIsRUFBRTIxQyxFQUFFaDBDLGNBQWMsVUFBVTNCLEVBQUVnbkMsbUJBQW1CLFdBQVdob0MsRUFBRVosR0FBRzRCLEVBQUVnbkMsbUJBQW1CLEtBQUs5cEMsRUFBRThGLFlBQVloRCxHQUFHQSxFQUFFLE1BQU05QyxFQUFFaUYsWUFBWW5DLEtBQUtyQyxFQUFFLFNBQVNTLEdBQUdxaUIsV0FBV3poQixFQUFFLEVBQUVaLElBQTJRWixFQUFFbXBFLGFBQWEsU0FBU3ZvRSxHQUFHLG1CQUFtQkEsSUFBSUEsRUFBRSxJQUFJMnpDLFNBQVMsR0FBRzN6QyxJQUFJLElBQUksSUFBSTRCLEVBQUUsSUFBSStJLE1BQU1sQixVQUFVeEgsT0FBTyxHQUFHMUIsRUFBRSxFQUFFQSxFQUFFcUIsRUFBRUssT0FBTzFCLElBQUlxQixFQUFFckIsR0FBR2tKLFVBQVVsSixFQUFFLEdBQUcsSUFBSXpCLEVBQUUsQ0FBQ3dLLFNBQVN0SixFQUFFMFgsS0FBSzlWLEdBQUcsT0FBT3pDLEVBQUVKLEdBQUdELEVBQUVTLEVBQUVSLEdBQUdBLEtBQUtLLEVBQUVpcUUsZUFBZTd4QixFQUFFLFNBQVNBLEVBQUV4M0MsVUFBVWIsRUFBRWEsR0FBRyxTQUFTWSxFQUFFWixHQUFHLEdBQUdzM0MsRUFBRWoxQixXQUFXemhCLEVBQUUsRUFBRVosT0FBTyxDQUFDLElBQUk0QixFQUFFekMsRUFBRWEsR0FBRyxHQUFHNEIsRUFBRSxDQUFDMDFDLEdBQUUsRUFBRyxLQUFLLFNBQVN0M0MsR0FBRyxJQUFJNEIsRUFBRTVCLEVBQUVzSixTQUFTL0ksRUFBRVAsRUFBRTBYLEtBQUssT0FBT25YLEVBQUUwQixRQUFRLEtBQUssRUFBRUwsSUFBSSxNQUFNLEtBQUssRUFBRUEsRUFBRXJCLEVBQUUsSUFBSSxNQUFNLEtBQUssRUFBRXFCLEVBQUVyQixFQUFFLEdBQUdBLEVBQUUsSUFBSSxNQUFNLEtBQUssRUFBRXFCLEVBQUVyQixFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxJQUFJLE1BQU0sUUFBUXFCLEVBQUVtRixXQUFNLEVBQU94RyxJQUE3SyxDQUFrTHFCLEdBQXZMLFFBQWtNNDFDLEVBQUV4M0MsR0FBR3MzQyxHQUFFLE1BQXBoRCxDQUE0aEQsb0JBQW9CcDZCLFVBQUssSUFBU2xkLEVBQUV1RyxLQUFLdkcsRUFBRWtkLFFBQVFqZSxLQUFLc0gsS0FBS2hHLEVBQUUsR0FBR0EsRUFBRSxLQUFLLFNBQVNQLEVBQUU0QixHQUFHLElBQUlyQixFQUFFaEIsRUFBRVQsRUFBRWtCLEVBQUVwQixRQUFRLEdBQUcsU0FBU2dCLElBQUksTUFBTSxJQUFJa0UsTUFBTSxtQ0FBbUMsU0FBU2tLLElBQUksTUFBTSxJQUFJbEssTUFBTSxxQ0FBcUMsU0FBU2pELEVBQUViLEdBQUcsR0FBR08sSUFBSThoQixXQUFXLE9BQU9BLFdBQVdyaUIsRUFBRSxHQUFHLElBQUlPLElBQUlYLElBQUlXLElBQUk4aEIsV0FBVyxPQUFPOWhCLEVBQUU4aEIsV0FBV0EsV0FBV3JpQixFQUFFLEdBQUcsSUFBSSxPQUFPTyxFQUFFUCxFQUFFLEdBQUcsTUFBTTRCLEdBQUcsSUFBSSxPQUFPckIsRUFBRXRCLEtBQUssS0FBS2UsRUFBRSxHQUFHLE1BQU00QixHQUFHLE9BQU9yQixFQUFFdEIsS0FBS3NILEtBQUt2RyxFQUFFLE1BQU0sV0FBVyxJQUFJTyxFQUFFLG1CQUFtQjhoQixXQUFXQSxXQUFXemlCLEVBQUUsTUFBTUksR0FBR08sRUFBRVgsRUFBRSxJQUFJTCxFQUFFLG1CQUFtQnkrQixhQUFhQSxhQUFhaHdCLEVBQUUsTUFBTWhPLEdBQUdULEVBQUV5TyxHQUF6SSxHQUErSSxJQUFJalAsRUFBRUksRUFBRSxHQUFHbTRDLEdBQUUsRUFBR0MsR0FBRyxFQUFFLFNBQVNuNEMsSUFBSWs0QyxHQUFHdjRDLElBQUl1NEMsR0FBRSxFQUFHdjRDLEVBQUVrRCxPQUFPOUMsRUFBRUosRUFBRTRELE9BQU94RCxHQUFHbzRDLEdBQUcsRUFBRXA0QyxFQUFFOEMsUUFBUXUxQyxLQUFLLFNBQVNBLElBQUksSUFBSUYsRUFBRSxDQUFDLElBQUl0M0MsRUFBRWEsRUFBRXpCLEdBQUdrNEMsR0FBRSxFQUFHLElBQUksSUFBSTExQyxFQUFFekMsRUFBRThDLE9BQU9MLEdBQUcsQ0FBQyxJQUFJN0MsRUFBRUksRUFBRUEsRUFBRSxLQUFLbzRDLEVBQUUzMUMsR0FBRzdDLEdBQUdBLEVBQUV3NEMsR0FBR3JlLE1BQU1xZSxHQUFHLEVBQUUzMUMsRUFBRXpDLEVBQUU4QyxPQUFPbEQsRUFBRSxLQUFLdTRDLEdBQUUsRUFBRyxTQUFTdDNDLEdBQUcsR0FBR1QsSUFBSXkrQixhQUFhLE9BQU9BLGFBQWFoK0IsR0FBRyxJQUFJVCxJQUFJeU8sSUFBSXpPLElBQUl5K0IsYUFBYSxPQUFPeitCLEVBQUV5K0IsYUFBYUEsYUFBYWgrQixHQUFHLElBQUlULEVBQUVTLEdBQUcsTUFBTTRCLEdBQUcsSUFBSSxPQUFPckMsRUFBRU4sS0FBSyxLQUFLZSxHQUFHLE1BQU00QixHQUFHLE9BQU9yQyxFQUFFTixLQUFLc0gsS0FBS3ZHLEtBQWxNLENBQXdNQSxJQUFJLFNBQVNZLEVBQUVaLEVBQUU0QixHQUFHMkUsS0FBS3NqRSxJQUFJN3BFLEVBQUV1RyxLQUFLTyxNQUFNbEYsRUFBRSxTQUFTNGQsS0FBSzFnQixFQUFFd3FFLFNBQVMsU0FBU3RwRSxHQUFHLElBQUk0QixFQUFFLElBQUkrSSxNQUFNbEIsVUFBVXhILE9BQU8sR0FBRyxHQUFHd0gsVUFBVXhILE9BQU8sRUFBRSxJQUFJLElBQUkxQixFQUFFLEVBQUVBLEVBQUVrSixVQUFVeEgsT0FBTzFCLElBQUlxQixFQUFFckIsRUFBRSxHQUFHa0osVUFBVWxKLEdBQUdwQixFQUFFZ0UsS0FBSyxJQUFJdkMsRUFBRVosRUFBRTRCLElBQUksSUFBSXpDLEVBQUU4QyxRQUFRcTFDLEdBQUd6MkMsRUFBRTIyQyxJQUFJNTJDLEVBQUVGLFVBQVV3NEIsSUFBSSxXQUFXM3lCLEtBQUtzakUsSUFBSTlpRSxNQUFNLEtBQUtSLEtBQUtPLFFBQVFoSSxFQUFFZ3JFLE1BQU0sVUFBVWhyRSxFQUFFaXJFLFNBQVEsRUFBR2pyRSxFQUFFa3JFLElBQUksR0FBR2xyRSxFQUFFbXJFLEtBQUssR0FBR25yRSxFQUFFb3JFLFFBQVEsR0FBR3ByRSxFQUFFcXJFLFNBQVMsR0FBR3JyRSxFQUFFNHJCLEdBQUdsTCxFQUFFMWdCLEVBQUVzckUsWUFBWTVxRCxFQUFFMWdCLEVBQUVvaEIsS0FBS1YsRUFBRTFnQixFQUFFaXNCLElBQUl2TCxFQUFFMWdCLEVBQUV1ckUsZUFBZTdxRCxFQUFFMWdCLEVBQUV3ckUsbUJBQW1COXFELEVBQUUxZ0IsRUFBRXlyRSxLQUFLL3FELEVBQUUxZ0IsRUFBRTByRSxnQkFBZ0JockQsRUFBRTFnQixFQUFFMnJFLG9CQUFvQmpyRCxFQUFFMWdCLEVBQUU0ckUsVUFBVSxTQUFTMXFFLEdBQUcsTUFBTSxJQUFJbEIsRUFBRTZyRSxRQUFRLFNBQVMzcUUsR0FBRyxNQUFNLElBQUk4RCxNQUFNLHFDQUFxQ2hGLEVBQUU4ckUsSUFBSSxXQUFXLE1BQU0sS0FBSzlyRSxFQUFFK3JFLE1BQU0sU0FBUzdxRSxHQUFHLE1BQU0sSUFBSThELE1BQU0sbUNBQW1DaEYsRUFBRWdzRSxNQUFNLFdBQVcsT0FBTyxJQUFJLFNBQVM5cUUsRUFBRTRCLEVBQUVyQixHQUFHLGFBQWFBLEVBQUVYLEVBQUVnQyxHQUFHLElBQUlyQyxFQUFFZ0IsRUFBRSxHQUFHekIsRUFBRSxTQUFTa0IsRUFBRTRCLEVBQUVyQixFQUFFaEIsR0FBRyxPQUFPLElBQUlnQixJQUFJQSxFQUFFMjZDLFdBQVcsU0FBU3A4QyxFQUFFYyxHQUFHLFNBQVNvTyxFQUFFaE8sR0FBRyxJQUFJakIsRUFBRVEsRUFBRWlSLEtBQUt4USxJQUFJLE1BQU1BLEdBQUdKLEVBQUVJLElBQUksU0FBU2EsRUFBRWIsR0FBRyxJQUFJakIsRUFBRVEsRUFBRSs0QyxNQUFNdDRDLElBQUksTUFBTUEsR0FBR0osRUFBRUksSUFBSSxTQUFTakIsRUFBRWlCLEdBQUcsSUFBSTRCLEVBQUU1QixFQUFFeU4sS0FBSzNPLEVBQUVrQixFQUFFRCxRQUFRNkIsRUFBRTVCLEVBQUVELE1BQU02QixhQUFhckIsRUFBRXFCLEVBQUUsSUFBSXJCLEdBQUcsU0FBU1AsR0FBR0EsRUFBRTRCLE9BQU8wZCxLQUFLdFIsRUFBRW5OLEdBQUc5QixHQUFHUSxFQUFFQSxFQUFFd0gsTUFBTS9HLEVBQUU0QixHQUFHLEtBQUs0TyxZQUFZNVEsRUFBRSxTQUFTSSxFQUFFNEIsR0FBRyxJQUFJckIsRUFBRWhCLEVBQUVULEVBQUVjLEVBQUVvTyxFQUFFLENBQUMrOEQsTUFBTSxFQUFFQyxLQUFLLFdBQVcsR0FBRyxFQUFFbHNFLEVBQUUsR0FBRyxNQUFNQSxFQUFFLEdBQUcsT0FBT0EsRUFBRSxJQUFJbXNFLEtBQUssR0FBR0MsSUFBSSxJQUFJLE9BQU90ckUsRUFBRSxDQUFDNFEsS0FBSzNQLEVBQUUsR0FBR3kzQyxNQUFNejNDLEVBQUUsR0FBR3MzQyxPQUFPdDNDLEVBQUUsSUFBSSxtQkFBbUJoQixTQUFTRCxFQUFFQyxPQUFPc00sVUFBVSxXQUFXLE9BQU81RixPQUFPM0csRUFBRSxTQUFTaUIsRUFBRWpCLEdBQUcsT0FBTyxTQUFTaUIsR0FBRyxPQUFPLFNBQVNqQixHQUFHLEdBQUdXLEVBQUUsTUFBTSxJQUFJc2hCLFVBQVUsbUNBQW1DLEtBQUs3VCxHQUFHLElBQUksR0FBR3pOLEVBQUUsRUFBRWhCLElBQUlULEVBQUUsRUFBRWMsRUFBRSxHQUFHTCxFQUFFNDRDLE9BQU92NEMsRUFBRSxHQUFHTCxFQUFFKzRDLFNBQVN4NUMsRUFBRVMsRUFBRTQ0QyxTQUFTcjVDLEVBQUVHLEtBQUtNLEdBQUcsR0FBR0EsRUFBRWlSLFNBQVMxUixFQUFFQSxFQUFFRyxLQUFLTSxFQUFFSyxFQUFFLEtBQUs2TixLQUFLLE9BQU8zTyxFQUFFLE9BQU9TLEVBQUUsRUFBRVQsSUFBSWMsRUFBRSxDQUFDLEVBQUVBLEVBQUUsR0FBR2QsRUFBRWlCLFFBQVFILEVBQUUsSUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFZCxFQUFFYyxFQUFFLE1BQU0sS0FBSyxFQUFFLE9BQU9vTyxFQUFFKzhELFFBQVEsQ0FBQ2hyRSxNQUFNSCxFQUFFLEdBQUc2TixNQUFLLEdBQUksS0FBSyxFQUFFTyxFQUFFKzhELFFBQVF4ckUsRUFBRUssRUFBRSxHQUFHQSxFQUFFLENBQUMsR0FBRyxTQUFTLEtBQUssRUFBRUEsRUFBRW9PLEVBQUVrOUQsSUFBSWg5RCxNQUFNRixFQUFFaTlELEtBQUsvOEQsTUFBTSxTQUFTLFFBQVEsTUFBZXBQLEdBQVZBLEVBQUVrUCxFQUFFaTlELE1BQVVocEUsT0FBTyxHQUFHbkQsRUFBRUEsRUFBRW1ELE9BQU8sS0FBSyxJQUFJckMsRUFBRSxJQUFJLElBQUlBLEVBQUUsSUFBSSxDQUFDb08sRUFBRSxFQUFFLFNBQVMsR0FBRyxJQUFJcE8sRUFBRSxNQUFNZCxHQUFHYyxFQUFFLEdBQUdkLEVBQUUsSUFBSWMsRUFBRSxHQUFHZCxFQUFFLElBQUksQ0FBQ2tQLEVBQUUrOEQsTUFBTW5yRSxFQUFFLEdBQUcsTUFBTSxHQUFHLElBQUlBLEVBQUUsSUFBSW9PLEVBQUUrOEQsTUFBTWpzRSxFQUFFLEdBQUcsQ0FBQ2tQLEVBQUUrOEQsTUFBTWpzRSxFQUFFLEdBQUdBLEVBQUVjLEVBQUUsTUFBTSxHQUFHZCxHQUFHa1AsRUFBRSs4RCxNQUFNanNFLEVBQUUsR0FBRyxDQUFDa1AsRUFBRSs4RCxNQUFNanNFLEVBQUUsR0FBR2tQLEVBQUVrOUQsSUFBSS9uRSxLQUFLdkQsR0FBRyxNQUFNZCxFQUFFLElBQUlrUCxFQUFFazlELElBQUloOUQsTUFBTUYsRUFBRWk5RCxLQUFLLzhELE1BQU0sU0FBU3RPLEVBQUVnQyxFQUFFM0MsS0FBS2UsRUFBRWdPLEdBQUcsTUFBTWhPLEdBQUdKLEVBQUUsQ0FBQyxFQUFFSSxHQUFHVCxFQUFFLEVBQXpuQixRQUFtb0JnQixFQUFFekIsRUFBRSxFQUFFLEdBQUcsRUFBRWMsRUFBRSxHQUFHLE1BQU1BLEVBQUUsR0FBRyxNQUFNLENBQUNHLE1BQU1ILEVBQUUsR0FBR0EsRUFBRSxRQUFHLEVBQU82TixNQUFLLEdBQWp4QixDQUFzeEIsQ0FBQzdOLEVBQUVpQixPQUFPbU4sRUFBRSxXQUFXLFNBQVNoTyxFQUFFQSxHQUFHdUcsS0FBSzRrRSxVQUFVLEVBQUU1a0UsS0FBSzZrRSxVQUFVLElBQUk3a0UsS0FBSzhrRSxXQUFXLEVBQUU5a0UsS0FBSytrRSxTQUFTLElBQUkva0UsS0FBS2dsRSxVQUFVLEVBQUVobEUsS0FBS2lsRSxVQUFTLEVBQUdqbEUsS0FBS2tsRSxZQUFXLEVBQUdsbEUsS0FBS21sRSxhQUFZLEVBQUdubEUsS0FBS29sRSxVQUFTLEVBQUdwbEUsS0FBS3FsRSxXQUFXLCtCQUErQnJsRSxLQUFLc2xFLFVBQVU3ckUsRUFBRSxPQUFPQSxFQUFFVSxVQUFVZ0ksS0FBSyxTQUFTMUksR0FBRyxPQUFPQSxhQUFhdTBDLFlBQVlodUMsS0FBS3VsRSxxQkFBcUI5ckUsR0FBR0EsYUFBYStyRSxTQUFTeGxFLEtBQUt5bEUsb0JBQW9CaHNFLEdBQUd1RyxLQUFLMGxFLG9CQUFvQmpzRSxJQUFJQSxFQUFFVSxVQUFVc3JFLG9CQUFvQixTQUFTaHNFLEdBQUcsSUFBSTRCLEVBQUUyRSxLQUFLLE9BQU9BLEtBQUsybEUsVUFBVWxzRSxFQUFFTCxJQUFJLE9BQU93c0UsTUFBTTVsRSxLQUFLMmxFLFVBQVUsQ0FBQy9zRCxPQUFPLE9BQU93SSxLQUFLM25CLElBQUlzZixNQUFNLFNBQVN0ZixHQUFHLE9BQU9BLEVBQUU2akMsVUFBVXZrQixNQUFNLFNBQVN0ZixHQUFHLE9BQU80QixFQUFFcXFFLG9CQUFvQmpzRSxPQUFPQSxFQUFFVSxVQUFVdXJFLG9CQUFvQixTQUFTanNFLEdBQUcsT0FBT2xCLEVBQUV5SCxVQUFLLE9BQU8sR0FBUSxXQUFXLE9BQU8zRyxFQUFFMkcsTUFBTSxTQUFTM0UsR0FBRyxPQUFPMkUsS0FBS3FsRSxXQUFXNXJFLEVBQUVrc0UsVUFBVTNsRSxLQUFLc2xFLFVBQVUsWUFBWXRsRSxLQUFLcWxFLFlBQVlybEUsS0FBS21sRSxZQUFZMXJFLEVBQUVnMUMsV0FBV3p1QyxLQUFLc2xFLFVBQVUsYUFBYXRsRSxLQUFLbWxFLGFBQWFubEUsS0FBS2lsRSxTQUFTeHJFLEVBQUUrMEMsUUFBUXh1QyxLQUFLc2xFLFVBQVUsVUFBVXRsRSxLQUFLaWxFLFVBQVVqbEUsS0FBS2tsRSxXQUFXenJFLEVBQUU4MEMsVUFBVXZ1QyxLQUFLc2xFLFVBQVUsWUFBWXRsRSxLQUFLa2xFLFlBQVlsbEUsS0FBS29sRSxTQUFTM3JFLEVBQUVvc0UsUUFBUTdsRSxLQUFLc2xFLFVBQVUsVUFBVXRsRSxLQUFLb2xFLFVBQVUzckUsRUFBRW8xQyxTQUFTN3VDLEtBQUs0a0UsVUFBVW5yRSxFQUFFbzFDLFNBQVM3dUMsS0FBSzRrRSxVQUFVLEVBQUU1a0UsS0FBS3NsRSxVQUFVLFdBQVd0bEUsS0FBSzRrRSxXQUFXbnJFLEVBQUVxc0UsU0FBU3RoRSxLQUFLaXFCLE1BQU1qcUIsS0FBS3VoRSxJQUFJdHNFLEVBQUVxc0UsV0FBV3JzRSxFQUFFcXNFLFNBQVMsRUFBRTlsRSxLQUFLZ2xFLFVBQVV2ckUsRUFBRXFzRSxTQUFTOWxFLEtBQUtnbEUsVUFBVSxFQUFFaGxFLEtBQUtzbEUsVUFBVSxXQUFXdGxFLEtBQUtnbEUsV0FBV3ZyRSxFQUFFcTFDLFNBQVM5dUMsS0FBSzRrRSxVQUFVNWtFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNmtFLFVBQVVyZ0UsS0FBS2lxQixPQUFPaDFCLEVBQUVxMUMsU0FBUzl1QyxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVU1a0UsS0FBSzZrRSxVQUFVN2tFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVU1a0UsS0FBS3NsRSxVQUFVLFdBQVd0bEUsS0FBSzZrRSxXQUFXcHJFLEVBQUVpMUMsVUFBVTF1QyxLQUFLNGtFLFdBQVduckUsRUFBRWkxQyxVQUFVMXVDLEtBQUs2a0UsVUFBVTdrRSxLQUFLOGtFLFdBQVd0Z0UsS0FBS2lxQixPQUFPaDFCLEVBQUVpMUMsVUFBVTF1QyxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVVuckUsRUFBRWkxQyxXQUFXMXVDLEtBQUs2a0UsVUFBVTdrRSxLQUFLOGtFLFdBQVc5a0UsS0FBSzZrRSxVQUFVN2tFLEtBQUs4a0UsV0FBVzlrRSxLQUFLNGtFLFVBQVU1a0UsS0FBS3NsRSxVQUFVLFlBQVl0bEUsS0FBSzhrRSxZQUFZcnJFLEVBQUVtMUMsUUFBUTV1QyxLQUFLOGtFLFlBQVlyckUsRUFBRW0xQyxRQUFRNXVDLEtBQUs2a0UsVUFBVTdrRSxLQUFLK2tFLFNBQVN2Z0UsS0FBS2lxQixPQUFPaDFCLEVBQUVtMUMsUUFBUTV1QyxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVVuckUsRUFBRW0xQyxTQUFTNXVDLEtBQUs2a0UsVUFBVTdrRSxLQUFLK2tFLFNBQVMva0UsS0FBSzZrRSxVQUFVN2tFLEtBQUsra0UsU0FBUy9rRSxLQUFLOGtFLFdBQVc5a0UsS0FBS3NsRSxVQUFVLFVBQVV0bEUsS0FBSytrRSxVQUFVLENBQUMsR0FBRSxVQUFXdHJFLEVBQUVVLFVBQVVvckUscUJBQXFCLFNBQVM5ckUsR0FBRyxPQUFPbEIsRUFBRXlILFVBQUssT0FBTyxHQUFRLFdBQVcsSUFBSTNFLEVBQUUsT0FBT2hDLEVBQUUyRyxNQUFNLFNBQVNoRyxHQUFHLE9BQU9xQixFQUFFLENBQUNvekMsV0FBVyxTQUFTaDFDLEVBQUU2MEMsUUFBUUcsV0FBV0QsUUFBUSxTQUFTLzBDLEVBQUU2MEMsUUFBUUUsUUFBUUQsVUFBVSxTQUFTOTBDLEVBQUU2MEMsUUFBUUMsVUFBVXMzQixRQUFRLFNBQVNwc0UsRUFBRTYwQyxRQUFRdTNCLFFBQVFoM0IsU0FBU3pHLE9BQU8zdUMsRUFBRTYwQyxRQUFRTyxVQUFVQyxTQUFTMUcsT0FBTzN1QyxFQUFFNjBDLFFBQVFRLFVBQVVKLFVBQVV0RyxPQUFPM3VDLEVBQUU2MEMsUUFBUUksV0FBV0UsUUFBUXhHLE9BQU8zdUMsRUFBRTYwQyxRQUFRTSxTQUFTazNCLFNBQVMxOUIsT0FBTzN1QyxFQUFFNjBDLFFBQVF3M0IsVUFBVUgsVUFBVXY4RCxPQUFPM1AsRUFBRTYwQyxRQUFRcTNCLFlBQVksQ0FBQyxFQUFFM2xFLEtBQUswbEUsb0JBQW9CcnFFLFdBQVdwQyxPQUFPQyxlQUFlTyxFQUFFVSxVQUFVLFdBQVcsQ0FBQ2YsSUFBSSxXQUFXLE9BQU80RyxLQUFLNGtFLFdBQVdwbUQsSUFBSSxTQUFTL2tCLEdBQUdBLEVBQUV1RyxLQUFLOGtFLFdBQVc5a0UsS0FBSzRrRSxVQUFVNWtFLEtBQUs4a0UsV0FBV3RnRSxLQUFLaXFCLE9BQU96dUIsS0FBSzhrRSxXQUFXcnJFLEdBQUd1RyxLQUFLZ2xFLFdBQVdobEUsS0FBS2dsRSxVQUFVaGxFLEtBQUs0a0UsVUFBVTVrRSxLQUFLOGtFLFdBQVc5a0UsS0FBSzRrRSxZQUFZNWtFLEtBQUs2a0UsWUFBWTdrRSxLQUFLNGtFLFVBQVU1a0UsS0FBSzRrRSxVQUFVNWtFLEtBQUtnbEUsV0FBV2hsRSxLQUFLc2xFLFVBQVUsV0FBV3RsRSxLQUFLNGtFLFlBQVl6ckUsWUFBVyxFQUFHb2xCLGNBQWEsSUFBS3RsQixPQUFPQyxlQUFlTyxFQUFFVSxVQUFVLFdBQVcsQ0FBQ2YsSUFBSSxXQUFXLE9BQU80RyxLQUFLNmtFLFdBQVdybUQsSUFBSSxTQUFTL2tCLEdBQUd1RyxLQUFLaWxFLFVBQVV4ckUsR0FBR3VHLEtBQUsra0UsU0FBUy9rRSxLQUFLNmtFLFVBQVU3a0UsS0FBSytrRSxTQUFTdHJFLEdBQUd1RyxLQUFLOGtFLFdBQVc5a0UsS0FBSzZrRSxVQUFVN2tFLEtBQUs4a0UsV0FBVzlrRSxLQUFLNmtFLFVBQVVyZ0UsS0FBS2lxQixPQUFPaDFCLEVBQUV1RyxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVU1a0UsS0FBSzZrRSxZQUFZN2tFLEtBQUs0a0UsWUFBWTVrRSxLQUFLNmtFLFVBQVU3a0UsS0FBSzZrRSxVQUFVN2tFLEtBQUtnbEUsV0FBV2hsRSxLQUFLc2xFLFVBQVUsV0FBV3RsRSxLQUFLNmtFLFlBQVkxckUsWUFBVyxFQUFHb2xCLGNBQWEsSUFBS3RsQixPQUFPQyxlQUFlTyxFQUFFVSxVQUFVLFlBQVksQ0FBQ2YsSUFBSSxXQUFXLE9BQU80RyxLQUFLOGtFLFlBQVl0bUQsSUFBSSxTQUFTL2tCLEdBQUdBLEdBQUd1RyxLQUFLNGtFLFVBQVU1a0UsS0FBSzhrRSxXQUFXOWtFLEtBQUs0a0UsVUFBVTVrRSxLQUFLaWxFLFVBQVV4ckUsR0FBR3VHLEtBQUsra0UsU0FBUy9rRSxLQUFLOGtFLFdBQVc5a0UsS0FBSytrRSxTQUFTdHJFLEdBQUd1RyxLQUFLNmtFLFVBQVU3a0UsS0FBSzhrRSxXQUFXOWtFLEtBQUs2a0UsVUFBVTdrRSxLQUFLOGtFLFdBQVd0Z0UsS0FBS2lxQixPQUFPaDFCLEVBQUV1RyxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVU1a0UsS0FBS3NsRSxVQUFVLFlBQVl0bEUsS0FBSzhrRSxhQUFhM3JFLFlBQVcsRUFBR29sQixjQUFhLElBQUt0bEIsT0FBT0MsZUFBZU8sRUFBRVUsVUFBVSxVQUFVLENBQUNmLElBQUksV0FBVyxPQUFPNEcsS0FBSytrRSxVQUFVdm1ELElBQUksU0FBUy9rQixHQUFHdUcsS0FBS2lsRSxXQUFXeHJFLEVBQUV1RyxLQUFLOGtFLFlBQVlyckUsRUFBRXVHLEtBQUs2a0UsVUFBVTdrRSxLQUFLK2tFLFNBQVN2Z0UsS0FBS2lxQixPQUFPaDFCLEVBQUV1RyxLQUFLOGtFLFlBQVk5a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLOGtFLFdBQVdyckUsR0FBR3VHLEtBQUs2a0UsVUFBVTdrRSxLQUFLK2tFLFNBQVMva0UsS0FBSzZrRSxVQUFVN2tFLEtBQUsra0UsU0FBUy9rRSxLQUFLOGtFLFdBQVc5a0UsS0FBS3NsRSxVQUFVLFVBQVV0bEUsS0FBSytrRSxZQUFZNXJFLFlBQVcsRUFBR29sQixjQUFhLElBQUt0bEIsT0FBT0MsZUFBZU8sRUFBRVUsVUFBVSxXQUFXLENBQUNmLElBQUksV0FBVyxPQUFPNEcsS0FBS2dsRSxXQUFXeG1ELElBQUksU0FBUy9rQixHQUFHLElBQUk0QixFQUFFbUosS0FBS3VoRSxJQUFJL2xFLEtBQUs2a0UsVUFBVTdrRSxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxVQUFVdnJFLEVBQUU0QixHQUFHNUIsRUFBRSxFQUFFK0ssS0FBS2lxQixNQUFNaDFCLEdBQUdBLEdBQUc0QixFQUFFQSxFQUFFLEVBQUUyRSxLQUFLc2xFLFVBQVUsV0FBV3RsRSxLQUFLZ2xFLFdBQVdobEUsS0FBSzhrRSxXQUFXOWtFLEtBQUs0a0UsVUFBVTVrRSxLQUFLOGtFLFdBQVd0Z0UsS0FBS2lxQixPQUFPenVCLEtBQUs4a0UsV0FBVzlrRSxLQUFLNGtFLFdBQVc1a0UsS0FBS2dsRSxXQUFXaGxFLEtBQUtnbEUsVUFBVWhsRSxLQUFLNGtFLFVBQVU1a0UsS0FBSzhrRSxXQUFXOWtFLEtBQUs0a0UsVUFBVTVrRSxLQUFLc2xFLFVBQVUsWUFBWXRsRSxLQUFLOGtFLFlBQVk5a0UsS0FBS2lsRSxXQUFXamxFLEtBQUsra0UsU0FBUy9rRSxLQUFLOGtFLFdBQVc5a0UsS0FBSytrRSxTQUFTdmdFLEtBQUtpcUIsT0FBT3p1QixLQUFLK2tFLFNBQVMva0UsS0FBSzRrRSxXQUFXNWtFLEtBQUtnbEUsV0FBV2hsRSxLQUFLZ2xFLFVBQVVobEUsS0FBSzRrRSxVQUFVNWtFLEtBQUsra0UsU0FBUy9rRSxLQUFLOGtFLFdBQVc5a0UsS0FBS3NsRSxVQUFVLFVBQVV0bEUsS0FBSytrRSxXQUFXL2tFLEtBQUs4dUMsU0FBUzl1QyxLQUFLOHVDLFVBQVUzMUMsWUFBVyxFQUFHb2xCLGNBQWEsSUFBS3RsQixPQUFPQyxlQUFlTyxFQUFFVSxVQUFVLGFBQWEsQ0FBQ2YsSUFBSSxXQUFXLE9BQU80RyxLQUFLbWxFLGFBQWEzbUQsSUFBSSxTQUFTL2tCLEdBQUd1RyxLQUFLbWxFLFlBQVkxckUsRUFBRXVHLEtBQUtzbEUsVUFBVSxhQUFhdGxFLEtBQUttbEUsY0FBY2hzRSxZQUFXLEVBQUdvbEIsY0FBYSxJQUFLdGxCLE9BQU9DLGVBQWVPLEVBQUVVLFVBQVUsVUFBVSxDQUFDZixJQUFJLFdBQVcsT0FBTzRHLEtBQUtpbEUsVUFBVXptRCxJQUFJLFNBQVMva0IsR0FBR3VHLEtBQUtpbEUsU0FBU3hyRSxFQUFFdUcsS0FBS3NsRSxVQUFVLFVBQVV0bEUsS0FBS2lsRSxVQUFVamxFLEtBQUs0dUMsUUFBUTV1QyxLQUFLK2tFLFVBQVU1ckUsWUFBVyxFQUFHb2xCLGNBQWEsSUFBS3RsQixPQUFPQyxlQUFlTyxFQUFFVSxVQUFVLFlBQVksQ0FBQ2YsSUFBSSxXQUFXLE9BQU80RyxLQUFLa2xFLFlBQVkxbUQsSUFBSSxTQUFTL2tCLEdBQUd1RyxLQUFLa2xFLFdBQVd6ckUsRUFBRXVHLEtBQUtzbEUsVUFBVSxZQUFZdGxFLEtBQUtrbEUsYUFBYS9yRSxZQUFXLEVBQUdvbEIsY0FBYSxJQUFLdGxCLE9BQU9DLGVBQWVPLEVBQUVVLFVBQVUsVUFBVSxDQUFDZixJQUFJLFdBQVcsT0FBTzRHLEtBQUtvbEUsVUFBVTVtRCxJQUFJLFNBQVMva0IsR0FBR3VHLEtBQUtvbEUsU0FBUzNyRSxFQUFFdUcsS0FBS3NsRSxVQUFVLFVBQVV0bEUsS0FBS29sRSxXQUFXanNFLFlBQVcsRUFBR29sQixjQUFhLElBQUt0bEIsT0FBT0MsZUFBZU8sRUFBRVUsVUFBVSxZQUFZLENBQUNmLElBQUksV0FBVyxPQUFPNEcsS0FBS3FsRSxZQUFZN21ELElBQUksU0FBUy9rQixHQUFHdUcsS0FBS3FsRSxXQUFXNXJFLEVBQUV1RyxLQUFLc2xFLFVBQVUsWUFBWXRsRSxLQUFLcWxFLGFBQWFsc0UsWUFBVyxFQUFHb2xCLGNBQWEsSUFBSzlrQixFQUF2OUwsR0FBNDlMYSxHQUFHTixFQUFFLEdBQUcsV0FBVyxTQUFTUCxJQUFJdUcsS0FBS2dtRSxPQUFPLElBQUl2K0QsRUFBRXpILEtBQUtpbUUsU0FBU2xzRSxLQUFLaUcsT0FBT0EsS0FBSzZvQixLQUFLbHVCLFNBQVNxQyxjQUFjLGdCQUFnQmdELEtBQUs2b0IsS0FBSzRrQixVQUFVenRDLEtBQUtBLEtBQUs2b0IsS0FBSzNiLGlCQUFpQixjQUFjbE4sS0FBS2ttRSxpQkFBaUJuc0UsS0FBS2lHLE9BQU8sT0FBT3ZHLEVBQUVVLFVBQVVnSSxLQUFLLFNBQVMxSSxHQUFHdUcsS0FBS2dtRSxPQUFPN2pFLEtBQUsxSSxHQUFHc2YsTUFBTSxXQUFXLE9BQU8wRCxRQUFRdzVCLElBQUksb0NBQW1DLEtBQU1qNUIsT0FBTyxTQUFTdmpCLEdBQUcsT0FBT2dqQixRQUFRdzVCLElBQUksOEJBQThCeDhDLElBQUcsTUFBT0EsRUFBRVUsVUFBVWdzRSxTQUFTLFNBQVMxc0UsRUFBRTRCLEdBQUcyRSxLQUFLZ21FLE9BQU92c0UsR0FBRzRCLEdBQUc1QixFQUFFVSxVQUFVaXNFLFNBQVMsU0FBUzNzRSxHQUFHLE9BQU91RyxLQUFLZ21FLE9BQU92c0UsSUFBSUEsRUFBRVUsVUFBVStyRSxpQkFBaUIsU0FBU3pzRSxHQUFHLE9BQU9BLEVBQUVxckIsa0JBQWtCcnJCLEVBQUU4dUIsT0FBT3p2QixNQUFNLElBQUksWUFBWSxJQUFJLFVBQVVrSCxLQUFLbW1FLFNBQVMxc0UsRUFBRTh1QixPQUFPenZCLEtBQUtrSCxLQUFLcW1FLGlCQUFpQjVzRSxNQUFNQSxFQUFFVSxVQUFVa3NFLGlCQUFpQixTQUFTNXNFLEdBQUcsSUFBSTRCLEdBQUcyRSxLQUFLZ21FLE9BQU9sM0IsU0FBUzl1QyxLQUFLZ21FLE9BQU9uM0IsVUFBVSxJQUFJNzBDLEVBQUVnRyxLQUFLZ21FLE9BQU9GLFNBQVN6cUUsRUFBRSxPQUFPQSxFQUFFQSxHQUFHckIsRUFBRXdLLEtBQUtpcUIsTUFBTWgxQixFQUFFOHVCLE9BQU8vdUIsTUFBTVEsR0FBR0EsR0FBR2dHLEtBQUtnbUUsT0FBT24zQixTQUFTcnFDLEtBQUtpcUIsTUFBTXB6QixJQUFJNUIsRUFBRVUsVUFBVThyRSxTQUFTLFNBQVN4c0UsRUFBRTRCLEdBQUcyRSxLQUFLNm9CLEtBQUtpbEIsYUFBYXIwQyxFQUFFNEIsR0FBRzJFLEtBQUs2b0IsS0FBS3VuQixjQUFjLElBQUlDLFlBQVksY0FBYyxDQUFDbG9CLFNBQVEsRUFBR0MsWUFBVyxFQUFHakksVUFBUyxFQUFHb0ksT0FBTyxDQUFDenZCLEtBQUtXLEVBQUVELE1BQU02QixPQUFPNUIsRUFBbmtDLEtBQTBrQyxTQUFTQSxHQUFHLFNBQVM0QixFQUFFNUIsR0FBRyxNQUFNLGNBQWNBLEVBQUVBLEVBQUV5SSxHQUFHeXBDLE9BQU8sU0FBUzN4QyxFQUFFaEIsR0FBRyxHQUFHLElBQUlnSCxLQUFLdEUsT0FBTyxPQUFPc0UsS0FBSyxJQUFJekgsRUFBRSxHQUFHLFFBQUcsSUFBU3lCLEVBQUUsT0FBT2dHLEtBQUs4QyxNQUFNLFdBQVd6SCxFQUFFMkUsT0FBT3pILEVBQUVxRSxLQUFLb0QsU0FBU3ZHLElBQUlnSixVQUFVbEssR0FBRyxHQUFHLFNBQVN5QixFQUFFLE9BQU9nRyxLQUFLOEMsTUFBTSxXQUFXLEdBQUd6SCxFQUFFMkUsTUFBTWhILEdBQUdnSCxLQUFLeXRDLFdBQVd6dEMsS0FBS3l0QyxVQUFVdHJDLEtBQUtuSixHQUFHVCxFQUFFcUUsS0FBS29ELFVBQVUsQ0FBQyxJQUFJdkcsRUFBRSxJQUFJYSxFQUFFYixFQUFFb3ZCLEtBQUt6YixVQUFVcE4sS0FBS29OLFVBQVVwTixLQUFLbXNCLFlBQVkxeUIsRUFBRW92QixNQUFNdHdCLEVBQUVxRSxLQUFLbkQsRUFBRW92QixXQUFNLElBQVM3dkIsRUFBRVMsRUFBRTBJLEtBQUtuQyxNQUFNdkcsRUFBRTBJLEtBQUtuSixPQUFPUyxJQUFJZ0osVUFBVWxLLEdBQUcsR0FBR3lCLEVBQUUsQ0FBQyxRQUFHLElBQVNoQixJQUFJcUMsRUFBRTJFLEtBQUssSUFBSSxPQUFPQSxLQUFLOEMsTUFBTSxXQUFXLEdBQUd6SCxFQUFFMkUsT0FBT0EsS0FBS3l0QyxVQUFVLE9BQU96dEMsS0FBS3l0QyxVQUFVMDRCLFNBQVNuc0UsRUFBRWhCLE1BQU1nSCxLQUFLLEdBQUdBLEtBQUssR0FBR3l0QyxVQUFVLE9BQU96dEMsS0FBSyxHQUFHeXRDLFVBQVUyNEIsU0FBU3BzRSxLQUFob0IsQ0FBc29CaEIsUSxpQ0NwQjdvMkgsSUFBSSt1QyxFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSxrQ0NsQm5DLElBQUlGLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLCtDQ2xCbkMsYSxnQkNBQSxJQUFJRixFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSxrQ0NsQm5DLElBQUlGLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLCtDQ2xCbkMsTyxnQkNBQSxJQUFJRixFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSwrQ0NsQm5DLE8sZ0JDQUEsSUFBSUYsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEksK0NDbEJuQyxhLGdCQ0FBLElBQUlGLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLCtDQ2xCbkMsTyxnQkNBQSxJQUFJRixFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSxrQ0NsQm5DLElBQUlGLEVBQU0sRUFBUSxHQUNGOXZCLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXRlLFdBQWFzZSxFQUFRK3ZCLFFBQVUvdkIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDM2YsRUFBT0MsRUFBSTBmLEVBQVMsTUFHOUMsSUFBSXBjLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJLGdEQ2xCbkMsa0JBSUFqQyxFQUFFLFNBQVM3aEIsR0FBRyxTQUVkLFNBQTRCeWUsR0FDMUIsSUFBTTBqQyxFQUFZdGdDLEVBQUVwRCxFQUFJamMsZUFBZWxaLEtBQUssZUFBZTBJLEdBQUcsWUFFOUQ2dkIsRUFBRXBELEVBQUlqYyxlQUFlbFosS0FBSyx5QkFBeUIzSyxNQUFLLFdBQ2xEd2pFLEVBQ0Z0Z0MsRUFBRWhtQyxNQUFNNEIsS0FBS3dtQyxPQUFPcEMsRUFBRWhtQyxNQUFNNEIsUUFBVSxHQUV0Q29rQyxFQUFFaG1DLE1BQU00QixLQUFLd21DLE9BQU9wQyxFQUFFaG1DLE1BQU00QixRQUFVLE9BVEQ3SCxVQUFLLE0saUNDSmhELElBQUlndUMsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEksa0NDbEJuQyxJQUFJRixFQUFNLEVBQVEsR0FDRjl2QixFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF0ZSxXQUFhc2UsRUFBUSt2QixRQUFVL3ZCLEtBRy9DQSxFQUFVLENBQUMsQ0FBQzNmLEVBQU9DLEVBQUkwZixFQUFTLE1BRzlDLElBQUlwYyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUGtzQyxFQUFJOXZCLEVBQVNwYyxHQUkxQnZELEVBQU9ELFFBQVU0ZixFQUFRZ3dCLFFBQVUsSSw2RENsQnBCLElDQUEsSUNBQSxJLDBDQ0FBLElDQUEsSSwwQ0NBZixzREF1QklzK0IsR0F2QkosMkZBdUJxQnZnQyxFQUFFLG9CQUNuQndnQyxFQUFvQkQsRUFBZTk0RCxLQUFLLHNCQUN4Q28rQixFQUFlMDZCLEVBQWU5NEQsS0FBSyxpQkFDbkMwNkIsRUFBYW8rQixFQUFlOTRELEtBQUssZUFDakNzK0IsRUFBY3c2QixFQUFlOTRELEtBQUssZ0JBRXRDLElBQUl5NEIsSUFBaUJzZ0MsRUFBa0JwakUsR0FBRyxJQUMxQyxJQUFJOGtDLElBQVVDLEdBQ2QsSUFBSTJELElBQVdDLEdBQ2YsSUFBSUgsSUFBWUMsR0FDaEIsSUFBSTNGLElBQWlCc2dDLEVBQWtCcGpFLEdBQUcsR0FBSSxRQUM5QyxJQUFJOGlDLElBQWlCc2dDLEVBQWtCcGpFLEdBQUcsR0FBSSxRQUFRc2pDLGVBQ3RELElBQUlSLElBQWlCc2dDLEVBQWtCcGpFLEdBQUcsSUFBSXNqQyxlQUM5QyxJQUFJUixJQUFpQnNnQyxFQUFrQnBqRSxHQUFHLElBQUlzakMsZ0IsaUNDcEM5QyxJQUFJcUIsRUFBTSxFQUFRLEdBQ0Y5dkIsRUFBVSxFQUFRLEtBSUMsaUJBRnZCQSxFQUFVQSxFQUFRdGUsV0FBYXNlLEVBQVErdkIsUUFBVS92QixLQUcvQ0EsRUFBVSxDQUFDLENBQUMzZixFQUFPQyxFQUFJMGYsRUFBUyxNQUc5QyxJQUFJcGMsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVBrc0MsRUFBSTl2QixFQUFTcGMsR0FJMUJ2RCxFQUFPRCxRQUFVNGYsRUFBUWd3QixRQUFVLEkiLCJmaWxlIjoiZWxlbWVudHMuNDJmNTNhYzVmODljNmU1ZDlhNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTA3KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuL2J1dHRvbi5zYXNzJzsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMC0wNS0wNFQyMjo0OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy41LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjVcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjAtMDMtMTRcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCI7XG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0ICkgPiAzO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHRcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJiBqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMudG9wID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy50b3AgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMubGVmdCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMubGVmdCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgJy4uL2J1dHRvbi9idXR0b24nO1xuaW1wb3J0ICcuL2Ryb3Bkb3duLXF1YW50aXR5LnNhc3MnO1xuXG5cbmNsYXNzIERyb3Bkb3duUXVhbnRpdHkge1xuICAjJGRyb3Bkb3duO1xuICAjJGhlYWRPdXQ7XG4gICMkaGVhZGVyO1xuICAjJGl0ZW1IZWFkZXI7XG4gICMkcGlja2VyO1xuICAjJG1pbnVzO1xuICAjJHBsdXM7XG4gICMkYW1vdW50O1xuICAjJGNsZWFyO1xuICAjJHN1Ym1pdDtcbiAgI3NldFZhbGlkUXVhbnRpdHk7XG4gICNzZXRDYXB0aW9uO1xuICAjcXVhbnRpdHkgPSB7XG4gICAgZmlyc3RJdGVtOiAwLFxuICAgIHNlY29uZEl0ZW06IDAsXG4gICAgdGhpcmRJdGVtOiAwLFxuICAgIGlzRmlyc3RJdGVtOiB1bmRlZmluZWQsXG4gICAgaXNTZWNvbmRJdGVtOiB1bmRlZmluZWQsXG4gICAgaXNUaGlyZEl0ZW06IHVuZGVmaW5lZCxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCRkcm9wZG93biwgbW9kZSkge1xuICAgIHRoaXMuIyRkcm9wZG93biA9ICRkcm9wZG93bjtcbiAgICB0aGlzLiMkaGVhZGVyID0gJGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bi1xdWFudGl0eV9faGVhZCcpO1xuICAgIHRoaXMuIyRpdGVtSGVhZGVyID0gJGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bi1xdWFudGl0eV9fcGlja2VyLWl0ZW0taGVhZGVyJylcbiAgICB0aGlzLiMkaGVhZE91dCA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX2hlYWQtb3V0Jyk7XG4gICAgdGhpcy4jJHBpY2tlciA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlcicpO1xuICAgIHRoaXMuIyRtaW51cyA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlci1pdGVtLXF1YW50aXR5LW1pbnVzJyk7XG4gICAgdGhpcy4jJHBsdXMgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXItaXRlbS1xdWFudGl0eS1wbHVzJyk7XG4gICAgdGhpcy4jJGFtb3VudCA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlci1pdGVtLXF1YW50aXR5LWFtb3VudCcpO1xuICAgIHRoaXMuIyRjbGVhciA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlci1pdGVtLWNsZWFyJyk7XG4gICAgdGhpcy4jJHN1Ym1pdCA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlci1pdGVtLXN1Ym1pdCcpO1xuXG4gICAgdGhpcy4jJGNsZWFyLm9uKCdjbGljaycsIHRoaXMuI2NsZWFyUGlja2VyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRoZWFkZXIub24oJ2NsaWNrJywgdGhpcy50b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy4jJHN1Ym1pdC5vbignY2xpY2snLCB0aGlzLnRvZ2dsZVBpY2tlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiMkbWludXMuZXEoMCkub24oJ2NsaWNrJywgdGhpcy4jZmlyc3RJdGVtRGVsLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRtaW51cy5lcSgxKS5vbignY2xpY2snLCB0aGlzLiNzZWNvbmRJdGVtRGVsLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRtaW51cy5lcSgyKS5vbignY2xpY2snLCB0aGlzLiN0aGlyZEl0ZW1EZWwuYmluZCh0aGlzKSk7XG4gICAgdGhpcy4jJHBsdXMuZXEoMCkub24oJ2NsaWNrJywgdGhpcy4jZmlyc3RJdGVtQWRkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRwbHVzLmVxKDEpLm9uKCdjbGljaycsIHRoaXMuI3NlY29uZEl0ZW1BZGQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy4jJHBsdXMuZXEoMikub24oJ2NsaWNrJywgdGhpcy4jdGhpcmRJdGVtQWRkLmJpbmQodGhpcykpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuI3BpY2tlckhpZGRlbi5iaW5kKHRoaXMpKTtcblxuICAgIGlmIChtb2RlID09PSAncm9vbScpIHRoaXMuI2luaXRSb29tTW9kZSgpO1xuICAgIGVsc2UgdGhpcy4jaW5pdEd1ZXN0c01vZGUoKTtcbiAgICB0aGlzLnRvZ2dsZVBpY2tlcigpO1xuICB9XG5cbiAgdG9nZ2xlUGlja2VyKCkge1xuICAgIHRoaXMuIyRwaWNrZXIudG9nZ2xlQ2xhc3MoJ2Ryb3Bkb3duLXF1YW50aXR5X19waWNrZXJfaGlkZGVuJyk7XG4gIH1cblxuICAjaW5pdFJvb21Nb2RlKCkge1xuICAgIHRoaXMuIyRwaWNrZXIuZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXItaXRlbTpsYXN0LW9mLXR5cGUnKS5oaWRlKCk7XG4gICAgdGhpcy4jJGhlYWRPdXQudGV4dCgn0KPQtNC+0LHRgdGC0LLQsCDQvdC+0LzQtdGA0LAnKTtcbiAgICB0aGlzLiMkaXRlbUhlYWRlci5lcSgwKS50ZXh0KCfQodC/0LDQu9GM0L3QuCcpO1xuICAgIHRoaXMuIyRpdGVtSGVhZGVyLmVxKDEpLnRleHQoJ9Ca0YDQvtCy0LDRgtC4Jyk7XG4gICAgdGhpcy4jJGl0ZW1IZWFkZXIuZXEoMikudGV4dCgn0JLQsNC90L3Ri9C1INC60L7QvNC90LDRgtGLJyk7XG4gICAgdGhpcy4jc2V0VmFsaWRRdWFudGl0eSA9IHRoaXMuI3NldFZhbGlkUm9vbTtcbiAgICB0aGlzLiNzZXRDYXB0aW9uID0gdGhpcy4jc2V0Q2FwdGlvblJvb207XG4gIH1cblxuICAjaW5pdEd1ZXN0c01vZGUoKSB7XG4gICAgdGhpcy4jJGhlYWRPdXQudGV4dCgn0KHQutC+0LvRjNC60L4g0LPQvtGB0YLQtdC5Jyk7XG4gICAgdGhpcy4jJGl0ZW1IZWFkZXIuZXEoMCkudGV4dCgn0JLQt9GA0L7RgdC70YvQtScpO1xuICAgIHRoaXMuIyRpdGVtSGVhZGVyLmVxKDEpLnRleHQoJ9CU0LXRgtC4Jyk7XG4gICAgdGhpcy4jJGl0ZW1IZWFkZXIuZXEoMikudGV4dCgn0JzQu9Cw0LTQtdC90YbRiycpO1xuICAgIHRoaXMuI3NldFZhbGlkUXVhbnRpdHkgPSB0aGlzLiNzZXRWYWxpZEd1ZXN0cztcbiAgICB0aGlzLiNzZXRDYXB0aW9uID0gdGhpcy4jc2V0Q2FwdGlvbkd1ZXN0cztcbiAgfVxuXG4gICNzZXRWYWxpZFJvb20oKSB7XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5pc0ZpcnN0SXRlbSkge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtIDwgNSkgdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSA+IDApIHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbS0tO1xuICAgIH1cbiAgICBpZiAodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtID4gMCkge1xuICAgICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5pc1NlY29uZEl0ZW0pIHtcbiAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgIGlmICh0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtIDwgNSkgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSA+IDApIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0tLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSA9IDA7XG4gICAgICB0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0gPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtID4gMCAmJiB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtID4gMCkge1xuICAgICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5pc1RoaXJkSXRlbSkge1xuICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSA8IDUpIHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtICE9PSAwKSB0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0tLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgdGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtID0gMDtcbiAgICB0aGlzLiNxdWFudGl0eS5pc0ZpcnN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiNxdWFudGl0eS5pc1NlY29uZEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNUaGlyZEl0ZW0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICAjc2V0Q2FwdGlvblJvb20oKSB7XG4gICAgbGV0IHNlbGVjdGVkQ2FwdGlvbiA9ICcnO1xuICAgICQodGhpcy4jJGFtb3VudFswXSkudGV4dCh0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0pO1xuICAgICQodGhpcy4jJGFtb3VudFsxXSkudGV4dCh0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtKTtcbiAgICAkKHRoaXMuIyRhbW91bnRbMl0pLnRleHQodGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtKTtcbiAgICBzd2l0Y2ggKHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB0aGlzLiMkY2xlYXIuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSAn0KPQtNC+0LHRgdGC0LLQsCDQvdC+0LzQtdGA0LAnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdGhpcy4jJGNsZWFyLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IGAke3RoaXMuI3F1YW50aXR5LmZpcnN0SXRlbX0g0YHQv9Cw0LvRjNC90Y9gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgMzpcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gYCR7dGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtfSDRgdC/0LDQu9GM0L3QuGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBgJHt0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW19INGB0L/QsNC70LXQvWA7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBzZWxlY3RlZENhcHRpb24gKyBgLCAke3RoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW19INC60YDQvtCy0LDRgtGMYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IHNlbGVjdGVkQ2FwdGlvbiArIGAsICR7dGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbX0g0LrRgNC+0LLQsNGC0LhgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gc2VsZWN0ZWRDYXB0aW9uICsgYCwgJHt0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtfSDQutGA0L7QstCw0YLQtdC5YDtcbiAgICB9XG4gICAgdGhpcy4jJGhlYWRPdXQudGV4dChzZWxlY3RlZENhcHRpb24pO1xuICB9XG5cbiAgI3NldFZhbGlkR3Vlc3RzKCkge1xuICAgIGxldCBhZHVsdHNBbmRDaGlsZHJlbiA9IHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSArIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW07XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5pc0ZpcnN0SXRlbSkge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBpZiAoYWR1bHRzQW5kQ2hpbGRyZW4gPCA1KSB0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0rKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGZhbHNlOlxuICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtID4gMCkgdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtLS07XG4gICAgfVxuICAgIGFkdWx0c0FuZENoaWxkcmVuID0gdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtICsgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbTtcbiAgICBzd2l0Y2ggKHRoaXMuI3F1YW50aXR5LmlzU2Vjb25kSXRlbSkge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBpZiAoYWR1bHRzQW5kQ2hpbGRyZW4gPCA1KSB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0gPiAwKSB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtLS07XG4gICAgfVxuICAgIGFkdWx0c0FuZENoaWxkcmVuID0gdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtICsgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbTtcbiAgICBpZiAoYWR1bHRzQW5kQ2hpbGRyZW4gPiAwKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuI3F1YW50aXR5LmlzVGhpcmRJdGVtKSB7XG4gICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtIDwgNSkgdGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtKys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgIGlmICh0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0gIT09IDApIHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0gPSAwO1xuICAgIHRoaXMuI3F1YW50aXR5LmlzRmlyc3RJdGVtID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuI3F1YW50aXR5LmlzU2Vjb25kSXRlbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiNxdWFudGl0eS5pc1RoaXJkSXRlbSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gICNzZXRDYXB0aW9uR3Vlc3RzKCkge1xuICAgIGxldCBzZWxlY3RlZENhcHRpb24gPSAnJztcbiAgICBsZXQgYWR1bHRzQW5kQ2hpbGRyZW4gPSB0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0gKyB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtO1xuICAgICQodGhpcy4jJGFtb3VudFswXSkudGV4dCh0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0pO1xuICAgICQodGhpcy4jJGFtb3VudFsxXSkudGV4dCh0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtKTtcbiAgICAkKHRoaXMuIyRhbW91bnRbMl0pLnRleHQodGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtKTtcbiAgICBzd2l0Y2ggKGFkdWx0c0FuZENoaWxkcmVuKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHRoaXMuIyRjbGVhci5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9ICfQodC60L7Qu9GM0LrQviDQs9C+0YHRgtC10LknO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdGhpcy4jJGNsZWFyLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IGAke2FkdWx0c0FuZENoaWxkcmVufSDQs9C+0YHRgtGMYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IGAke2FkdWx0c0FuZENoaWxkcmVufSDQs9C+0YHRgtGPYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IGAke2FkdWx0c0FuZENoaWxkcmVufSDQs9C+0YHRgtC10LlgO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBzZWxlY3RlZENhcHRpb24gKyBgLCAke3RoaXMuI3F1YW50aXR5LnRoaXJkSXRlbX0g0LzQu9Cw0LTQtdC90LXRhmA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgY2FzZSAzOlxuICAgICAgY2FzZSA0OlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBzZWxlY3RlZENhcHRpb24gKyBgLCAke3RoaXMuI3F1YW50aXR5LnRoaXJkSXRlbX0g0LzQu9Cw0LTQtdC90YbQsGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBzZWxlY3RlZENhcHRpb24gKyBgLCAke3RoaXMuI3F1YW50aXR5LnRoaXJkSXRlbX0g0LzQu9Cw0LTQtdC90YbQtdCyYDtcbiAgICB9XG4gICAgdGhpcy4jJGhlYWRPdXQudGV4dChzZWxlY3RlZENhcHRpb24pO1xuICB9XG5cbiAgI3NldERpc2FibGVkTWludXMoKSB7XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgJCh0aGlzLiMkbWludXNbMF0pLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICAkKHRoaXMuIyRtaW51c1swXSkucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAkKHRoaXMuIyRtaW51c1sxXSkucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgICQodGhpcy4jJG1pbnVzWzFdKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgJCh0aGlzLiMkbWludXNbMl0pLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICAkKHRoaXMuIyRtaW51c1syXSkucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgI2ZpcnN0SXRlbUFkZCgpIHtcbiAgICB0aGlzLiNxdWFudGl0eS5pc0ZpcnN0SXRlbSA9IHRydWU7XG4gICAgdGhpcy4jc2V0VmFsaWRRdWFudGl0eSgpO1xuICAgIHRoaXMuI3NldENhcHRpb24oKTtcbiAgICB0aGlzLiNzZXREaXNhYmxlZE1pbnVzKCk7XG4gIH1cblxuICAjZmlyc3RJdGVtRGVsKCkge1xuICAgIHRoaXMuI3F1YW50aXR5LmlzRmlyc3RJdGVtID0gZmFsc2U7XG4gICAgdGhpcy4jc2V0VmFsaWRRdWFudGl0eSgpO1xuICAgIHRoaXMuI3NldENhcHRpb24oKTtcbiAgICB0aGlzLiNzZXREaXNhYmxlZE1pbnVzKCk7XG4gIH1cblxuICAjc2Vjb25kSXRlbUFkZCgpIHtcbiAgICB0aGlzLiNxdWFudGl0eS5pc1NlY29uZEl0ZW0gPSB0cnVlO1xuICAgIHRoaXMuI3NldFZhbGlkUXVhbnRpdHkoKTtcbiAgICB0aGlzLiNzZXRDYXB0aW9uKCk7XG4gICAgdGhpcy4jc2V0RGlzYWJsZWRNaW51cygpO1xuICB9XG5cbiAgI3NlY29uZEl0ZW1EZWwoKSB7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNTZWNvbmRJdGVtID0gZmFsc2U7XG4gICAgdGhpcy4jc2V0VmFsaWRRdWFudGl0eSgpO1xuICAgIHRoaXMuI3NldENhcHRpb24oKTtcbiAgICB0aGlzLiNzZXREaXNhYmxlZE1pbnVzKCk7XG4gIH1cblxuICAjdGhpcmRJdGVtQWRkKCkge1xuICAgIHRoaXMuI3F1YW50aXR5LmlzVGhpcmRJdGVtID0gdHJ1ZTtcbiAgICB0aGlzLiNzZXRWYWxpZFF1YW50aXR5KCk7XG4gICAgdGhpcy4jc2V0Q2FwdGlvbigpO1xuICAgIHRoaXMuI3NldERpc2FibGVkTWludXMoKTtcbiAgfVxuXG4gICN0aGlyZEl0ZW1EZWwoKSB7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNUaGlyZEl0ZW0gPSBmYWxzZTtcbiAgICB0aGlzLiNzZXRWYWxpZFF1YW50aXR5KCk7XG4gICAgdGhpcy4jc2V0Q2FwdGlvbigpO1xuICAgIHRoaXMuI3NldERpc2FibGVkTWludXMoKTtcbiAgfVxuXG4gICNjbGVhclBpY2tlcigpIHtcbiAgICB0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0gPSAwO1xuICAgIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0gPSAwO1xuICAgIHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSA9IDA7XG4gICAgdGhpcy4jc2V0Q2FwdGlvbigpO1xuICAgIHRoaXMuI3NldERpc2FibGVkTWludXMoKTtcbiAgfVxuXG4gICNwaWNrZXJIaWRkZW4oZXZ0KSB7XG4gICAgaWYgKCFldnQudGFyZ2V0LmNsb3Nlc3QoJy5kcm9wZG93bi1xdWFudGl0eScpKSB7XG4gICAgICB0aGlzLiMkcGlja2VyLmFkZENsYXNzKCdkcm9wZG93bi1xdWFudGl0eV9fcGlja2VyX2hpZGRlbicpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93blF1YW50aXR5OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuLi9idXR0b24vYnV0dG9uJztcclxuaW1wb3J0ICcuL2RhdGUtcGlja2VyLnNhc3MnO1xyXG5cclxuXHJcbmNsYXNzIERhdGVQaWNrZXIge1xyXG4gICMkcGlja2VyO1xyXG4gICMkdGl0bGU7XHJcbiAgIyRib2R5RGF0ZXM7XHJcbiAgIyRib2R5UmFuZ2VzO1xyXG5cclxuICAjZXZ0Q2xlYXIgPSAnZGF0ZS1waWNrZXItY2xlYXInO1xyXG4gICNldnRTdWJtaXQgPSAnZGF0ZS1waWNrZXItc3VibWl0JztcclxuICAjZXZ0U2VsZWN0SW4gPSAnZGF0ZS1waWNrZXItc2VsZWN0LWluJztcclxuICAjZXZ0U2VsZWN0T3V0ID0gJ2RhdGUtcGlja2VyLXNlbGVjdC1vdXQnO1xyXG4gICNwaWNrZXJEYXRlID0gbmV3IERhdGUoKTtcclxuICAjbW9udGhZZWFyID0gWyfQr9C90LLQsNGA0YwnLCAn0KTQtdCy0YDQsNC70YwnLCAn0JzQsNGA0YInLCAn0JDQv9GA0LXQu9GMJywgJ9Cc0LDQuScsICfQmNGO0L3RjCcsICfQmNGO0LvRjCcsICfQkNCy0LPRg9GB0YInLCAn0KHQtdC90YLRj9Cx0YAnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ107XHJcbiAgI2RhdGVDb21lSW5CZWZvcmU7XHJcbiAgI2RhdGVDaGVja091dEJlZm9yZTtcclxuICAjY3VycmVudERhdGUgPSB0aGlzLiNwaWNrZXJEYXRlLmdldFRpbWUoKTtcclxuICBkYXRlQ29tZUluID0gdGhpcy4jY3VycmVudERhdGUudG9TdHJpbmcoKTtcclxuICBkYXRlQ2hlY2tPdXQgPSB0aGlzLiNjdXJyZW50RGF0ZS50b1N0cmluZygpO1xyXG4gIGNvdW50ZXIgPSAwO1xyXG5cclxuXHJcbiAgY29uc3RydWN0b3IoJHBpY2tlcikge1xyXG4gICAgdGhpcy4jJHBpY2tlciA9ICRwaWNrZXI7XHJcbiAgICB0aGlzLiMkdGl0bGUgPSAkcGlja2VyLmZpbmQoJy5kYXRlLXBpY2tlcl9faGVhZC10aXRsZScpO1xyXG4gICAgdGhpcy4jJGJvZHlSYW5nZXMgPSAkcGlja2VyLmZpbmQoJy5kYXRlLXBpY2tlcl9fYm9keS1yYW5nZScpO1xyXG5cclxuICAgIHRoaXMuIyRib2R5RGF0ZXMgPSAkcGlja2VyLmZpbmQoJy5kYXRlLXBpY2tlcl9fYm9keS1kYXRlJykub24oJ2NsaWNrJywgdGhpcy4jc2VsZWN0RGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgICRwaWNrZXIuZmluZCgnLmRhdGUtcGlja2VyX19oZWFkLWxpc3QtbGVmdCcpLm9uKCdjbGljaycsIHRoaXMuI2xpc3RMZWZ0RGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgICRwaWNrZXIuZmluZCgnLmRhdGUtcGlja2VyX19oZWFkLWxpc3QtcmlnaHQnKS5vbignY2xpY2snLCB0aGlzLiNsaXN0UmlnaHREYXRlLmJpbmQodGhpcykpO1xyXG4gICAgJHBpY2tlci5maW5kKCcuZGF0ZS1waWNrZXJfX2Zvb3Rlci1jbGVhcicpLm9uKCdjbGljaycsIHRoaXMuI2NsZWFyLmJpbmQodGhpcykpO1xyXG4gICAgJHBpY2tlci5maW5kKCcuZGF0ZS1waWNrZXJfX2Zvb3Rlci1zdWJtaXQnKS5vbignY2xpY2snLCB0aGlzLiNzdWJtaXQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy4jc2V0UGlja2VyRGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgI3N1Ym1pdCgpIHtcclxuICAgIHRoaXMuIyRwaWNrZXIudHJpZ2dlcih0aGlzLiNldnRTdWJtaXQpO1xyXG4gIH1cclxuXHJcbiAgI2NsZWFyKCkge1xyXG4gICAgdGhpcy5jb3VudGVyID0gMDtcclxuICAgIHRoaXMuI3BpY2tlckRhdGUuc2V0VGltZSh0aGlzLiNjdXJyZW50RGF0ZSk7XHJcbiAgICB0aGlzLmRhdGVDb21lSW4gPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLmRhdGVDaGVja091dCA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuI3NldFRpdGxlKCk7XHJcbiAgICB0aGlzLiNzZXRQaWNrZXJEYXRlKCk7XHJcbiAgICB0aGlzLiNzZXRSYW5nZURhdGUoKTtcclxuICAgIHRoaXMuIyRwaWNrZXIudHJpZ2dlcih0aGlzLiNldnRDbGVhcik7XHJcbiAgfVxyXG5cclxuICAjc2V0VGl0bGUoKSB7XHJcbiAgICB0aGlzLiMkdGl0bGUudGV4dChgJHt0aGlzLiNtb250aFllYXJbdGhpcy4jcGlja2VyRGF0ZS5nZXRNb250aCgpXX0gJHt0aGlzLiNwaWNrZXJEYXRlLmdldEZ1bGxZZWFyKCl9YCk7XHJcbiAgfVxyXG5cclxuICAjbGlzdExlZnREYXRlKCkge1xyXG4gICAgdGhpcy4jcGlja2VyRGF0ZS5zZXRNb250aCh0aGlzLiNwaWNrZXJEYXRlLmdldE1vbnRoKCkgLSAxKTtcclxuICAgIHRoaXMuI3NldFBpY2tlckRhdGUoKTtcclxuICB9XHJcblxyXG4gICNsaXN0UmlnaHREYXRlKCkge1xyXG4gICAgdGhpcy4jcGlja2VyRGF0ZS5zZXRNb250aCh0aGlzLiNwaWNrZXJEYXRlLmdldE1vbnRoKCkgKyAxKTtcclxuICAgIHRoaXMuI3NldFBpY2tlckRhdGUoKTtcclxuICB9XHJcblxyXG4gICNzZWxlY3REYXRlKGV2dCkge1xyXG4gICAgc3dpdGNoICh0aGlzLmNvdW50ZXIpIHtcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIHRoaXMuI2RhdGVDb21lSW5CZWZvcmUgPSB0aGlzLmRhdGVDb21lSW47XHJcbiAgICAgICAgdGhpcy5kYXRlQ29tZUluID0gZXZ0LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcpO1xyXG4gICAgICAgIHRoaXMuI3NldFJhbmdlRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuY291bnRlcisrO1xyXG4gICAgICAgIHRoaXMuIyRwaWNrZXIudHJpZ2dlcih0aGlzLiNldnRTZWxlY3RJbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTpcclxuICAgICAgICB0aGlzLiNkYXRlQ2hlY2tPdXRCZWZvcmUgPSB0aGlzLmRhdGVDaGVja091dDtcclxuICAgICAgICB0aGlzLmRhdGVDaGVja091dCA9IGV2dC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lc3RhbXAnKTtcclxuICAgICAgICB0aGlzLiNzZXRSYW5nZURhdGUoKTtcclxuICAgICAgICB0aGlzLmNvdW50ZXItLTtcclxuICAgICAgICB0aGlzLiMkcGlja2VyLnRyaWdnZXIodGhpcy4jZXZ0U2VsZWN0T3V0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICNzZXRSYW5nZURhdGUoKSB7XHJcbiAgICB0aGlzLiMkYm9keURhdGVzLmVhY2goKGluZGV4LCBkYXRlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRpbWVTdGFtcCA9IGRhdGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcpO1xyXG5cclxuICAgICAgY29uc3QgaXNSYW5nZSA9IHRpbWVTdGFtcCA+PSB0aGlzLmRhdGVDb21lSW4gJiYgdGltZVN0YW1wIDw9IHRoaXMuZGF0ZUNoZWNrT3V0ICYmIHRoaXMuZGF0ZUNvbWVJbiAhPT0gdGhpcy5kYXRlQ2hlY2tPdXQ7XHJcbiAgICAgIGlmIChpc1JhbmdlKSB7XHJcbiAgICAgICAgdGhpcy4jJGJvZHlSYW5nZXNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2RhdGUtcGlja2VyX19ib2R5LXJhbmdlJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy4jJGJvZHlSYW5nZXNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2RhdGUtcGlja2VyX19ib2R5LXJhbmdlJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSB0aW1lU3RhbXAgPT09IHRoaXMuZGF0ZUNvbWVJbiB8fCB0aW1lU3RhbXAgPT09IHRoaXMuZGF0ZUNoZWNrT3V0O1xyXG4gICAgICBpZiAoaXNTZWxlY3RlZCkge1xyXG4gICAgICAgIGRhdGUuY2xhc3NMaXN0LmFkZCgnZGF0ZS1waWNrZXJfX2JvZHktZGF0ZV9zZWxlY3RlZCcpO1xyXG4gICAgICAgIGlmICh0aW1lU3RhbXAgPT09IHRoaXMuZGF0ZUNvbWVJbikge1xyXG4gICAgICAgICAgdGhpcy4jJGJvZHlSYW5nZXNbaW5kZXhdLnNldEF0dHJpYnV0ZSgnZGF0YS1yYW5nZScsICdmaXJzdCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLiMkYm9keVJhbmdlc1tpbmRleF0uc2V0QXR0cmlidXRlKCdkYXRhLXJhbmdlJywgJ2xhc3QnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGF0ZS5jbGFzc0xpc3QucmVtb3ZlKCdkYXRlLXBpY2tlcl9fYm9keS1kYXRlX3NlbGVjdGVkJyk7XHJcbiAgICAgICAgdGhpcy4jJGJvZHlSYW5nZXNbaW5kZXhdLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1yYW5nZScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGltZVN0YW1wID09PSBTdHJpbmcodGhpcy4jY3VycmVudERhdGUpKSB7XHJcbiAgICAgICAgZGF0ZS5jbGFzc0xpc3QuYWRkKCdkYXRlLXBpY2tlcl9fYm9keS1kYXRlX2N1cnJlbnQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRlLmNsYXNzTGlzdC5yZW1vdmUoJ2RhdGUtcGlja2VyX19ib2R5LWRhdGVfY3VycmVudCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICNzZXRQaWNrZXJEYXRlKCkge1xyXG4gICAgY29uc3QgZGF0ZUN1cnJlbnQgPSBuZXcgRGF0ZSh0aGlzLiNwaWNrZXJEYXRlKTtcclxuICAgIGNvbnN0IG1vbnRoID0gZGF0ZUN1cnJlbnQuZ2V0TW9udGgoKTtcclxuICAgIGRhdGVDdXJyZW50LnNldERhdGUoMSk7XHJcbiAgICBsZXQgd2Vla0RheSA9IGRhdGVDdXJyZW50LmdldERheSgpO1xyXG4gICAgaWYgKHdlZWtEYXkgPT09IDApIHdlZWtEYXkgPSA3O1xyXG4gICAgZGF0ZUN1cnJlbnQuc2V0RGF0ZSgtd2Vla0RheSArIDEpO1xyXG5cclxuICAgIHRoaXMuIyRib2R5RGF0ZXMuZWFjaCgoaW5kZXgsIGRhdGUpID0+IHtcclxuICAgICAgZGF0ZUN1cnJlbnQuc2V0RGF0ZShkYXRlQ3VycmVudC5nZXREYXRlKCkgKyAxKTtcclxuICAgICAgaWYgKGRhdGVDdXJyZW50LmdldE1vbnRoKCkgPT09IG1vbnRoKSB7XHJcbiAgICAgICAgZGF0ZS5jbGFzc0xpc3QuYWRkKCdkYXRlLXBpY2tlcl9fYm9keS1kYXRlX2RheS1tb250aCcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGUuY2xhc3NMaXN0LnJlbW92ZSgnZGF0ZS1waWNrZXJfX2JvZHktZGF0ZV9kYXktbW9udGgnKTtcclxuICAgICAgfVxyXG4gICAgICBkYXRlLnNldEF0dHJpYnV0ZSgnZGF0YS10aW1lc3RhbXAnLCBkYXRlQ3VycmVudC5nZXRUaW1lKCkpO1xyXG4gICAgICBkYXRlLnZhbHVlID0gZGF0ZUN1cnJlbnQuZ2V0RGF0ZSgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLiNzZXRUaXRsZSgpO1xyXG4gICAgdGhpcy4jc2V0UmFuZ2VEYXRlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEYXRlUGlja2VyOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2ZvbnRzLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL3RlbXBsYXRlLW1haW4uc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24uaWNvXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24tMTZ4MTYucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24tMzJ4MzIucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFuZHJvaWQtY2hyb21lLTE5MngxOTIucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFuZHJvaWQtY2hyb21lLTUxMng1MTIucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInRveGluLndlYm1hbmlmZXN0XCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNhZmFyaS1waW5uZWQtdGFiLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhcHBsZS10b3VjaC1pY29uLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtc3RpbGUtNzB4NzAucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIm1zdGlsZS0xNDR4MTQ0LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtc3RpbGUtMTUweDE1MC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwibXN0aWxlLTMxMHgxNTAucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIm1zdGlsZS0zMTB4MzEwLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJicm93c2VyY29uZmlnLnhtbFwiOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2J1dHRvbi5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi9zdWJzY3JpcHRpb24uc2Fzcyc7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vc3Vic2NyaXB0aW9uLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi4vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXInO1xyXG5pbXBvcnQgJy4vZGF0ZS1yYW5nZS5zYXNzJztcclxuXHJcblxyXG5jbGFzcyBEYXRlUmFuZ2UgZXh0ZW5kcyBEYXRlUGlja2VyIHtcclxuICAjJGRhdGVSYW5nZTtcclxuICAjJGRhdGVQaWNrZXI7XHJcbiAgIyRpbkRhdGU7XHJcbiAgIyRvdXREYXRlO1xyXG4gICNkZWZhdWx0RGF0ZSA9ICfQtNC0LtC80Lwu0LPQs9Cz0LMnO1xyXG4gICNkYXRlID0gbmV3IERhdGUoKTtcclxuXHJcbiAgLy8gXCJ0cnVlXCIgLSBzZWxlY3RlZCBpbiBkYXRlLCBcImZhbHNlXCIgLSBzZWxlY3RlZCBvdXQgZGF0ZVxyXG4gICNzZWxlY3RlZERhdGUgPSB0cnVlO1xyXG5cclxuXHJcbiAgY29uc3RydWN0b3IoJGRhdGVSYW5nZSkge1xyXG4gICAgc3VwZXIoJGRhdGVSYW5nZS5maW5kKCcuZGF0ZS1waWNrZXInKSk7XHJcbiAgICB0aGlzLiMkZGF0ZVJhbmdlID0gJGRhdGVSYW5nZTtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyID0gJGRhdGVSYW5nZS5maW5kKCcuZGF0ZS1yYW5nZV9fcGlja2VyJyk7XHJcbiAgICB0aGlzLiMkaW5EYXRlID0gJGRhdGVSYW5nZS5maW5kKCcuZGF0ZS1yYW5nZV9faGVhZC1pbi1kYXRlJyk7XHJcbiAgICB0aGlzLiMkb3V0RGF0ZSA9ICRkYXRlUmFuZ2UuZmluZCgnLmRhdGUtcmFuZ2VfX2hlYWQtb3V0LWRhdGUnKTtcclxuXHJcbiAgICAkZGF0ZVJhbmdlLmZpbmQoJy5kYXRlLXJhbmdlX19oZWFkLWluJykub24oJ2NsaWNrJywgdGhpcy4jdG9nZ2xlUGlja2VyLmJpbmQodGhpcykpO1xyXG4gICAgJGRhdGVSYW5nZS5maW5kKCcuZGF0ZS1yYW5nZV9faGVhZC1vdXQnKS5vbignY2xpY2snLCB0aGlzLiN0b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XHJcbiAgICAkZGF0ZVJhbmdlLm9uKCdkYXRlLXBpY2tlci1zZWxlY3QtaW4nLCB0aGlzLiNzZXRJbkRhdGUuYmluZCh0aGlzKSk7XHJcbiAgICAkZGF0ZVJhbmdlLm9uKCdkYXRlLXBpY2tlci1zZWxlY3Qtb3V0JywgdGhpcy4jc2V0T3V0RGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgICRkYXRlUmFuZ2Uub24oJ2RhdGUtcGlja2VyLWNsZWFyJywgdGhpcy4jc2V0RGVmYXVsdERhdGUuYmluZCh0aGlzKSk7XHJcbiAgICAkZGF0ZVJhbmdlLm9uKCdkYXRlLXBpY2tlci1zdWJtaXQnLCB0aGlzLiN0b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuI2hpZGRlblBpY2tlci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB0aGlzLiN0b2dnbGVQaWNrZXIoKTtcclxuICB9XHJcblxyXG4gIGdldERhdGVSYW5nZSgpIHtcclxuICAgIHRoaXMuI2RhdGUuc2V0VGltZShOdW1iZXIodGhpcy5kYXRlQ2hlY2tPdXQpIC0gTnVtYmVyKHRoaXMuZGF0ZUNvbWVJbikpO1xyXG4gICAgcmV0dXJuICh0aGlzLiNkYXRlLmdldERhdGUoKSAtIDEpO1xyXG4gIH1cclxuXHJcbiAgI3NldEluRGF0ZSgpIHtcclxuICAgIHRoaXMuY291bnRlciA9IDA7XHJcbiAgICB0aGlzLiNkYXRlLnNldFRpbWUoTnVtYmVyKHRoaXMuZGF0ZUNvbWVJbikpO1xyXG4gICAgY29uc3Qgc3RyID0gYCR7dGhpcy4jZGF0ZS5nZXREYXRlKCl9LiR7dGhpcy4jZ2V0TW9udGgodGhpcy4jZGF0ZS5nZXRNb250aCgpKX0uJHt0aGlzLiNkYXRlLmdldEZ1bGxZZWFyKCl9YFxyXG4gICAgdGhpcy4jJGluRGF0ZS50ZXh0KHN0cik7XHJcbiAgfVxyXG5cclxuICAjc2V0T3V0RGF0ZSgpIHtcclxuICAgIHRoaXMuY291bnRlciA9IDE7XHJcbiAgICB0aGlzLiNkYXRlLnNldFRpbWUoTnVtYmVyKHRoaXMuZGF0ZUNoZWNrT3V0KSk7XHJcbiAgICBjb25zdCBzdHIgPSBgJHt0aGlzLiNkYXRlLmdldERhdGUoKX0uJHt0aGlzLiNnZXRNb250aCh0aGlzLiNkYXRlLmdldE1vbnRoKCkpfS4ke3RoaXMuI2RhdGUuZ2V0RnVsbFllYXIoKX1gXHJcbiAgICB0aGlzLiMkb3V0RGF0ZS50ZXh0KHN0cik7XHJcbiAgfVxyXG5cclxuICAjZ2V0TW9udGgobW9udGgpIHtcclxuICAgIGxldCBtb250aFN0ciA9ICcnO1xyXG4gICAgbW9udGgrKztcclxuICAgIGlmIChtb250aCA8IDEwKSB7XHJcbiAgICAgIG1vbnRoU3RyID0gYDAke21vbnRofWA7XHJcbiAgICAgIHJldHVybiBtb250aFN0cjtcclxuICAgIH0gZWxzZSByZXR1cm4gbW9udGg7XHJcbiAgfVxyXG5cclxuICAjc2V0RGVmYXVsdERhdGUoKSB7XHJcbiAgICB0aGlzLiMkaW5EYXRlLnRleHQodGhpcy4jZGVmYXVsdERhdGUpO1xyXG4gICAgdGhpcy4jJG91dERhdGUudGV4dCh0aGlzLiNkZWZhdWx0RGF0ZSk7XHJcbiAgfVxyXG5cclxuICAjdG9nZ2xlUGlja2VyKGV2dCkge1xyXG4gICAgaWYgKGV2dCkge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbG9zZXN0KCcuZGF0ZS1yYW5nZV9faGVhZC1pbicpKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLiNzZWxlY3RlZERhdGUgfHwgdGhpcy4jJGRhdGVQaWNrZXIuaGFzQ2xhc3MoJ2RhdGUtcmFuZ2VfX3BpY2tlcl9oaWRkZW4nKSkge1xyXG4gICAgICAgICAgdGhpcy4jJGRhdGVQaWNrZXIudG9nZ2xlQ2xhc3MoJ2RhdGUtcmFuZ2VfX3BpY2tlcl9oaWRkZW4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jc2VsZWN0ZWREYXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyID0gMFxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbG9zZXN0KCcuZGF0ZS1yYW5nZV9faGVhZC1vdXQnKSkgIHtcclxuICAgICAgICBpZiAodGhpcy4jc2VsZWN0ZWREYXRlIHx8IHRoaXMuIyRkYXRlUGlja2VyLmhhc0NsYXNzKCdkYXRlLXJhbmdlX19waWNrZXJfaGlkZGVuJykpIHtcclxuICAgICAgICAgIHRoaXMuIyRkYXRlUGlja2VyLnRvZ2dsZUNsYXNzKCdkYXRlLXJhbmdlX19waWNrZXJfaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI3NlbGVjdGVkRGF0ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyID0gMVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy4jJGRhdGVQaWNrZXIudG9nZ2xlQ2xhc3MoJ2RhdGUtcmFuZ2VfX3BpY2tlcl9oaWRkZW4nKTtcclxuICB9XHJcblxyXG4gICNoaWRkZW5QaWNrZXIoZXZ0KSB7XHJcbiAgICBpZiAoIWV2dC50YXJnZXQuY2xvc2VzdCgnLmRhdGUtcmFuZ2UnKSkge1xyXG4gICAgICB0aGlzLiMkZGF0ZVBpY2tlci5hZGRDbGFzcygnZGF0ZS1yYW5nZV9fcGlja2VyX2hpZGRlbicpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0ZVJhbmdlOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2Ryb3Bkb3duLXF1YW50aXR5LnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2RhdGUtcGlja2VyLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICdqcXVlcnkubWFza2VkaW5wdXQvc3JjL2pxdWVyeS5tYXNrZWRpbnB1dCc7XHJcbmltcG9ydCAnLi90ZXh0LWZpZWxkLnNhc3MnO1xyXG5cclxuXHJcbiQoJy50ZXh0LWZpZWxkJykuZWFjaChzZXRFdmVudHMpO1xyXG5cclxuZnVuY3Rpb24gc2V0RXZlbnRzKGluZGV4LCBpdGVtKSB7XHJcbiAgY29uc3QgbWFzayA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLW1hc2snKVxyXG4gIGlmIChtYXNrKSB7XHJcbiAgICAkKGl0ZW0pLm1hc2sobWFzaywge3BsYWNlaG9sZGVyOiBcItC00LQu0LzQvC7Qs9Cz0LPQs1wifSk7XHJcbiAgfVxyXG59IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vdGVtcGxhdGUtdWlraXQuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vZGF0ZS1yYW5nZS5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlNcbiAgICAgICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG59KGZ1bmN0aW9uICgkKSB7XG5cbnZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG5cdGlQaG9uZSA9IC9pcGhvbmUvaS50ZXN0KHVhKSxcblx0Y2hyb21lID0gL2Nocm9tZS9pLnRlc3QodWEpLFxuXHRhbmRyb2lkID0gL2FuZHJvaWQvaS50ZXN0KHVhKSxcblx0Y2FyZXRUaW1lb3V0SWQ7XG5cbiQubWFzayA9IHtcblx0Ly9QcmVkZWZpbmVkIGNoYXJhY3RlciBkZWZpbml0aW9uc1xuXHRkZWZpbml0aW9uczoge1xuXHRcdCc5JzogXCJbMC05XVwiLFxuXHRcdCdhJzogXCJbQS1aYS16XVwiLFxuXHRcdCcqJzogXCJbQS1aYS16MC05XVwiXG5cdH0sXG5cdGF1dG9jbGVhcjogdHJ1ZSxcblx0ZGF0YU5hbWU6IFwicmF3TWFza0ZuXCIsXG5cdHBsYWNlaG9sZGVyOiAnXydcbn07XG5cbiQuZm4uZXh0ZW5kKHtcblx0Ly9IZWxwZXIgRnVuY3Rpb24gZm9yIENhcmV0IHBvc2l0aW9uaW5nXG5cdGNhcmV0OiBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG5cdFx0dmFyIHJhbmdlO1xuXG5cdFx0aWYgKHRoaXMubGVuZ3RoID09PSAwIHx8IHRoaXMuaXMoXCI6aGlkZGVuXCIpIHx8IHRoaXMuZ2V0KDApICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBiZWdpbiA9PSAnbnVtYmVyJykge1xuXHRcdFx0ZW5kID0gKHR5cGVvZiBlbmQgPT09ICdudW1iZXInKSA/IGVuZCA6IGJlZ2luO1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcblx0XHRcdFx0XHR0aGlzLnNldFNlbGVjdGlvblJhbmdlKGJlZ2luLCBlbmQpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuY3JlYXRlVGV4dFJhbmdlKSB7XG5cdFx0XHRcdFx0cmFuZ2UgPSB0aGlzLmNyZWF0ZVRleHRSYW5nZSgpO1xuXHRcdFx0XHRcdHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuXHRcdFx0XHRcdHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCk7XG5cdFx0XHRcdFx0cmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBiZWdpbik7XG5cdFx0XHRcdFx0cmFuZ2Uuc2VsZWN0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodGhpc1swXS5zZXRTZWxlY3Rpb25SYW5nZSkge1xuXHRcdFx0XHRiZWdpbiA9IHRoaXNbMF0uc2VsZWN0aW9uU3RhcnQ7XG5cdFx0XHRcdGVuZCA9IHRoaXNbMF0uc2VsZWN0aW9uRW5kO1xuXHRcdFx0fSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKSB7XG5cdFx0XHRcdHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG5cdFx0XHRcdGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLTEwMDAwMCk7XG5cdFx0XHRcdGVuZCA9IGJlZ2luICsgcmFuZ2UudGV4dC5sZW5ndGg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geyBiZWdpbjogYmVnaW4sIGVuZDogZW5kIH07XG5cdFx0fVxuXHR9LFxuXHR1bm1hc2s6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnRyaWdnZXIoXCJ1bm1hc2tcIik7XG5cdH0sXG5cdG1hc2s6IGZ1bmN0aW9uKG1hc2ssIHNldHRpbmdzKSB7XG5cdFx0dmFyIGlucHV0LFxuXHRcdFx0ZGVmcyxcblx0XHRcdHRlc3RzLFxuXHRcdFx0cGFydGlhbFBvc2l0aW9uLFxuXHRcdFx0Zmlyc3ROb25NYXNrUG9zLFxuICAgICAgICAgICAgbGFzdFJlcXVpcmVkTm9uTWFza1BvcyxcbiAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgIG9sZFZhbDtcblxuXHRcdGlmICghbWFzayAmJiB0aGlzLmxlbmd0aCA+IDApIHtcblx0XHRcdGlucHV0ID0gJCh0aGlzWzBdKTtcbiAgICAgICAgICAgIHZhciBmbiA9IGlucHV0LmRhdGEoJC5tYXNrLmRhdGFOYW1lKVxuXHRcdFx0cmV0dXJuIGZuP2ZuKCk6dW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHNldHRpbmdzID0gJC5leHRlbmQoe1xuXHRcdFx0YXV0b2NsZWFyOiAkLm1hc2suYXV0b2NsZWFyLFxuXHRcdFx0cGxhY2Vob2xkZXI6ICQubWFzay5wbGFjZWhvbGRlciwgLy8gTG9hZCBkZWZhdWx0IHBsYWNlaG9sZGVyXG5cdFx0XHRjb21wbGV0ZWQ6IG51bGxcblx0XHR9LCBzZXR0aW5ncyk7XG5cblxuXHRcdGRlZnMgPSAkLm1hc2suZGVmaW5pdGlvbnM7XG5cdFx0dGVzdHMgPSBbXTtcblx0XHRwYXJ0aWFsUG9zaXRpb24gPSBsZW4gPSBtYXNrLmxlbmd0aDtcblx0XHRmaXJzdE5vbk1hc2tQb3MgPSBudWxsO1xuXG5cdFx0bWFzayA9IFN0cmluZyhtYXNrKTtcblxuXHRcdCQuZWFjaChtYXNrLnNwbGl0KFwiXCIpLCBmdW5jdGlvbihpLCBjKSB7XG5cdFx0XHRpZiAoYyA9PSAnPycpIHtcblx0XHRcdFx0bGVuLS07XG5cdFx0XHRcdHBhcnRpYWxQb3NpdGlvbiA9IGk7XG5cdFx0XHR9IGVsc2UgaWYgKGRlZnNbY10pIHtcblx0XHRcdFx0dGVzdHMucHVzaChuZXcgUmVnRXhwKGRlZnNbY10pKTtcblx0XHRcdFx0aWYgKGZpcnN0Tm9uTWFza1BvcyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdGZpcnN0Tm9uTWFza1BvcyA9IHRlc3RzLmxlbmd0aCAtIDE7XG5cdFx0XHRcdH1cbiAgICAgICAgICAgICAgICBpZihpIDwgcGFydGlhbFBvc2l0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJlcXVpcmVkTm9uTWFza1BvcyA9IHRlc3RzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVzdHMucHVzaChudWxsKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzLnRyaWdnZXIoXCJ1bm1hc2tcIikuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbnB1dCA9ICQodGhpcyksXG5cdFx0XHRcdGJ1ZmZlciA9ICQubWFwKFxuICAgIFx0XHRcdFx0bWFzay5zcGxpdChcIlwiKSxcbiAgICBcdFx0XHRcdGZ1bmN0aW9uKGMsIGkpIHtcbiAgICBcdFx0XHRcdFx0aWYgKGMgIT0gJz8nKSB7XG4gICAgXHRcdFx0XHRcdFx0cmV0dXJuIGRlZnNbY10gPyBnZXRQbGFjZWhvbGRlcihpKSA6IGM7XG4gICAgXHRcdFx0XHRcdH1cbiAgICBcdFx0XHRcdH0pLFxuXHRcdFx0XHRkZWZhdWx0QnVmZmVyID0gYnVmZmVyLmpvaW4oJycpLFxuXHRcdFx0XHRmb2N1c1RleHQgPSBpbnB1dC52YWwoKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHJ5RmlyZUNvbXBsZXRlZCgpe1xuICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MuY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3ROb25NYXNrUG9zOyBpIDw9IGxhc3RSZXF1aXJlZE5vbk1hc2tQb3M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbaV0gJiYgYnVmZmVyW2ldID09PSBnZXRQbGFjZWhvbGRlcihpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldHRpbmdzLmNvbXBsZXRlZC5jYWxsKGlucHV0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXIoaSl7XG4gICAgICAgICAgICAgICAgaWYoaSA8IHNldHRpbmdzLnBsYWNlaG9sZGVyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLnBsYWNlaG9sZGVyLmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MucGxhY2Vob2xkZXIuY2hhckF0KDApO1xuICAgICAgICAgICAgfVxuXG5cdFx0XHRmdW5jdGlvbiBzZWVrTmV4dChwb3MpIHtcblx0XHRcdFx0d2hpbGUgKCsrcG9zIDwgbGVuICYmICF0ZXN0c1twb3NdKTtcblx0XHRcdFx0cmV0dXJuIHBvcztcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2Vla1ByZXYocG9zKSB7XG5cdFx0XHRcdHdoaWxlICgtLXBvcyA+PSAwICYmICF0ZXN0c1twb3NdKTtcblx0XHRcdFx0cmV0dXJuIHBvcztcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2hpZnRMKGJlZ2luLGVuZCkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHRqO1xuXG5cdFx0XHRcdGlmIChiZWdpbjwwKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChpID0gYmVnaW4sIGogPSBzZWVrTmV4dChlbmQpOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRpZiAodGVzdHNbaV0pIHtcblx0XHRcdFx0XHRcdGlmIChqIDwgbGVuICYmIHRlc3RzW2ldLnRlc3QoYnVmZmVyW2pdKSkge1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbaV0gPSBidWZmZXJbal07XG5cdFx0XHRcdFx0XHRcdGJ1ZmZlcltqXSA9IGdldFBsYWNlaG9sZGVyKGopO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGogPSBzZWVrTmV4dChqKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0d3JpdGVCdWZmZXIoKTtcblx0XHRcdFx0aW5wdXQuY2FyZXQoTWF0aC5tYXgoZmlyc3ROb25NYXNrUG9zLCBiZWdpbikpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBzaGlmdFIocG9zKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdGMsXG5cdFx0XHRcdFx0aixcblx0XHRcdFx0XHR0O1xuXG5cdFx0XHRcdGZvciAoaSA9IHBvcywgYyA9IGdldFBsYWNlaG9sZGVyKHBvcyk7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGlmICh0ZXN0c1tpXSkge1xuXHRcdFx0XHRcdFx0aiA9IHNlZWtOZXh0KGkpO1xuXHRcdFx0XHRcdFx0dCA9IGJ1ZmZlcltpXTtcblx0XHRcdFx0XHRcdGJ1ZmZlcltpXSA9IGM7XG5cdFx0XHRcdFx0XHRpZiAoaiA8IGxlbiAmJiB0ZXN0c1tqXS50ZXN0KHQpKSB7XG5cdFx0XHRcdFx0XHRcdGMgPSB0O1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGFuZHJvaWRJbnB1dEV2ZW50KGUpIHtcblx0XHRcdFx0dmFyIGN1clZhbCA9IGlucHV0LnZhbCgpO1xuXHRcdFx0XHR2YXIgcG9zID0gaW5wdXQuY2FyZXQoKTtcblx0XHRcdFx0aWYgKG9sZFZhbCAmJiBvbGRWYWwubGVuZ3RoICYmIG9sZFZhbC5sZW5ndGggPiBjdXJWYWwubGVuZ3RoICkge1xuXHRcdFx0XHRcdC8vIGEgZGVsZXRpb24gb3IgYmFja3NwYWNlIGhhcHBlbmVkXG5cdFx0XHRcdFx0Y2hlY2tWYWwodHJ1ZSk7XG5cdFx0XHRcdFx0d2hpbGUgKHBvcy5iZWdpbiA+IDAgJiYgIXRlc3RzW3Bvcy5iZWdpbi0xXSlcblx0XHRcdFx0XHRcdHBvcy5iZWdpbi0tO1xuXHRcdFx0XHRcdGlmIChwb3MuYmVnaW4gPT09IDApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0d2hpbGUgKHBvcy5iZWdpbiA8IGZpcnN0Tm9uTWFza1BvcyAmJiAhdGVzdHNbcG9zLmJlZ2luXSlcblx0XHRcdFx0XHRcdFx0cG9zLmJlZ2luKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlucHV0LmNhcmV0KHBvcy5iZWdpbixwb3MuYmVnaW4pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBwb3MyID0gY2hlY2tWYWwodHJ1ZSk7XG5cdFx0XHRcdFx0dmFyIGxhc3RFbnRlcmVkVmFsdWUgPSBjdXJWYWwuY2hhckF0KHBvcy5iZWdpbik7XG5cdFx0XHRcdFx0aWYgKHBvcy5iZWdpbiA8IGxlbil7XG5cdFx0XHRcdFx0XHRpZighdGVzdHNbcG9zLmJlZ2luXSl7XG5cdFx0XHRcdFx0XHRcdHBvcy5iZWdpbisrO1xuXHRcdFx0XHRcdFx0XHRpZih0ZXN0c1twb3MuYmVnaW5dLnRlc3QobGFzdEVudGVyZWRWYWx1ZSkpe1xuXHRcdFx0XHRcdFx0XHRcdHBvcy5iZWdpbisrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdFx0aWYodGVzdHNbcG9zLmJlZ2luXS50ZXN0KGxhc3RFbnRlcmVkVmFsdWUpKXtcblx0XHRcdFx0XHRcdFx0XHRwb3MuYmVnaW4rKztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpbnB1dC5jYXJldChwb3MuYmVnaW4scG9zLmJlZ2luKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0cnlGaXJlQ29tcGxldGVkKCk7XG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gYmx1ckV2ZW50KGUpIHtcbiAgICAgICAgICAgICAgICBjaGVja1ZhbCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbCgpICE9IGZvY3VzVGV4dClcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2hhbmdlKCk7XG4gICAgICAgICAgICB9XG5cblx0XHRcdGZ1bmN0aW9uIGtleWRvd25FdmVudChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnByb3AoXCJyZWFkb25seVwiKSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cblx0XHRcdFx0dmFyIGsgPSBlLndoaWNoIHx8IGUua2V5Q29kZSxcblx0XHRcdFx0XHRwb3MsXG5cdFx0XHRcdFx0YmVnaW4sXG5cdFx0XHRcdFx0ZW5kO1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWwgPSBpbnB1dC52YWwoKTtcblx0XHRcdFx0Ly9iYWNrc3BhY2UsIGRlbGV0ZSwgYW5kIGVzY2FwZSBnZXQgc3BlY2lhbCB0cmVhdG1lbnRcblx0XHRcdFx0aWYgKGsgPT09IDggfHwgayA9PT0gNDYgfHwgKGlQaG9uZSAmJiBrID09PSAxMjcpKSB7XG5cdFx0XHRcdFx0cG9zID0gaW5wdXQuY2FyZXQoKTtcblx0XHRcdFx0XHRiZWdpbiA9IHBvcy5iZWdpbjtcblx0XHRcdFx0XHRlbmQgPSBwb3MuZW5kO1xuXG5cdFx0XHRcdFx0aWYgKGVuZCAtIGJlZ2luID09PSAwKSB7XG5cdFx0XHRcdFx0XHRiZWdpbj1rIT09NDY/c2Vla1ByZXYoYmVnaW4pOihlbmQ9c2Vla05leHQoYmVnaW4tMSkpO1xuXHRcdFx0XHRcdFx0ZW5kPWs9PT00Nj9zZWVrTmV4dChlbmQpOmVuZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2xlYXJCdWZmZXIoYmVnaW4sIGVuZCk7XG5cdFx0XHRcdFx0c2hpZnRMKGJlZ2luLCBlbmQgLSAxKTtcblxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fSBlbHNlIGlmKCBrID09PSAxMyApIHsgLy8gZW50ZXJcblx0XHRcdFx0XHRibHVyRXZlbnQuY2FsbCh0aGlzLCBlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChrID09PSAyNykgeyAvLyBlc2NhcGVcblx0XHRcdFx0XHRpbnB1dC52YWwoZm9jdXNUZXh0KTtcblx0XHRcdFx0XHRpbnB1dC5jYXJldCgwLCBjaGVja1ZhbCgpKTtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24ga2V5cHJlc3NFdmVudChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnByb3AoXCJyZWFkb25seVwiKSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cblx0XHRcdFx0dmFyIGsgPSBlLndoaWNoIHx8IGUua2V5Q29kZSxcblx0XHRcdFx0XHRwb3MgPSBpbnB1dC5jYXJldCgpLFxuXHRcdFx0XHRcdHAsXG5cdFx0XHRcdFx0Yyxcblx0XHRcdFx0XHRuZXh0O1xuXG5cdFx0XHRcdGlmIChlLmN0cmxLZXkgfHwgZS5hbHRLZXkgfHwgZS5tZXRhS2V5IHx8IGsgPCAzMikgey8vSWdub3JlXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBrICYmIGsgIT09IDEzICkge1xuXHRcdFx0XHRcdGlmIChwb3MuZW5kIC0gcG9zLmJlZ2luICE9PSAwKXtcblx0XHRcdFx0XHRcdGNsZWFyQnVmZmVyKHBvcy5iZWdpbiwgcG9zLmVuZCk7XG5cdFx0XHRcdFx0XHRzaGlmdEwocG9zLmJlZ2luLCBwb3MuZW5kLTEpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHAgPSBzZWVrTmV4dChwb3MuYmVnaW4gLSAxKTtcblx0XHRcdFx0XHRpZiAocCA8IGxlbikge1xuXHRcdFx0XHRcdFx0YyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayk7XG5cdFx0XHRcdFx0XHRpZiAodGVzdHNbcF0udGVzdChjKSkge1xuXHRcdFx0XHRcdFx0XHRzaGlmdFIocCk7XG5cblx0XHRcdFx0XHRcdFx0YnVmZmVyW3BdID0gYztcblx0XHRcdFx0XHRcdFx0d3JpdGVCdWZmZXIoKTtcblx0XHRcdFx0XHRcdFx0bmV4dCA9IHNlZWtOZXh0KHApO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGFuZHJvaWQpe1xuXHRcdFx0XHRcdFx0XHRcdC8vUGF0aCBmb3IgQ1NQIFZpb2xhdGlvbiBvbiBGaXJlRm94IE9TIDEuMVxuXHRcdFx0XHRcdFx0XHRcdHZhciBwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0JC5wcm94eSgkLmZuLmNhcmV0LGlucHV0LG5leHQpKCk7XG5cdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQocHJveHksMCk7XG5cdFx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRcdGlucHV0LmNhcmV0KG5leHQpO1xuXHRcdFx0XHRcdFx0XHR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocG9zLmJlZ2luIDw9IGxhc3RSZXF1aXJlZE5vbk1hc2tQb3Mpe1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICB0cnlGaXJlQ29tcGxldGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0YXJ0LCBlbmQpIHtcblx0XHRcdFx0dmFyIGk7XG5cdFx0XHRcdGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kICYmIGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGlmICh0ZXN0c1tpXSkge1xuXHRcdFx0XHRcdFx0YnVmZmVyW2ldID0gZ2V0UGxhY2Vob2xkZXIoaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIHdyaXRlQnVmZmVyKCkgeyBpbnB1dC52YWwoYnVmZmVyLmpvaW4oJycpKTsgfVxuXG5cdFx0XHRmdW5jdGlvbiBjaGVja1ZhbChhbGxvdykge1xuXHRcdFx0XHQvL3RyeSB0byBwbGFjZSBjaGFyYWN0ZXJzIHdoZXJlIHRoZXkgYmVsb25nXG5cdFx0XHRcdHZhciB0ZXN0ID0gaW5wdXQudmFsKCksXG5cdFx0XHRcdFx0bGFzdE1hdGNoID0gLTEsXG5cdFx0XHRcdFx0aSxcblx0XHRcdFx0XHRjLFxuXHRcdFx0XHRcdHBvcztcblxuXHRcdFx0XHRmb3IgKGkgPSAwLCBwb3MgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRpZiAodGVzdHNbaV0pIHtcblx0XHRcdFx0XHRcdGJ1ZmZlcltpXSA9IGdldFBsYWNlaG9sZGVyKGkpO1xuXHRcdFx0XHRcdFx0d2hpbGUgKHBvcysrIDwgdGVzdC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0YyA9IHRlc3QuY2hhckF0KHBvcyAtIDEpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGVzdHNbaV0udGVzdChjKSkge1xuXHRcdFx0XHRcdFx0XHRcdGJ1ZmZlcltpXSA9IGM7XG5cdFx0XHRcdFx0XHRcdFx0bGFzdE1hdGNoID0gaTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHBvcyA+IHRlc3QubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFyQnVmZmVyKGkgKyAxLCBsZW4pO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltpXSA9PT0gdGVzdC5jaGFyQXQocG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPCBwYXJ0aWFsUG9zaXRpb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhbGxvdykge1xuXHRcdFx0XHRcdHdyaXRlQnVmZmVyKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobGFzdE1hdGNoICsgMSA8IHBhcnRpYWxQb3NpdGlvbikge1xuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5hdXRvY2xlYXIgfHwgYnVmZmVyLmpvaW4oJycpID09PSBkZWZhdWx0QnVmZmVyKSB7XG5cdFx0XHRcdFx0XHQvLyBJbnZhbGlkIHZhbHVlLiBSZW1vdmUgaXQgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGVcblx0XHRcdFx0XHRcdC8vIG1hc2ssIHdoaWNoIGlzIHRoZSBkZWZhdWx0IGJlaGF2aW9yLlxuXHRcdFx0XHRcdFx0aWYoaW5wdXQudmFsKCkpIGlucHV0LnZhbChcIlwiKTtcblx0XHRcdFx0XHRcdGNsZWFyQnVmZmVyKDAsIGxlbik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIEludmFsaWQgdmFsdWUsIGJ1dCB3ZSBvcHQgdG8gc2hvdyB0aGUgdmFsdWUgdG8gdGhlXG5cdFx0XHRcdFx0XHQvLyB1c2VyIGFuZCBhbGxvdyB0aGVtIHRvIGNvcnJlY3QgdGhlaXIgbWlzdGFrZS5cblx0XHRcdFx0XHRcdHdyaXRlQnVmZmVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHdyaXRlQnVmZmVyKCk7XG5cdFx0XHRcdFx0aW5wdXQudmFsKGlucHV0LnZhbCgpLnN1YnN0cmluZygwLCBsYXN0TWF0Y2ggKyAxKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIChwYXJ0aWFsUG9zaXRpb24gPyBpIDogZmlyc3ROb25NYXNrUG9zKTtcblx0XHRcdH1cblxuXHRcdFx0aW5wdXQuZGF0YSgkLm1hc2suZGF0YU5hbWUsZnVuY3Rpb24oKXtcblx0XHRcdFx0cmV0dXJuICQubWFwKGJ1ZmZlciwgZnVuY3Rpb24oYywgaSkge1xuXHRcdFx0XHRcdHJldHVybiB0ZXN0c1tpXSYmYyE9Z2V0UGxhY2Vob2xkZXIoaSkgPyBjIDogbnVsbDtcblx0XHRcdFx0fSkuam9pbignJyk7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRpbnB1dFxuXHRcdFx0XHQub25lKFwidW5tYXNrXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlucHV0XG5cdFx0XHRcdFx0XHQub2ZmKFwiLm1hc2tcIilcblx0XHRcdFx0XHRcdC5yZW1vdmVEYXRhKCQubWFzay5kYXRhTmFtZSk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5vbihcImZvY3VzLm1hc2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5wcm9wKFwicmVhZG9ubHlcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoY2FyZXRUaW1lb3V0SWQpO1xuXHRcdFx0XHRcdHZhciBwb3M7XG5cblx0XHRcdFx0XHRmb2N1c1RleHQgPSBpbnB1dC52YWwoKTtcblxuXHRcdFx0XHRcdHBvcyA9IGNoZWNrVmFsKCk7XG5cblx0XHRcdFx0XHRjYXJldFRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlucHV0LmdldCgwKSAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdFx0XHRcdFx0d3JpdGVCdWZmZXIoKTtcblx0XHRcdFx0XHRcdGlmIChwb3MgPT0gbWFzay5yZXBsYWNlKFwiP1wiLFwiXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRpbnB1dC5jYXJldCgwLCBwb3MpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0aW5wdXQuY2FyZXQocG9zKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCAxMCk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5vbihcImJsdXIubWFza1wiLCBibHVyRXZlbnQpXG5cdFx0XHRcdC5vbihcImtleWRvd24ubWFza1wiLCBrZXlkb3duRXZlbnQpXG5cdFx0XHRcdC5vbihcImtleXByZXNzLm1hc2tcIiwga2V5cHJlc3NFdmVudClcblx0XHRcdFx0Lm9uKFwiaW5wdXQubWFzayBwYXN0ZS5tYXNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQucHJvcChcInJlYWRvbmx5XCIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHZhciBwb3M9Y2hlY2tWYWwodHJ1ZSk7XG5cdFx0XHRcdFx0XHRpbnB1dC5jYXJldChwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5RmlyZUNvbXBsZXRlZCgpO1xuXHRcdFx0XHRcdH0sIDApO1xuXHRcdFx0XHR9KTtcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lICYmIGFuZHJvaWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgLm9mZignaW5wdXQubWFzaycpXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2lucHV0Lm1hc2snLCBhbmRyb2lkSW5wdXRFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuXHRcdFx0XHRjaGVja1ZhbCgpOyAvL1BlcmZvcm0gaW5pdGlhbCBjaGVjayBmb3IgZXhpc3RpbmcgdmFsdWVzXG5cdFx0fSk7XG5cdH1cbn0pO1xufSkpO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vdGV4dC1maWVsZC5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL3RlbXBsYXRlLXVpa2l0LWxvZ28uc3ZnXCI7IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vcmF0ZS1idXR0b24uc2Fzcyc7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vcmF0ZS1idXR0b24uc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vY2hlY2tib3guc2Fzcyc7IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vcmFkaW8uc2FzcycgOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL3JhZGlvLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuL3RvZ2dsZS5zYXNzJzsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi90b2dnbGUuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vc2xpZGVyJztcclxuaW1wb3J0ICcuL3JhbmdlLXNsaWRlci5zYXNzJztcclxuXHJcblxyXG5jbGFzcyBSYW5nZVNsaWRlciB7XHJcbiAgJHNsaWRlcjtcclxuICAjJHJhbmdlO1xyXG4gICN2YWx1ZUZyb207XHJcbiAgI3ZhbHVlVG87XHJcblxyXG4gIGNvbnN0cnVjdG9yKCRyYW5nZVNsaWRlcikge1xyXG4gICAgdGhpcy4kc2xpZGVyID0gJHJhbmdlU2xpZGVyLmZpbmQoJy5yYW5nZS1zbGlkZXJfX3BsdWdpbicpLnNsaWRlcignaW5pdCcpO1xyXG4gICAgdGhpcy4jJHJhbmdlID0gJHJhbmdlU2xpZGVyLmZpbmQoJy5yYW5nZS1zbGlkZXJfX3RpdGxlLXJhbmdlJyk7XHJcbiAgICB0aGlzLiN2YWx1ZUZyb20gPSB0aGlzLiNnZXROdW1iZXJTdHIodGhpcy4kc2xpZGVyLnNsaWRlcigndmFsdWVGcm9tJykpO1xyXG4gICAgdGhpcy4jdmFsdWVUbyA9IHRoaXMuI2dldE51bWJlclN0cih0aGlzLiRzbGlkZXIuc2xpZGVyKCd2YWx1ZVRvJykpO1xyXG4gICAgdGhpcy4jJHJhbmdlLnRleHQoYCR7dGhpcy4jdmFsdWVGcm9tfVxcdTIwQkQgLSAke3RoaXMuI3ZhbHVlVG99XFx1MjBCRGApO1xyXG5cclxuICAgIHRoaXMuJHNsaWRlci5vbignc2xpZGVyLWRhdGEnLCB0aGlzLiNoYW5kbGVFdmVudFNsaWRlci5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gICNoYW5kbGVFdmVudFNsaWRlcihldnQpIHtcclxuICAgIGlmIChldnQuZGV0YWlsLm5hbWUgPT09ICd2YWx1ZUZyb20nKSB7XHJcbiAgICAgIHRoaXMuI3ZhbHVlRnJvbSA9IHRoaXMuI2dldE51bWJlclN0cih0aGlzLiRzbGlkZXIuc2xpZGVyKCd2YWx1ZUZyb20nKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZXZ0LmRldGFpbC5uYW1lID09PSAndmFsdWVUbycpIHtcclxuICAgICAgdGhpcy4jdmFsdWVUbyA9IHRoaXMuI2dldE51bWJlclN0cih0aGlzLiRzbGlkZXIuc2xpZGVyKCd2YWx1ZVRvJykpO1xyXG4gICAgfVxyXG4gICAgdGhpcy4jJHJhbmdlLnRleHQoYCR7dGhpcy4jdmFsdWVGcm9tfVxcdTIwMDlcXHUyMEJEIC0gJHt0aGlzLiN2YWx1ZVRvfVxcdTIwMDlcXHUyMEJEYCk7XHJcbiAgfVxyXG5cclxuICAjZ2V0TnVtYmVyU3RyKG51bSkge1xyXG4gICAgbGV0IG4gPSBudW0udG9TdHJpbmcoKTtcclxuICAgIHJldHVybiBuLnJlcGxhY2UoLyhcXGR7MSwzfSg/PSg/OlxcZFxcZFxcZCkrKD8hXFxkKSkpL2csIFwiJDFcIiArICcgJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSYW5nZVNsaWRlcjtcclxuXHJcblxyXG5cclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuLi9kYXRlLXBpY2tlci9kYXRlLXBpY2tlcic7XHJcbmltcG9ydCAnLi4vYnV0dG9uL2J1dHRvbic7XHJcbmltcG9ydCAnLi9kYXRlLWZpbHRlci5zYXNzJztcclxuXHJcblxyXG5jbGFzcyBEYXRlRmlsdGVyIGV4dGVuZHMgRGF0ZVBpY2tlciB7XHJcbiAgIyRkYXRlRmlsdGVyO1xyXG4gICMkZGF0ZVJhbmdlO1xyXG4gICMkZGF0ZVBpY2tlcjtcclxuICAjJGRhdGVIZWFkZXI7XHJcbiAgI21vbnRoID0gWyfRj9C90LInLCAn0YTQtdCyJywgJ9C80LDRgCcsICfQsNC/0YAnLCAn0LzQsNC5JywgJ9C40Y7QvScsICfQuNGO0LsnLCAn0LDQstCzJywgJ9GB0LXQvScsICfQvtC60YInLCAn0L3QvtGPJywgJ9C00LXQuiddO1xyXG4gICNkYXRlID0gbmV3IERhdGUoKTtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKCRkYXRlRmlsdGVyKSB7XHJcbiAgICBzdXBlcigkZGF0ZUZpbHRlci5maW5kKCcuZGF0ZS1waWNrZXInKSk7XHJcbiAgICB0aGlzLiMkZGF0ZUZpbHRlciA9ICRkYXRlRmlsdGVyO1xyXG4gICAgdGhpcy4jJGRhdGVIZWFkZXIgPSAkZGF0ZUZpbHRlci5maW5kKCcuZGF0ZS1maWx0ZXJfX2JvZHknKTtcclxuICAgIHRoaXMuIyRkYXRlUmFuZ2UgPSAkZGF0ZUZpbHRlci5maW5kKCcuZGF0ZS1maWx0ZXJfX2JvZHktcmFuZ2UnKTtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyID0gJGRhdGVGaWx0ZXIuZmluZCgnLmRhdGUtZmlsdGVyX19waWNrZXInKTtcclxuXHJcbiAgICB0aGlzLiMkZGF0ZUhlYWRlci5vbignY2xpY2snLCB0aGlzLiN0b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLiMkZGF0ZVBpY2tlci5vbignZGF0ZS1waWNrZXItc2VsZWN0LW91dCcsIHRoaXMuI3NldERhdGVSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyLm9uKCdkYXRlLXBpY2tlci1zdWJtaXQnLCB0aGlzLiN0b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuI2hpZGRlblBpY2tlci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB0aGlzLiN0b2dnbGVQaWNrZXIoKTtcclxuICAgIHRoaXMuI3NldERhdGVSYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgI3NldERhdGVSYW5nZSgpIHtcclxuICAgIHRoaXMuI2RhdGUuc2V0VGltZShOdW1iZXIodGhpcy5kYXRlQ29tZUluKSk7XHJcbiAgICBsZXQgZnJvbURhdGUgPSBgJHt0aGlzLiNkYXRlLmdldERhdGUoKX0gJHt0aGlzLiNtb250aFt0aGlzLiNkYXRlLmdldE1vbnRoKCldfSBgO1xyXG4gICAgdGhpcy4jZGF0ZS5zZXRUaW1lKE51bWJlcih0aGlzLmRhdGVDaGVja091dCkpO1xyXG4gICAgbGV0IHRvRGF0ZSA9IGAke3RoaXMuI2RhdGUuZ2V0RGF0ZSgpfSAke3RoaXMuI21vbnRoW3RoaXMuI2RhdGUuZ2V0TW9udGgoKV19YDtcclxuICAgIHRoaXMuIyRkYXRlUmFuZ2UudGV4dChgJHtmcm9tRGF0ZX0gLSAke3RvRGF0ZX1gKTtcclxuICB9XHJcbiAgI3RvZ2dsZVBpY2tlcigpIHtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyLnRvZ2dsZUNsYXNzKCdkYXRlLWZpbHRlcl9fcGlja2VyX2hpZGRlbicpO1xyXG4gIH1cclxuXHJcbiAgI2hpZGRlblBpY2tlcihldnQpIHtcclxuICAgIGlmICghZXZ0LnRhcmdldC5jbG9zZXN0KCcuZGF0ZS1maWx0ZXInKSl7XHJcbiAgICAgIHRoaXMuIyRkYXRlUGlja2VyLmFkZENsYXNzKCdkYXRlLWZpbHRlcl9fcGlja2VyX2hpZGRlbicpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0ZUZpbHRlclxyXG4iLCIhZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIGk9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbb10uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31uLm09dCxuLmM9ZSxuLmQ9ZnVuY3Rpb24odCxlLG8pe24ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpvfSl9LG4ucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PW4odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIobyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciBpIGluIHQpbi5kKG8saSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLGkpKTtyZXR1cm4gb30sbi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBuLmQoZSxcImFcIixlKSxlfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4ucD1cIlwiLG4obi5zPTEwKX0oW2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDMpLGk9bi5uKG8pKCkoITEpO2kucHVzaChbdC5pLFwiLk8zMy1laTFSNzI3eVFBOUtiNVlHMXtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQ6I2ZmZjtoZWlnaHQ6NnB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwuMjUpO2JvcmRlci1yYWRpdXM6M3B4O2JveC1zaXppbmc6Ym9yZGVyLWJveDtjdXJzb3I6cG9pbnRlcn0uXzFkQ1dNblhTOHZibXlacUJTcll0Wnh7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOjZweDtoZWlnaHQ6MTAwJX0uXzNYQVV2THQwRW51MWpVc2ZhZlRJQWp7ZGlzcGxheTpmbGV4O3otaW5kZXg6MTA7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luLWxlZnQ6LThweDttYXJnaW4tdG9wOi02cHg7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNkZDRjk3IDAlLCAjNjZEMkVBIDEwMCUpO2JvcmRlcjoycHggc29saWQgI2ZmZjtib3JkZXItcmFkaXVzOjEwcHg7cGFkZGluZzo2cHh9Ll8yWVJhdXAzNWNsSmtJZTNtMzI5S3ZUe21hcmdpbi1sZWZ0Oi02cHg7bWFyZ2luLXRvcDotN3B4fS5fMnh4NXBNU0RjdzFRUnllSmhPcUVyTHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDozMHB4O2hlaWdodDoyMHB4O3RvcDotMzBweDtsZWZ0Oi0xMHB4O2JvcmRlcjoycHggc29saWQgIzY2ZDJlYTtiYWNrZ3JvdW5kLWNvbG9yOiM2ZmNmOTc7b3BhY2l0eTouNTtib3JkZXItcmFkaXVzOjVweH0uc1ZzNXM3MkhBdmw3NENzd1NIWlRke2xlZnQ6LTQwcHg7dG9wOi01cHh9Ll8zdzljbGgwbnlaaW9fNWdETEdsMURke3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZGQ0Y5NyAwJSwgIzY2RDJFQSAxMDAlKTtib3JkZXItcmFkaXVzOjNweDtoZWlnaHQ6MTAwJX0uXzJBLXh1ZmVEM3luTnNpZFlwTHJmUjB7d2lkdGg6MTAwJTtoZWlnaHQ6YXV0b30uXzNwUWhsa3Q0X3NfSHNaVXRsRU0yTzh7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjVweDtjdXJzb3I6cG9pbnRlcn0uXzJWOGxpUmhDZ2NBYk1rRmstNnpsS3N7ZGlzcGxheTpmbGV4O2hlaWdodDoxMDAlO21hcmdpbi1sZWZ0OjVweDttYXJnaW4tdG9wOjB9LnpnVTA2bzl5Wmd2UnpWNVlQeFJpaXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LlZJSEpfUXBEcldjZ1NOTWU4blJoVXtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Ll8yUnI5eTdBdUEyU2pIZTdTeS13cEFwe2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmZsZXgtZW5kO3dpZHRoOjEwMCU7aGVpZ2h0OjhweDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjNjZkMmVhO2JvcmRlci1yaWdodDoycHggc29saWQgIzY2ZDJlYTtwYWRkaW5nLWJvdHRvbToycHh9LmNhdHBlelpTcGxNaTZMa1pMME9kQXtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjNjZkMmVhO2JvcmRlci10b3A6MnB4IHNvbGlkICM2NmQyZWE7cGFkZGluZy1yaWdodDoycHg7d2lkdGg6OHB4O2hlaWdodDoxMDAlO2JvcmRlci1ib3R0b206bm9uZTtwYWRkaW5nLWJvdHRvbTowfS5fMlJyOXk3QXVBMlNqSGU3U3ktd3BBcDpmaXJzdC1jaGlsZHtib3JkZXItbGVmdDoycHggc29saWQgIzY2ZDJlYX0uY2F0cGV6WlNwbE1pNkxrWkwwT2RBOmxhc3QtY2hpbGR7Ym9yZGVyLWJvdHRvbToycHggc29saWQgIzY2ZDJlYX0uY2F0cGV6WlNwbE1pNkxrWkwwT2RBOmZpcnN0LWNoaWxke2JvcmRlci1sZWZ0Om5vbmV9Lkx5MmxNRGhUREFlWXlGMklQTVZIZnt3aWR0aDoxMDAlO2hlaWdodDo1cHh9Ll8xVnBaYk9MLTg4WjZoeXF5QkdodW9Oe3dpZHRoOjVweDtoZWlnaHQ6MTAwJX0uTHkybE1EaFREQWVZeUYySVBNVkhmOm5vdCg6Zmlyc3QtY2hpbGQpe2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjNjZkMmVhfS5fMVZwWmJPTC04OFo2aHlxeUJHaHVvTjpub3QoOmxhc3QtY2hpbGQpe2JvcmRlci1ib3R0b206MXB4IHNvbGlkICM2NmQyZWF9Ll8xVnBaYk9MLTg4WjZoeXF5QkdodW9OOm5vdCg6Zmlyc3QtY2hpbGQpe2JvcmRlci1sZWZ0Om5vbmV9LkFJZ0FpQ1NTZ0pYbF8xT0RTSk05SHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Ll8ySlk4ano1d1RENjh6X1F2QTk2cTI4e2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uXzFWZHV5UkkxTnlWT1J2RnVBNkNSYTR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MDtjb2xvcjojNmZjZjk3fS5fM0l3QktMV2gxaTZmVmlHWjlOYzFxZHthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjA7d2lkdGg6YXV0b31cIixcIlwiXSksaS5sb2NhbHM9e3JhaWw6XCJPMzMtZWkxUjcyN3lRQTlLYjVZRzFcIixyYWlsX3ZlcjpcIl8xZENXTW5YUzh2Ym15WnFCU3JZdFp4XCIsdGh1bWI6XCJfM1hBVXZMdDBFbnUxalVzZmFmVElBalwiLHRodW1iX3ZlcjpcIl8yWVJhdXAzNWNsSmtJZTNtMzI5S3ZUXCIsdGh1bWJfX3Rvb2x0aXA6XCJfMnh4NXBNU0RjdzFRUnllSmhPcUVyTFwiLHRodW1iX190b29sdGlwX3ZlcjpcInNWczVzNzJIQXZsNzRDc3dTSFpUZFwiLHByb2dyZXNzOlwiXzN3OWNsaDBueVppb181Z0RMR2wxRGRcIixwcm9ncmVzc192ZXI6XCJfMkEteHVmZUQzeW5Oc2lkWXBMcmZSMFwiLHNjYWxlOlwiXzNwUWhsa3Q0X3NfSHNaVXRsRU0yTzhcIixzY2FsZV92ZXI6XCJfMlY4bGlSaENnY0FiTWtGay02emxLc1wiLHNjYWxlX193cmFwcGVyOlwiemdVMDZvOXlaZ3ZSelY1WVB4UmlpXCIsc2NhbGVfX3dyYXBwZXJfdmVyOlwiVklISl9RcERyV2NnU05NZThuUmhVXCIsc2NhbGVfX2RpdmlzaW9uOlwiXzJScjl5N0F1QTJTakhlN1N5LXdwQXBcIixzY2FsZV9fZGl2aXNpb25fdmVyOlwiY2F0cGV6WlNwbE1pNkxrWkwwT2RBXCIsc2NhbGVfX3N1YmRpdmlzaW9uOlwiTHkybE1EaFREQWVZeUYySVBNVkhmXCIsc2NhbGVfX3N1YmRpdmlzaW9uX3ZlcjpcIl8xVnBaYk9MLTg4WjZoeXF5QkdodW9OXCIsc2NhbGVfX3ZhbHVlczpcIkFJZ0FpQ1NTZ0pYbF8xT0RTSk05SFwiLHNjYWxlX192YWx1ZXNfdmVyOlwiXzJKWThqejV3VEQ2OHpfUXZBOTZxMjhcIixzY2FsZV9fdmFsdWVzSXRlbTpcIl8xVmR1eVJJMU55Vk9SdkZ1QTZDUmE0XCIsc2NhbGVfX3ZhbHVlc0l0ZW1fdmVyOlwiXzNJd0JLTFdoMWk2ZlZpR1o5TmMxcWRcIn0sZS5hPWl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWpRdWVyeX0sZnVuY3Rpb24odCxlKXt2YXIgbjtuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e249bnx8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaCh0KXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfXQuZXhwb3J0cz1ufSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbihlKXt2YXIgbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRbMV18fFwiXCIsbz10WzNdO2lmKCFvKXJldHVybiBuO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBpPShhPW8scz1idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKSxsPVwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KHMpLFwiLyojIFwiLmNvbmNhdChsLFwiICovXCIpKSxyPW8uc291cmNlcy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoby5zb3VyY2VSb290fHxcIlwiKS5jb25jYXQodCxcIiAqL1wiKX0pKTtyZXR1cm5bbl0uY29uY2F0KHIpLmNvbmNhdChbaV0pLmpvaW4oXCJcXG5cIil9dmFyIGEscyxsO3JldHVybltuXS5qb2luKFwiXFxuXCIpfShlLHQpO3JldHVybiBlWzJdP1wiQG1lZGlhIFwiLmNvbmNhdChlWzJdLFwiIHtcIikuY29uY2F0KG4sXCJ9XCIpOm59KSkuam9pbihcIlwiKX0sZS5pPWZ1bmN0aW9uKHQsbixvKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTt2YXIgaT17fTtpZihvKWZvcih2YXIgcj0wO3I8dGhpcy5sZW5ndGg7cisrKXt2YXIgYT10aGlzW3JdWzBdO251bGwhPWEmJihpW2FdPSEwKX1mb3IodmFyIHM9MDtzPHQubGVuZ3RoO3MrKyl7dmFyIGw9W10uY29uY2F0KHRbc10pO28mJmlbbFswXV18fChuJiYobFsyXT9sWzJdPVwiXCIuY29uY2F0KG4sXCIgYW5kIFwiKS5jb25jYXQobFsyXSk6bFsyXT1uKSxlLnB1c2gobCkpfX0sZX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24odCl7big1KSxuKDYpO3ZhciBlLG89bigwKSxpPShlPWZ1bmN0aW9uKHQsbil7cmV0dXJuKGU9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSkodCxuKX0sZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBvKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWUodCxuKSx0LnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihvLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgbyl9KSxyPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4odCl7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLnJhaWw9bmV3IGEsbi5zY2FsZT1uZXcgYyxuLnN0eWxlcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbi5wcmVzZW50ZXI9dCxuLnN0eWxlcy5pbm5lckhUTUw9by5hLG4uYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSksbi5zaGFkb3dSb290JiYobi5zaGFkb3dSb290LmFwcGVuZENoaWxkKG4uc3R5bGVzKSxuLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQobi5yYWlsKSxuLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQobi5zY2FsZSkpLG59cmV0dXJuIGkobixlKSxuLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbigpe3RoaXMuc3R5bGUuZGlzcGxheT1cImZsZXhcIix0aGlzLnN0eWxlLmp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJ9LG4ucHJvdG90eXBlLnNldE1vZGVsRGF0YT1mdW5jdGlvbihlLG4pe3N3aXRjaChlKXtjYXNlXCJtaW5WYWx1ZVwiOnRoaXMucmFpbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1pbi12YWx1ZVwiLG4udG9TdHJpbmcoKSksdGhpcy5zY2FsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1pbi12YWx1ZVwiLG4udG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwibWF4VmFsdWVcIjp0aGlzLnJhaWwuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXgtdmFsdWVcIixuLnRvU3RyaW5nKCkpLHRoaXMuc2NhbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXgtdmFsdWVcIixuLnRvU3RyaW5nKCkpO2JyZWFrO2Nhc2VcInZhbHVlRnJvbVwiOnRoaXMucmFpbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlLWZyb21cIixuLnRvU3RyaW5nKCkpO2JyZWFrO2Nhc2VcInZhbHVlVG9cIjp0aGlzLnJhaWwuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZS10b1wiLG4udG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwib25TY2FsZVwiOm4/dCh0aGlzLnNjYWxlKS5zaG93KCk6dCh0aGlzLnNjYWxlKS5oaWRlKCk7YnJlYWs7Y2FzZVwib25Ub29sdGlwXCI6dGhpcy5yYWlsLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdG9vbHRpcFwiLG4udG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwib25SYW5nZVwiOnRoaXMucmFpbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9uLXJhbmdlXCIsbi50b1N0cmluZygpKSx0aGlzLnNjYWxlLnNldEF0dHJpYnV0ZShcImRhdGEtb24tcmFuZ2VcIixuLnRvU3RyaW5nKCkpO2JyZWFrO2Nhc2VcIm9uVmVydGljYWxcIjp0aGlzLnN0eWxlLmZsZXhEaXJlY3Rpb249bj9cInJvd1wiOlwiY29sdW1uXCIsdGhpcy5yYWlsLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdmVydGljYWxcIixuLnRvU3RyaW5nKCkpLHRoaXMuc2NhbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1vbi12ZXJ0aWNhbFwiLG4udG9TdHJpbmcoKSl9fSxufShIVE1MRWxlbWVudCksYT1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiB0Ll90aHVtYkZyb209bmV3IGwoXCJ2YWx1ZUZyb21cIiksdC5fdGh1bWJUbz1uZXcgbChcInZhbHVlVG9cIiksdC5fcHJvZ3Jlc3M9bmV3IHMsdC5jbGFzc05hbWU9by5hLmxvY2Fscy5yYWlsLHQuYXBwZW5kQ2hpbGQodC5fdGh1bWJGcm9tKSx0LmFwcGVuZENoaWxkKHQuX3RodW1iVG8pLHQuYXBwZW5kQ2hpbGQodC5fcHJvZ3Jlc3MpLHR9cmV0dXJuIGkobixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIm9ic2VydmVkQXR0cmlidXRlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bXCJkYXRhLW1pbi12YWx1ZVwiLFwiZGF0YS1tYXgtdmFsdWVcIixcImRhdGEtdmFsdWUtZnJvbVwiLFwiZGF0YS12YWx1ZS10b1wiLFwiZGF0YS1vbi10b29sdGlwXCIsXCJkYXRhLW9uLXJhbmdlXCIsXCJkYXRhLW9uLXZlcnRpY2FsXCJdfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLG4ucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaz1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiZGF0YS1taW4tdmFsdWVcIjpjYXNlXCJkYXRhLW1heC12YWx1ZVwiOnRoaXMuX3RodW1iRnJvbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcImZyb21cIikudG9TdHJpbmcoKSksdGhpcy5fcHJvZ3Jlc3Muc2V0QXR0cmlidXRlKFwiZGF0YS1wb3NpdGlvbi1mcm9tXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcImZyb21cIikudG9TdHJpbmcoKSksdGhpcy5fdGh1bWJUby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcInRvXCIpLnRvU3RyaW5nKCkpLHRoaXMuX3Byb2dyZXNzLnNldEF0dHJpYnV0ZShcImRhdGEtcG9zaXRpb24tdG9cIix0aGlzLmNhbGNUaHVtYlBvc2l0aW9uKFwidG9cIikudG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwiZGF0YS1vbi10b29sdGlwXCI6dGhpcy5fdGh1bWJGcm9tLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdG9vbHRpcFwiLHRoaXMuZGF0YXNldC5vblRvb2x0aXApLHRoaXMuX3RodW1iVG8uc2V0QXR0cmlidXRlKFwiZGF0YS1vbi10b29sdGlwXCIsdGhpcy5kYXRhc2V0Lm9uVG9vbHRpcCk7YnJlYWs7Y2FzZVwiZGF0YS1vbi1yYW5nZVwiOnRoaXMuX3Byb2dyZXNzLnNldEF0dHJpYnV0ZShcImRhdGEtb24tcmFuZ2VcIix0aGlzLmRhdGFzZXQub25SYW5nZSksXCJmYWxzZVwiPT09dGhpcy5kYXRhc2V0Lm9uUmFuZ2U/dCh0aGlzLl90aHVtYlRvKS5oaWRlKCk6dCh0aGlzLl90aHVtYlRvKS5zaG93KCk7YnJlYWs7Y2FzZVwiZGF0YS1vbi12ZXJ0aWNhbFwiOnRoaXMuX3RodW1iRnJvbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9uLXZlcnRpY2FsXCIsdGhpcy5kYXRhc2V0Lm9uVmVydGljYWwpLHRoaXMuX3Byb2dyZXNzLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdmVydGljYWxcIix0aGlzLmRhdGFzZXQub25WZXJ0aWNhbCksdGhpcy5fdGh1bWJUby5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9uLXZlcnRpY2FsXCIsdGhpcy5kYXRhc2V0Lm9uVmVydGljYWwpLFwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uVmVydGljYWw/dCh0aGlzKS5hZGRDbGFzcyhvLmEubG9jYWxzLnJhaWxfdmVyKTp0KHRoaXMpLnJlbW92ZUNsYXNzKG8uYS5sb2NhbHMucmFpbF92ZXIpO2JyZWFrO2Nhc2VcImRhdGEtdmFsdWUtZnJvbVwiOnRoaXMuX3RodW1iRnJvbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcImZyb21cIikudG9TdHJpbmcoKSksdGhpcy5fdGh1bWJGcm9tLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIixOdW1iZXIodGhpcy5kYXRhc2V0LnZhbHVlRnJvbSkudG9GaXhlZCgpKSx0aGlzLl9wcm9ncmVzcy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uLWZyb21cIix0aGlzLmNhbGNUaHVtYlBvc2l0aW9uKFwiZnJvbVwiKS50b1N0cmluZygpKTticmVhaztjYXNlXCJkYXRhLXZhbHVlLXRvXCI6dGhpcy5fdGh1bWJUby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcInRvXCIpLnRvU3RyaW5nKCkpLHRoaXMuX3RodW1iVG8uc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLE51bWJlcih0aGlzLmRhdGFzZXQudmFsdWVUbykudG9GaXhlZCgpKSx0aGlzLl9wcm9ncmVzcy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uLXRvXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcInRvXCIpLnRvU3RyaW5nKCkpfX0sbi5wcm90b3R5cGUuY2FsY1RodW1iUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGU9TnVtYmVyKHRoaXMuZGF0YXNldC5taW5WYWx1ZSksbj1OdW1iZXIodGhpcy5kYXRhc2V0Lm1heFZhbHVlKTtyZXR1cm4oTnVtYmVyKFwiZnJvbVwiPT09dD90aGlzLmRhdGFzZXQudmFsdWVGcm9tOnRoaXMuZGF0YXNldC52YWx1ZVRvKS1lKS8oKG4tZSkvMTAwKX0sbn0oSFRNTEVsZW1lbnQpLHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3ZhciB0PWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gdC5fbGVmdE9yVG9wPVwibGVmdFwiLHQuX3JpZ2h0T3JCb3R0b209XCJyaWdodFwiLHQuY2xhc3NOYW1lPW8uYS5sb2NhbHMucHJvZ3Jlc3MsdH1yZXR1cm4gaShuLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybltcImRhdGEtcG9zaXRpb24tZnJvbVwiLFwiZGF0YS1wb3NpdGlvbi10b1wiLFwiZGF0YS1vbi1yYW5nZVwiLFwiZGF0YS1vbi12ZXJ0aWNhbFwiXX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxuLnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImRhdGEtcG9zaXRpb24tZnJvbVwiOnRoaXMuc2V0UG9zRnJvbSgpO2JyZWFrO2Nhc2VcImRhdGEtcG9zaXRpb24tdG9cIjpjYXNlXCJkYXRhLW9uLXJhbmdlXCI6dGhpcy5zZXRQb3NUbygpO2JyZWFrO2Nhc2VcImRhdGEtb24tdmVydGljYWxcIjpcInRydWVcIj09PXRoaXMuZGF0YXNldC5vblZlcnRpY2FsP3QodGhpcykuYWRkQ2xhc3Moby5hLmxvY2Fscy5wcm9ncmVzc192ZXIpOnQodGhpcykucmVtb3ZlQ2xhc3Moby5hLmxvY2Fscy5wcm9ncmVzc192ZXIpLHRoaXMuc2V0RGlyZWN0aW9uKCksdGhpcy5zZXRQb3NGcm9tKCksdGhpcy5zZXRQb3NUbygpfX0sbi5wcm90b3R5cGUuc2V0UG9zRnJvbT1mdW5jdGlvbigpe3QodGhpcykuY3NzKFwiXCIrdGhpcy5fbGVmdE9yVG9wLHRoaXMuZGF0YXNldC5wb3NpdGlvbkZyb20rXCIlXCIpfSxuLnByb3RvdHlwZS5zZXRQb3NUbz1mdW5jdGlvbigpe1widHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uUmFuZ2U/dCh0aGlzKS5jc3MoXCJcIit0aGlzLl9yaWdodE9yQm90dG9tLDEwMC1OdW1iZXIodGhpcy5kYXRhc2V0LnBvc2l0aW9uVG8pK1wiJVwiKTp0KHRoaXMpLmNzcyhcIlwiK3RoaXMuX3JpZ2h0T3JCb3R0b20sXCIwXCIpfSxuLnByb3RvdHlwZS5zZXREaXJlY3Rpb249ZnVuY3Rpb24oKXtcInRydWVcIj09PXRoaXMuZGF0YXNldC5vblZlcnRpY2FsPyh0aGlzLl9sZWZ0T3JUb3A9XCJ0b3BcIix0aGlzLl9yaWdodE9yQm90dG9tPVwiYm90dG9tXCIsdGhpcy5zdHlsZS5sZWZ0PVwiMFwiKToodGhpcy5fbGVmdE9yVG9wPVwibGVmdFwiLHRoaXMuX3JpZ2h0T3JCb3R0b209XCJyaWdodFwiLHRoaXMuc3R5bGUudG9wPVwiMFwiKX0sbn0oSFRNTEVsZW1lbnQpLGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbih0KXt2YXIgbj1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4uX3Bvc2l0aW9uPTAsbi5fY2xpZW50WG9yWT1cImNsaWVudFhcIixuLl9vZmZzZXRYb3JZPTAsbi5fd2lkdGhPckhlaWdodD0wLG4uX2RpcmVjdGlvbj1cImxlZnRcIixuLl90b29sdGlwPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbi5fbW91c2VNb3ZlPW4ub25Nb3VzZU1vdmUuYmluZChuKSxuLl9tb3VzZVVwPW4ub25Nb3VzZVVwLmJpbmQobiksbi5fbmFtZT10LG4uY2xhc3NOYW1lPW8uYS5sb2NhbHMudGh1bWIsbi5fdG9vbHRpcC5jbGFzc05hbWU9by5hLmxvY2Fscy50aHVtYl9fdG9vbHRpcCxuLmFwcGVuZENoaWxkKG4uX3Rvb2x0aXApLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLG4ub25Nb3VzZURvd24uYmluZChuKSksbn1yZXR1cm4gaShuLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybltcImRhdGEtdmFsdWVcIixcImRhdGEtcG9zaXRpb25cIixcImRhdGEtb24tdmVydGljYWxcIixcImRhdGEtb24tdG9vbHRpcFwiXX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxuLnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImRhdGEtdmFsdWVcIjp0aGlzLl90b29sdGlwLnRleHRDb250ZW50PXRoaXMuZGF0YXNldC52YWx1ZTticmVhaztjYXNlXCJkYXRhLXBvc2l0aW9uXCI6dGhpcy5fcG9zaXRpb249TnVtYmVyKHRoaXMuZGF0YXNldC5wb3NpdGlvbiksdGhpcy5tb3ZlVG9Qb3NpdGlvbih0aGlzLl9wb3NpdGlvbik7YnJlYWs7Y2FzZVwiZGF0YS1vbi12ZXJ0aWNhbFwiOlwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uVmVydGljYWw/KHQodGhpcykuYWRkQ2xhc3Moby5hLmxvY2Fscy50aHVtYl92ZXIpLHQodGhpcy5fdG9vbHRpcCkuYWRkQ2xhc3Moby5hLmxvY2Fscy50aHVtYl9fdG9vbHRpcF92ZXIpKToodCh0aGlzKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnRodW1iX3ZlciksdCh0aGlzLl90b29sdGlwKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnRodW1iX190b29sdGlwX3ZlcikpLHRoaXMuc2V0UG9zaXRpb24oKSx0aGlzLm1vdmVUb1Bvc2l0aW9uKHRoaXMuX3Bvc2l0aW9uKTticmVhaztjYXNlXCJkYXRhLW9uLXRvb2x0aXBcIjpcImZhbHNlXCI9PT10aGlzLmRhdGFzZXQub25Ub29sdGlwP3QodGhpcy5fdG9vbHRpcCkuaGlkZSgpOnQodGhpcy5fdG9vbHRpcCkuc2hvdygpfX0sbi5wcm90b3R5cGUubW92ZVRvUG9zaXRpb249ZnVuY3Rpb24oZSl7dCh0aGlzKS5jc3MoXCJcIit0aGlzLl9kaXJlY3Rpb24sZStcIiVcIil9LG4ucHJvdG90eXBlLnNldFBvc2l0aW9uPWZ1bmN0aW9uKCl7aWYodGhpcy5wYXJlbnRFbGVtZW50KXt2YXIgdD10aGlzLnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XCJ0cnVlXCI9PT10aGlzLmRhdGFzZXQub25WZXJ0aWNhbD8odGhpcy5fY2xpZW50WG9yWT1cImNsaWVudFlcIix0aGlzLl9kaXJlY3Rpb249XCJ0b3BcIix0aGlzLl9vZmZzZXRYb3JZPXQudG9wLHRoaXMuX3dpZHRoT3JIZWlnaHQ9dC5oZWlnaHQsdGhpcy5zdHlsZS5sZWZ0PVwiMFwiKToodGhpcy5fY2xpZW50WG9yWT1cImNsaWVudFhcIix0aGlzLl9kaXJlY3Rpb249XCJsZWZ0XCIsdGhpcy5fb2Zmc2V0WG9yWT10LmxlZnQsdGhpcy5fd2lkdGhPckhlaWdodD10LndpZHRoLHRoaXMuc3R5bGUudG9wPVwiMFwiKX19LG4ucHJvdG90eXBlLm9uTW91c2VEb3duPWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0aGlzLnNldFBvc2l0aW9uKCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuX21vdXNlTW92ZSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLl9tb3VzZVVwKX0sbi5wcm90b3R5cGUub25Nb3VzZU1vdmU9ZnVuY3Rpb24odCl7dGhpcy5fcG9zaXRpb249KHRbdGhpcy5fY2xpZW50WG9yWV0tdGhpcy5fb2Zmc2V0WG9yWSkvKHRoaXMuX3dpZHRoT3JIZWlnaHQvMTAwKSx0aGlzLl9wb3NpdGlvbjwwJiYodGhpcy5fcG9zaXRpb249MCksdGhpcy5fcG9zaXRpb24+MTAwJiYodGhpcy5fcG9zaXRpb249MTAwKSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwic2xpZGVyLXZpZXdcIix7YnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNvbXBvc2VkOiEwLGRldGFpbDp7bmFtZTp0aGlzLl9uYW1lLHZhbHVlOnRoaXMuX3Bvc2l0aW9ufX0pKX0sbi5wcm90b3R5cGUub25Nb3VzZVVwPWZ1bmN0aW9uKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuX21vdXNlTW92ZSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLl9tb3VzZVVwKX0sbn0oSFRNTEVsZW1lbnQpLGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3ZhciB0PWUuY2FsbCh0aGlzKXx8dGhpczt0Ll9zY2FsZVZhbHVlSXRlbXM9W10sdC5fbmFtZT1cInZhbHVlVG9cIix0LmNsYXNzTmFtZT1vLmEubG9jYWxzLnNjYWxlO2Zvcih2YXIgbj0wO248NDtuKyspdC5fc2NhbGVWYWx1ZUl0ZW1zW25dPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHQuX3NjYWxlVmFsdWVJdGVtc1tuXS5jbGFzc05hbWU9by5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzSXRlbTt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuY2xhc3NOYW1lPW8uYS5sb2NhbHMuc2NhbGVfX3ZhbHVlcztmb3IodmFyIHI9MCxhPXQuX3NjYWxlVmFsdWVJdGVtcztyPGEubGVuZ3RoO3IrKyl7dmFyIHM9YVtyXTtpLmFwcGVuZENoaWxkKHMpfXJldHVybiB0LmlubmVySFRNTD0nICAgICAgXFxuICAgICAgPGRpdiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fd3JhcHBlcisnXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19kaXZpc2lvbisnXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fZGl2aXNpb24rJ1wiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX2RpdmlzaW9uKydcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+Jyx0LmFwcGVuZENoaWxkKGkpLHQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHQuaGFuZGxlTW91c2VEb3duLmJpbmQodCkpLHR9cmV0dXJuIGkobixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIm9ic2VydmVkQXR0cmlidXRlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bXCJkYXRhLW1pbi12YWx1ZVwiLFwiZGF0YS1tYXgtdmFsdWVcIixcImRhdGEtb24tdmVydGljYWxcIl19LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksbi5wcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrPWZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJkYXRhLW1pbi12YWx1ZVwiOmNhc2VcImRhdGEtbWF4LXZhbHVlXCI6dGhpcy5yZW5kZXIoKTticmVhaztjYXNlXCJkYXRhLW9uLXZlcnRpY2FsXCI6XCJ0cnVlXCI9PT10aGlzLmRhdGFzZXQub25WZXJ0aWNhbD8odCh0aGlzKS5hZGRDbGFzcyhvLmEubG9jYWxzLnNjYWxlX3ZlciksdCh0aGlzKS5maW5kKFwiLlwiK28uYS5sb2NhbHMuc2NhbGVfX3dyYXBwZXIpLmFkZENsYXNzKG8uYS5sb2NhbHMuc2NhbGVfX3dyYXBwZXJfdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzKS5hZGRDbGFzcyhvLmEubG9jYWxzLnNjYWxlX192YWx1ZXNfdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzSXRlbSkuYWRkQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzSXRlbV92ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX19kaXZpc2lvbikuYWRkQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fZGl2aXNpb25fdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24pLmFkZENsYXNzKG8uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uX3ZlcikpOih0KHRoaXMpLnJlbW92ZUNsYXNzKG8uYS5sb2NhbHMuc2NhbGVfdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fd3JhcHBlcikucmVtb3ZlQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fd3JhcHBlcl92ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX192YWx1ZXMpLnJlbW92ZUNsYXNzKG8uYS5sb2NhbHMuc2NhbGVfX3ZhbHVlc192ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX192YWx1ZXNJdGVtKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnNjYWxlX192YWx1ZXNJdGVtX3ZlciksdCh0aGlzKS5maW5kKFwiLlwiK28uYS5sb2NhbHMuc2NhbGVfX2RpdmlzaW9uKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnNjYWxlX19kaXZpc2lvbl92ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbikucmVtb3ZlQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb25fdmVyKSl9fSxuLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgdD1OdW1iZXIodGhpcy5kYXRhc2V0Lm1pblZhbHVlKSxlPU51bWJlcih0aGlzLmRhdGFzZXQubWF4VmFsdWUpLG49KGUtdCkvMzt0aGlzLl9zY2FsZVZhbHVlSXRlbXNbMF0udGV4dENvbnRlbnQ9dC50b0ZpeGVkKCksdGhpcy5fc2NhbGVWYWx1ZUl0ZW1zWzFdLnRleHRDb250ZW50PSh0K24pLnRvRml4ZWQoKSx0aGlzLl9zY2FsZVZhbHVlSXRlbXNbMl0udGV4dENvbnRlbnQ9KHQrbituKS50b0ZpeGVkKCksdGhpcy5fc2NhbGVWYWx1ZUl0ZW1zWzNdLnRleHRDb250ZW50PWUudG9GaXhlZCgpfSxuLnByb3RvdHlwZS5oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPTA7dC5jbGllbnRYJiZ0LmNsaWVudFkmJihuPVwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uVmVydGljYWw/KHQuY2xpZW50WS1lLnRvcCkvKGUuaGVpZ2h0LzEwMCk6KHQuY2xpZW50WC1lLmxlZnQpLyhlLndpZHRoLzEwMCkpLFwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uUmFuZ2UmJlwidmFsdWVGcm9tXCI9PT10aGlzLl9uYW1lP3RoaXMuX25hbWU9XCJ2YWx1ZVRvXCI6dGhpcy5fbmFtZT1cInZhbHVlRnJvbVwiLHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJzbGlkZXItdmlld1wiLHtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY29tcG9zZWQ6ITAsZGV0YWlsOntuYW1lOnRoaXMuX25hbWUsdmFsdWU6bn19KSl9LG59KEhUTUxFbGVtZW50KTtjdXN0b21FbGVtZW50cy5nZXQoXCJpbnB1dC1zbGlkZXJcIil8fChjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1zbGlkZXJcIixyKSxjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1zbGlkZXItdmlldy10aHVtYlwiLGwpLGN1c3RvbUVsZW1lbnRzLmRlZmluZShcImlucHV0LXNsaWRlci12aWV3LXJhaWxcIixhKSxjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1zbGlkZXItdmlldy1zY2FsZVwiLGMpLGN1c3RvbUVsZW1lbnRzLmRlZmluZShcImlucHV0LXNsaWRlci12aWV3LXByb2dyZXNzXCIscykpfSkuY2FsbCh0aGlzLG4oMSkpfSxmdW5jdGlvbih0LGUpe1xuLyoqXG5AbGljZW5zZSBAbm9jb21waWxlXG5Db3B5cmlnaHQgKGMpIDIwMTggVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7IWZ1bmN0aW9uKCl7aWYodm9pZCAwPT09d2luZG93LlJlZmxlY3R8fHZvaWQgMD09PXdpbmRvdy5jdXN0b21FbGVtZW50c3x8d2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2spcmV0dXJuO2NvbnN0IHQ9SFRNTEVsZW1lbnQ7d2luZG93LkhUTUxFbGVtZW50PXtIVE1MRWxlbWVudDpmdW5jdGlvbigpe3JldHVybiBSZWZsZWN0LmNvbnN0cnVjdCh0LFtdLHRoaXMuY29uc3RydWN0b3IpfX0uSFRNTEVsZW1lbnQsSFRNTEVsZW1lbnQucHJvdG90eXBlPXQucHJvdG90eXBlLEhUTUxFbGVtZW50LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1IVE1MRWxlbWVudCxPYmplY3Quc2V0UHJvdG90eXBlT2YoSFRNTEVsZW1lbnQsdCl9KCl9KCl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24odCxlKXtcbi8qKlxuQGxpY2Vuc2UgQG5vY29tcGlsZVxuQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBuO2Z1bmN0aW9uIG8odCl7dmFyIGU9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZTx0Lmxlbmd0aD97ZG9uZTohMSx2YWx1ZTp0W2UrK119Ontkb25lOiEwfX19dmFyIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXM/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSxuKXt0IT1BcnJheS5wcm90b3R5cGUmJnQhPU9iamVjdC5wcm90b3R5cGUmJih0W2VdPW4udmFsdWUpfSxyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdz09PXRoaXM/dGhpczp2b2lkIDAhPT10JiZudWxsIT10P3Q6dGhpcztmdW5jdGlvbiBhKCl7YT1mdW5jdGlvbigpe30sci5TeW1ib2x8fChyLlN5bWJvbD11KX1mdW5jdGlvbiBzKHQsZSl7dGhpcy5hPXQsaSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX1zLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O3ZhciBsLGMsdT0obD0wLGZ1bmN0aW9uIHQoZSl7aWYodGhpcyBpbnN0YW5jZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTtyZXR1cm4gbmV3IHMoXCJqc2NvbXBfc3ltYm9sX1wiKyhlfHxcIlwiKStcIl9cIitsKyssZSl9KTtmdW5jdGlvbiBoKCl7YSgpO3ZhciB0PXIuU3ltYm9sLml0ZXJhdG9yO3R8fCh0PXIuU3ltYm9sLml0ZXJhdG9yPXIuU3ltYm9sKFwiU3ltYm9sLml0ZXJhdG9yXCIpKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBBcnJheS5wcm90b3R5cGVbdF0mJmkoQXJyYXkucHJvdG90eXBlLHQse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gaCgpLCh0PXtuZXh0OnR9KVtyLlN5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sdH0obyh0aGlzKSl9fSksaD1mdW5jdGlvbigpe319ZnVuY3Rpb24gZCh0KXt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJnRbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gZT9lLmNhbGwodCk6e25leHQ6byh0KX19ZnVuY3Rpb24gZih0KXtmb3IodmFyIGUsbj1bXTshKGU9dC5uZXh0KCkpLmRvbmU7KW4ucHVzaChlLnZhbHVlKTtyZXR1cm4gbn1pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YpYz1PYmplY3Quc2V0UHJvdG90eXBlT2Y7ZWxzZXt2YXIgcDt0Ont2YXIgXz17fTt0cnl7Xy5fX3Byb3RvX189e1BhOiEwfSxwPV8uUGE7YnJlYWsgdH1jYXRjaChlZSl7fXA9ITF9Yz1wP2Z1bmN0aW9uKHQsZSl7aWYodC5fX3Byb3RvX189ZSx0Ll9fcHJvdG9fXyE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBleHRlbnNpYmxlXCIpO3JldHVybiB0fTpudWxsfXZhciBtPWM7ZnVuY3Rpb24gdigpe3RoaXMubD0hMSx0aGlzLmI9bnVsbCx0aGlzLkVhPXZvaWQgMCx0aGlzLmE9MSx0aGlzLlk9MCx0aGlzLmM9bnVsbH1mdW5jdGlvbiB5KHQpe2lmKHQubCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTt0Lmw9ITB9ZnVuY3Rpb24gZyh0LGUpe3QuYz17U2E6ZSxXYTohMH0sdC5hPXQuWX1mdW5jdGlvbiBiKHQsZSl7cmV0dXJuIHQuYT0zLHt2YWx1ZTplfX1mdW5jdGlvbiB3KHQpe3RoaXMuYT1uZXcgdix0aGlzLmI9dH1mdW5jdGlvbiBFKHQsZSxuLG8pe3RyeXt2YXIgaT1lLmNhbGwodC5hLmIsbik7aWYoIShpIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSXRlcmF0b3IgcmVzdWx0IFwiK2krXCIgaXMgbm90IGFuIG9iamVjdFwiKTtpZighaS5kb25lKXJldHVybiB0LmEubD0hMSxpO3ZhciByPWkudmFsdWV9Y2F0Y2goZSl7cmV0dXJuIHQuYS5iPW51bGwsZyh0LmEsZSksTih0KX1yZXR1cm4gdC5hLmI9bnVsbCxvLmNhbGwodC5hLHIpLE4odCl9ZnVuY3Rpb24gTih0KXtmb3IoO3QuYS5hOyl0cnl7dmFyIGU9dC5iKHQuYSk7aWYoZSlyZXR1cm4gdC5hLmw9ITEse3ZhbHVlOmUudmFsdWUsZG9uZTohMX19Y2F0Y2goZSl7dC5hLkVhPXZvaWQgMCxnKHQuYSxlKX1pZih0LmEubD0hMSx0LmEuYyl7aWYoZT10LmEuYyx0LmEuYz1udWxsLGUuV2EpdGhyb3cgZS5TYTtyZXR1cm57dmFsdWU6ZS5yZXR1cm4sZG9uZTohMH19cmV0dXJue3ZhbHVlOnZvaWQgMCxkb25lOiEwfX1mdW5jdGlvbiBDKHQpe3RoaXMubmV4dD1mdW5jdGlvbihlKXtyZXR1cm4geSh0LmEpLHQuYS5iP2U9RSh0LHQuYS5iLm5leHQsZSx0LmEuSik6KHQuYS5KKGUpLGU9Tih0KSksZX0sdGhpcy50aHJvdz1mdW5jdGlvbihlKXtyZXR1cm4geSh0LmEpLHQuYS5iP2U9RSh0LHQuYS5iLnRocm93LGUsdC5hLkopOihnKHQuYSxlKSxlPU4odCkpLGV9LHRoaXMucmV0dXJuPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LGUpe3kodC5hKTt2YXIgbj10LmEuYjtyZXR1cm4gbj9FKHQsXCJyZXR1cm5cImluIG4/bi5yZXR1cm46ZnVuY3Rpb24odCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohMH19LGUsdC5hLnJldHVybik6KHQuYS5yZXR1cm4oZSksTih0KSl9KHQsZSl9LGgoKSx0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319ZnVuY3Rpb24gUyh0LGUpe3JldHVybiBlPW5ldyBDKG5ldyB3KGUpKSxtJiZtKGUsdC5wcm90b3R5cGUpLGV9di5wcm90b3R5cGUuSj1mdW5jdGlvbih0KXt0aGlzLkVhPXR9LHYucHJvdG90eXBlLnJldHVybj1mdW5jdGlvbih0KXt0aGlzLmM9e3JldHVybjp0fSx0aGlzLmE9dGhpcy5ZfSxBcnJheS5mcm9tfHwoQXJyYXkuZnJvbT1mdW5jdGlvbih0KXtyZXR1cm5bXS5zbGljZS5jYWxsKHQpfSksT2JqZWN0LmFzc2lnbnx8KE9iamVjdC5hc3NpZ249ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksbz0wO288bi5sZW5ndGg7bysrKWlmKGU9bltvXSlmb3IodmFyIGk9dCxyPU9iamVjdC5rZXlzKGUpLGE9MDthPHIubGVuZ3RoO2ErKyl7dmFyIHM9clthXTtpW3NdPWVbc119cmV0dXJuIHR9KTt2YXIgVD1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO2lmKFQuaW5pdEV2ZW50KFwiZm9vXCIsITAsITApLFQucHJldmVudERlZmF1bHQoKSwhVC5kZWZhdWx0UHJldmVudGVkKXt2YXIgTz1FdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQ7RXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5jYW5jZWxhYmxlJiYoTy5jYWxsKHRoaXMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZGVmYXVsdFByZXZlbnRlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sY29uZmlndXJhYmxlOiEwfSkpfX12YXIgeD0vVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZighd2luZG93LkV2ZW50fHx4JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB3aW5kb3cuRXZlbnQpe3ZhciBNPXdpbmRvdy5FdmVudDtpZih3aW5kb3cuRXZlbnQ9ZnVuY3Rpb24odCxlKXtlPWV8fHt9O3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7cmV0dXJuIG4uaW5pdEV2ZW50KHQsISFlLmJ1YmJsZXMsISFlLmNhbmNlbGFibGUpLG59LE0pe2Zvcih2YXIgRCBpbiBNKXdpbmRvdy5FdmVudFtEXT1NW0RdO3dpbmRvdy5FdmVudC5wcm90b3R5cGU9TS5wcm90b3R5cGV9fWlmKCghd2luZG93LkN1c3RvbUV2ZW50fHx4JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQpJiYod2luZG93LkN1c3RvbUV2ZW50PWZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO3JldHVybiBuLmluaXRDdXN0b21FdmVudCh0LCEhZS5idWJibGVzLCEhZS5jYW5jZWxhYmxlLGUuZGV0YWlsKSxufSx3aW5kb3cuQ3VzdG9tRXZlbnQucHJvdG90eXBlPXdpbmRvdy5FdmVudC5wcm90b3R5cGUpLCF3aW5kb3cuTW91c2VFdmVudHx8eCYmXCJmdW5jdGlvblwiIT10eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQpe3ZhciBMPXdpbmRvdy5Nb3VzZUV2ZW50O2lmKHdpbmRvdy5Nb3VzZUV2ZW50PWZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRcIik7cmV0dXJuIG4uaW5pdE1vdXNlRXZlbnQodCwhIWUuYnViYmxlcywhIWUuY2FuY2VsYWJsZSxlLnZpZXd8fHdpbmRvdyxlLmRldGFpbCxlLnNjcmVlblgsZS5zY3JlZW5ZLGUuY2xpZW50WCxlLmNsaWVudFksZS5jdHJsS2V5LGUuYWx0S2V5LGUuc2hpZnRLZXksZS5tZXRhS2V5LGUuYnV0dG9uLGUucmVsYXRlZFRhcmdldCksbn0sTClmb3IodmFyIEEgaW4gTCl3aW5kb3cuTW91c2VFdmVudFtBXT1MW0FdO3dpbmRvdy5Nb3VzZUV2ZW50LnByb3RvdHlwZT1MLnByb3RvdHlwZX0hZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fWZ1bmN0aW9uIGUodCxlKXtpZighdC5jaGlsZE5vZGVzLmxlbmd0aClyZXR1cm5bXTtzd2l0Y2godC5ub2RlVHlwZSl7Y2FzZSBOb2RlLkRPQ1VNRU5UX05PREU6cmV0dXJuIF8uY2FsbCh0LGUpO2Nhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOnJldHVybiBtLmNhbGwodCxlKTtkZWZhdWx0OnJldHVybiBwLmNhbGwodCxlKX19dmFyIG49XCJ1bmRlZmluZWRcIj09dHlwZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQsbz0hKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5jbG9uZU5vZGUoKWluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCksaT0hMTsvVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7aWYodCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKHZhciBvO289dC5maXJzdENoaWxkOyluLmNhbGwodGhpcyxvLGUpO2Vsc2Ugbi5jYWxsKHRoaXMsdCxlKTtyZXR1cm4gdH1pPSEwO3ZhciBlPU5vZGUucHJvdG90eXBlLmNsb25lTm9kZTtOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9ZS5jYWxsKHRoaXMsdCksdGhpcyBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQmJih0Ll9fcHJvdG9fXz1Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSksdH0sRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbD1IVE1MRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCxEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yPUhUTUxFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtub2RlVHlwZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERX0sY29uZmlndXJhYmxlOiEwfSxsb2NhbE5hbWU6e2dldDpmdW5jdGlvbigpe30sY29uZmlndXJhYmxlOiEwfSxub2RlTmFtZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCIjZG9jdW1lbnQtZnJhZ21lbnRcIn0sY29uZmlndXJhYmxlOiEwfX0pO3ZhciBuPU5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZTtOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmU9dDt2YXIgbz1Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZDtOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ/dC5jYWxsKHRoaXMsZSxudWxsKTpvLmNhbGwodGhpcyxlKSxlfTt2YXIgcj1Ob2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCxhPU5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZDtOb2RlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ/KHQuY2FsbCh0aGlzLGUsbiksci5jYWxsKHRoaXMsbikpOmEuY2FsbCh0aGlzLGUsbiksbn0sRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNyZWF0ZUVsZW1lbnQoXCJkZlwiKTtyZXR1cm4gdC5fX3Byb3RvX189RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsdH07dmFyIHM9RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGU7RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT1zLmNhbGwodGhpcyx0LGV8fCExKSx0IGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCYmKGUuX19wcm90b19fPURvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlKSxlfX0oKTt2YXIgcj1Ob2RlLnByb3RvdHlwZS5jbG9uZU5vZGUsYT1Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCxzPURvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlLGw9Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsYz1Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCx1PU5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCxoPURPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nLGQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpfHx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5uZXJIVE1MfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5pbm5lckhUTUw9dH19LGY9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuTm9kZS5wcm90b3R5cGUsXCJjaGlsZE5vZGVzXCIpfHx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hpbGROb2Rlc319LHA9RWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCxfPURvY3VtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLG09RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCx2PWZ1bmN0aW9uKCl7aWYoIW4pe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtyZXR1cm4gZS5jb250ZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLHQuY29udGVudC5hcHBlbmRDaGlsZChlKSwwPT09KHQ9dC5jbG9uZU5vZGUoITApKS5jb250ZW50LmNoaWxkTm9kZXMubGVuZ3RofHwwPT09dC5jb250ZW50LmZpcnN0Q2hpbGQuY29udGVudC5jaGlsZE5vZGVzLmxlbmd0aHx8b319KCk7aWYobil7dmFyIHk9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwidGVtcGxhdGVcIiksZz0hMCxiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtiLnRleHRDb250ZW50PVwidGVtcGxhdGV7ZGlzcGxheTpub25lO31cIjt2YXIgdz1kb2N1bWVudC5oZWFkO3cuaW5zZXJ0QmVmb3JlKGIsdy5maXJzdEVsZW1lbnRDaGlsZCksdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShIVE1MRWxlbWVudC5wcm90b3R5cGUpO3ZhciBFPSFkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmhhc093blByb3BlcnR5KFwiaW5uZXJIVE1MXCIpO3QuVT1mdW5jdGlvbihlKXtpZighZS5jb250ZW50JiZlLm5hbWVzcGFjZVVSST09PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkpe2UuY29udGVudD15LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtmb3IodmFyIG47bj1lLmZpcnN0Q2hpbGQ7KWMuY2FsbChlLmNvbnRlbnQsbik7aWYoRSllLl9fcHJvdG9fXz10LnByb3RvdHlwZTtlbHNlIGlmKGUuY2xvbmVOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiB0LmIodGhpcyxlKX0sZyl0cnl7QyhlKSxTKGUpfWNhdGNoKHQpe2c9ITF9dC5hKGUuY29udGVudCl9fTt2YXIgTj17b3B0aW9uOltcInNlbGVjdFwiXSx0aGVhZDpbXCJ0YWJsZVwiXSxjb2w6W1wiY29sZ3JvdXBcIixcInRhYmxlXCJdLHRyOltcInRib2R5XCIsXCJ0YWJsZVwiXSx0aDpbXCJ0clwiLFwidGJvZHlcIixcInRhYmxlXCJdLHRkOltcInRyXCIsXCJ0Ym9keVwiLFwidGFibGVcIl19LEM9ZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpbm5lckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEwodGhpcyl9LHNldDpmdW5jdGlvbihlKXt2YXIgbj1OWygvPChbYS16XVteL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pLmV4ZWMoZSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXTtpZihuKWZvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKWU9XCI8XCIrbltvXStcIj5cIitlK1wiPC9cIituW29dK1wiPlwiO2Zvcih5LmJvZHkuaW5uZXJIVE1MPWUsdC5hKHkpO3RoaXMuY29udGVudC5maXJzdENoaWxkOylsLmNhbGwodGhpcy5jb250ZW50LHRoaXMuY29udGVudC5maXJzdENoaWxkKTtpZihlPXkuYm9keSxuKWZvcihvPTA7bzxuLmxlbmd0aDtvKyspZT1lLmxhc3RDaGlsZDtmb3IoO2UuZmlyc3RDaGlsZDspYy5jYWxsKHRoaXMuY29udGVudCxlLmZpcnN0Q2hpbGQpfSxjb25maWd1cmFibGU6ITB9KX0sUz1mdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIm91dGVySFRNTFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjx0ZW1wbGF0ZT5cIit0aGlzLmlubmVySFRNTCtcIjwvdGVtcGxhdGU+XCJ9LHNldDpmdW5jdGlvbih0KXtpZighdGhpcy5wYXJlbnROb2RlKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIHNldCB0aGUgJ291dGVySFRNTCcgcHJvcGVydHkgb24gJ0VsZW1lbnQnOiBUaGlzIGVsZW1lbnQgaGFzIG5vIHBhcmVudCBub2RlLlwiKTtmb3IoeS5ib2R5LmlubmVySFRNTD10LHQ9dGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTt5LmJvZHkuZmlyc3RDaGlsZDspYy5jYWxsKHQseS5ib2R5LmZpcnN0Q2hpbGQpO3UuY2FsbCh0aGlzLnBhcmVudE5vZGUsdCx0aGlzKX0sY29uZmlndXJhYmxlOiEwfSl9O0ModC5wcm90b3R5cGUpLFModC5wcm90b3R5cGUpLHQuYT1mdW5jdGlvbihuKXtmb3IodmFyIG8saT0wLHI9KG49ZShuLFwidGVtcGxhdGVcIikpLmxlbmd0aDtpPHImJihvPW5baV0pO2krKyl0LlUobyl9LGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsKGZ1bmN0aW9uKCl7dC5hKGRvY3VtZW50KX0pKSxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudD1mdW5jdGlvbigpe3ZhciBlPWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVyblwidGVtcGxhdGVcIj09PWUubG9jYWxOYW1lJiZ0LlUoZSksZX0sRE9NUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZyb21TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZT1oLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gdC5hKGUpLGV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEwodGhpcyl9LHNldDpmdW5jdGlvbihlKXtkLnNldC5jYWxsKHRoaXMsZSksdC5hKHRoaXMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH0pO3ZhciBUPS9bJlxcdTAwQTBcIl0vZyxPPS9bJlxcdTAwQTA8Pl0vZyx4PWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCImXCI6cmV0dXJuXCImYW1wO1wiO2Nhc2VcIjxcIjpyZXR1cm5cIiZsdDtcIjtjYXNlXCI+XCI6cmV0dXJuXCImZ3Q7XCI7Y2FzZSdcIic6cmV0dXJuXCImcXVvdDtcIjtjYXNlXCLCoFwiOnJldHVyblwiJm5ic3A7XCJ9fSxNPShiPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT17fSxuPTA7bjx0Lmxlbmd0aDtuKyspZVt0W25dXT0hMDtyZXR1cm4gZX0pKFwiYXJlYSBiYXNlIGJyIGNvbCBjb21tYW5kIGVtYmVkIGhyIGltZyBpbnB1dCBrZXlnZW4gbGluayBtZXRhIHBhcmFtIHNvdXJjZSB0cmFjayB3YnJcIi5zcGxpdChcIiBcIikpLEQ9YihcInN0eWxlIHNjcmlwdCB4bXAgaWZyYW1lIG5vZW1iZWQgbm9mcmFtZXMgcGxhaW50ZXh0IG5vc2NyaXB0XCIuc3BsaXQoXCIgXCIpKSxMPWZ1bmN0aW9uKHQsZSl7XCJ0ZW1wbGF0ZVwiPT09dC5sb2NhbE5hbWUmJih0PXQuY29udGVudCk7Zm9yKHZhciBuLG89XCJcIixpPWU/ZSh0KTpmLmdldC5jYWxsKHQpLHI9MCxhPWkubGVuZ3RoO3I8YSYmKG49aVtyXSk7cisrKXt0Ont2YXIgcz1uLGw9dCxjPWU7c3dpdGNoKHMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Zm9yKHZhciB1PXMubG9jYWxOYW1lLGg9XCI8XCIrdSxkPXMuYXR0cmlidXRlcyxwPTA7bD1kW3BdO3ArKyloKz1cIiBcIitsLm5hbWUrJz1cIicrbC52YWx1ZS5yZXBsYWNlKFQseCkrJ1wiJztoKz1cIj5cIixzPU1bdV0/aDpoK0wocyxjKStcIjwvXCIrdStcIj5cIjticmVhayB0O2Nhc2UgTm9kZS5URVhUX05PREU6cz1zLmRhdGEscz1sJiZEW2wubG9jYWxOYW1lXT9zOnMucmVwbGFjZShPLHgpO2JyZWFrIHQ7Y2FzZSBOb2RlLkNPTU1FTlRfTk9ERTpzPVwiXFx4M2MhLS1cIitzLmRhdGErXCItLVxceDNlXCI7YnJlYWsgdDtkZWZhdWx0OnRocm93IHdpbmRvdy5jb25zb2xlLmVycm9yKHMpLEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpfX1vKz1zfXJldHVybiBvfX1pZihufHx2KXt0LmI9ZnVuY3Rpb24odCxlKXt2YXIgbj1yLmNhbGwodCwhMSk7cmV0dXJuIHRoaXMuVSYmdGhpcy5VKG4pLGUmJihjLmNhbGwobi5jb250ZW50LHIuY2FsbCh0LmNvbnRlbnQsITApKSxBKG4uY29udGVudCx0LmNvbnRlbnQpKSxufTt2YXIgQT1mdW5jdGlvbihuLG8pe2lmKG8ucXVlcnlTZWxlY3RvckFsbCYmMCE9PShvPWUobyxcInRlbXBsYXRlXCIpKS5sZW5ndGgpZm9yKHZhciBpLHIsYT0wLHM9KG49ZShuLFwidGVtcGxhdGVcIikpLmxlbmd0aDthPHM7YSsrKXI9b1thXSxpPW5bYV0sdCYmdC5VJiZ0LlUociksdS5jYWxsKGkucGFyZW50Tm9kZSxQLmNhbGwociwhMCksaSl9LFA9Tm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlPWZ1bmN0aW9uKGUpe2lmKCFpJiZvJiZ0aGlzIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7aWYoIWUpcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7dmFyIG49ai5jYWxsKHRoaXMub3duZXJEb2N1bWVudCx0aGlzLCEwKX1lbHNlIG49dGhpcy5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZcInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZSYmdGhpcy5uYW1lc3BhY2VVUkk9PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkk/dC5iKHRoaXMsZSk6ci5jYWxsKHRoaXMsZSk7cmV0dXJuIGUmJkEobix0aGlzKSxufSxqPURvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlPWZ1bmN0aW9uKG4sbyl7aWYobz1vfHwhMSxcInRlbXBsYXRlXCI9PT1uLmxvY2FsTmFtZSlyZXR1cm4gdC5iKG4sbyk7dmFyIGk9cy5jYWxsKHRoaXMsbixvKTtpZihvKXtBKGksbiksbj1lKGksJ3NjcmlwdDpub3QoW3R5cGVdKSxzY3JpcHRbdHlwZT1cImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIl0sc2NyaXB0W3R5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIl0nKTtmb3IodmFyIHIsbD0wO2w8bi5sZW5ndGg7bCsrKXtyPW5bbF0sKG89YS5jYWxsKGRvY3VtZW50LFwic2NyaXB0XCIpKS50ZXh0Q29udGVudD1yLnRleHRDb250ZW50O2Zvcih2YXIgYyxoPXIuYXR0cmlidXRlcyxkPTA7ZDxoLmxlbmd0aDtkKyspYz1oW2RdLG8uc2V0QXR0cmlidXRlKGMubmFtZSxjLnZhbHVlKTt1LmNhbGwoci5wYXJlbnROb2RlLG8scil9fXJldHVybiBpfX1uJiYod2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQ9dCl9KCk7dmFyIFA9c2V0VGltZW91dDtmdW5jdGlvbiBqKCl7fWZ1bmN0aW9uIGsodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgaykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ld1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJub3QgYSBmdW5jdGlvblwiKTt0aGlzLkk9MCx0aGlzLnphPSExLHRoaXMuQz12b2lkIDAsdGhpcy5XPVtdLFUodCx0aGlzKX1mdW5jdGlvbiBGKHQsZSl7Zm9yKDszPT09dC5JOyl0PXQuQzswPT09dC5JP3QuVy5wdXNoKGUpOih0LnphPSEwLHooKGZ1bmN0aW9uKCl7dmFyIG49MT09PXQuST9lLllhOmUuWmE7aWYobnVsbD09PW4pKDE9PT10Lkk/UjpWKShlLnZhLHQuQyk7ZWxzZXt0cnl7dmFyIG89bih0LkMpfWNhdGNoKHQpe3JldHVybiB2b2lkIFYoZS52YSx0KX1SKGUudmEsbyl9fSkpKX1mdW5jdGlvbiBSKHQsZSl7dHJ5e2lmKGU9PT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLlwiKTtpZihlJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXt2YXIgbj1lLnRoZW47aWYoZSBpbnN0YW5jZW9mIGspcmV0dXJuIHQuST0zLHQuQz1lLHZvaWQgSSh0KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiB2b2lkIFUoZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXt0LmFwcGx5KGUsYXJndW1lbnRzKX19KG4sZSksdCl9dC5JPTEsdC5DPWUsSSh0KX1jYXRjaChlKXtWKHQsZSl9fWZ1bmN0aW9uIFYodCxlKXt0Lkk9Mix0LkM9ZSxJKHQpfWZ1bmN0aW9uIEkodCl7Mj09PXQuSSYmMD09PXQuVy5sZW5ndGgmJnooKGZ1bmN0aW9uKCl7dC56YXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUmJmNvbnNvbGUud2FybihcIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjpcIix0LkMpfSkpO2Zvcih2YXIgZT0wLG49dC5XLmxlbmd0aDtlPG47ZSsrKUYodCx0LldbZV0pO3QuVz1udWxsfWZ1bmN0aW9uIEgodCxlLG4pe3RoaXMuWWE9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90Om51bGwsdGhpcy5aYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2U6bnVsbCx0aGlzLnZhPW59ZnVuY3Rpb24gVSh0LGUpe3ZhciBuPSExO3RyeXt0KChmdW5jdGlvbih0KXtufHwobj0hMCxSKGUsdCkpfSksKGZ1bmN0aW9uKHQpe258fChuPSEwLFYoZSx0KSl9KSl9Y2F0Y2godCl7bnx8KG49ITAsVihlLHQpKX19ZnVuY3Rpb24gQih0KXtyZXR1cm4gdCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQuY29uc3RydWN0b3I9PT1rP3Q6bmV3IGsoKGZ1bmN0aW9uKGUpe2UodCl9KSl9ay5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihudWxsLHQpfSxrLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IHRoaXMuY29uc3RydWN0b3Ioaik7cmV0dXJuIEYodGhpcyxuZXcgSCh0LGUsbikpLG59LGsucHJvdG90eXBlLmZpbmFsbHk9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb25zdHJ1Y3RvcjtyZXR1cm4gdGhpcy50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gZS5yZXNvbHZlKHQoKSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gbn0pKX0pLChmdW5jdGlvbihuKXtyZXR1cm4gZS5yZXNvbHZlKHQoKSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gZS5yZWplY3Qobil9KSl9KSl9O3ZhciB6PVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmZ1bmN0aW9uKHQpe2UodCl9fHxmdW5jdGlvbih0KXtQKHQsMCl9O2lmKCF3aW5kb3cuUHJvbWlzZSl7d2luZG93LlByb21pc2U9ayxrLnByb3RvdHlwZS50aGVuPWsucHJvdG90eXBlLnRoZW4say5hbGw9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBrKChmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIG8odCxhKXt0cnl7aWYoYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSl7dmFyIHM9YS50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHMpcmV0dXJuIHZvaWQgcy5jYWxsKGEsKGZ1bmN0aW9uKGUpe28odCxlKX0pLG4pfWlbdF09YSwwPT0tLXImJmUoaSl9Y2F0Y2godCl7bih0KX19aWYoIXR8fHZvaWQgMD09PXQubGVuZ3RoKXJldHVybiBuKG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5XCIpKTt2YXIgaT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KTtpZigwPT09aS5sZW5ndGgpcmV0dXJuIGUoW10pO2Zvcih2YXIgcj1pLmxlbmd0aCxhPTA7YTxpLmxlbmd0aDthKyspbyhhLGlbYV0pfSkpfSxrLnJhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBrKChmdW5jdGlvbihlLG4pe2lmKCF0fHx2b2lkIDA9PT10Lmxlbmd0aClyZXR1cm4gbihuZXcgVHlwZUVycm9yKFwiUHJvbWlzZS5yYWNlIGFjY2VwdHMgYW4gYXJyYXlcIikpO2Zvcih2YXIgbz0wLGk9dC5sZW5ndGg7bzxpO28rKylCKHRbb10pLnRoZW4oZSxuKX0pKX0say5yZXNvbHZlPUIsay5yZWplY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBrKChmdW5jdGlvbihlLG4pe24odCl9KSl9O3ZhciBxPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLFc9W107bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PVcubGVuZ3RoLGU9MDtlPHQ7ZSsrKVdbZV0oKTtXLnNwbGljZSgwLHQpfSkpLm9ic2VydmUocSx7Y2hhcmFjdGVyRGF0YTohMH0pLHo9ZnVuY3Rpb24odCl7Vy5wdXNoKHQpLHEudGV4dENvbnRlbnQ9MDxxLnRleHRDb250ZW50Lmxlbmd0aD9cIlwiOlwiYVwifX0hZnVuY3Rpb24oZSxuKXtpZighKG4gaW4gZSkpe3ZhciBvPXR5cGVvZiB0PT10eXBlb2Ygbz93aW5kb3c6dCxpPTAscj1cIlwiK01hdGgucmFuZG9tKCksYT1cIl9fXHUwMDAxc3ltYm9sQEBcIityLHM9ZS5nZXRPd25Qcm9wZXJ0eU5hbWVzLGw9ZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsYz1lLmNyZWF0ZSx1PWUua2V5cyxoPWUuZnJlZXplfHxlLGQ9ZS5kZWZpbmVQcm9wZXJ0eSxmPWUuZGVmaW5lUHJvcGVydGllcyxwPWwoZSxcImdldE93blByb3BlcnR5TmFtZXNcIiksXz1lLnByb3RvdHlwZSxtPV8uaGFzT3duUHJvcGVydHksdj1fLnByb3BlcnR5SXNFbnVtZXJhYmxlLHk9Xy50b1N0cmluZyxnPWZ1bmN0aW9uKHQsZSxuKXttLmNhbGwodCxhKXx8ZCh0LGEse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLHdyaXRhYmxlOiExLHZhbHVlOnt9fSksdFthXVtcIkBAXCIrZV09bn0sYj1mdW5jdGlvbih0LGUpe3ZhciBuPWModCk7cmV0dXJuIHMoZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7Qy5jYWxsKGUsdCkmJkQobix0LGVbdF0pfSkpLG59LHc9ZnVuY3Rpb24oKXt9LEU9ZnVuY3Rpb24odCl7cmV0dXJuIHQhPWEmJiFtLmNhbGwoTyx0KX0sTj1mdW5jdGlvbih0KXtyZXR1cm4gdCE9YSYmbS5jYWxsKE8sdCl9LEM9ZnVuY3Rpb24odCl7dmFyIGU9XCJcIit0O3JldHVybiBOKGUpP20uY2FsbCh0aGlzLGUpJiZ0aGlzW2FdW1wiQEBcIitlXTp2LmNhbGwodGhpcyx0KX0sUz1mdW5jdGlvbih0KXtyZXR1cm4gZChfLHQse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwLGdldDp3LHNldDpmdW5jdGlvbihlKXtBKHRoaXMsdCx7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZX0pLGcodGhpcyx0LCEwKX19KSxoKE9bdF09ZChlKHQpLFwiY29uc3RydWN0b3JcIix4KSl9LFQ9ZnVuY3Rpb24gdChlKXtpZih0aGlzIGluc3RhbmNlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yXCIpO3JldHVybiBTKFwiX19cdTAwMDFzeW1ib2w6XCIuY29uY2F0KGV8fFwiXCIsciwrK2kpKX0sTz1jKG51bGwpLHg9e3ZhbHVlOlR9LE09ZnVuY3Rpb24odCl7cmV0dXJuIE9bdF19LEQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBvPVwiXCIrZTtpZihOKG8pKXtpZihlPUEsbi5lbnVtZXJhYmxlKXt2YXIgaT1jKG4pO2kuZW51bWVyYWJsZT0hMX1lbHNlIGk9bjtlKHQsbyxpKSxnKHQsbywhIW4uZW51bWVyYWJsZSl9ZWxzZSBkKHQsZSxuKTtyZXR1cm4gdH0sTD1mdW5jdGlvbih0KXtyZXR1cm4gcyh0KS5maWx0ZXIoTikubWFwKE0pfTtwLnZhbHVlPUQsZChlLFwiZGVmaW5lUHJvcGVydHlcIixwKSxwLnZhbHVlPUwsZChlLG4scCkscC52YWx1ZT1mdW5jdGlvbih0KXtyZXR1cm4gcyh0KS5maWx0ZXIoRSl9LGQoZSxcImdldE93blByb3BlcnR5TmFtZXNcIixwKSxwLnZhbHVlPWZ1bmN0aW9uKHQsZSl7dmFyIG49TChlKTtyZXR1cm4gbi5sZW5ndGg/dShlKS5jb25jYXQobikuZm9yRWFjaCgoZnVuY3Rpb24obil7Qy5jYWxsKGUsbikmJkQodCxuLGVbbl0pfSkpOmYodCxlKSx0fSxkKGUsXCJkZWZpbmVQcm9wZXJ0aWVzXCIscCkscC52YWx1ZT1DLGQoXyxcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIscCkscC52YWx1ZT1ULGQobyxcIlN5bWJvbFwiLHApLHAudmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuKHQ9XCJfX1x1MDAwMXN5bWJvbDpcIi5jb25jYXQoXCJfX1x1MDAwMXN5bWJvbDpcIix0LHIpKWluIF8/T1t0XTpTKHQpfSxkKFQsXCJmb3JcIixwKSxwLnZhbHVlPWZ1bmN0aW9uKHQpe2lmKEUodCkpdGhyb3cgbmV3IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhIHN5bWJvbFwiKTtpZihtLmNhbGwoTyx0KSYmKFwiX19cdTAwMDFzeW1ib2w6XCI9PT0odD10LnNsaWNlKDEwKSkuc2xpY2UoMCwxMCkmJih0PXQuc2xpY2UoMTApKSE9PXIpKXJldHVybiAwPCh0PXQuc2xpY2UoMCx0Lmxlbmd0aC1yLmxlbmd0aCkpLmxlbmd0aD90OnZvaWQgMH0sZChULFwia2V5Rm9yXCIscCkscC52YWx1ZT1mdW5jdGlvbih0LGUpe3ZhciBuPWwodCxlKTtyZXR1cm4gbiYmTihlKSYmKG4uZW51bWVyYWJsZT1DLmNhbGwodCxlKSksbn0sZChlLFwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXCIscCkscC52YWx1ZT1mdW5jdGlvbih0LGUpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aHx8dm9pZCAwPT09ZT9jKHQpOmIodCxlKX0sZChlLFwiY3JlYXRlXCIscCkscC52YWx1ZT1mdW5jdGlvbigpe3ZhciB0PXkuY2FsbCh0aGlzKTtyZXR1cm5cIltvYmplY3QgU3RyaW5nXVwiPT09dCYmTih0aGlzKT9cIltvYmplY3QgU3ltYm9sXVwiOnR9LGQoXyxcInRvU3RyaW5nXCIscCk7dHJ5e2lmKCEwIT09YyhkKHt9LFwiX19cdTAwMDFzeW1ib2w6XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBkKHRoaXMsXCJfX1x1MDAwMXN5bWJvbDpcIix7dmFsdWU6ITB9KVtcIl9fXHUwMDAxc3ltYm9sOlwiXX19KSlbXCJfX1x1MDAwMXN5bWJvbDpcIl0pdGhyb3dcIklFMTFcIjt2YXIgQT1kfWNhdGNoKHQpe0E9ZnVuY3Rpb24odCxlLG4pe3ZhciBvPWwoXyxlKTtkZWxldGUgX1tlXSxkKHQsZSxuKSxkKF8sZSxvKX19fX0oT2JqZWN0LFwiZ2V0T3duUHJvcGVydHlTeW1ib2xzXCIpLGZ1bmN0aW9uKHQsZSl7dmFyIG4sbz10LmRlZmluZVByb3BlcnR5LGk9dC5wcm90b3R5cGUscj1pLnRvU3RyaW5nO1wiaXRlcmF0b3IgbWF0Y2ggcmVwbGFjZSBzZWFyY2ggc3BsaXQgaGFzSW5zdGFuY2UgaXNDb25jYXRTcHJlYWRhYmxlIHVuc2NvcGFibGVzIHNwZWNpZXMgdG9QcmltaXRpdmUgdG9TdHJpbmdUYWdcIi5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24oYSl7aWYoIShhIGluIGUpKXN3aXRjaChvKGUsYSx7dmFsdWU6ZShhKX0pLGEpe2Nhc2VcInRvU3RyaW5nVGFnXCI6KG49dC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaSxcInRvU3RyaW5nXCIpKS52YWx1ZT1mdW5jdGlvbigpe3ZhciB0PXIuY2FsbCh0aGlzKSxuPW51bGwhPXRoaXM/dGhpc1tlLnRvU3RyaW5nVGFnXTp0aGlzO3JldHVybiBudWxsPT1uP3Q6XCJbb2JqZWN0IFwiK24rXCJdXCJ9LG8oaSxcInRvU3RyaW5nXCIsbil9fSkpfShPYmplY3QsU3ltYm9sKSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gbygpe3JldHVybiB0aGlzfWVbdF18fChlW3RdPWZ1bmN0aW9uKCl7dmFyIGU9MCxuPXRoaXMsaT17bmV4dDpmdW5jdGlvbigpe3ZhciB0PW4ubGVuZ3RoPD1lO3JldHVybiB0P3tkb25lOnR9Ontkb25lOnQsdmFsdWU6bltlKytdfX19O3JldHVybiBpW3RdPW8saX0pLG5bdF18fChuW3RdPWZ1bmN0aW9uKCl7dmFyIGU9U3RyaW5nLmZyb21Db2RlUG9pbnQsbj10aGlzLGk9MCxyPW4ubGVuZ3RoLGE9e25leHQ6ZnVuY3Rpb24oKXt2YXIgdD1yPD1pLG89dD9cIlwiOmUobi5jb2RlUG9pbnRBdChpKSk7cmV0dXJuIGkrPW8ubGVuZ3RoLHQ/e2RvbmU6dH06e2RvbmU6dCx2YWx1ZTpvfX19O3JldHVybiBhW3RdPW8sYX0pfShTeW1ib2wuaXRlcmF0b3IsQXJyYXkucHJvdG90eXBlLFN0cmluZy5wcm90b3R5cGUpO3ZhciBHPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzP1wiW29iamVjdCBVbmRlZmluZWRdXCI6bnVsbD09PXRoaXM/XCJbb2JqZWN0IE51bGxdXCI6Ry5jYWxsKHRoaXMpfSxPYmplY3Qua2V5cz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4oZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkpJiZlLmVudW1lcmFibGV9KSl9LGEoKSxoKCksU3RyaW5nLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdJiZTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0fHwoYSgpLGgoKSxTdHJpbmcucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24gdCgpe3ZhciBlLG49dGhpcztyZXR1cm4gUyh0LChmdW5jdGlvbih0KXtpZigxPT10LmEmJihlPTApLDMhPXQuYSlyZXR1cm4gZTxuLmxlbmd0aD90PWIodCxuW2VdKToodC5hPTAsdD12b2lkIDApLHQ7ZSsrLHQuYT0yfSkpfSksYSgpLGgoKSxTZXQucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl18fChhKCksaCgpLFNldC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbiB0KCl7dmFyIGUsbixvPXRoaXM7cmV0dXJuIFModCwoZnVuY3Rpb24odCl7aWYoMT09dC5hJiYoZT1bXSxvLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UucHVzaCh0KX0pKSxuPTApLDMhPXQuYSlyZXR1cm4gbjxlLmxlbmd0aD90PWIodCxlW25dKToodC5hPTAsdD12b2lkIDApLHQ7bisrLHQuYT0yfSkpfSksYSgpLGgoKSxNYXAucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl18fChhKCksaCgpLE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbiB0KCl7dmFyIGUsbixvPXRoaXM7cmV0dXJuIFModCwoZnVuY3Rpb24odCl7aWYoMT09dC5hJiYoZT1bXSxvLmZvckVhY2goKGZ1bmN0aW9uKHQsbil7ZS5wdXNoKFtuLHRdKX0pKSxuPTApLDMhPXQuYSlyZXR1cm4gbjxlLmxlbmd0aD90PWIodCxlW25dKToodC5hPTAsdD12b2lkIDApLHQ7bisrLHQuYT0yfSkpfSk7dmFyIFo9d2luZG93O1ouV2ViQ29tcG9uZW50cz1aLldlYkNvbXBvbmVudHN8fHtmbGFnczp7fX07dmFyIFk9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyYyo9XCJ3ZWJjb21wb25lbnRzLWJ1bmRsZVwiXScpLFg9L3djLSguKykvLEo9e307aWYoIUoubm9PcHRzKXtpZihsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkuc3BsaXQoXCImXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlOyh0PXQuc3BsaXQoXCI9XCIpKVswXSYmKGU9dFswXS5tYXRjaChYKSkmJihKW2VbMV1dPXRbMV18fCEwKX0pKSxZKWZvcih2YXIgSz0wLCQ9dm9pZCAwOyQ9WS5hdHRyaWJ1dGVzW0tdO0srKylcInNyY1wiIT09JC5uYW1lJiYoSlskLm5hbWVdPSQudmFsdWV8fCEwKTt2YXIgUT17fTtKLmxvZyYmSi5sb2cuc3BsaXQmJkoubG9nLnNwbGl0KFwiLFwiKS5mb3JFYWNoKChmdW5jdGlvbih0KXtRW3RdPSEwfSkpLEoubG9nPVF9Wi5XZWJDb21wb25lbnRzLmZsYWdzPUo7dmFyIHR0PUouc2hhZHlkb207aWYodHQpe1ouU2hhZHlET009Wi5TaGFkeURPTXx8e30sWi5TaGFkeURPTS5mb3JjZT10dDt2YXIgZXQ9Si5ub1BhdGNoO1ouU2hhZHlET00ubm9QYXRjaD1cInRydWVcIj09PWV0fHxldH12YXIgbnQ9Si5yZWdpc3Rlcnx8Si5jZTtmdW5jdGlvbiBvdCgpe31mdW5jdGlvbiBpdCh0KXtyZXR1cm4gdC5fX3NoYWR5fHwodC5fX3NoYWR5PW5ldyBvdCksdC5fX3NoYWR5fWZ1bmN0aW9uIHJ0KHQpe3JldHVybiB0JiZ0Ll9fc2hhZHl9bnQmJndpbmRvdy5jdXN0b21FbGVtZW50cyYmKFouY3VzdG9tRWxlbWVudHMuZm9yY2VQb2x5ZmlsbD1udCksb3QucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt9fTt2YXIgYXQ9d2luZG93LlNoYWR5RE9NfHx7fTthdC5VYT0hKCFFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3d8fCFOb2RlLnByb3RvdHlwZS5nZXRSb290Tm9kZSk7dmFyIHN0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsXCJmaXJzdENoaWxkXCIpO2Z1bmN0aW9uIGx0KHQpe3JldHVybih0PXJ0KHQpKSYmdm9pZCAwIT09dC5maXJzdENoaWxkfWZ1bmN0aW9uIGN0KHQpe3JldHVybiB0IGluc3RhbmNlb2YgU2hhZG93Um9vdH1mdW5jdGlvbiB1dCh0KXtyZXR1cm4odD0odD1ydCh0KSkmJnQucm9vdCkmJlVuKHQpfWF0LkI9ISEoc3QmJnN0LmNvbmZpZ3VyYWJsZSYmc3QuZ2V0KSxhdC5zYT1hdC5mb3JjZXx8IWF0LlVhLGF0LkQ9YXQubm9QYXRjaHx8ITEsYXQuYWE9YXQucHJlZmVyUGVyZm9ybWFuY2UsYXQudWE9XCJvbi1kZW1hbmRcIj09PWF0LkQsYXQuSWE9bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChcIlRyaWRlbnRcIik7dmFyIGh0PUVsZW1lbnQucHJvdG90eXBlLGR0PWh0Lm1hdGNoZXN8fGh0Lm1hdGNoZXNTZWxlY3Rvcnx8aHQubW96TWF0Y2hlc1NlbGVjdG9yfHxodC5tc01hdGNoZXNTZWxlY3Rvcnx8aHQub01hdGNoZXNTZWxlY3Rvcnx8aHQud2Via2l0TWF0Y2hlc1NlbGVjdG9yLGZ0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLHB0PTAsX3Q9W107ZnVuY3Rpb24gbXQodCl7X3QucHVzaCh0KSxmdC50ZXh0Q29udGVudD1wdCsrfW5ldyBNdXRhdGlvbk9ic2VydmVyKChmdW5jdGlvbigpe2Zvcig7X3QubGVuZ3RoOyl0cnl7X3Quc2hpZnQoKSgpfWNhdGNoKHQpe3Rocm93IGZ0LnRleHRDb250ZW50PXB0KyssdH19KSkub2JzZXJ2ZShmdCx7Y2hhcmFjdGVyRGF0YTohMH0pO3ZhciB2dD1kb2N1bWVudC5jb250YWlucz9mdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fc2hhZHlfbmF0aXZlX2NvbnRhaW5zKGUpfTpmdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZXx8dC5kb2N1bWVudEVsZW1lbnQmJnQuZG9jdW1lbnRFbGVtZW50Ll9fc2hhZHlfbmF0aXZlX2NvbnRhaW5zKGUpfTtmdW5jdGlvbiB5dCh0LGUpe2Zvcig7ZTspe2lmKGU9PXQpcmV0dXJuITA7ZT1lLl9fc2hhZHlfcGFyZW50Tm9kZX1yZXR1cm4hMX1mdW5jdGlvbiBndCh0KXtmb3IodmFyIGU9dC5sZW5ndGgtMTswPD1lO2UtLSl7dmFyIG49dFtlXSxvPW4uZ2V0QXR0cmlidXRlKFwiaWRcIil8fG4uZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtvJiZcImxlbmd0aFwiIT09byYmaXNOYU4obykmJih0W29dPW4pfXJldHVybiB0Lml0ZW09ZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LHQubmFtZWRJdGVtPWZ1bmN0aW9uKGUpe2lmKFwibGVuZ3RoXCIhPT1lJiZpc05hTihlKSYmdFtlXSlyZXR1cm4gdFtlXTtmb3IodmFyIG49ZCh0KSxvPW4ubmV4dCgpOyFvLmRvbmU7bz1uLm5leHQoKSlpZigoKG89by52YWx1ZSkuZ2V0QXR0cmlidXRlKFwiaWRcIil8fG8uZ2V0QXR0cmlidXRlKFwibmFtZVwiKSk9PWUpcmV0dXJuIG87cmV0dXJuIG51bGx9LHR9ZnVuY3Rpb24gYnQodCl7dmFyIGU9W107Zm9yKHQ9dC5fX3NoYWR5X25hdGl2ZV9maXJzdENoaWxkO3Q7dD10Ll9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nKWUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiB3dCh0KXt2YXIgZT1bXTtmb3IodD10Ll9fc2hhZHlfZmlyc3RDaGlsZDt0O3Q9dC5fX3NoYWR5X25leHRTaWJsaW5nKWUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiBFdCh0LGUsbil7aWYobi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSl0W2VdPW4udmFsdWU7ZWxzZSB0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxuKX1jYXRjaCh0KXt9fWZ1bmN0aW9uIE50KHQsZSxuLG8pe2Zvcih2YXIgaSBpbiBuPXZvaWQgMD09PW4/XCJcIjpuLGUpbyYmMDw9by5pbmRleE9mKGkpfHxFdCh0LG4raSxlW2ldKX1mdW5jdGlvbiBDdCh0LGUpe2Zvcih2YXIgbiBpbiBlKW4gaW4gdCYmRXQodCxuLGVbbl0pfWZ1bmN0aW9uIFN0KHQpe3ZhciBlPXt9O3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtlW25dPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxuKX0pKSxlfWZ1bmN0aW9uIFR0KHQsZSl7Zm9yKHZhciBuLG89T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSksaT0wO2k8by5sZW5ndGg7aSsrKXRbbj1vW2ldXT1lW25dfXZhciBPdCx4dD1bXTtmdW5jdGlvbiBNdCh0KXtPdHx8KE90PSEwLG10KER0KSkseHQucHVzaCh0KX1mdW5jdGlvbiBEdCgpe090PSExO2Zvcih2YXIgdD0hIXh0Lmxlbmd0aDt4dC5sZW5ndGg7KXh0LnNoaWZ0KCkoKTtyZXR1cm4gdH1mdW5jdGlvbiBMdCgpe3RoaXMuYT0hMSx0aGlzLmFkZGVkTm9kZXM9W10sdGhpcy5yZW1vdmVkTm9kZXM9W10sdGhpcy5qYT1uZXcgU2V0fUR0Lmxpc3Q9eHQsTHQucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7aWYodGhpcy5hKXt0aGlzLmE9ITE7dmFyIHQ9dGhpcy50YWtlUmVjb3JkcygpO3QubGVuZ3RoJiZ0aGlzLmphLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UodCl9KSl9fSxMdC5wcm90b3R5cGUudGFrZVJlY29yZHM9ZnVuY3Rpb24oKXtpZih0aGlzLmFkZGVkTm9kZXMubGVuZ3RofHx0aGlzLnJlbW92ZWROb2Rlcy5sZW5ndGgpe3ZhciB0PVt7YWRkZWROb2Rlczp0aGlzLmFkZGVkTm9kZXMscmVtb3ZlZE5vZGVzOnRoaXMucmVtb3ZlZE5vZGVzfV07cmV0dXJuIHRoaXMuYWRkZWROb2Rlcz1bXSx0aGlzLnJlbW92ZWROb2Rlcz1bXSx0fXJldHVybltdfTt2YXIgQXQ9L1smXFx1MDBBMFwiXS9nLFB0PS9bJlxcdTAwQTA8Pl0vZztmdW5jdGlvbiBqdCh0KXtzd2l0Y2godCl7Y2FzZVwiJlwiOnJldHVyblwiJmFtcDtcIjtjYXNlXCI8XCI6cmV0dXJuXCImbHQ7XCI7Y2FzZVwiPlwiOnJldHVyblwiJmd0O1wiO2Nhc2UnXCInOnJldHVyblwiJnF1b3Q7XCI7Y2FzZVwiwqBcIjpyZXR1cm5cIiZuYnNwO1wifX1mdW5jdGlvbiBrdCh0KXtmb3IodmFyIGU9e30sbj0wO248dC5sZW5ndGg7bisrKWVbdFtuXV09ITA7cmV0dXJuIGV9dmFyIEZ0PWt0KFwiYXJlYSBiYXNlIGJyIGNvbCBjb21tYW5kIGVtYmVkIGhyIGltZyBpbnB1dCBrZXlnZW4gbGluayBtZXRhIHBhcmFtIHNvdXJjZSB0cmFjayB3YnJcIi5zcGxpdChcIiBcIikpLFJ0PWt0KFwic3R5bGUgc2NyaXB0IHhtcCBpZnJhbWUgbm9lbWJlZCBub2ZyYW1lcyBwbGFpbnRleHQgbm9zY3JpcHRcIi5zcGxpdChcIiBcIikpO2Z1bmN0aW9uIFZ0KHQsZSl7XCJ0ZW1wbGF0ZVwiPT09dC5sb2NhbE5hbWUmJih0PXQuY29udGVudCk7Zm9yKHZhciBuPVwiXCIsbz1lP2UodCk6dC5jaGlsZE5vZGVzLGk9MCxyPW8ubGVuZ3RoLGE9dm9pZCAwO2k8ciYmKGE9b1tpXSk7aSsrKXt0Ont2YXIgcz1hLGw9dCxjPWU7c3dpdGNoKHMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Zm9yKHZhciB1LGg9XCI8XCIrKGw9cy5sb2NhbE5hbWUpLGQ9cy5hdHRyaWJ1dGVzLGY9MDt1PWRbZl07ZisrKWgrPVwiIFwiK3UubmFtZSsnPVwiJyt1LnZhbHVlLnJlcGxhY2UoQXQsanQpKydcIic7aCs9XCI+XCIscz1GdFtsXT9oOmgrVnQocyxjKStcIjwvXCIrbCtcIj5cIjticmVhayB0O2Nhc2UgTm9kZS5URVhUX05PREU6cz1zLmRhdGEscz1sJiZSdFtsLmxvY2FsTmFtZV0/czpzLnJlcGxhY2UoUHQsanQpO2JyZWFrIHQ7Y2FzZSBOb2RlLkNPTU1FTlRfTk9ERTpzPVwiXFx4M2MhLS1cIitzLmRhdGErXCItLVxceDNlXCI7YnJlYWsgdDtkZWZhdWx0OnRocm93IHdpbmRvdy5jb25zb2xlLmVycm9yKHMpLEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpfX1uKz1zfXJldHVybiBufXZhciBJdD1hdC5CLEh0PXtxdWVyeVNlbGVjdG9yOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9fc2hhZHlfbmF0aXZlX3F1ZXJ5U2VsZWN0b3IodCl9LHF1ZXJ5U2VsZWN0b3JBbGw6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfcXVlcnlTZWxlY3RvckFsbCh0KX19LFV0PXt9O2Z1bmN0aW9uIEJ0KHQpe1V0W3RdPWZ1bmN0aW9uKGUpe3JldHVybiBlW1wiX19zaGFkeV9uYXRpdmVfXCIrdF19fWZ1bmN0aW9uIHp0KHQsZSl7Zm9yKHZhciBuIGluIE50KHQsZSxcIl9fc2hhZHlfbmF0aXZlX1wiKSxlKUJ0KG4pfWZ1bmN0aW9uIHF0KHQsZSl7ZT12b2lkIDA9PT1lP1tdOmU7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl0saT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyk7aSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19zaGFkeV9uYXRpdmVfXCIrbyxpKSxpLnZhbHVlP0h0W29dfHwoSHRbb109aS52YWx1ZSk6QnQobykpfX12YXIgV3Q9ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihkb2N1bWVudCxOb2RlRmlsdGVyLlNIT1dfQUxMLG51bGwsITEpLEd0PWRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZG9jdW1lbnQsTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsbnVsbCwhMSksWnQ9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiaW5lcnRcIik7ZnVuY3Rpb24gWXQodCl7Zm9yKHZhciBlO2U9dC5fX3NoYWR5X25hdGl2ZV9maXJzdENoaWxkOyl0Ll9fc2hhZHlfbmF0aXZlX3JlbW92ZUNoaWxkKGUpfXZhciBYdD1bXCJmaXJzdEVsZW1lbnRDaGlsZFwiLFwibGFzdEVsZW1lbnRDaGlsZFwiLFwiY2hpbGRyZW5cIixcImNoaWxkRWxlbWVudENvdW50XCJdLEp0PVtcInF1ZXJ5U2VsZWN0b3JcIixcInF1ZXJ5U2VsZWN0b3JBbGxcIl07dmFyIEt0PVN0KHtnZXQgY2hpbGROb2Rlcygpe3JldHVybiB0aGlzLl9fc2hhZHlfY2hpbGROb2Rlc30sZ2V0IGZpcnN0Q2hpbGQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2ZpcnN0Q2hpbGR9LGdldCBsYXN0Q2hpbGQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2xhc3RDaGlsZH0sZ2V0IGNoaWxkRWxlbWVudENvdW50KCl7cmV0dXJuIHRoaXMuX19zaGFkeV9jaGlsZEVsZW1lbnRDb3VudH0sZ2V0IGNoaWxkcmVuKCl7cmV0dXJuIHRoaXMuX19zaGFkeV9jaGlsZHJlbn0sZ2V0IGZpcnN0RWxlbWVudENoaWxkKCl7cmV0dXJuIHRoaXMuX19zaGFkeV9maXJzdEVsZW1lbnRDaGlsZH0sZ2V0IGxhc3RFbGVtZW50Q2hpbGQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2xhc3RFbGVtZW50Q2hpbGR9LGdldCBzaGFkb3dSb290KCl7cmV0dXJuIHRoaXMuX19zaGFkeV9zaGFkb3dSb290fX0pLCR0PVN0KHtnZXQgdGV4dENvbnRlbnQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X3RleHRDb250ZW50fSxzZXQgdGV4dENvbnRlbnQodCl7dGhpcy5fX3NoYWR5X3RleHRDb250ZW50PXR9LGdldCBpbm5lckhUTUwoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2lubmVySFRNTH0sc2V0IGlubmVySFRNTCh0KXtyZXR1cm4gdGhpcy5fX3NoYWR5X2lubmVySFRNTD10fX0pLFF0PVN0KHtnZXQgcGFyZW50RWxlbWVudCgpe3JldHVybiB0aGlzLl9fc2hhZHlfcGFyZW50RWxlbWVudH0sZ2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X3BhcmVudE5vZGV9LGdldCBuZXh0U2libGluZygpe3JldHVybiB0aGlzLl9fc2hhZHlfbmV4dFNpYmxpbmd9LGdldCBwcmV2aW91c1NpYmxpbmcoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X3ByZXZpb3VzU2libGluZ30sZ2V0IG5leHRFbGVtZW50U2libGluZygpe3JldHVybiB0aGlzLl9fc2hhZHlfbmV4dEVsZW1lbnRTaWJsaW5nfSxnZXQgcHJldmlvdXNFbGVtZW50U2libGluZygpe3JldHVybiB0aGlzLl9fc2hhZHlfcHJldmlvdXNFbGVtZW50U2libGluZ30sZ2V0IGNsYXNzTmFtZSgpe3JldHVybiB0aGlzLl9fc2hhZHlfY2xhc3NOYW1lfSxzZXQgY2xhc3NOYW1lKHQpe3JldHVybiB0aGlzLl9fc2hhZHlfY2xhc3NOYW1lPXR9fSk7ZnVuY3Rpb24gdGUodCl7Zm9yKHZhciBlIGluIHQpe3ZhciBuPXRbZV07biYmKG4uZW51bWVyYWJsZT0hMSl9fXRlKEt0KSx0ZSgkdCksdGUoUXQpO3ZhciBlZSxuZT1hdC5CfHwhMD09PWF0LkQsb2U9bmU/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKHQpe3ZhciBlPWl0KHQpO2UuS2F8fChlLkthPSEwLEN0KHQsUXQpKX0saWU9bmU/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKHQpe3ZhciBlPWl0KHQpO2UuSmF8fChlLkphPSEwLEN0KHQsS3QpLHdpbmRvdy5jdXN0b21FbGVtZW50cyYmd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2smJiFhdC5EfHxDdCh0LCR0KSl9LHJlPVwiX19ldmVudFdyYXBwZXJzXCIrRGF0ZS5ub3coKSxhZT0oZWU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFdmVudC5wcm90b3R5cGUsXCJjb21wb3NlZFwiKSk/ZnVuY3Rpb24odCl7cmV0dXJuIGVlLmdldC5jYWxsKHQpfTpudWxsLHNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe312YXIgZT0hMSxuPXtnZXQgY2FwdHVyZSgpe3JldHVybiBlPSEwLCExfX07cmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLHQsbiksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsdCxuKSxlfSgpO2Z1bmN0aW9uIGxlKHQpe2lmKHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0KXZhciBlPSEhdC5jYXB0dXJlLG49ISF0Lm9uY2Usbz0hIXQucGFzc2l2ZSxpPXQuTztlbHNlIGU9ISF0LG89bj0hMTtyZXR1cm57R2E6aSxjYXB0dXJlOmUsb25jZTpuLHBhc3NpdmU6byxGYTpzZT90OmV9fXZhciBjZT17Ymx1cjohMCxmb2N1czohMCxmb2N1c2luOiEwLGZvY3Vzb3V0OiEwLGNsaWNrOiEwLGRibGNsaWNrOiEwLG1vdXNlZG93bjohMCxtb3VzZWVudGVyOiEwLG1vdXNlbGVhdmU6ITAsbW91c2Vtb3ZlOiEwLG1vdXNlb3V0OiEwLG1vdXNlb3ZlcjohMCxtb3VzZXVwOiEwLHdoZWVsOiEwLGJlZm9yZWlucHV0OiEwLGlucHV0OiEwLGtleWRvd246ITAsa2V5dXA6ITAsY29tcG9zaXRpb25zdGFydDohMCxjb21wb3NpdGlvbnVwZGF0ZTohMCxjb21wb3NpdGlvbmVuZDohMCx0b3VjaHN0YXJ0OiEwLHRvdWNoZW5kOiEwLHRvdWNobW92ZTohMCx0b3VjaGNhbmNlbDohMCxwb2ludGVyb3ZlcjohMCxwb2ludGVyZW50ZXI6ITAscG9pbnRlcmRvd246ITAscG9pbnRlcm1vdmU6ITAscG9pbnRlcnVwOiEwLHBvaW50ZXJjYW5jZWw6ITAscG9pbnRlcm91dDohMCxwb2ludGVybGVhdmU6ITAsZ290cG9pbnRlcmNhcHR1cmU6ITAsbG9zdHBvaW50ZXJjYXB0dXJlOiEwLGRyYWdzdGFydDohMCxkcmFnOiEwLGRyYWdlbnRlcjohMCxkcmFnbGVhdmU6ITAsZHJhZ292ZXI6ITAsZHJvcDohMCxkcmFnZW5kOiEwLERPTUFjdGl2YXRlOiEwLERPTUZvY3VzSW46ITAsRE9NRm9jdXNPdXQ6ITAsa2V5cHJlc3M6ITB9LHVlPXtET01BdHRyTW9kaWZpZWQ6ITAsRE9NQXR0cmlidXRlTmFtZUNoYW5nZWQ6ITAsRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkOiEwLERPTUVsZW1lbnROYW1lQ2hhbmdlZDohMCxET01Ob2RlSW5zZXJ0ZWQ6ITAsRE9NTm9kZUluc2VydGVkSW50b0RvY3VtZW50OiEwLERPTU5vZGVSZW1vdmVkOiEwLERPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50OiEwLERPTVN1YnRyZWVNb2RpZmllZDohMH07ZnVuY3Rpb24gaGUodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBOb2RlP3QuX19zaGFkeV9nZXRSb290Tm9kZSgpOnR9ZnVuY3Rpb24gZGUodCxlKXt2YXIgbj1bXSxvPXQ7Zm9yKHQ9aGUodCk7bzspbi5wdXNoKG8pLG89by5fX3NoYWR5X2Fzc2lnbmVkU2xvdD9vLl9fc2hhZHlfYXNzaWduZWRTbG90Om8ubm9kZVR5cGU9PT1Ob2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUmJm8uaG9zdCYmKGV8fG8hPT10KT9vLmhvc3Q6by5fX3NoYWR5X3BhcmVudE5vZGU7cmV0dXJuIG5bbi5sZW5ndGgtMV09PT1kb2N1bWVudCYmbi5wdXNoKHdpbmRvdyksbn1mdW5jdGlvbiBmZSh0LGUpe2lmKCFjdClyZXR1cm4gdDt0PWRlKHQsITApO2Zvcih2YXIgbixvLGk9MCxyPXZvaWQgMCxhPXZvaWQgMDtpPGUubGVuZ3RoO2krKylpZigobz1oZShuPWVbaV0pKSE9PXImJihhPXQuaW5kZXhPZihvKSxyPW8pLCFjdChvKXx8LTE8YSlyZXR1cm4gbn1mdW5jdGlvbiBwZSh0KXtmdW5jdGlvbiBlKGUsbil7cmV0dXJuKGU9bmV3IHQoZSxuKSkuX19jb21wb3NlZD1uJiYhIW4uY29tcG9zZWQsZX1yZXR1cm4gZS5fX3Byb3RvX189dCxlLnByb3RvdHlwZT10LnByb3RvdHlwZSxlfXZhciBfZT17Zm9jdXM6ITAsYmx1cjohMH07ZnVuY3Rpb24gbWUodCl7cmV0dXJuIHQuX190YXJnZXQhPT10LnRhcmdldHx8dC5fX3JlbGF0ZWRUYXJnZXQhPT10LnJlbGF0ZWRUYXJnZXR9ZnVuY3Rpb24gdmUodCxlLG4pe2lmKG49ZS5fX2hhbmRsZXJzJiZlLl9faGFuZGxlcnNbdC50eXBlXSYmZS5fX2hhbmRsZXJzW3QudHlwZV1bbl0pZm9yKHZhciBvLGk9MDsobz1uW2ldKSYmKCFtZSh0KXx8dC50YXJnZXQhPT10LnJlbGF0ZWRUYXJnZXQpJiYoby5jYWxsKGUsdCksIXQuX19pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpO2krKyk7fWZ1bmN0aW9uIHllKHQpe3ZhciBlPXQuY29tcG9zZWRQYXRoKCksbj1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGZlKHQsZSl9KSksbz10LmJ1YmJsZXM7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJjdXJyZW50VGFyZ2V0XCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfX0pO3ZhciBpPUV2ZW50LkNBUFRVUklOR19QSEFTRTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImV2ZW50UGhhc2VcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9fSk7Zm9yKHZhciByPWUubGVuZ3RoLTE7MDw9cjtyLS0pe3ZhciBhPWVbcl07aWYoaT1hPT09bltyXT9FdmVudC5BVF9UQVJHRVQ6RXZlbnQuQ0FQVFVSSU5HX1BIQVNFLHZlKHQsYSxcImNhcHR1cmVcIiksdC5tYSlyZXR1cm59Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIHM9KGE9ZVtyXSk9PT1uW3JdO2lmKChzfHxvKSYmKGk9cz9FdmVudC5BVF9UQVJHRVQ6RXZlbnQuQlVCQkxJTkdfUEhBU0UsdmUodCxhLFwiYnViYmxlXCIpLHQubWEpKXJldHVybn1pPTAsYT1udWxsfWZ1bmN0aW9uIGdlKHQsZSxuLG8saSxyKXtmb3IodmFyIGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIHM9dFthXSxsPXMudHlwZSxjPXMuY2FwdHVyZSx1PXMub25jZSxoPXMucGFzc2l2ZTtpZihlPT09cy5ub2RlJiZuPT09bCYmbz09PWMmJmk9PT11JiZyPT09aClyZXR1cm4gYX1yZXR1cm4tMX1mdW5jdGlvbiBiZSh0KXtyZXR1cm4gRHQoKSwhYXQuYWEmJnRoaXMgaW5zdGFuY2VvZiBOb2RlJiYhdnQoZG9jdW1lbnQsdGhpcyk/KHQuX190YXJnZXR8fENlKHQsdGhpcykseWUodCkpOnRoaXMuX19zaGFkeV9uYXRpdmVfZGlzcGF0Y2hFdmVudCh0KX1mdW5jdGlvbiB3ZSh0LGUsbil7dmFyIG89bGUobiksaT1vLmNhcHR1cmUscj1vLm9uY2UsYT1vLnBhc3NpdmUscz1vLkdhO2lmKG89by5GYSxlKXt2YXIgbD10eXBlb2YgZTtpZigoXCJmdW5jdGlvblwiPT09bHx8XCJvYmplY3RcIj09PWwpJiYoXCJvYmplY3RcIiE9PWx8fGUuaGFuZGxlRXZlbnQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuaGFuZGxlRXZlbnQpKXtpZih1ZVt0XSlyZXR1cm4gdGhpcy5fX3NoYWR5X25hdGl2ZV9hZGRFdmVudExpc3RlbmVyKHQsZSxvKTt2YXIgYz1zfHx0aGlzO2lmKHM9ZVtyZV0pe2lmKC0xPGdlKHMsYyx0LGkscixhKSlyZXR1cm59ZWxzZSBlW3JlXT1bXTtzPWZ1bmN0aW9uKG8pe2lmKHImJnRoaXMuX19zaGFkeV9yZW1vdmVFdmVudExpc3RlbmVyKHQsZSxuKSxvLl9fdGFyZ2V0fHxDZShvKSxjIT09dGhpcyl7dmFyIGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLFwiY3VycmVudFRhcmdldFwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImN1cnJlbnRUYXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGNvbmZpZ3VyYWJsZTohMH0pO3ZhciBzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxcImV2ZW50UGhhc2VcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJldmVudFBoYXNlXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpP0V2ZW50LkNBUFRVUklOR19QSEFTRTpFdmVudC5CVUJCTElOR19QSEFTRX19KX1pZihvLl9fcHJldmlvdXNDdXJyZW50VGFyZ2V0PW8uY3VycmVudFRhcmdldCwoIWN0KGMpJiZcInNsb3RcIiE9PWMubG9jYWxOYW1lfHwtMSE9by5jb21wb3NlZFBhdGgoKS5pbmRleE9mKGMpKSYmKG8uY29tcG9zZWR8fC0xPG8uY29tcG9zZWRQYXRoKCkuaW5kZXhPZihjKSkpaWYobWUobykmJm8udGFyZ2V0PT09by5yZWxhdGVkVGFyZ2V0KW8uZXZlbnRQaGFzZT09PUV2ZW50LkJVQkJMSU5HX1BIQVNFJiZvLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO2Vsc2UgaWYoby5ldmVudFBoYXNlPT09RXZlbnQuQ0FQVFVSSU5HX1BIQVNFfHxvLmJ1YmJsZXN8fG8udGFyZ2V0PT09Y3x8YyBpbnN0YW5jZW9mIFdpbmRvdyl7dmFyIHU9XCJmdW5jdGlvblwiPT09bD9lLmNhbGwoYyxvKTplLmhhbmRsZUV2ZW50JiZlLmhhbmRsZUV2ZW50KG8pO3JldHVybiBjIT09dGhpcyYmKGE/KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiY3VycmVudFRhcmdldFwiLGEpLGE9bnVsbCk6ZGVsZXRlIG8uY3VycmVudFRhcmdldCxzPyhPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImV2ZW50UGhhc2VcIixzKSxzPW51bGwpOmRlbGV0ZSBvLmV2ZW50UGhhc2UpLHV9fSxlW3JlXS5wdXNoKHtub2RlOmMsdHlwZTp0LGNhcHR1cmU6aSxvbmNlOnIscGFzc2l2ZTphLGxiOnN9KSx0aGlzLl9faGFuZGxlcnM9dGhpcy5fX2hhbmRsZXJzfHx7fSx0aGlzLl9faGFuZGxlcnNbdF09dGhpcy5fX2hhbmRsZXJzW3RdfHx7Y2FwdHVyZTpbXSxidWJibGU6W119LHRoaXMuX19oYW5kbGVyc1t0XVtpP1wiY2FwdHVyZVwiOlwiYnViYmxlXCJdLnB1c2gocyksX2VbdF18fHRoaXMuX19zaGFkeV9uYXRpdmVfYWRkRXZlbnRMaXN0ZW5lcih0LHMsbyl9fX1mdW5jdGlvbiBFZSh0LGUsbil7aWYoZSl7dmFyIG89bGUobik7bj1vLmNhcHR1cmU7dmFyIGk9by5vbmNlLHI9by5wYXNzaXZlLGE9by5HYTtpZihvPW8uRmEsdWVbdF0pcmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfcmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGUsbyk7dmFyIHM9YXx8dGhpczthPXZvaWQgMDt2YXIgbD1udWxsO3RyeXtsPWVbcmVdfWNhdGNoKHQpe31sJiYoLTE8KGk9Z2UobCxzLHQsbixpLHIpKSYmKGE9bC5zcGxpY2UoaSwxKVswXS5sYixsLmxlbmd0aHx8KGVbcmVdPXZvaWQgMCkpKSx0aGlzLl9fc2hhZHlfbmF0aXZlX3JlbW92ZUV2ZW50TGlzdGVuZXIodCxhfHxlLG8pLGEmJnRoaXMuX19oYW5kbGVycyYmdGhpcy5fX2hhbmRsZXJzW3RdJiYoLTE8KGU9KHQ9dGhpcy5fX2hhbmRsZXJzW3RdW24/XCJjYXB0dXJlXCI6XCJidWJibGVcIl0pLmluZGV4T2YoYSkpJiZ0LnNwbGljZShlLDEpKX19dmFyIE5lPVN0KHtnZXQgY29tcG9zZWQoKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fX2NvbXBvc2VkJiYoYWU/dGhpcy5fX2NvbXBvc2VkPVwiZm9jdXNpblwiPT09dGhpcy50eXBlfHxcImZvY3Vzb3V0XCI9PT10aGlzLnR5cGV8fGFlKHRoaXMpOiExIT09dGhpcy5pc1RydXN0ZWQmJih0aGlzLl9fY29tcG9zZWQ9Y2VbdGhpcy50eXBlXSkpLHRoaXMuX19jb21wb3NlZHx8ITF9LGNvbXBvc2VkUGF0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fY29tcG9zZWRQYXRofHwodGhpcy5fX2NvbXBvc2VkUGF0aD1kZSh0aGlzLl9fdGFyZ2V0LHRoaXMuY29tcG9zZWQpKSx0aGlzLl9fY29tcG9zZWRQYXRofSxnZXQgdGFyZ2V0KCl7cmV0dXJuIGZlKHRoaXMuY3VycmVudFRhcmdldHx8dGhpcy5fX3ByZXZpb3VzQ3VycmVudFRhcmdldCx0aGlzLmNvbXBvc2VkUGF0aCgpKX0sZ2V0IHJlbGF0ZWRUYXJnZXQoKXtyZXR1cm4gdGhpcy5fX3JlbGF0ZWRUYXJnZXQ/KHRoaXMuX19yZWxhdGVkVGFyZ2V0Q29tcG9zZWRQYXRofHwodGhpcy5fX3JlbGF0ZWRUYXJnZXRDb21wb3NlZFBhdGg9ZGUodGhpcy5fX3JlbGF0ZWRUYXJnZXQsITApKSxmZSh0aGlzLmN1cnJlbnRUYXJnZXR8fHRoaXMuX19wcmV2aW91c0N1cnJlbnRUYXJnZXQsdGhpcy5fX3JlbGF0ZWRUYXJnZXRDb21wb3NlZFBhdGgpKTpudWxsfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXtFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyksdGhpcy5tYT0hMH0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7RXZlbnQucHJvdG90eXBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKHRoaXMpLHRoaXMubWE9dGhpcy5fX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMH19KTtmdW5jdGlvbiBDZSh0LGUpe2lmKGU9dm9pZCAwPT09ZT90LnRhcmdldDplLHQuX190YXJnZXQ9ZSx0Ll9fcmVsYXRlZFRhcmdldD10LnJlbGF0ZWRUYXJnZXQsYXQuQil7aWYoIShlPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuaGFzT3duUHJvcGVydHkoXCJfX3NoYWR5X3BhdGNoZWRQcm90b1wiKSl7dmFyIG49T2JqZWN0LmNyZWF0ZShlKTtuLl9fc2hhZHlfc291cmNlUHJvdG89ZSxOdChuLE5lKSxlLl9fc2hhZHlfcGF0Y2hlZFByb3RvPW59dC5fX3Byb3RvX189ZS5fX3NoYWR5X3BhdGNoZWRQcm90b31lbHNlIE50KHQsTmUpfXZhciBTZT1wZShFdmVudCksVGU9cGUoQ3VzdG9tRXZlbnQpLE9lPXBlKE1vdXNlRXZlbnQpO3ZhciB4ZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhFbGVtZW50LnByb3RvdHlwZSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cIm9uXCI9PT10LnN1YnN0cmluZygwLDIpfSkpLE1lPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEhUTUxFbGVtZW50LnByb3RvdHlwZSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cIm9uXCI9PT10LnN1YnN0cmluZygwLDIpfSkpO2Z1bmN0aW9uIERlKHQpe3JldHVybntzZXQ6ZnVuY3Rpb24oZSl7dmFyIG49aXQodGhpcyksbz10LnN1YnN0cmluZygyKTtuLk58fChuLk49e30pLG4uTlt0XSYmdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8sbi5OW3RdKSx0aGlzLl9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lcihvLGUpLG4uTlt0XT1lfSxnZXQ6ZnVuY3Rpb24oKXt2YXIgZT1ydCh0aGlzKTtyZXR1cm4gZSYmZS5OJiZlLk5bdF19LGNvbmZpZ3VyYWJsZTohMH19ZnVuY3Rpb24gTGUodCxlKXtyZXR1cm57aW5kZXg6dCxiYTpbXSxpYTplfX1mdW5jdGlvbiBBZSh0LGUsbixvKXt2YXIgaT0wLHI9MCxhPTAscz0wLGw9TWF0aC5taW4oZS1pLG8tcik7aWYoMD09aSYmMD09cil0Ontmb3IoYT0wO2E8bDthKyspaWYodFthXSE9PW5bYV0pYnJlYWsgdDthPWx9aWYoZT09dC5sZW5ndGgmJm89PW4ubGVuZ3RoKXtzPXQubGVuZ3RoO2Zvcih2YXIgYz1uLmxlbmd0aCx1PTA7dTxsLWEmJlBlKHRbLS1zXSxuWy0tY10pOyl1Kys7cz11fWlmKHIrPWEsby09cywwPT0oZS09cyktKGkrPWEpJiYwPT1vLXIpcmV0dXJuW107aWYoaT09ZSl7Zm9yKGU9TGUoaSwwKTtyPG87KWUuYmEucHVzaChuW3IrK10pO3JldHVybltlXX1pZihyPT1vKXJldHVybltMZShpLGUtaSldO2ZvcihvPW8tKGE9cikrMSxzPWUtKGw9aSkrMSxlPUFycmF5KG8pLGM9MDtjPG87YysrKWVbY109QXJyYXkocyksZVtjXVswXT1jO2ZvcihjPTA7YzxzO2MrKyllWzBdW2NdPWM7Zm9yKGM9MTtjPG87YysrKWZvcih1PTE7dTxzO3UrKylpZih0W2wrdS0xXT09PW5bYStjLTFdKWVbY11bdV09ZVtjLTFdW3UtMV07ZWxzZXt2YXIgaD1lW2MtMV1bdV0rMSxkPWVbY11bdS0xXSsxO2VbY11bdV09aDxkP2g6ZH1mb3IobD1lLmxlbmd0aC0xLGE9ZVswXS5sZW5ndGgtMSxvPWVbbF1bYV0sdD1bXTswPGx8fDA8YTspMD09bD8odC5wdXNoKDIpLGEtLSk6MD09YT8odC5wdXNoKDMpLGwtLSk6KHM9ZVtsLTFdW2EtMV0sKGg9KGM9ZVtsLTFdW2FdKTwodT1lW2xdW2EtMV0pP2M8cz9jOnM6dTxzP3U6cyk9PXM/KHM9PW8/dC5wdXNoKDApOih0LnB1c2goMSksbz1zKSxsLS0sYS0tKTpoPT1jPyh0LnB1c2goMyksbC0tLG89Yyk6KHQucHVzaCgyKSxhLS0sbz11KSk7Zm9yKHQucmV2ZXJzZSgpLGU9dm9pZCAwLGw9W10sYT0wO2E8dC5sZW5ndGg7YSsrKXN3aXRjaCh0W2FdKXtjYXNlIDA6ZSYmKGwucHVzaChlKSxlPXZvaWQgMCksaSsrLHIrKzticmVhaztjYXNlIDE6ZXx8KGU9TGUoaSwwKSksZS5pYSsrLGkrKyxlLmJhLnB1c2gobltyXSkscisrO2JyZWFrO2Nhc2UgMjplfHwoZT1MZShpLDApKSxlLmlhKyssaSsrO2JyZWFrO2Nhc2UgMzplfHwoZT1MZShpLDApKSxlLmJhLnB1c2gobltyXSkscisrfXJldHVybiBlJiZsLnB1c2goZSksbH1mdW5jdGlvbiBQZSh0LGUpe3JldHVybiB0PT09ZX12YXIgamU9U3Qoe2Rpc3BhdGNoRXZlbnQ6YmUsYWRkRXZlbnRMaXN0ZW5lcjp3ZSxyZW1vdmVFdmVudExpc3RlbmVyOkVlfSksa2U9bnVsbDtmdW5jdGlvbiBGZSgpe3JldHVybiBrZXx8KGtlPXdpbmRvdy5TaGFkeUNTUyYmd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltKSxrZXx8bnVsbH1mdW5jdGlvbiBSZSh0LGUsbil7dmFyIG89RmUoKTtyZXR1cm4hKCFvfHxcImNsYXNzXCIhPT1lKSYmKG8uc2V0RWxlbWVudENsYXNzKHQsbiksITApfWZ1bmN0aW9uIFZlKHQsZSl7dmFyIG49RmUoKTtuJiZuLnVuc2NvcGVOb2RlKHQsZSl9ZnVuY3Rpb24gSWUodCl7aWYodC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFKXJldHVyblwiXCI7dmFyIGU9RmUoKTtyZXR1cm4gZT9lLmN1cnJlbnRTY29wZUZvck5vZGUodCk6XCJcIn1mdW5jdGlvbiBIZSh0LGUpe2lmKHQpZm9yKHQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmZSh0KSx0PXQuX19zaGFkeV9maXJzdENoaWxkO3Q7dD10Ll9fc2hhZHlfbmV4dFNpYmxpbmcpdC5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZIZSh0LGUpfXZhciBVZT13aW5kb3cuZG9jdW1lbnQsQmU9YXQuYWEsemU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSxcImlzQ29ubmVjdGVkXCIpLHFlPXplJiZ6ZS5nZXQ7ZnVuY3Rpb24gV2UodCl7Zm9yKHZhciBlO2U9dC5fX3NoYWR5X2ZpcnN0Q2hpbGQ7KXQuX19zaGFkeV9yZW1vdmVDaGlsZChlKX1mdW5jdGlvbiBHZSh0LGUsbil7aWYodD0odD1ydCh0KSkmJnQuWil7aWYoZSlpZihlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKWZvcih2YXIgbz0wLGk9ZS5jaGlsZE5vZGVzLmxlbmd0aDtvPGk7bysrKXQuYWRkZWROb2Rlcy5wdXNoKGUuY2hpbGROb2Rlc1tvXSk7ZWxzZSB0LmFkZGVkTm9kZXMucHVzaChlKTtuJiZ0LnJlbW92ZWROb2Rlcy5wdXNoKG4pLGZ1bmN0aW9uKHQpe3QuYXx8KHQuYT0hMCxtdCgoZnVuY3Rpb24oKXt0LmZsdXNoKCl9KSkpfSh0KX19dmFyIFplPVN0KHtnZXQgcGFyZW50Tm9kZSgpe3ZhciB0PXJ0KHRoaXMpO3JldHVybiB2b2lkIDAhPT0odD10JiZ0LnBhcmVudE5vZGUpP3Q6dGhpcy5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlfSxnZXQgZmlyc3RDaGlsZCgpe3ZhciB0PXJ0KHRoaXMpO3JldHVybiB2b2lkIDAhPT0odD10JiZ0LmZpcnN0Q2hpbGQpP3Q6dGhpcy5fX3NoYWR5X25hdGl2ZV9maXJzdENoaWxkfSxnZXQgbGFzdENoaWxkKCl7dmFyIHQ9cnQodGhpcyk7cmV0dXJuIHZvaWQgMCE9PSh0PXQmJnQubGFzdENoaWxkKT90OnRoaXMuX19zaGFkeV9uYXRpdmVfbGFzdENoaWxkfSxnZXQgbmV4dFNpYmxpbmcoKXt2YXIgdD1ydCh0aGlzKTtyZXR1cm4gdm9pZCAwIT09KHQ9dCYmdC5uZXh0U2libGluZyk/dDp0aGlzLl9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nfSxnZXQgcHJldmlvdXNTaWJsaW5nKCl7dmFyIHQ9cnQodGhpcyk7cmV0dXJuIHZvaWQgMCE9PSh0PXQmJnQucHJldmlvdXNTaWJsaW5nKT90OnRoaXMuX19zaGFkeV9uYXRpdmVfcHJldmlvdXNTaWJsaW5nfSxnZXQgY2hpbGROb2Rlcygpe2lmKGx0KHRoaXMpKXt2YXIgdD1ydCh0aGlzKTtpZighdC5jaGlsZE5vZGVzKXt0LmNoaWxkTm9kZXM9W107Zm9yKHZhciBlPXRoaXMuX19zaGFkeV9maXJzdENoaWxkO2U7ZT1lLl9fc2hhZHlfbmV4dFNpYmxpbmcpdC5jaGlsZE5vZGVzLnB1c2goZSl9dmFyIG49dC5jaGlsZE5vZGVzfWVsc2Ugbj10aGlzLl9fc2hhZHlfbmF0aXZlX2NoaWxkTm9kZXM7cmV0dXJuIG4uaXRlbT1mdW5jdGlvbih0KXtyZXR1cm4gblt0XX0sbn0sZ2V0IHBhcmVudEVsZW1lbnQoKXt2YXIgdD1ydCh0aGlzKTtyZXR1cm4odD10JiZ0LnBhcmVudE5vZGUpJiZ0Lm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREUmJih0PW51bGwpLHZvaWQgMCE9PXQ/dDp0aGlzLl9fc2hhZHlfbmF0aXZlX3BhcmVudEVsZW1lbnR9LGdldCBpc0Nvbm5lY3RlZCgpe2lmKHFlJiZxZS5jYWxsKHRoaXMpKXJldHVybiEwO2lmKHRoaXMubm9kZVR5cGU9PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSlyZXR1cm4hMTt2YXIgdD10aGlzLm93bmVyRG9jdW1lbnQ7aWYobnVsbD09PXR8fHZ0KHQsdGhpcykpcmV0dXJuITA7Zm9yKHQ9dGhpczt0JiYhKHQgaW5zdGFuY2VvZiBEb2N1bWVudCk7KXQ9dC5fX3NoYWR5X3BhcmVudE5vZGV8fChjdCh0KT90Lmhvc3Q6dm9pZCAwKTtyZXR1cm4hISh0JiZ0IGluc3RhbmNlb2YgRG9jdW1lbnQpfSxnZXQgdGV4dENvbnRlbnQoKXtpZihsdCh0aGlzKSl7Zm9yKHZhciB0PVtdLGU9dGhpcy5fX3NoYWR5X2ZpcnN0Q2hpbGQ7ZTtlPWUuX19zaGFkeV9uZXh0U2libGluZyllLm5vZGVUeXBlIT09Tm9kZS5DT01NRU5UX05PREUmJnQucHVzaChlLl9fc2hhZHlfdGV4dENvbnRlbnQpO3JldHVybiB0LmpvaW4oXCJcIil9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfdGV4dENvbnRlbnR9LHNldCB0ZXh0Q29udGVudCh0KXtzd2l0Y2gobnVsbD09dCYmKHQ9XCJcIiksdGhpcy5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTppZighbHQodGhpcykmJmF0LkIpe3ZhciBlPXRoaXMuX19zaGFkeV9maXJzdENoaWxkOyhlIT10aGlzLl9fc2hhZHlfbGFzdENoaWxkfHxlJiZlLm5vZGVUeXBlIT1Ob2RlLlRFWFRfTk9ERSkmJldlKHRoaXMpLHRoaXMuX19zaGFkeV9uYXRpdmVfdGV4dENvbnRlbnQ9dH1lbHNlIFdlKHRoaXMpLCgwPHQubGVuZ3RofHx0aGlzLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpJiZ0aGlzLl9fc2hhZHlfaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpKTticmVhaztkZWZhdWx0OnRoaXMubm9kZVZhbHVlPXR9fSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24odCxlKXtpZih0aGlzLm93bmVyRG9jdW1lbnQhPT1VZSYmdC5vd25lckRvY3VtZW50IT09VWUpcmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlKHQsZSksdDtpZih0PT09dGhpcyl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdhcHBlbmRDaGlsZCcgb24gJ05vZGUnOiBUaGUgbmV3IGNoaWxkIGVsZW1lbnQgY29udGFpbnMgdGhlIHBhcmVudC5cIik7aWYoZSl7dmFyIG49cnQoZSk7aWYodm9pZCAwIT09KG49biYmbi5wYXJlbnROb2RlKSYmbiE9PXRoaXN8fHZvaWQgMD09PW4mJmUuX19zaGFkeV9uYXRpdmVfcGFyZW50Tm9kZSE9PXRoaXMpdGhyb3cgRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnaW5zZXJ0QmVmb3JlJyBvbiAnTm9kZSc6IFRoZSBub2RlIGJlZm9yZSB3aGljaCB0aGUgbmV3IG5vZGUgaXMgdG8gYmUgaW5zZXJ0ZWQgaXMgbm90IGEgY2hpbGQgb2YgdGhpcyBub2RlLlwiKX1pZihlPT09dClyZXR1cm4gdDtHZSh0aGlzLHQpO3ZhciBvPVtdLGk9KG49V24odGhpcykpP24uaG9zdC5sb2NhbE5hbWU6SWUodGhpcykscj10Ll9fc2hhZHlfcGFyZW50Tm9kZTtpZihyKXt2YXIgYT1JZSh0KSxzPSEhbnx8IVduKHQpfHxCZSYmdm9pZCAwIT09dGhpcy5fX25vSW5zZXJ0aW9uUG9pbnQ7ci5fX3NoYWR5X3JlbW92ZUNoaWxkKHQscyl9cj0hMDt2YXIgbD0oIUJlfHx2b2lkIDA9PT10Ll9fbm9JbnNlcnRpb25Qb2ludCYmdm9pZCAwPT09dGhpcy5fX25vSW5zZXJ0aW9uUG9pbnQpJiYhZnVuY3Rpb24gdChlLG4pe3ZhciBvPUZlKCk7aWYoIW8pcmV0dXJuITA7aWYoZS5ub2RlVHlwZT09PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7Zm9yKG89ITAsZT1lLl9fc2hhZHlfZmlyc3RDaGlsZDtlO2U9ZS5fX3NoYWR5X25leHRTaWJsaW5nKW89byYmdChlLG4pO3JldHVybiBvfXJldHVybiBlLm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREV8fG8uY3VycmVudFNjb3BlRm9yTm9kZShlKT09PW59KHQsaSksYz1uJiYhdC5fX25vSW5zZXJ0aW9uUG9pbnQmJighQmV8fHQubm9kZVR5cGU9PT1Ob2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpO3JldHVybihjfHxsKSYmKGwmJihhPWF8fEllKHQpKSxIZSh0LChmdW5jdGlvbih0KXtpZihjJiZcInNsb3RcIj09PXQubG9jYWxOYW1lJiZvLnB1c2godCksbCl7dmFyIGU9YTtGZSgpJiYoZSYmVmUodCxlKSwoZT1GZSgpKSYmZS5zY29wZU5vZGUodCxpKSl9fSkpKSxvLmxlbmd0aCYmKFJuKG4pLG4uYy5wdXNoLmFwcGx5KG4uYyxvIGluc3RhbmNlb2YgQXJyYXk/bzpmKGQobykpKSxBbihuKSksbHQodGhpcykmJihmdW5jdGlvbih0LGUsbil7d24oZSwyKTt2YXIgbz1pdChlKTtpZih2b2lkIDAhPT1vLmZpcnN0Q2hpbGQmJihvLmNoaWxkTm9kZXM9bnVsbCksdC5ub2RlVHlwZT09PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSlmb3IodD10Ll9fc2hhZHlfbmF0aXZlX2ZpcnN0Q2hpbGQ7dDt0PXQuX19zaGFkeV9uYXRpdmVfbmV4dFNpYmxpbmcpRW4odCxlLG8sbik7ZWxzZSBFbih0LGUsbyxuKX0odCx0aGlzLGUpLChzPXJ0KHRoaXMpKS5yb290PyhyPSExLHV0KHRoaXMpJiZBbihzLnJvb3QpKTpuJiZcInNsb3RcIj09PXRoaXMubG9jYWxOYW1lJiYocj0hMSxBbihuKSkpLHI/KG49Y3QodGhpcyk/dGhpcy5ob3N0OnRoaXMsZT8oZT1mdW5jdGlvbiB0KGUpe3ZhciBuPWU7aWYoZSYmXCJzbG90XCI9PT1lLmxvY2FsTmFtZSl7dmFyIG89cnQoZSk7KG89byYmby5WKSYmKG49by5sZW5ndGg/b1swXTp0KGUuX19zaGFkeV9uZXh0U2libGluZykpfXJldHVybiBufShlKSxuLl9fc2hhZHlfbmF0aXZlX2luc2VydEJlZm9yZSh0LGUpKTpuLl9fc2hhZHlfbmF0aXZlX2FwcGVuZENoaWxkKHQpKTp0Lm93bmVyRG9jdW1lbnQhPT10aGlzLm93bmVyRG9jdW1lbnQmJnRoaXMub3duZXJEb2N1bWVudC5hZG9wdE5vZGUodCksdH0sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24odCl7aWYodGhpcyE9dHx8IWN0KHQpKXJldHVybiB0aGlzLl9fc2hhZHlfaW5zZXJ0QmVmb3JlKHQpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbih0LGUpe2lmKGU9dm9pZCAwIT09ZSYmZSx0aGlzLm93bmVyRG9jdW1lbnQhPT1VZSlyZXR1cm4gdGhpcy5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZCh0KTtpZih0Ll9fc2hhZHlfcGFyZW50Tm9kZSE9PXRoaXMpdGhyb3cgRXJyb3IoXCJUaGUgbm9kZSB0byBiZSByZW1vdmVkIGlzIG5vdCBhIGNoaWxkIG9mIHRoaXMgbm9kZTogXCIrdCk7R2UodGhpcyxudWxsLHQpO3ZhciBuPVduKHQpLG89biYmZnVuY3Rpb24odCxlKXtpZih0LmEpe1ZuKHQpO3ZhciBuLG89dC5iO2ZvcihuIGluIG8pZm9yKHZhciBpPW9bbl0scj0wO3I8aS5sZW5ndGg7cisrKXt2YXIgYT1pW3JdO2lmKHl0KGUsYSkpe2kuc3BsaWNlKHIsMSk7dmFyIHM9dC5hLmluZGV4T2YoYSk7aWYoMDw9cyYmKHQuYS5zcGxpY2UocywxKSwocz1ydChhLl9fc2hhZHlfcGFyZW50Tm9kZSkpJiZzLmRhJiZzLmRhLS0pLHItLSxhPXJ0KGEpLHM9YS5WKWZvcih2YXIgbD0wO2w8cy5sZW5ndGg7bCsrKXt2YXIgYz1zW2xdLHU9Yy5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlO3UmJnUuX19zaGFkeV9uYXRpdmVfcmVtb3ZlQ2hpbGQoYyl9YS5WPVtdLGEuYXNzaWduZWROb2Rlcz1bXSxzPSEwfX1yZXR1cm4gc319KG4sdCksaT1ydCh0aGlzKTtpZihsdCh0aGlzKSYmKGZ1bmN0aW9uKHQsZSl7dmFyIG49aXQodCk7ZT1pdChlKSx0PT09ZS5maXJzdENoaWxkJiYoZS5maXJzdENoaWxkPW4ubmV4dFNpYmxpbmcpLHQ9PT1lLmxhc3RDaGlsZCYmKGUubGFzdENoaWxkPW4ucHJldmlvdXNTaWJsaW5nKSx0PW4ucHJldmlvdXNTaWJsaW5nO3ZhciBvPW4ubmV4dFNpYmxpbmc7dCYmKGl0KHQpLm5leHRTaWJsaW5nPW8pLG8mJihpdChvKS5wcmV2aW91c1NpYmxpbmc9dCksbi5wYXJlbnROb2RlPW4ucHJldmlvdXNTaWJsaW5nPW4ubmV4dFNpYmxpbmc9dm9pZCAwLHZvaWQgMCE9PWUuY2hpbGROb2RlcyYmKGUuY2hpbGROb2Rlcz1udWxsKX0odCx0aGlzKSx1dCh0aGlzKSkpe0FuKGkucm9vdCk7dmFyIHI9ITB9aWYoRmUoKSYmIWUmJm4mJnQubm9kZVR5cGUhPT1Ob2RlLlRFWFRfTk9ERSl7dmFyIGE9SWUodCk7SGUodCwoZnVuY3Rpb24odCl7VmUodCxhKX0pKX1yZXR1cm4gZnVuY3Rpb24gdChlKXt2YXIgbj1ydChlKTtpZihuJiZ2b2lkIDAhPT1uLmxhKWZvcihuPWUuX19zaGFkeV9maXJzdENoaWxkO247bj1uLl9fc2hhZHlfbmV4dFNpYmxpbmcpdChuKTsoZT1ydChlKSkmJihlLmxhPXZvaWQgMCl9KHQpLG4mJigoZT1cInNsb3RcIj09PXRoaXMubG9jYWxOYW1lKSYmKHI9ITApLChvfHxlKSYmQW4obikpLHJ8fChyPWN0KHRoaXMpP3RoaXMuaG9zdDp0aGlzLCghaS5yb290JiZcInNsb3RcIiE9PXQubG9jYWxOYW1lfHxyPT09dC5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlKSYmci5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZCh0KSksdH0scmVwbGFjZUNoaWxkOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX19zaGFkeV9pbnNlcnRCZWZvcmUodCxlKSx0aGlzLl9fc2hhZHlfcmVtb3ZlQ2hpbGQoZSksdH0sY2xvbmVOb2RlOmZ1bmN0aW9uKHQpe2lmKFwidGVtcGxhdGVcIj09dGhpcy5sb2NhbE5hbWUpcmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfY2xvbmVOb2RlKHQpO3ZhciBlPXRoaXMuX19zaGFkeV9uYXRpdmVfY2xvbmVOb2RlKCExKTtpZih0JiZlLm5vZGVUeXBlIT09Tm9kZS5BVFRSSUJVVEVfTk9ERSl7dD10aGlzLl9fc2hhZHlfZmlyc3RDaGlsZDtmb3IodmFyIG47dDt0PXQuX19zaGFkeV9uZXh0U2libGluZyluPXQuX19zaGFkeV9jbG9uZU5vZGUoITApLGUuX19zaGFkeV9hcHBlbmRDaGlsZChuKX1yZXR1cm4gZX0sZ2V0Um9vdE5vZGU6ZnVuY3Rpb24odCl7aWYodGhpcyYmdGhpcy5ub2RlVHlwZSl7dmFyIGU9aXQodGhpcyksbj1lLmxhO3JldHVybiB2b2lkIDA9PT1uJiYoY3QodGhpcyk/KG49dGhpcyxlLmxhPW4pOihuPShuPXRoaXMuX19zaGFkeV9wYXJlbnROb2RlKT9uLl9fc2hhZHlfZ2V0Um9vdE5vZGUodCk6dGhpcyxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuX19zaGFkeV9uYXRpdmVfY29udGFpbnModGhpcykmJihlLmxhPW4pKSksbn19LGNvbnRhaW5zOmZ1bmN0aW9uKHQpe3JldHVybiB5dCh0aGlzLHQpfX0pLFllPVN0KHtnZXQgYXNzaWduZWRTbG90KCl7dmFyIHQ9dGhpcy5fX3NoYWR5X3BhcmVudE5vZGU7cmV0dXJuKHQ9dCYmdC5fX3NoYWR5X3NoYWRvd1Jvb3QpJiZQbih0KSwodD1ydCh0aGlzKSkmJnQuYXNzaWduZWRTbG90fHxudWxsfX0pO2Z1bmN0aW9uIFhlKHQsZSxuKXt2YXIgbz1bXTtyZXR1cm4gZnVuY3Rpb24gdChlLG4sbyxpKXtmb3IoZT1lLl9fc2hhZHlfZmlyc3RDaGlsZDtlO2U9ZS5fX3NoYWR5X25leHRTaWJsaW5nKXt2YXIgcjtpZihyPWUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSl7dmFyIGE9bixzPW8sbD1pLGM9YShyPWUpO2MmJmwucHVzaChyKSxzJiZzKGMpP3I9YzoodChyLGEscyxsKSxyPXZvaWQgMCl9aWYocilicmVha319KHQsZSxuLG8pLG99dmFyIEplPVN0KHtnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKXt2YXIgdD1ydCh0aGlzKTtpZih0JiZ2b2lkIDAhPT10LmZpcnN0Q2hpbGQpe2Zvcih0PXRoaXMuX19zaGFkeV9maXJzdENoaWxkO3QmJnQubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERTspdD10Ll9fc2hhZHlfbmV4dFNpYmxpbmc7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfZmlyc3RFbGVtZW50Q2hpbGR9LGdldCBsYXN0RWxlbWVudENoaWxkKCl7dmFyIHQ9cnQodGhpcyk7aWYodCYmdm9pZCAwIT09dC5sYXN0Q2hpbGQpe2Zvcih0PXRoaXMuX19zaGFkeV9sYXN0Q2hpbGQ7dCYmdC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFOyl0PXQuX19zaGFkeV9wcmV2aW91c1NpYmxpbmc7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfbGFzdEVsZW1lbnRDaGlsZH0sZ2V0IGNoaWxkcmVuKCl7cmV0dXJuIGx0KHRoaXMpP2d0KEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh3dCh0aGlzKSwoZnVuY3Rpb24odCl7cmV0dXJuIHQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERX0pKSk6dGhpcy5fX3NoYWR5X25hdGl2ZV9jaGlsZHJlbn0sZ2V0IGNoaWxkRWxlbWVudENvdW50KCl7dmFyIHQ9dGhpcy5fX3NoYWR5X2NoaWxkcmVuO3JldHVybiB0P3QubGVuZ3RoOjB9fSksS2U9U3Qoe3F1ZXJ5U2VsZWN0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIFhlKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVybiBkdC5jYWxsKGUsdCl9KSwoZnVuY3Rpb24odCl7cmV0dXJuISF0fSkpWzBdfHxudWxsfSxxdWVyeVNlbGVjdG9yQWxsOmZ1bmN0aW9uKHQsZSl7aWYoZSl7ZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9fc2hhZHlfbmF0aXZlX3F1ZXJ5U2VsZWN0b3JBbGwodCkpO3ZhciBuPXRoaXMuX19zaGFkeV9nZXRSb290Tm9kZSgpO3JldHVybiBndChlLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuX19zaGFkeV9nZXRSb290Tm9kZSgpPT1ufSkpKX1yZXR1cm4gZ3QoWGUodGhpcywoZnVuY3Rpb24oZSl7cmV0dXJuIGR0LmNhbGwoZSx0KX0pKSl9fSksJGU9YXQuYWEmJiFhdC5EP1R0KHt9LEplKTpKZTtUdChKZSxLZSk7dmFyIFFlPXdpbmRvdy5kb2N1bWVudDtmdW5jdGlvbiB0bih0LGUpe2lmKFwic2xvdFwiPT09ZSl1dCh0PXQuX19zaGFkeV9wYXJlbnROb2RlKSYmQW4ocnQodCkucm9vdCk7ZWxzZSBpZihcInNsb3RcIj09PXQubG9jYWxOYW1lJiZcIm5hbWVcIj09PWUmJihlPVduKHQpKSl7aWYoZS5hKXtWbihlKTt2YXIgbj10LkxhLG89SW4odCk7aWYobyE9PW4pe3ZhciBpPShuPWUuYltuXSkuaW5kZXhPZih0KTswPD1pJiZuLnNwbGljZShpLDEpLChuPWUuYltvXXx8KGUuYltvXT1bXSkpLnB1c2godCksMTxuLmxlbmd0aCYmKGUuYltvXT1IbihuKSl9fUFuKGUpfX12YXIgZW49U3Qoe2dldCBwcmV2aW91c0VsZW1lbnRTaWJsaW5nKCl7dmFyIHQ9cnQodGhpcyk7aWYodCYmdm9pZCAwIT09dC5wcmV2aW91c1NpYmxpbmcpe2Zvcih0PXRoaXMuX19zaGFkeV9wcmV2aW91c1NpYmxpbmc7dCYmdC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFOyl0PXQuX19zaGFkeV9wcmV2aW91c1NpYmxpbmc7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfcHJldmlvdXNFbGVtZW50U2libGluZ30sZ2V0IG5leHRFbGVtZW50U2libGluZygpe3ZhciB0PXJ0KHRoaXMpO2lmKHQmJnZvaWQgMCE9PXQubmV4dFNpYmxpbmcpe2Zvcih0PXRoaXMuX19zaGFkeV9uZXh0U2libGluZzt0JiZ0Lm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREU7KXQ9dC5fX3NoYWR5X25leHRTaWJsaW5nO3JldHVybiB0fXJldHVybiB0aGlzLl9fc2hhZHlfbmF0aXZlX25leHRFbGVtZW50U2libGluZ30sZ2V0IHNsb3QoKXtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoXCJzbG90XCIpfSxzZXQgc2xvdCh0KXt0aGlzLl9fc2hhZHlfc2V0QXR0cmlidXRlKFwic2xvdFwiLHQpfSxnZXQgY2xhc3NOYW1lKCl7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCJ9LHNldCBjbGFzc05hbWUodCl7dGhpcy5fX3NoYWR5X3NldEF0dHJpYnV0ZShcImNsYXNzXCIsdCl9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbih0LGUpe3RoaXMub3duZXJEb2N1bWVudCE9PVFlP3RoaXMuX19zaGFkeV9uYXRpdmVfc2V0QXR0cmlidXRlKHQsZSk6UmUodGhpcyx0LGUpfHwodGhpcy5fX3NoYWR5X25hdGl2ZV9zZXRBdHRyaWJ1dGUodCxlKSx0bih0aGlzLHQpKX0scmVtb3ZlQXR0cmlidXRlOmZ1bmN0aW9uKHQpe3RoaXMub3duZXJEb2N1bWVudCE9PVFlP3RoaXMuX19zaGFkeV9uYXRpdmVfcmVtb3ZlQXR0cmlidXRlKHQpOlJlKHRoaXMsdCxcIlwiKT9cIlwiPT09dGhpcy5nZXRBdHRyaWJ1dGUodCkmJnRoaXMuX19zaGFkeV9uYXRpdmVfcmVtb3ZlQXR0cmlidXRlKHQpOih0aGlzLl9fc2hhZHlfbmF0aXZlX3JlbW92ZUF0dHJpYnV0ZSh0KSx0bih0aGlzLHQpKX19KTthdC5hYXx8eGUuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZW5bdF09RGUodCl9KSk7dmFyIG5uPVN0KHthdHRhY2hTaGFkb3c6ZnVuY3Rpb24odCl7aWYoIXRoaXMpdGhyb3cgRXJyb3IoXCJNdXN0IHByb3ZpZGUgYSBob3N0LlwiKTtpZighdCl0aHJvdyBFcnJvcihcIk5vdCBlbm91Z2ggYXJndW1lbnRzLlwiKTtpZih0LnNoYWR5VXBncmFkZUZyYWdtZW50JiYhYXQuSWEpe3ZhciBlPXQuc2hhZHlVcGdyYWRlRnJhZ21lbnQ7aWYoZS5fX3Byb3RvX189U2hhZG93Um9vdC5wcm90b3R5cGUsTG4oZSx0aGlzLHQpLE5uKGUsZSksdD1lLl9fbm9JbnNlcnRpb25Qb2ludD9udWxsOmUucXVlcnlTZWxlY3RvckFsbChcInNsb3RcIiksZS5fX25vSW5zZXJ0aW9uUG9pbnQ9dm9pZCAwLHQmJnQubGVuZ3RoKXt2YXIgbj1lO1JuKG4pLG4uYy5wdXNoLmFwcGx5KG4uYyx0IGluc3RhbmNlb2YgQXJyYXk/dDpmKGQodCkpKSxBbihlKX1lLmhvc3QuX19zaGFkeV9uYXRpdmVfYXBwZW5kQ2hpbGQoZSl9ZWxzZSBlPW5ldyBEbihPbix0aGlzLHQpO3JldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1lfSxnZXQgc2hhZG93Um9vdCgpe3ZhciB0PXJ0KHRoaXMpO3JldHVybiB0JiZ0LmJifHxudWxsfX0pO1R0KGVuLG5uKTt2YXIgb249ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiaW5lcnRcIikscm49U3Qoe2dldCBpbm5lckhUTUwoKXtyZXR1cm4gbHQodGhpcyk/VnQoXCJ0ZW1wbGF0ZVwiPT09dGhpcy5sb2NhbE5hbWU/dGhpcy5jb250ZW50OnRoaXMsd3QpOnRoaXMuX19zaGFkeV9uYXRpdmVfaW5uZXJIVE1MfSxzZXQgaW5uZXJIVE1MKHQpe2lmKFwidGVtcGxhdGVcIj09PXRoaXMubG9jYWxOYW1lKXRoaXMuX19zaGFkeV9uYXRpdmVfaW5uZXJIVE1MPXQ7ZWxzZXtXZSh0aGlzKTt2YXIgZT10aGlzLmxvY2FsTmFtZXx8XCJkaXZcIjtmb3IoZT10aGlzLm5hbWVzcGFjZVVSSSYmdGhpcy5uYW1lc3BhY2VVUkkhPT1vbi5uYW1lc3BhY2VVUkk/b24uY3JlYXRlRWxlbWVudE5TKHRoaXMubmFtZXNwYWNlVVJJLGUpOm9uLmNyZWF0ZUVsZW1lbnQoZSksYXQuQj9lLl9fc2hhZHlfbmF0aXZlX2lubmVySFRNTD10OmUuaW5uZXJIVE1MPXQ7dD1lLl9fc2hhZHlfZmlyc3RDaGlsZDspdGhpcy5fX3NoYWR5X2luc2VydEJlZm9yZSh0KX19fSksYW49U3Qoe2JsdXI6ZnVuY3Rpb24oKXt2YXIgdD1ydCh0aGlzKTsodD0odD10JiZ0LnJvb3QpJiZ0LmFjdGl2ZUVsZW1lbnQpP3QuX19zaGFkeV9ibHVyKCk6dGhpcy5fX3NoYWR5X25hdGl2ZV9ibHVyKCl9fSk7YXQuYWF8fE1lLmZvckVhY2goKGZ1bmN0aW9uKHQpe2FuW3RdPURlKHQpfSkpO3ZhciBzbj1TdCh7YXNzaWduZWROb2RlczpmdW5jdGlvbih0KXtpZihcInNsb3RcIj09PXRoaXMubG9jYWxOYW1lKXt2YXIgZT10aGlzLl9fc2hhZHlfZ2V0Um9vdE5vZGUoKTtyZXR1cm4gZSYmY3QoZSkmJlBuKGUpLChlPXJ0KHRoaXMpKSYmKHQmJnQuZmxhdHRlbj9lLlY6ZS5hc3NpZ25lZE5vZGVzKXx8W119fSxhZGRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHQsZSxuKXtpZihcInNsb3RcIiE9PXRoaXMubG9jYWxOYW1lfHxcInNsb3RjaGFuZ2VcIj09PXQpd2UuY2FsbCh0aGlzLHQsZSxuKTtlbHNle1wib2JqZWN0XCIhPXR5cGVvZiBuJiYobj17Y2FwdHVyZTohIW59KTt2YXIgbz10aGlzLl9fc2hhZHlfcGFyZW50Tm9kZTtpZighbyl0aHJvdyBFcnJvcihcIlNoYWR5RE9NIGNhbm5vdCBhdHRhY2ggZXZlbnQgdG8gc2xvdCB1bmxlc3MgaXQgaGFzIGEgYHBhcmVudE5vZGVgXCIpO24uTz10aGlzLG8uX19zaGFkeV9hZGRFdmVudExpc3RlbmVyKHQsZSxuKX19LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24odCxlLG4pe2lmKFwic2xvdFwiIT09dGhpcy5sb2NhbE5hbWV8fFwic2xvdGNoYW5nZVwiPT09dClFZS5jYWxsKHRoaXMsdCxlLG4pO2Vsc2V7XCJvYmplY3RcIiE9dHlwZW9mIG4mJihuPXtjYXB0dXJlOiEhbn0pO3ZhciBvPXRoaXMuX19zaGFkeV9wYXJlbnROb2RlO2lmKCFvKXRocm93IEVycm9yKFwiU2hhZHlET00gY2Fubm90IGF0dGFjaCBldmVudCB0byBzbG90IHVubGVzcyBpdCBoYXMgYSBgcGFyZW50Tm9kZWBcIik7bi5PPXRoaXMsby5fX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIodCxlLG4pfX19KSxsbj1TdCh7Z2V0RWxlbWVudEJ5SWQ6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIj09PXQ/bnVsbDpYZSh0aGlzLChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD09dH0pLChmdW5jdGlvbih0KXtyZXR1cm4hIXR9KSlbMF18fG51bGx9fSksY249U3Qoe2dldCBhY3RpdmVFbGVtZW50KCl7dmFyIHQ9YXQuQj9kb2N1bWVudC5fX3NoYWR5X25hdGl2ZV9hY3RpdmVFbGVtZW50OmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7aWYoIXR8fCF0Lm5vZGVUeXBlKXJldHVybiBudWxsO3ZhciBlPSEhY3QodGhpcyk7aWYoISh0aGlzPT09ZG9jdW1lbnR8fGUmJnRoaXMuaG9zdCE9PXQmJnRoaXMuaG9zdC5fX3NoYWR5X25hdGl2ZV9jb250YWlucyh0KSkpcmV0dXJuIG51bGw7Zm9yKGU9V24odCk7ZSYmZSE9PXRoaXM7KWU9V24odD1lLmhvc3QpO3JldHVybiB0aGlzPT09ZG9jdW1lbnQ/ZT9udWxsOnQ6ZT09PXRoaXM/dDpudWxsfX0pLHVuPXdpbmRvdy5kb2N1bWVudCxobj1TdCh7aW1wb3J0Tm9kZTpmdW5jdGlvbih0LGUpe2lmKHQub3duZXJEb2N1bWVudCE9PXVufHxcInRlbXBsYXRlXCI9PT10LmxvY2FsTmFtZSlyZXR1cm4gdGhpcy5fX3NoYWR5X25hdGl2ZV9pbXBvcnROb2RlKHQsZSk7dmFyIG49dGhpcy5fX3NoYWR5X25hdGl2ZV9pbXBvcnROb2RlKHQsITEpO2lmKGUpZm9yKHQ9dC5fX3NoYWR5X2ZpcnN0Q2hpbGQ7dDt0PXQuX19zaGFkeV9uZXh0U2libGluZyllPXRoaXMuX19zaGFkeV9pbXBvcnROb2RlKHQsITApLG4uX19zaGFkeV9hcHBlbmRDaGlsZChlKTtyZXR1cm4gbn19KSxkbj1TdCh7ZGlzcGF0Y2hFdmVudDpiZSxhZGRFdmVudExpc3RlbmVyOndlLmJpbmQod2luZG93KSxyZW1vdmVFdmVudExpc3RlbmVyOkVlLmJpbmQod2luZG93KX0pLGZuPXt9O09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwicGFyZW50RWxlbWVudFwiKSYmKGZuLnBhcmVudEVsZW1lbnQ9WmUucGFyZW50RWxlbWVudCksT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudC5wcm90b3R5cGUsXCJjb250YWluc1wiKSYmKGZuLmNvbnRhaW5zPVplLmNvbnRhaW5zKSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxFbGVtZW50LnByb3RvdHlwZSxcImNoaWxkcmVuXCIpJiYoZm4uY2hpbGRyZW49SmUuY2hpbGRyZW4pLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpJiYoZm4uaW5uZXJIVE1MPXJuLmlubmVySFRNTCksT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudC5wcm90b3R5cGUsXCJjbGFzc05hbWVcIikmJihmbi5jbGFzc05hbWU9ZW4uY2xhc3NOYW1lKTt2YXIgcG49e0V2ZW50VGFyZ2V0OltqZV0sTm9kZTpbWmUsd2luZG93LkV2ZW50VGFyZ2V0P251bGw6amVdLFRleHQ6W1llXSxDb21tZW50OltZZV0sQ0RBVEFTZWN0aW9uOltZZV0sUHJvY2Vzc2luZ0luc3RydWN0aW9uOltZZV0sRWxlbWVudDpbZW4sSmUsWWUsIWF0LkJ8fFwiaW5uZXJIVE1MXCJpbiBFbGVtZW50LnByb3RvdHlwZT9ybjpudWxsLHdpbmRvdy5IVE1MU2xvdEVsZW1lbnQ/bnVsbDpzbl0sSFRNTEVsZW1lbnQ6W2FuLGZuXSxIVE1MU2xvdEVsZW1lbnQ6W3NuXSxEb2N1bWVudEZyYWdtZW50OlskZSxsbl0sRG9jdW1lbnQ6W2huLCRlLGxuLGNuXSxXaW5kb3c6W2RuXX0sX249YXQuQj9udWxsOltcImlubmVySFRNTFwiLFwidGV4dENvbnRlbnRcIl07ZnVuY3Rpb24gbW4odCxlLG4sbyl7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdCYmZSYmTnQodCxlLG4sbyl9KSl9ZnVuY3Rpb24gdm4odCl7dmFyIGUsbj10P251bGw6X247Zm9yKGUgaW4gcG4pbW4od2luZG93W2VdJiZ3aW5kb3dbZV0ucHJvdG90eXBlLHBuW2VdLHQsbil9ZnVuY3Rpb24geW4odCl7cmV0dXJuIHQuX19zaGFkeV9wcm90b0lzUGF0Y2hlZD0hMCxtbih0LHBuLkV2ZW50VGFyZ2V0KSxtbih0LHBuLk5vZGUpLG1uKHQscG4uRWxlbWVudCksbW4odCxwbi5IVE1MRWxlbWVudCksbW4odCxwbi5IVE1MU2xvdEVsZW1lbnQpLHR9W1wiVGV4dFwiLFwiQ29tbWVudFwiLFwiQ0RBVEFTZWN0aW9uXCIsXCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9d2luZG93W3RdLG49T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSk7bi5fX3NoYWR5X3Byb3RvSXNQYXRjaGVkPSEwLG1uKG4scG4uRXZlbnRUYXJnZXQpLG1uKG4scG4uTm9kZSkscG5bdF0mJm1uKG4scG5bdF0pLGUucHJvdG90eXBlLl9fc2hhZHlfcGF0Y2hlZFByb3RvPW59KSk7dmFyIGduPWF0LnVhLGJuPWF0LkI7ZnVuY3Rpb24gd24odCxlKXtpZihnbiYmIXQuX19zaGFkeV9wcm90b0lzUGF0Y2hlZCYmIWN0KHQpKXt2YXIgbj1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCksbz1uLmhhc093blByb3BlcnR5KFwiX19zaGFkeV9wYXRjaGVkUHJvdG9cIikmJm4uX19zaGFkeV9wYXRjaGVkUHJvdG87b3x8KHluKG89T2JqZWN0LmNyZWF0ZShuKSksbi5fX3NoYWR5X3BhdGNoZWRQcm90bz1vKSxPYmplY3Quc2V0UHJvdG90eXBlT2YodCxvKX1ibnx8KDE9PT1lP29lKHQpOjI9PT1lJiZpZSh0KSl9ZnVuY3Rpb24gRW4odCxlLG4sbyl7d24odCwxKSxvPW98fG51bGw7dmFyIGk9aXQodCkscj1vP2l0KG8pOm51bGw7aS5wcmV2aW91c1NpYmxpbmc9bz9yLnByZXZpb3VzU2libGluZzplLl9fc2hhZHlfbGFzdENoaWxkLChyPXJ0KGkucHJldmlvdXNTaWJsaW5nKSkmJihyLm5leHRTaWJsaW5nPXQpLChyPXJ0KGkubmV4dFNpYmxpbmc9bykpJiYoci5wcmV2aW91c1NpYmxpbmc9dCksaS5wYXJlbnROb2RlPWUsbz9vPT09bi5maXJzdENoaWxkJiYobi5maXJzdENoaWxkPXQpOihuLmxhc3RDaGlsZD10LG4uZmlyc3RDaGlsZHx8KG4uZmlyc3RDaGlsZD10KSksbi5jaGlsZE5vZGVzPW51bGx9ZnVuY3Rpb24gTm4odCxlKXt2YXIgbj1pdCh0KTtpZihlfHx2b2lkIDA9PT1uLmZpcnN0Q2hpbGQpe24uY2hpbGROb2Rlcz1udWxsO3ZhciBvPW4uZmlyc3RDaGlsZD10Ll9fc2hhZHlfbmF0aXZlX2ZpcnN0Q2hpbGQ7Zm9yKG4ubGFzdENoaWxkPXQuX19zaGFkeV9uYXRpdmVfbGFzdENoaWxkLHduKHQsMiksbj1vLG89dm9pZCAwO247bj1uLl9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nKXt2YXIgaT1pdChuKTtpLnBhcmVudE5vZGU9ZXx8dCxpLm5leHRTaWJsaW5nPW4uX19zaGFkeV9uYXRpdmVfbmV4dFNpYmxpbmcsaS5wcmV2aW91c1NpYmxpbmc9b3x8bnVsbCxvPW4sd24obiwxKX19fXZhciBDbj1TdCh7YWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbih0LGUsbil7XCJvYmplY3RcIiE9dHlwZW9mIG4mJihuPXtjYXB0dXJlOiEhbn0pLG4uTz1uLk98fHRoaXMsdGhpcy5ob3N0Ll9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lcih0LGUsbil9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24odCxlLG4pe1wib2JqZWN0XCIhPXR5cGVvZiBuJiYobj17Y2FwdHVyZTohIW59KSxuLk89bi5PfHx0aGlzLHRoaXMuaG9zdC5fX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIodCxlLG4pfX0pO2Z1bmN0aW9uIFNuKHQsZSl7TnQodCxDbixlKSxOdCh0LGNuLGUpLE50KHQscm4sZSksTnQodCxKZSxlKSxhdC5EJiYhZT8oTnQodCxaZSxlKSxOdCh0LGxuLGUpKTphdC5CfHwoTnQodCxRdCksTnQodCxLdCksTnQodCwkdCkpfXZhciBUbixPbj17fSx4bj1hdC5kZWZlckNvbm5lY3Rpb25DYWxsYmFja3MmJlwibG9hZGluZ1wiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZTtmdW5jdGlvbiBNbih0KXt2YXIgZT1bXTtkb3tlLnVuc2hpZnQodCl9d2hpbGUodD10Ll9fc2hhZHlfcGFyZW50Tm9kZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRG4odCxlLG4pe2lmKHQhPT1Pbil0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3RvclwiKTt0aGlzLmE9bnVsbCxMbih0aGlzLGUsbil9ZnVuY3Rpb24gTG4odCxlLG4pe2lmKHQuaG9zdD1lLHQubW9kZT1uJiZuLm1vZGUsTm4odC5ob3N0KSwoZT1pdCh0Lmhvc3QpKS5yb290PXQsZS5iYj1cImNsb3NlZFwiIT09dC5tb2RlP3Q6bnVsbCwoZT1pdCh0KSkuZmlyc3RDaGlsZD1lLmxhc3RDaGlsZD1lLnBhcmVudE5vZGU9ZS5uZXh0U2libGluZz1lLnByZXZpb3VzU2libGluZz1udWxsLGF0LnByZWZlclBlcmZvcm1hbmNlKWZvcig7ZT10Lmhvc3QuX19zaGFkeV9uYXRpdmVfZmlyc3RDaGlsZDspdC5ob3N0Ll9fc2hhZHlfbmF0aXZlX3JlbW92ZUNoaWxkKGUpO2Vsc2UgQW4odCl9ZnVuY3Rpb24gQW4odCl7dC5UfHwodC5UPSEwLE10KChmdW5jdGlvbigpe3JldHVybiBQbih0KX0pKSl9ZnVuY3Rpb24gUG4odCl7dmFyIGU7aWYoZT10LlQpe2Zvcih2YXIgbjt0Oyl0LlQmJihuPXQpLGN0KHQ9KGU9dCkuaG9zdC5fX3NoYWR5X2dldFJvb3ROb2RlKCkpJiYoZT1ydChlLmhvc3QpKSYmMDxlLmRhfHwodD12b2lkIDApO2U9bn0obj1lKSYmbi5fcmVuZGVyU2VsZigpfWZ1bmN0aW9uIGpuKHQsZSxuKXt2YXIgbz1pdChlKSxpPW8ub2E7by5vYT1udWxsLG58fChuPSh0PXQuYltlLl9fc2hhZHlfc2xvdHx8XCJfX2NhdGNoYWxsXCJdKSYmdFswXSksbj8oaXQobikuYXNzaWduZWROb2Rlcy5wdXNoKGUpLG8uYXNzaWduZWRTbG90PW4pOm8uYXNzaWduZWRTbG90PXZvaWQgMCxpIT09by5hc3NpZ25lZFNsb3QmJm8uYXNzaWduZWRTbG90JiYoaXQoby5hc3NpZ25lZFNsb3QpLnJhPSEwKX1mdW5jdGlvbiBrbih0LGUsbil7Zm9yKHZhciBvPTAsaT12b2lkIDA7bzxuLmxlbmd0aCYmKGk9bltvXSk7bysrKWlmKFwic2xvdFwiPT1pLmxvY2FsTmFtZSl7dmFyIHI9cnQoaSkuYXNzaWduZWROb2RlcztyJiZyLmxlbmd0aCYma24odCxlLHIpfWVsc2UgZS5wdXNoKG5bb10pfWZ1bmN0aW9uIEZuKHQsZSl7ZS5fX3NoYWR5X25hdGl2ZV9kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInNsb3RjaGFuZ2VcIikpLChlPXJ0KGUpKS5hc3NpZ25lZFNsb3QmJkZuKHQsZS5hc3NpZ25lZFNsb3QpfWZ1bmN0aW9uIFJuKHQpe3QuYz10LmN8fFtdLHQuYT10LmF8fFtdLHQuYj10LmJ8fHt9fWZ1bmN0aW9uIFZuKHQpe2lmKHQuYyYmdC5jLmxlbmd0aCl7Zm9yKHZhciBlLG49dC5jLG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtObihpKTt2YXIgcj1pLl9fc2hhZHlfcGFyZW50Tm9kZTtObihyKSwocj1ydChyKSkuZGE9KHIuZGF8fDApKzEscj1JbihpKSx0LmJbcl0/KChlPWV8fHt9KVtyXT0hMCx0LmJbcl0ucHVzaChpKSk6dC5iW3JdPVtpXSx0LmEucHVzaChpKX1pZihlKWZvcih2YXIgYSBpbiBlKXQuYlthXT1Ibih0LmJbYV0pO3QuYz1bXX19ZnVuY3Rpb24gSW4odCl7dmFyIGU9dC5uYW1lfHx0LmdldEF0dHJpYnV0ZShcIm5hbWVcIil8fFwiX19jYXRjaGFsbFwiO3JldHVybiB0LkxhPWV9ZnVuY3Rpb24gSG4odCl7cmV0dXJuIHQuc29ydCgoZnVuY3Rpb24odCxlKXt0PU1uKHQpO2Zvcih2YXIgbj1NbihlKSxvPTA7bzx0Lmxlbmd0aDtvKyspe2U9dFtvXTt2YXIgaT1uW29dO2lmKGUhPT1pKXJldHVybih0PXd0KGUuX19zaGFkeV9wYXJlbnROb2RlKSkuaW5kZXhPZihlKS10LmluZGV4T2YoaSl9fSkpfWZ1bmN0aW9uIFVuKHQpe3JldHVybiBWbih0KSwhKCF0LmF8fCF0LmEubGVuZ3RoKX1pZihEbi5wcm90b3R5cGUuX3JlbmRlclNlbGY9ZnVuY3Rpb24oKXt2YXIgdD14bjtpZih4bj0hMCx0aGlzLlQ9ITEsdGhpcy5hKXtWbih0aGlzKTtmb3IodmFyIGUsbj0wO248dGhpcy5hLmxlbmd0aDtuKyspe3ZhciBvPXJ0KGU9dGhpcy5hW25dKSxpPW8uYXNzaWduZWROb2RlcztpZihvLmFzc2lnbmVkTm9kZXM9W10sby5WPVtdLG8uQmE9aSlmb3Iobz0wO288aS5sZW5ndGg7bysrKXt2YXIgcj1ydChpW29dKTtyLm9hPXIuYXNzaWduZWRTbG90LHIuYXNzaWduZWRTbG90PT09ZSYmKHIuYXNzaWduZWRTbG90PW51bGwpfX1mb3Iobj10aGlzLmhvc3QuX19zaGFkeV9maXJzdENoaWxkO247bj1uLl9fc2hhZHlfbmV4dFNpYmxpbmcpam4odGhpcyxuKTtmb3Iobj0wO248dGhpcy5hLmxlbmd0aDtuKyspe2lmKCEoaT1ydChlPXRoaXMuYVtuXSkpLmFzc2lnbmVkTm9kZXMubGVuZ3RoKWZvcihvPWUuX19zaGFkeV9maXJzdENoaWxkO287bz1vLl9fc2hhZHlfbmV4dFNpYmxpbmcpam4odGhpcyxvLGUpO2lmKChvPShvPXJ0KGUuX19zaGFkeV9wYXJlbnROb2RlKSkmJm8ucm9vdCkmJihVbihvKXx8by5UKSYmby5fcmVuZGVyU2VsZigpLGtuKHRoaXMsaS5WLGkuYXNzaWduZWROb2Rlcyksbz1pLkJhKXtmb3Iocj0wO3I8by5sZW5ndGg7cisrKXJ0KG9bcl0pLm9hPW51bGw7aS5CYT1udWxsLG8ubGVuZ3RoPmkuYXNzaWduZWROb2Rlcy5sZW5ndGgmJihpLnJhPSEwKX1pLnJhJiYoaS5yYT0hMSxGbih0aGlzLGUpKX1mb3IoZT10aGlzLmEsbj1bXSxpPTA7aTxlLmxlbmd0aDtpKyspKHI9cnQobz1lW2ldLl9fc2hhZHlfcGFyZW50Tm9kZSkpJiZyLnJvb3R8fCEoMD5uLmluZGV4T2YobykpfHxuLnB1c2gobyk7Zm9yKGU9MDtlPG4ubGVuZ3RoO2UrKyl7Zm9yKGk9KHI9bltlXSk9PT10aGlzP3RoaXMuaG9zdDpyLG89W10scj1yLl9fc2hhZHlfZmlyc3RDaGlsZDtyO3I9ci5fX3NoYWR5X25leHRTaWJsaW5nKWlmKFwic2xvdFwiPT1yLmxvY2FsTmFtZSlmb3IodmFyIGE9cnQocikuVixzPTA7czxhLmxlbmd0aDtzKyspby5wdXNoKGFbc10pO2Vsc2Ugby5wdXNoKHIpO3I9YnQoaSksYT1BZShvLG8ubGVuZ3RoLHIsci5sZW5ndGgpO2Zvcih2YXIgbD1zPTAsYz12b2lkIDA7czxhLmxlbmd0aCYmKGM9YVtzXSk7cysrKXtmb3IodmFyIHU9MCxoPXZvaWQgMDt1PGMuYmEubGVuZ3RoJiYoaD1jLmJhW3VdKTt1KyspaC5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlPT09aSYmaS5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZChoKSxyLnNwbGljZShjLmluZGV4K2wsMSk7bC09Yy5pYX1mb3IobD0wLGM9dm9pZCAwO2w8YS5sZW5ndGgmJihjPWFbbF0pO2wrKylmb3Iocz1yW2MuaW5kZXhdLHU9Yy5pbmRleDt1PGMuaW5kZXgrYy5pYTt1KyspaD1vW3VdLGkuX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlKGgscyksci5zcGxpY2UodSwwLGgpfX1pZighYXQucHJlZmVyUGVyZm9ybWFuY2UmJiF0aGlzLkFhKWZvcihuPXRoaXMuaG9zdC5fX3NoYWR5X2ZpcnN0Q2hpbGQ7bjtuPW4uX19zaGFkeV9uZXh0U2libGluZyllPXJ0KG4pLG4uX19zaGFkeV9uYXRpdmVfcGFyZW50Tm9kZSE9PXRoaXMuaG9zdHx8XCJzbG90XCIhPT1uLmxvY2FsTmFtZSYmZS5hc3NpZ25lZFNsb3R8fHRoaXMuaG9zdC5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZChuKTt0aGlzLkFhPSEwLHhuPXQsVG4mJlRuKCl9LGZ1bmN0aW9uKHQpe3QuX19wcm90b19fPURvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLFNuKHQsXCJfX3NoYWR5X1wiKSxTbih0KSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LHtub2RlVHlwZTp7dmFsdWU6Tm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFLGNvbmZpZ3VyYWJsZTohMH0sbm9kZU5hbWU6e3ZhbHVlOlwiI2RvY3VtZW50LWZyYWdtZW50XCIsY29uZmlndXJhYmxlOiEwfSxub2RlVmFsdWU6e3ZhbHVlOm51bGwsY29uZmlndXJhYmxlOiEwfX0pLFtcImxvY2FsTmFtZVwiLFwibmFtZXNwYWNlVVJJXCIsXCJwcmVmaXhcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6dm9pZCAwLGNvbmZpZ3VyYWJsZTohMH0pfSkpLFtcIm93bmVyRG9jdW1lbnRcIixcImJhc2VVUklcIixcImlzQ29ubmVjdGVkXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhvc3RbZV19LGNvbmZpZ3VyYWJsZTohMH0pfSkpfShEbi5wcm90b3R5cGUpLHdpbmRvdy5jdXN0b21FbGVtZW50cyYmd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSYmYXQuc2EmJiFhdC5wcmVmZXJQZXJmb3JtYW5jZSl7dmFyIEJuPW5ldyBNYXA7VG49ZnVuY3Rpb24oKXt2YXIgdD1bXTtCbi5mb3JFYWNoKChmdW5jdGlvbihlLG4pe3QucHVzaChbbixlXSl9KSksQm4uY2xlYXIoKTtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXVswXTt0W2VdWzFdP24uX19zaGFkeWRvbV9jb25uZWN0ZWRDYWxsYmFjaygpOm4uX19zaGFkeWRvbV9kaXNjb25uZWN0ZWRDYWxsYmFjaygpfX0seG4mJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsKGZ1bmN0aW9uKCl7eG49ITEsVG4oKX0pLHtvbmNlOiEwfSk7dmFyIHpuPXdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUscW49ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjayxvPWUucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrO3puLmNhbGwod2luZG93LmN1c3RvbUVsZW1lbnRzLHQsZnVuY3Rpb24odCxlLG4pe3ZhciBvPTAsaT1cIl9faXNDb25uZWN0ZWRcIitvKys7cmV0dXJuKGV8fG4pJiYodC5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2s9dC5wcm90b3R5cGUuX19zaGFkeWRvbV9jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbigpe3huP0JuLnNldCh0aGlzLCEwKTp0aGlzW2ldfHwodGhpc1tpXT0hMCxlJiZlLmNhbGwodGhpcykpfSx0LnByb3RvdHlwZS5kaXNjb25uZWN0ZWRDYWxsYmFjaz10LnByb3RvdHlwZS5fX3NoYWR5ZG9tX2Rpc2Nvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKCl7eG4/dGhpcy5pc0Nvbm5lY3RlZHx8Qm4uc2V0KHRoaXMsITEpOnRoaXNbaV0mJih0aGlzW2ldPSExLG4mJm4uY2FsbCh0aGlzKSl9KSx0fShlLG4sbykpLGUucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrPW4sZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s9b307d2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZT1xbixPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUsXCJkZWZpbmVcIix7dmFsdWU6cW4sY29uZmlndXJhYmxlOiEwfSl9ZnVuY3Rpb24gV24odCl7aWYoY3QodD10Ll9fc2hhZHlfZ2V0Um9vdE5vZGUoKSkpcmV0dXJuIHR9ZnVuY3Rpb24gR24odCl7dGhpcy5ub2RlPXR9ZnVuY3Rpb24gWm4odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KEduLnByb3RvdHlwZSx0LHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlW1wiX19zaGFkeV9cIit0XX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMubm9kZVtcIl9fc2hhZHlfXCIrdF09ZX0sY29uZmlndXJhYmxlOiEwfSl9KG49R24ucHJvdG90eXBlKS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lcih0LGUsbil9LG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIodCxlLG4pfSxuLmFwcGVuZENoaWxkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9hcHBlbmRDaGlsZCh0KX0sbi5pbnNlcnRCZWZvcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfaW5zZXJ0QmVmb3JlKHQsZSl9LG4ucmVtb3ZlQ2hpbGQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X3JlbW92ZUNoaWxkKHQpfSxuLnJlcGxhY2VDaGlsZD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9yZXBsYWNlQ2hpbGQodCxlKX0sbi5jbG9uZU5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2Nsb25lTm9kZSh0KX0sbi5nZXRSb290Tm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfZ2V0Um9vdE5vZGUodCl9LG4uY29udGFpbnM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2NvbnRhaW5zKHQpfSxuLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2Rpc3BhdGNoRXZlbnQodCl9LG4uc2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQsZSl7dGhpcy5ub2RlLl9fc2hhZHlfc2V0QXR0cmlidXRlKHQsZSl9LG4uZ2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9uYXRpdmVfZ2V0QXR0cmlidXRlKHQpfSxuLmhhc0F0dHJpYnV0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfbmF0aXZlX2hhc0F0dHJpYnV0ZSh0KX0sbi5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24odCl7dGhpcy5ub2RlLl9fc2hhZHlfcmVtb3ZlQXR0cmlidXRlKHQpfSxuLmF0dGFjaFNoYWRvdz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfYXR0YWNoU2hhZG93KHQpfSxuLmZvY3VzPWZ1bmN0aW9uKCl7dGhpcy5ub2RlLl9fc2hhZHlfbmF0aXZlX2ZvY3VzKCl9LG4uYmx1cj1mdW5jdGlvbigpe3RoaXMubm9kZS5fX3NoYWR5X2JsdXIoKX0sbi5pbXBvcnROb2RlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5ub2RlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9OT0RFKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9pbXBvcnROb2RlKHQsZSl9LG4uZ2V0RWxlbWVudEJ5SWQ9ZnVuY3Rpb24odCl7aWYodGhpcy5ub2RlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9OT0RFKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9nZXRFbGVtZW50QnlJZCh0KX0sbi5xdWVyeVNlbGVjdG9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9xdWVyeVNlbGVjdG9yKHQpfSxuLnF1ZXJ5U2VsZWN0b3JBbGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfcXVlcnlTZWxlY3RvckFsbCh0LGUpfSxuLmFzc2lnbmVkTm9kZXM9ZnVuY3Rpb24odCl7aWYoXCJzbG90XCI9PT10aGlzLm5vZGUubG9jYWxOYW1lKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9hc3NpZ25lZE5vZGVzKHQpfSxyLk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEduLnByb3RvdHlwZSx7YWN0aXZlRWxlbWVudDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYoY3QodGhpcy5ub2RlKXx8dGhpcy5ub2RlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9OT0RFKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9hY3RpdmVFbGVtZW50fX0sX2FjdGl2ZUVsZW1lbnQ6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFjdGl2ZUVsZW1lbnR9fSxob3N0Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihjdCh0aGlzLm5vZGUpKXJldHVybiB0aGlzLm5vZGUuaG9zdH19LHBhcmVudE5vZGU6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9wYXJlbnROb2RlfX0sZmlyc3RDaGlsZDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2ZpcnN0Q2hpbGR9fSxsYXN0Q2hpbGQ6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9sYXN0Q2hpbGR9fSxuZXh0U2libGluZzp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X25leHRTaWJsaW5nfX0scHJldmlvdXNTaWJsaW5nOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfcHJldmlvdXNTaWJsaW5nfX0sY2hpbGROb2Rlczp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2NoaWxkTm9kZXN9fSxwYXJlbnRFbGVtZW50Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfcGFyZW50RWxlbWVudH19LGZpcnN0RWxlbWVudENoaWxkOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfZmlyc3RFbGVtZW50Q2hpbGR9fSxsYXN0RWxlbWVudENoaWxkOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfbGFzdEVsZW1lbnRDaGlsZH19LG5leHRFbGVtZW50U2libGluZzp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X25leHRFbGVtZW50U2libGluZ319LHByZXZpb3VzRWxlbWVudFNpYmxpbmc6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9wcmV2aW91c0VsZW1lbnRTaWJsaW5nfX0sY2hpbGRyZW46e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9jaGlsZHJlbn19LGNoaWxkRWxlbWVudENvdW50Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfY2hpbGRFbGVtZW50Q291bnR9fSxzaGFkb3dSb290Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfc2hhZG93Um9vdH19LGFzc2lnbmVkU2xvdDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2Fzc2lnbmVkU2xvdH19LGlzQ29ubmVjdGVkOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfaXNDb25uZWN0ZWR9fSxpbm5lckhUTUw6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9pbm5lckhUTUx9LHNldDpmdW5jdGlvbih0KXt0aGlzLm5vZGUuX19zaGFkeV9pbm5lckhUTUw9dH19LHRleHRDb250ZW50Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfdGV4dENvbnRlbnR9LHNldDpmdW5jdGlvbih0KXt0aGlzLm5vZGUuX19zaGFkeV90ZXh0Q29udGVudD10fX0sc2xvdDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X3Nsb3R9LHNldDpmdW5jdGlvbih0KXt0aGlzLm5vZGUuX19zaGFkeV9zbG90PXR9fSxjbGFzc05hbWU6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9jbGFzc05hbWV9LHNldDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfY2xhc3NOYW1lPXR9fX0pLHhlLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBabih0KX0pKSxNZS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gWm4odCl9KSk7dmFyIFluPW5ldyBXZWFrTWFwO2Z1bmN0aW9uIFhuKHQpe2lmKGN0KHQpfHx0IGluc3RhbmNlb2YgR24pcmV0dXJuIHQ7dmFyIGU9WW4uZ2V0KHQpO3JldHVybiBlfHwoZT1uZXcgR24odCksWW4uc2V0KHQsZSkpLGV9aWYoYXQuc2Epe3ZhciBKbj1hdC5CP2Z1bmN0aW9uKHQpe3JldHVybiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gaWUodCksb2UodCksdH0sS249e2luVXNlOmF0LnNhLHBhdGNoOkpuLGlzU2hhZHlSb290OmN0LGVucXVldWU6TXQsZmx1c2g6RHQsZmx1c2hJbml0aWFsOmZ1bmN0aW9uKHQpeyF0LkFhJiZ0LlQmJlBuKHQpfSxzZXR0aW5nczphdCxmaWx0ZXJNdXRhdGlvbnM6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmdldFJvb3ROb2RlKCk7cmV0dXJuIHQubWFwKChmdW5jdGlvbih0KXt2YXIgZT1uPT09dC50YXJnZXQuZ2V0Um9vdE5vZGUoKTtpZihlJiZ0LmFkZGVkTm9kZXMpe2lmKChlPVtdLnNsaWNlLmNhbGwodC5hZGRlZE5vZGVzKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBuPT09dC5nZXRSb290Tm9kZSgpfSkpKS5sZW5ndGgpcmV0dXJuIHQ9T2JqZWN0LmNyZWF0ZSh0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImFkZGVkTm9kZXNcIix7dmFsdWU6ZSxjb25maWd1cmFibGU6ITB9KSx0fWVsc2UgaWYoZSlyZXR1cm4gdH0pKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpfSxvYnNlcnZlQ2hpbGRyZW46ZnVuY3Rpb24odCxlKXt2YXIgbj1pdCh0KTtuLlp8fChuLlo9bmV3IEx0KSxuLlouamEuYWRkKGUpO3ZhciBvPW4uWjtyZXR1cm57TWE6ZSxTOm8sTmE6dCx0YWtlUmVjb3JkczpmdW5jdGlvbigpe3JldHVybiBvLnRha2VSZWNvcmRzKCl9fX0sdW5vYnNlcnZlQ2hpbGRyZW46ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5TO2UmJihlLmphLmRlbGV0ZSh0Lk1hKSxlLmphLnNpemV8fChpdCh0Lk5hKS5aPW51bGwpKX0sZGVmZXJDb25uZWN0aW9uQ2FsbGJhY2tzOmF0LmRlZmVyQ29ubmVjdGlvbkNhbGxiYWNrcyxwcmVmZXJQZXJmb3JtYW5jZTphdC5wcmVmZXJQZXJmb3JtYW5jZSxoYW5kbGVzRHluYW1pY1Njb3Bpbmc6ITAsd3JhcDphdC5EP1huOkpuLHdyYXBJZk5lZWRlZDohMD09PWF0LkQ/WG46ZnVuY3Rpb24odCl7cmV0dXJuIHR9LFdyYXBwZXI6R24sY29tcG9zZWRQYXRoOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fY29tcG9zZWRQYXRofHwodC5fX2NvbXBvc2VkUGF0aD1kZSh0LnRhcmdldCwhMCkpLHQuX19jb21wb3NlZFBhdGh9LG5vUGF0Y2g6YXQuRCxwYXRjaE9uRGVtYW5kOmF0LnVhLG5hdGl2ZU1ldGhvZHM6SHQsbmF0aXZlVHJlZTpVdCxwYXRjaEVsZW1lbnRQcm90bzp5bn07d2luZG93LlNoYWR5RE9NPUtuLGZ1bmN0aW9uKCl7dmFyIHQ9W1wiZGlzcGF0Y2hFdmVudFwiLFwiYWRkRXZlbnRMaXN0ZW5lclwiLFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiXTt3aW5kb3cuRXZlbnRUYXJnZXQ/cXQod2luZG93LkV2ZW50VGFyZ2V0LnByb3RvdHlwZSx0KToocXQoTm9kZS5wcm90b3R5cGUsdCkscXQoV2luZG93LnByb3RvdHlwZSx0KSksSXQ/cXQoTm9kZS5wcm90b3R5cGUsXCJwYXJlbnROb2RlIGZpcnN0Q2hpbGQgbGFzdENoaWxkIHByZXZpb3VzU2libGluZyBuZXh0U2libGluZyBjaGlsZE5vZGVzIHBhcmVudEVsZW1lbnQgdGV4dENvbnRlbnRcIi5zcGxpdChcIiBcIikpOnp0KE5vZGUucHJvdG90eXBlLHtwYXJlbnROb2RlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5wYXJlbnROb2RlKCl9fSxmaXJzdENoaWxkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5maXJzdENoaWxkKCl9fSxsYXN0Q2hpbGQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBXdC5jdXJyZW50Tm9kZT10aGlzLFd0Lmxhc3RDaGlsZCgpfX0scHJldmlvdXNTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5wcmV2aW91c1NpYmxpbmcoKX19LG5leHRTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5uZXh0U2libGluZygpfX0sY2hpbGROb2Rlczp7Z2V0OmZ1bmN0aW9uKCl7dmFyIHQ9W107V3QuY3VycmVudE5vZGU9dGhpcztmb3IodmFyIGU9V3QuZmlyc3RDaGlsZCgpO2U7KXQucHVzaChlKSxlPVd0Lm5leHRTaWJsaW5nKCk7cmV0dXJuIHR9fSxwYXJlbnRFbGVtZW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gR3QuY3VycmVudE5vZGU9dGhpcyxHdC5wYXJlbnROb2RlKCl9fSx0ZXh0Q29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Y2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6Zm9yKHZhciB0LGU9ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcih0aGlzLE5vZGVGaWx0ZXIuU0hPV19URVhULG51bGwsITEpLG49XCJcIjt0PWUubmV4dE5vZGUoKTspbis9dC5ub2RlVmFsdWU7cmV0dXJuIG47ZGVmYXVsdDpyZXR1cm4gdGhpcy5ub2RlVmFsdWV9fSxzZXQ6ZnVuY3Rpb24odCl7c3dpdGNoKG51bGw9PXQmJih0PVwiXCIpLHRoaXMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Y2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6WXQodGhpcyksKDA8dC5sZW5ndGh8fHRoaXMubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSkmJnRoaXMuX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDp0aGlzLm5vZGVWYWx1ZT10fX19fSkscXQoTm9kZS5wcm90b3R5cGUsXCJhcHBlbmRDaGlsZCBpbnNlcnRCZWZvcmUgcmVtb3ZlQ2hpbGQgcmVwbGFjZUNoaWxkIGNsb25lTm9kZSBjb250YWluc1wiLnNwbGl0KFwiIFwiKSkscXQoSFRNTEVsZW1lbnQucHJvdG90eXBlLFtcInBhcmVudEVsZW1lbnRcIixcImNvbnRhaW5zXCJdKSx0PXtmaXJzdEVsZW1lbnRDaGlsZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0LmN1cnJlbnROb2RlPXRoaXMsR3QuZmlyc3RDaGlsZCgpfX0sbGFzdEVsZW1lbnRDaGlsZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0LmN1cnJlbnROb2RlPXRoaXMsR3QubGFzdENoaWxkKCl9fSxjaGlsZHJlbjp7Z2V0OmZ1bmN0aW9uKCl7dmFyIHQ9W107R3QuY3VycmVudE5vZGU9dGhpcztmb3IodmFyIGU9R3QuZmlyc3RDaGlsZCgpO2U7KXQucHVzaChlKSxlPUd0Lm5leHRTaWJsaW5nKCk7cmV0dXJuIGd0KHQpfX0sY2hpbGRFbGVtZW50Q291bnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoaWxkcmVuP3RoaXMuY2hpbGRyZW4ubGVuZ3RoOjB9fX0sSXQ/KHF0KEVsZW1lbnQucHJvdG90eXBlLFh0KSxxdChFbGVtZW50LnByb3RvdHlwZSxbXCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nXCIsXCJuZXh0RWxlbWVudFNpYmxpbmdcIixcImlubmVySFRNTFwiLFwiY2xhc3NOYW1lXCJdKSxxdChIVE1MRWxlbWVudC5wcm90b3R5cGUsW1wiY2hpbGRyZW5cIixcImlubmVySFRNTFwiLFwiY2xhc3NOYW1lXCJdKSk6KHp0KEVsZW1lbnQucHJvdG90eXBlLHQpLHp0KEVsZW1lbnQucHJvdG90eXBlLHtwcmV2aW91c0VsZW1lbnRTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gR3QuY3VycmVudE5vZGU9dGhpcyxHdC5wcmV2aW91c1NpYmxpbmcoKX19LG5leHRFbGVtZW50U2libGluZzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0LmN1cnJlbnROb2RlPXRoaXMsR3QubmV4dFNpYmxpbmcoKX19LGlubmVySFRNTDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFZ0KHRoaXMsYnQpfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9XCJ0ZW1wbGF0ZVwiPT09dGhpcy5sb2NhbE5hbWU/dGhpcy5jb250ZW50OnRoaXM7WXQoZSk7dmFyIG49dGhpcy5sb2NhbE5hbWV8fFwiZGl2XCI7Zm9yKChuPXRoaXMubmFtZXNwYWNlVVJJJiZ0aGlzLm5hbWVzcGFjZVVSSSE9PVp0Lm5hbWVzcGFjZVVSST9adC5jcmVhdGVFbGVtZW50TlModGhpcy5uYW1lc3BhY2VVUkksbik6WnQuY3JlYXRlRWxlbWVudChuKSkuaW5uZXJIVE1MPXQsdD1cInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZT9uLmNvbnRlbnQ6bjtuPXQuX19zaGFkeV9uYXRpdmVfZmlyc3RDaGlsZDspZS5fX3NoYWR5X25hdGl2ZV9pbnNlcnRCZWZvcmUobix2b2lkIDApfX0sY2xhc3NOYW1lOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIix0KX19fSkpLHF0KEVsZW1lbnQucHJvdG90eXBlLFwic2V0QXR0cmlidXRlIGdldEF0dHJpYnV0ZSBoYXNBdHRyaWJ1dGUgcmVtb3ZlQXR0cmlidXRlIGZvY3VzIGJsdXJcIi5zcGxpdChcIiBcIikpLHF0KEVsZW1lbnQucHJvdG90eXBlLEp0KSxxdChIVE1MRWxlbWVudC5wcm90b3R5cGUsW1wiZm9jdXNcIixcImJsdXJcIl0pLHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50JiZxdCh3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudC5wcm90b3R5cGUsW1wiaW5uZXJIVE1MXCJdKSxJdD9xdChEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSxYdCk6enQoRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsdCkscXQoRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsSnQpLEl0PyhxdChEb2N1bWVudC5wcm90b3R5cGUsWHQpLHF0KERvY3VtZW50LnByb3RvdHlwZSxbXCJhY3RpdmVFbGVtZW50XCJdKSk6enQoRG9jdW1lbnQucHJvdG90eXBlLHQpLHF0KERvY3VtZW50LnByb3RvdHlwZSxbXCJpbXBvcnROb2RlXCIsXCJnZXRFbGVtZW50QnlJZFwiXSkscXQoRG9jdW1lbnQucHJvdG90eXBlLEp0KX0oKSx2bihcIl9fc2hhZHlfXCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCxcIl9hY3RpdmVFbGVtZW50XCIsY24uYWN0aXZlRWxlbWVudCksTnQoV2luZG93LnByb3RvdHlwZSxkbixcIl9fc2hhZHlfXCIpLGF0LkQ/YXQudWEmJk50KEVsZW1lbnQucHJvdG90eXBlLG5uKToodm4oKSxmdW5jdGlvbigpe2lmKCFhZSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFdmVudC5wcm90b3R5cGUsXCJpc1RydXN0ZWRcIikpe3ZhciB0PWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLHtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY29tcG9zZWQ6ITB9KTt0aGlzLl9fc2hhZHlfZGlzcGF0Y2hFdmVudCh0KX07RWxlbWVudC5wcm90b3R5cGUuY2xpY2s/RWxlbWVudC5wcm90b3R5cGUuY2xpY2s9dDpIVE1MRWxlbWVudC5wcm90b3R5cGUuY2xpY2smJihIVE1MRWxlbWVudC5wcm90b3R5cGUuY2xpY2s9dCl9fSgpKSxmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiBfZSl3aW5kb3cuX19zaGFkeV9uYXRpdmVfYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbih0KXt0Ll9fdGFyZ2V0fHwoQ2UodCkseWUodCkpfSksITApfSgpLHdpbmRvdy5FdmVudD1TZSx3aW5kb3cuQ3VzdG9tRXZlbnQ9VGUsd2luZG93Lk1vdXNlRXZlbnQ9T2Usd2luZG93LlNoYWRvd1Jvb3Q9RG59dmFyICRuPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCxRbj13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUyx0bz13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUsZW89d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5wcmVwZW5kLG5vPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuYXBwZW5kLG9vPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5wcmVwZW5kLGlvPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5hcHBlbmQscm89d2luZG93Lk5vZGUucHJvdG90eXBlLmNsb25lTm9kZSxhbz13aW5kb3cuTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQsc289d2luZG93Lk5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSxsbz13aW5kb3cuTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsY289d2luZG93Lk5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCx1bz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5Ob2RlLnByb3RvdHlwZSxcInRleHRDb250ZW50XCIpLGhvPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3csZm89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIikscG89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZSxfbz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLG1vPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUsdm89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5TLHlvPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUyxnbz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlMsYm89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCx3bz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRIVE1MLEVvPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5wcmVwZW5kLE5vPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmQsQ289d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmJlZm9yZSxTbz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYWZ0ZXIsVG89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoLE9vPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmUseG89d2luZG93LkhUTUxFbGVtZW50LE1vPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSxcImlubmVySFRNTFwiKSxEbz13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCxMbz13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50SFRNTCxBbz1uZXcgU2V0O2Z1bmN0aW9uIFBvKHQpe3ZhciBlPUFvLmhhcyh0KTtyZXR1cm4gdD0vXlthLXpdWy4wLTlfYS16XSotWy0uMC05X2Etel0qJC8udGVzdCh0KSwhZSYmdH1cImFubm90YXRpb24teG1sIGNvbG9yLXByb2ZpbGUgZm9udC1mYWNlIGZvbnQtZmFjZS1zcmMgZm9udC1mYWNlLXVyaSBmb250LWZhY2UtZm9ybWF0IGZvbnQtZmFjZS1uYW1lIG1pc3NpbmctZ2x5cGhcIi5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIEFvLmFkZCh0KX0pKTt2YXIgam89ZG9jdW1lbnQuY29udGFpbnM/ZG9jdW1lbnQuY29udGFpbnMuYmluZChkb2N1bWVudCk6ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zLmJpbmQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtmdW5jdGlvbiBrbyh0KXt2YXIgZT10LmlzQ29ubmVjdGVkO2lmKHZvaWQgMCE9PWUpcmV0dXJuIGU7aWYoam8odCkpcmV0dXJuITA7Zm9yKDt0JiYhKHQuX19DRV9pc0ltcG9ydERvY3VtZW50fHx0IGluc3RhbmNlb2YgRG9jdW1lbnQpOyl0PXQucGFyZW50Tm9kZXx8KHdpbmRvdy5TaGFkb3dSb290JiZ0IGluc3RhbmNlb2YgU2hhZG93Um9vdD90Lmhvc3Q6dm9pZCAwKTtyZXR1cm4hKCF0fHwhKHQuX19DRV9pc0ltcG9ydERvY3VtZW50fHx0IGluc3RhbmNlb2YgRG9jdW1lbnQpKX1mdW5jdGlvbiBGbyh0KXt2YXIgZT10LmNoaWxkcmVuO2lmKGUpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO2ZvcihlPVtdLHQ9dC5maXJzdENoaWxkO3Q7dD10Lm5leHRTaWJsaW5nKXQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmZS5wdXNoKHQpO3JldHVybiBlfWZ1bmN0aW9uIFJvKHQsZSl7Zm9yKDtlJiZlIT09dCYmIWUubmV4dFNpYmxpbmc7KWU9ZS5wYXJlbnROb2RlO3JldHVybiBlJiZlIT09dD9lLm5leHRTaWJsaW5nOm51bGx9ZnVuY3Rpb24gVm8oKXt2YXIgdD0hKG51bGw9PXJpfHwhcmkubm9Eb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyKSxlPSEobnVsbD09cml8fCFyaS5zaGFkeURvbUZhc3RXYWxrKTt0aGlzLlg9W10sdGhpcy5hPVtdLHRoaXMuUj0hMSx0aGlzLnNoYWR5RG9tRmFzdFdhbGs9ZSx0aGlzLmpiPSF0fWZ1bmN0aW9uIElvKHQsZSxuLG8pe3ZhciBpPXdpbmRvdy5TaGFkeURvbTtpZih0LnNoYWR5RG9tRmFzdFdhbGsmJmkmJmkuaW5Vc2Upe2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmbihlKSxlLnF1ZXJ5U2VsZWN0b3JBbGwpZm9yKHQ9aS5uYXRpdmVNZXRob2RzLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlLFwiKlwiKSxlPTA7ZTx0Lmxlbmd0aDtlKyspbih0W2VdKX1lbHNlIWZ1bmN0aW9uIHQoZSxuLG8pe2Zvcih2YXIgaT1lO2k7KXtpZihpLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciByPWk7bihyKTt2YXIgYT1yLmxvY2FsTmFtZTtpZihcImxpbmtcIj09PWEmJlwiaW1wb3J0XCI9PT1yLmdldEF0dHJpYnV0ZShcInJlbFwiKSl7aWYoaT1yLmltcG9ydCx2b2lkIDA9PT1vJiYobz1uZXcgU2V0KSxpIGluc3RhbmNlb2YgTm9kZSYmIW8uaGFzKGkpKWZvcihvLmFkZChpKSxpPWkuZmlyc3RDaGlsZDtpO2k9aS5uZXh0U2libGluZyl0KGksbixvKTtpPVJvKGUscik7Y29udGludWV9aWYoXCJ0ZW1wbGF0ZVwiPT09YSl7aT1SbyhlLHIpO2NvbnRpbnVlfWlmKHI9ci5fX0NFX3NoYWRvd1Jvb3QpZm9yKHI9ci5maXJzdENoaWxkO3I7cj1yLm5leHRTaWJsaW5nKXQocixuLG8pfWk9aS5maXJzdENoaWxkP2kuZmlyc3RDaGlsZDpSbyhlLGkpfX0oZSxuLG8pfWZ1bmN0aW9uIEhvKHQsZSl7dC5SJiZJbyh0LGUsKGZ1bmN0aW9uKGUpe3JldHVybiBVbyh0LGUpfSkpfWZ1bmN0aW9uIFVvKHQsZSl7aWYodC5SJiYhZS5fX0NFX3BhdGNoZWQpe2UuX19DRV9wYXRjaGVkPSEwO2Zvcih2YXIgbj0wO248dC5YLmxlbmd0aDtuKyspdC5YW25dKGUpO2ZvcihuPTA7bjx0LmEubGVuZ3RoO24rKyl0LmFbbl0oZSl9fWZ1bmN0aW9uIEJvKHQsZSl7dmFyIG49W107Zm9yKElvKHQsZSwoZnVuY3Rpb24odCl7cmV0dXJuIG4ucHVzaCh0KX0pKSxlPTA7ZTxuLmxlbmd0aDtlKyspe3ZhciBvPW5bZV07MT09PW8uX19DRV9zdGF0ZT90LmNvbm5lY3RlZENhbGxiYWNrKG8pOldvKHQsbyl9fWZ1bmN0aW9uIHpvKHQsZSl7dmFyIG49W107Zm9yKElvKHQsZSwoZnVuY3Rpb24odCl7cmV0dXJuIG4ucHVzaCh0KX0pKSxlPTA7ZTxuLmxlbmd0aDtlKyspe3ZhciBvPW5bZV07MT09PW8uX19DRV9zdGF0ZSYmdC5kaXNjb25uZWN0ZWRDYWxsYmFjayhvKX19ZnVuY3Rpb24gcW8odCxlLG4pe3ZhciBvPShuPXZvaWQgMD09PW4/e306bikua2IsaT1uLnVwZ3JhZGV8fGZ1bmN0aW9uKGUpe3JldHVybiBXbyh0LGUpfSxyPVtdO2ZvcihJbyh0LGUsKGZ1bmN0aW9uKGUpe2lmKHQuUiYmVW8odCxlKSxcImxpbmtcIj09PWUubG9jYWxOYW1lJiZcImltcG9ydFwiPT09ZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpe3ZhciBuPWUuaW1wb3J0O24gaW5zdGFuY2VvZiBOb2RlJiYobi5fX0NFX2lzSW1wb3J0RG9jdW1lbnQ9ITAsbi5fX0NFX3JlZ2lzdHJ5PWRvY3VtZW50Ll9fQ0VfcmVnaXN0cnkpLG4mJlwiY29tcGxldGVcIj09PW4ucmVhZHlTdGF0ZT9uLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDplLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsKGZ1bmN0aW9uKCl7dmFyIG49ZS5pbXBvcnQ7aWYoIW4uX19DRV9kb2N1bWVudExvYWRIYW5kbGVkKXtuLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDt2YXIgcj1uZXcgU2V0O28mJihvLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiByLmFkZCh0KX0pKSxyLmRlbGV0ZShuKSkscW8odCxuLHtrYjpyLHVwZ3JhZGU6aX0pfX0pKX1lbHNlIHIucHVzaChlKX0pLG8pLGU9MDtlPHIubGVuZ3RoO2UrKylpKHJbZV0pfWZ1bmN0aW9uIFdvKHQsZSl7dHJ5e3ZhciBuPWUub3duZXJEb2N1bWVudCxvPW4uX19DRV9yZWdpc3RyeSxpPW8mJihuLmRlZmF1bHRWaWV3fHxuLl9fQ0VfaXNJbXBvcnREb2N1bWVudCk/ZWkobyxlLmxvY2FsTmFtZSk6dm9pZCAwO2lmKGkmJnZvaWQgMD09PWUuX19DRV9zdGF0ZSl7aS5jb25zdHJ1Y3Rpb25TdGFjay5wdXNoKGUpO3RyeXt0cnl7aWYobmV3IGkuY29uc3RydWN0b3JGdW5jdGlvbiE9PWUpdGhyb3cgRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3IgZGlkIG5vdCBwcm9kdWNlIHRoZSBlbGVtZW50IGJlaW5nIHVwZ3JhZGVkLlwiKX1maW5hbGx5e2kuY29uc3RydWN0aW9uU3RhY2sucG9wKCl9fWNhdGNoKHQpe3Rocm93IGUuX19DRV9zdGF0ZT0yLHR9aWYoZS5fX0NFX3N0YXRlPTEsZS5fX0NFX2RlZmluaXRpb249aSxpLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayYmZS5oYXNBdHRyaWJ1dGVzKCkpe3ZhciByPWkub2JzZXJ2ZWRBdHRyaWJ1dGVzO2ZvcihpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBhPXJbaV0scz1lLmdldEF0dHJpYnV0ZShhKTtudWxsIT09cyYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soZSxhLG51bGwscyxudWxsKX19a28oZSkmJnQuY29ubmVjdGVkQ2FsbGJhY2soZSl9fWNhdGNoKHQpe1pvKHQpfX1mdW5jdGlvbiBHbyh0LGUsbixvKXt2YXIgaT1lLl9fQ0VfcmVnaXN0cnk7aWYoaSYmKG51bGw9PT1vfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PW8pJiYoaT1laShpLG4pKSl0cnl7dmFyIHI9bmV3IGkuY29uc3RydWN0b3JGdW5jdGlvbjtpZih2b2lkIDA9PT1yLl9fQ0Vfc3RhdGV8fHZvaWQgMD09PXIuX19DRV9kZWZpbml0aW9uKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSByZXR1cm5lZCB2YWx1ZSB3YXMgbm90IGNvbnN0cnVjdGVkIHdpdGggdGhlIEhUTUxFbGVtZW50IGNvbnN0cnVjdG9yLlwiKTtpZihcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiE9PXIubmFtZXNwYWNlVVJJKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50J3MgbmFtZXNwYWNlIG11c3QgYmUgdGhlIEhUTUwgbmFtZXNwYWNlLlwiKTtpZihyLmhhc0F0dHJpYnV0ZXMoKSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1wiK24rXCInOiBUaGUgY29uc3RydWN0ZWQgZWxlbWVudCBtdXN0IG5vdCBoYXZlIGFueSBhdHRyaWJ1dGVzLlwiKTtpZihudWxsIT09ci5maXJzdENoaWxkKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50IG11c3Qgbm90IGhhdmUgYW55IGNoaWxkcmVuLlwiKTtpZihudWxsIT09ci5wYXJlbnROb2RlKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50IG11c3Qgbm90IGhhdmUgYSBwYXJlbnQgbm9kZS5cIik7aWYoci5vd25lckRvY3VtZW50IT09ZSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1wiK24rXCInOiBUaGUgY29uc3RydWN0ZWQgZWxlbWVudCdzIG93bmVyIGRvY3VtZW50IGlzIGluY29ycmVjdC5cIik7aWYoci5sb2NhbE5hbWUhPT1uKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50J3MgbG9jYWwgbmFtZSBpcyBpbmNvcnJlY3QuXCIpO3JldHVybiByfWNhdGNoKGkpe3JldHVybiBabyhpKSxlPW51bGw9PT1vPyRuLmNhbGwoZSxuKTpRbi5jYWxsKGUsbyxuKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxIVE1MVW5rbm93bkVsZW1lbnQucHJvdG90eXBlKSxlLl9fQ0Vfc3RhdGU9MixlLl9fQ0VfZGVmaW5pdGlvbj12b2lkIDAsVW8odCxlKSxlfXJldHVybiBVbyh0LGU9bnVsbD09PW8/JG4uY2FsbChlLG4pOlFuLmNhbGwoZSxvLG4pKSxlfWZ1bmN0aW9uIFpvKHQpe3ZhciBlPXQubWVzc2FnZSxuPXQuc291cmNlVVJMfHx0LmZpbGVOYW1lfHxcIlwiLG89dC5saW5lfHx0LmxpbmVOdW1iZXJ8fDAsaT10LmNvbHVtbnx8dC5jb2x1bW5OdW1iZXJ8fDAscj12b2lkIDA7dm9pZCAwPT09RXJyb3JFdmVudC5wcm90b3R5cGUuaW5pdEVycm9yRXZlbnQ/cj1uZXcgRXJyb3JFdmVudChcImVycm9yXCIse2NhbmNlbGFibGU6ITAsbWVzc2FnZTplLGZpbGVuYW1lOm4sbGluZW5vOm8sY29sbm86aSxlcnJvcjp0fSk6KChyPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXJyb3JFdmVudFwiKSkuaW5pdEVycm9yRXZlbnQoXCJlcnJvclwiLCExLCEwLGUsbixvKSxyLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0UHJldmVudGVkXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19KX0pLHZvaWQgMD09PXIuZXJyb3ImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZXJyb3JcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9fSksd2luZG93LmRpc3BhdGNoRXZlbnQociksci5kZWZhdWx0UHJldmVudGVkfHxjb25zb2xlLmVycm9yKHQpfWZ1bmN0aW9uIFlvKCl7dmFyIHQ9dGhpczt0aGlzLkM9dm9pZCAwLHRoaXMuQ2E9bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe3QuYT1lfSkpfWZ1bmN0aW9uIFhvKHQpe3ZhciBlPWRvY3VtZW50O3RoaXMuUz12b2lkIDAsdGhpcy5NPXQsdGhpcy5hPWUscW8odGhpcy5NLHRoaXMuYSksXCJsb2FkaW5nXCI9PT10aGlzLmEucmVhZHlTdGF0ZSYmKHRoaXMuUz1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmIuYmluZCh0aGlzKSksdGhpcy5TLm9ic2VydmUodGhpcy5hLHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0pKX1mdW5jdGlvbiBKbyh0KXt0LlMmJnQuUy5kaXNjb25uZWN0KCl9ZnVuY3Rpb24gS28odCl7dGhpcy5mYT1uZXcgTWFwLHRoaXMuZ2E9bmV3IE1hcCx0aGlzLnhhPW5ldyBNYXAsdGhpcy5uYT0hMSx0aGlzLnFhPW5ldyBNYXAsdGhpcy5lYT1mdW5jdGlvbih0KXtyZXR1cm4gdCgpfSx0aGlzLlA9ITEsdGhpcy5oYT1bXSx0aGlzLk09dCx0aGlzLnlhPXQuamI/bmV3IFhvKHQpOnZvaWQgMH1mdW5jdGlvbiAkbyh0LGUpe2lmKCFQbyhlKSl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgZWxlbWVudCBuYW1lICdcIitlK1wiJyBpcyBub3QgdmFsaWQuXCIpO2lmKGVpKHQsZSkpdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IHdpdGggbmFtZSAnXCIrZStcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtpZih0Lm5hKXRocm93IEVycm9yKFwiQSBjdXN0b20gZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIGRlZmluZWQuXCIpfWZ1bmN0aW9uIFFvKHQsZSxuKXt2YXIgbzt0Lm5hPSEwO3RyeXt2YXIgaT1uLnByb3RvdHlwZTtpZighKGkgaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3IncyBwcm90b3R5cGUgaXMgbm90IGFuIG9iamVjdC5cIik7dmFyIHI9ZnVuY3Rpb24odCl7dmFyIGU9aVt0XTtpZih2b2lkIDAhPT1lJiYhKGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgRXJyb3IoXCJUaGUgJ1wiK3QrXCInIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7cmV0dXJuIGV9LGE9cihcImNvbm5lY3RlZENhbGxiYWNrXCIpLHM9cihcImRpc2Nvbm5lY3RlZENhbGxiYWNrXCIpLGw9cihcImFkb3B0ZWRDYWxsYmFja1wiKSxjPShvPXIoXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIikpJiZuLm9ic2VydmVkQXR0cmlidXRlc3x8W119Y2F0Y2godCl7dGhyb3cgdH1maW5hbGx5e3QubmE9ITF9cmV0dXJuIG49e2xvY2FsTmFtZTplLGNvbnN0cnVjdG9yRnVuY3Rpb246bixjb25uZWN0ZWRDYWxsYmFjazphLGRpc2Nvbm5lY3RlZENhbGxiYWNrOnMsYWRvcHRlZENhbGxiYWNrOmwsYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrOm8sb2JzZXJ2ZWRBdHRyaWJ1dGVzOmMsY29uc3RydWN0aW9uU3RhY2s6W119LHQuZ2Euc2V0KGUsbiksdC54YS5zZXQobi5jb25zdHJ1Y3RvckZ1bmN0aW9uLG4pLG59ZnVuY3Rpb24gdGkodCl7aWYoITEhPT10LlApe3QuUD0hMTtmb3IodmFyIGU9W10sbj10LmhhLG89bmV3IE1hcCxpPTA7aTxuLmxlbmd0aDtpKyspby5zZXQobltpXSxbXSk7Zm9yKHFvKHQuTSxkb2N1bWVudCx7dXBncmFkZTpmdW5jdGlvbihuKXtpZih2b2lkIDA9PT1uLl9fQ0Vfc3RhdGUpe3ZhciBpPW4ubG9jYWxOYW1lLHI9by5nZXQoaSk7cj9yLnB1c2gobik6dC5nYS5oYXMoaSkmJmUucHVzaChuKX19fSksaT0wO2k8ZS5sZW5ndGg7aSsrKVdvKHQuTSxlW2ldKTtmb3IoaT0wO2k8bi5sZW5ndGg7aSsrKXtmb3IodmFyIHI9bltpXSxhPW8uZ2V0KHIpLHM9MDtzPGEubGVuZ3RoO3MrKylXbyh0Lk0sYVtzXSk7KHI9dC5xYS5nZXQocikpJiZyLnJlc29sdmUodm9pZCAwKX1uLmxlbmd0aD0wfX1mdW5jdGlvbiBlaSh0LGUpe3ZhciBuPXQuZ2EuZ2V0KGUpO2lmKG4pcmV0dXJuIG47aWYobj10LmZhLmdldChlKSl7dC5mYS5kZWxldGUoZSk7dHJ5e3JldHVybiBRbyh0LGUsbigpKX1jYXRjaCh0KXtabyh0KX19fWZ1bmN0aW9uIG5pKHQsZSxuKXtmdW5jdGlvbiBvKGUpe3JldHVybiBmdW5jdGlvbihuKXtmb3IodmFyIG89W10saT0wO2k8YXJndW1lbnRzLmxlbmd0aDsrK2kpb1tpXT1hcmd1bWVudHNbaV07aT1bXTtmb3IodmFyIHI9W10sYT0wO2E8by5sZW5ndGg7YSsrKXt2YXIgcz1vW2FdO2lmKHMgaW5zdGFuY2VvZiBFbGVtZW50JiZrbyhzKSYmci5wdXNoKHMpLHMgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihzPXMuZmlyc3RDaGlsZDtzO3M9cy5uZXh0U2libGluZylpLnB1c2gocyk7ZWxzZSBpLnB1c2gocyl9Zm9yKGUuYXBwbHkodGhpcyxvKSxvPTA7bzxyLmxlbmd0aDtvKyspem8odCxyW29dKTtpZihrbyh0aGlzKSlmb3Iobz0wO288aS5sZW5ndGg7bysrKShyPWlbb10paW5zdGFuY2VvZiBFbGVtZW50JiZCbyh0LHIpfX12b2lkIDAhPT1uLnByZXBlbmQmJihlLnByZXBlbmQ9byhuLnByZXBlbmQpKSx2b2lkIDAhPT1uLmFwcGVuZCYmKGUuYXBwZW5kPW8obi5hcHBlbmQpKX1mdW5jdGlvbiBvaSh0KXtmdW5jdGlvbiBlKGUsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpbm5lckhUTUxcIix7ZW51bWVyYWJsZTpuLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpuLmdldCxzZXQ6ZnVuY3Rpb24oZSl7dmFyIG89dGhpcyxpPXZvaWQgMDtpZihrbyh0aGlzKSYmKGk9W10sSW8odCx0aGlzLChmdW5jdGlvbih0KXt0IT09byYmaS5wdXNoKHQpfSkpKSxuLnNldC5jYWxsKHRoaXMsZSksaSlmb3IodmFyIHI9MDtyPGkubGVuZ3RoO3IrKyl7dmFyIGE9aVtyXTsxPT09YS5fX0NFX3N0YXRlJiZ0LmRpc2Nvbm5lY3RlZENhbGxiYWNrKGEpfXJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuX19DRV9yZWdpc3RyeT9xbyh0LHRoaXMpOkhvKHQsdGhpcyksZX19KX1mdW5jdGlvbiBuKGUsbil7ZS5pbnNlcnRBZGphY2VudEVsZW1lbnQ9ZnVuY3Rpb24oZSxvKXt2YXIgaT1rbyhvKTtyZXR1cm4gZT1uLmNhbGwodGhpcyxlLG8pLGkmJnpvKHQsbyksa28oZSkmJkJvKHQsbyksZX19ZnVuY3Rpb24gbyhlLG4pe2Z1bmN0aW9uIG8oZSxuKXtmb3IodmFyIG89W107ZSE9PW47ZT1lLm5leHRTaWJsaW5nKW8ucHVzaChlKTtmb3Iobj0wO248by5sZW5ndGg7bisrKXFvKHQsb1tuXSl9ZS5pbnNlcnRBZGphY2VudEhUTUw9ZnVuY3Rpb24odCxlKXtpZihcImJlZm9yZWJlZ2luXCI9PT0odD10LnRvTG93ZXJDYXNlKCkpKXt2YXIgaT10aGlzLnByZXZpb3VzU2libGluZztuLmNhbGwodGhpcyx0LGUpLG8oaXx8dGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQsdGhpcyl9ZWxzZSBpZihcImFmdGVyYmVnaW5cIj09PXQpaT10aGlzLmZpcnN0Q2hpbGQsbi5jYWxsKHRoaXMsdCxlKSxvKHRoaXMuZmlyc3RDaGlsZCxpKTtlbHNlIGlmKFwiYmVmb3JlZW5kXCI9PT10KWk9dGhpcy5sYXN0Q2hpbGQsbi5jYWxsKHRoaXMsdCxlKSxvKGl8fHRoaXMuZmlyc3RDaGlsZCxudWxsKTtlbHNle2lmKFwiYWZ0ZXJlbmRcIiE9PXQpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHZhbHVlIHByb3ZpZGVkIChcIitTdHJpbmcodCkrXCIpIGlzIG5vdCBvbmUgb2YgJ2JlZm9yZWJlZ2luJywgJ2FmdGVyYmVnaW4nLCAnYmVmb3JlZW5kJywgb3IgJ2FmdGVyZW5kJy5cIik7aT10aGlzLm5leHRTaWJsaW5nLG4uY2FsbCh0aGlzLHQsZSksbyh0aGlzLm5leHRTaWJsaW5nLGkpfX19aG8mJihFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3c9ZnVuY3Rpb24oZSl7aWYoZT1oby5jYWxsKHRoaXMsZSksdC5SJiYhZS5fX0NFX3BhdGNoZWQpe2UuX19DRV9wYXRjaGVkPSEwO2Zvcih2YXIgbj0wO248dC5YLmxlbmd0aDtuKyspdC5YW25dKGUpfXJldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1lfSksZm8mJmZvLmdldD9lKEVsZW1lbnQucHJvdG90eXBlLGZvKTpNbyYmTW8uZ2V0P2UoSFRNTEVsZW1lbnQucHJvdG90eXBlLE1vKTpmdW5jdGlvbih0LGUpe3QuUj0hMCx0LmEucHVzaChlKX0odCwoZnVuY3Rpb24odCl7ZSh0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcm8uY2FsbCh0aGlzLCEwKS5pbm5lckhUTUx9LHNldDpmdW5jdGlvbih0KXt2YXIgZT1cInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZSxuPWU/dGhpcy5jb250ZW50OnRoaXMsbz1Rbi5jYWxsKGRvY3VtZW50LHRoaXMubmFtZXNwYWNlVVJJLHRoaXMubG9jYWxOYW1lKTtmb3Ioby5pbm5lckhUTUw9dDswPG4uY2hpbGROb2Rlcy5sZW5ndGg7KWxvLmNhbGwobixuLmNoaWxkTm9kZXNbMF0pO2Zvcih0PWU/by5jb250ZW50Om87MDx0LmNoaWxkTm9kZXMubGVuZ3RoOylhby5jYWxsKG4sdC5jaGlsZE5vZGVzWzBdKX19KX0pKSxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSxuKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBfby5jYWxsKHRoaXMsZSxuKTt2YXIgbz1wby5jYWxsKHRoaXMsZSk7X28uY2FsbCh0aGlzLGUsbiksbj1wby5jYWxsKHRoaXMsZSksdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxlLG8sbixudWxsKX0sRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTlM9ZnVuY3Rpb24oZSxuLG8pe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIHlvLmNhbGwodGhpcyxlLG4sbyk7dmFyIGk9dm8uY2FsbCh0aGlzLGUsbik7eW8uY2FsbCh0aGlzLGUsbixvKSxvPXZvLmNhbGwodGhpcyxlLG4pLHQuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsbixpLG8sZSl9LEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZT1mdW5jdGlvbihlKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBtby5jYWxsKHRoaXMsZSk7dmFyIG49cG8uY2FsbCh0aGlzLGUpO21vLmNhbGwodGhpcyxlKSxudWxsIT09biYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxlLG4sbnVsbCxudWxsKX0sRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlM9ZnVuY3Rpb24oZSxuKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBnby5jYWxsKHRoaXMsZSxuKTt2YXIgbz12by5jYWxsKHRoaXMsZSxuKTtnby5jYWxsKHRoaXMsZSxuKTt2YXIgaT12by5jYWxsKHRoaXMsZSxuKTtvIT09aSYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxuLG8saSxlKX0sRG8/bihIVE1MRWxlbWVudC5wcm90b3R5cGUsRG8pOmJvJiZuKEVsZW1lbnQucHJvdG90eXBlLGJvKSxMbz9vKEhUTUxFbGVtZW50LnByb3RvdHlwZSxMbyk6d28mJm8oRWxlbWVudC5wcm90b3R5cGUsd28pLG5pKHQsRWxlbWVudC5wcm90b3R5cGUse3ByZXBlbmQ6RW8sYXBwZW5kOk5vfSksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZnVuY3Rpb24obil7Zm9yKHZhciBvPVtdLGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7KytpKW9baV09YXJndW1lbnRzW2ldO2k9W107Zm9yKHZhciByPVtdLGE9MDthPG8ubGVuZ3RoO2ErKyl7dmFyIHM9b1thXTtpZihzIGluc3RhbmNlb2YgRWxlbWVudCYma28ocykmJnIucHVzaChzKSxzIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3Iocz1zLmZpcnN0Q2hpbGQ7cztzPXMubmV4dFNpYmxpbmcpaS5wdXNoKHMpO2Vsc2UgaS5wdXNoKHMpfWZvcihlLmFwcGx5KHRoaXMsbyksbz0wO288ci5sZW5ndGg7bysrKXpvKHQscltvXSk7aWYoa28odGhpcykpZm9yKG89MDtvPGkubGVuZ3RoO28rKykocj1pW29dKWluc3RhbmNlb2YgRWxlbWVudCYmQm8odCxyKX19dmFyIG49RWxlbWVudC5wcm90b3R5cGU7dm9pZCAwIT09Q28mJihuLmJlZm9yZT1lKENvKSksdm9pZCAwIT09U28mJihuLmFmdGVyPWUoU28pKSx2b2lkIDAhPT1UbyYmKG4ucmVwbGFjZVdpdGg9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPVtdLG89MDtvPGFyZ3VtZW50cy5sZW5ndGg7KytvKW5bb109YXJndW1lbnRzW29dO289W107Zm9yKHZhciBpPVtdLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGE9bltyXTtpZihhIGluc3RhbmNlb2YgRWxlbWVudCYma28oYSkmJmkucHVzaChhKSxhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpby5wdXNoKGEpO2Vsc2Ugby5wdXNoKGEpfWZvcihyPWtvKHRoaXMpLFRvLmFwcGx5KHRoaXMsbiksbj0wO248aS5sZW5ndGg7bisrKXpvKHQsaVtuXSk7aWYocilmb3Ioem8odCx0aGlzKSxuPTA7bjxvLmxlbmd0aDtuKyspKGk9b1tuXSlpbnN0YW5jZW9mIEVsZW1lbnQmJkJvKHQsaSl9KSx2b2lkIDAhPT1PbyYmKG4ucmVtb3ZlPWZ1bmN0aW9uKCl7dmFyIGU9a28odGhpcyk7T28uY2FsbCh0aGlzKSxlJiZ6byh0LHRoaXMpfSl9KHQpfVZvLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbih0KXt2YXIgZT10Ll9fQ0VfZGVmaW5pdGlvbjtpZihlLmNvbm5lY3RlZENhbGxiYWNrKXRyeXtlLmNvbm5lY3RlZENhbGxiYWNrLmNhbGwodCl9Y2F0Y2godCl7Wm8odCl9fSxWby5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s9ZnVuY3Rpb24odCl7dmFyIGU9dC5fX0NFX2RlZmluaXRpb247aWYoZS5kaXNjb25uZWN0ZWRDYWxsYmFjayl0cnl7ZS5kaXNjb25uZWN0ZWRDYWxsYmFjay5jYWxsKHQpfWNhdGNoKHQpe1pvKHQpfX0sVm8ucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaz1mdW5jdGlvbih0LGUsbixvLGkpe3ZhciByPXQuX19DRV9kZWZpbml0aW9uO2lmKHIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJiYtMTxyLm9ic2VydmVkQXR0cmlidXRlcy5pbmRleE9mKGUpKXRyeXtyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjay5jYWxsKHQsZSxuLG8saSl9Y2F0Y2godCl7Wm8odCl9fSxZby5wcm90b3R5cGUucmVzb2x2ZT1mdW5jdGlvbih0KXtpZih0aGlzLkMpdGhyb3cgRXJyb3IoXCJBbHJlYWR5IHJlc29sdmVkLlwiKTt0aGlzLkM9dCx0aGlzLmEodCl9LFhvLnByb3RvdHlwZS5iPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYS5yZWFkeVN0YXRlO2ZvcihcImludGVyYWN0aXZlXCIhPT1lJiZcImNvbXBsZXRlXCIhPT1lfHxKbyh0aGlzKSxlPTA7ZTx0Lmxlbmd0aDtlKyspZm9yKHZhciBuPXRbZV0uYWRkZWROb2RlcyxvPTA7bzxuLmxlbmd0aDtvKyspcW8odGhpcy5NLG5bb10pfSwobj1Lby5wcm90b3R5cGUpLiRhPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZighKGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yIGdldHRlcnMgbXVzdCBiZSBmdW5jdGlvbnMuXCIpOyRvKHRoaXMsdCksdGhpcy5mYS5zZXQodCxlKSx0aGlzLmhhLnB1c2godCksdGhpcy5QfHwodGhpcy5QPSEwLHRoaXMuZWEoKGZ1bmN0aW9uKCl7cmV0dXJuIHRpKG4pfSkpKX0sbi5kZWZpbmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2lmKCEoZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3JzIG11c3QgYmUgZnVuY3Rpb25zLlwiKTskbyh0aGlzLHQpLFFvKHRoaXMsdCxlKSx0aGlzLmhhLnB1c2godCksdGhpcy5QfHwodGhpcy5QPSEwLHRoaXMuZWEoKGZ1bmN0aW9uKCl7cmV0dXJuIHRpKG4pfSkpKX0sbi51cGdyYWRlPWZ1bmN0aW9uKHQpe3FvKHRoaXMuTSx0KX0sbi5nZXQ9ZnVuY3Rpb24odCl7aWYodD1laSh0aGlzLHQpKXJldHVybiB0LmNvbnN0cnVjdG9yRnVuY3Rpb259LG4ud2hlbkRlZmluZWQ9ZnVuY3Rpb24odCl7aWYoIVBvKHQpKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgU3ludGF4RXJyb3IoXCInXCIrdCtcIicgaXMgbm90IGEgdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZS5cIikpO3ZhciBlPXRoaXMucWEuZ2V0KHQpO2lmKGUpcmV0dXJuIGUuQ2E7ZT1uZXcgWW8sdGhpcy5xYS5zZXQodCxlKTt2YXIgbj10aGlzLmdhLmhhcyh0KXx8dGhpcy5mYS5oYXModCk7cmV0dXJuIHQ9LTE9PT10aGlzLmhhLmluZGV4T2YodCksbiYmdCYmZS5yZXNvbHZlKHZvaWQgMCksZS5DYX0sbi5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrPWZ1bmN0aW9uKHQpe3RoaXMueWEmJkpvKHRoaXMueWEpO3ZhciBlPXRoaXMuZWE7dGhpcy5lYT1mdW5jdGlvbihuKXtyZXR1cm4gdCgoZnVuY3Rpb24oKXtyZXR1cm4gZShuKX0pKX19LHdpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnk9S28sS28ucHJvdG90eXBlLmRlZmluZT1Lby5wcm90b3R5cGUuZGVmaW5lLEtvLnByb3RvdHlwZS51cGdyYWRlPUtvLnByb3RvdHlwZS51cGdyYWRlLEtvLnByb3RvdHlwZS5nZXQ9S28ucHJvdG90eXBlLmdldCxLby5wcm90b3R5cGUud2hlbkRlZmluZWQ9S28ucHJvdG90eXBlLndoZW5EZWZpbmVkLEtvLnByb3RvdHlwZS5wb2x5ZmlsbERlZmluZUxhenk9S28ucHJvdG90eXBlLiRhLEtvLnByb3RvdHlwZS5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrPUtvLnByb3RvdHlwZS5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrO3ZhciBpaT17fTt2YXIgcmk9d2luZG93LmN1c3RvbUVsZW1lbnRzO2Z1bmN0aW9uIGFpKCl7dmFyIHQ9bmV3IFZvOyFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpcy5jb25zdHJ1Y3RvcixuPWRvY3VtZW50Ll9fQ0VfcmVnaXN0cnkueGEuZ2V0KGUpO2lmKCFuKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCBhIGN1c3RvbSBlbGVtZW50OiBUaGUgY29uc3RydWN0b3Igd2FzIG5vdCByZWdpc3RlcmVkIHdpdGggYGN1c3RvbUVsZW1lbnRzYC5cIik7dmFyIG89bi5jb25zdHJ1Y3Rpb25TdGFjaztpZigwPT09by5sZW5ndGgpcmV0dXJuIG89JG4uY2FsbChkb2N1bWVudCxuLmxvY2FsTmFtZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKG8sZS5wcm90b3R5cGUpLG8uX19DRV9zdGF0ZT0xLG8uX19DRV9kZWZpbml0aW9uPW4sVW8odCxvKSxvO3ZhciBpPW8ubGVuZ3RoLTEscj1vW2ldO2lmKHI9PT1paSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1wiK24ubG9jYWxOYW1lK1wiJzogVGhpcyBlbGVtZW50IHdhcyBhbHJlYWR5IGNvbnN0cnVjdGVkLlwiKTtyZXR1cm4gb1tpXT1paSxPYmplY3Quc2V0UHJvdG90eXBlT2YocixlLnByb3RvdHlwZSksVW8odCxyKSxyfWUucHJvdG90eXBlPXhvLnByb3RvdHlwZSxPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiY29uc3RydWN0b3JcIix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6ZX0pLHdpbmRvdy5IVE1MRWxlbWVudD1lfSh0KSxmdW5jdGlvbih0KXtEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudD1mdW5jdGlvbihlKXtyZXR1cm4gR28odCx0aGlzLGUsbnVsbCl9LERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGU9dG8uY2FsbCh0aGlzLGUsISFuKSx0aGlzLl9fQ0VfcmVnaXN0cnk/cW8odCxlKTpIbyh0LGUpLGV9LERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlM9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gR28odCx0aGlzLG4sZSl9LG5pKHQsRG9jdW1lbnQucHJvdG90eXBlLHtwcmVwZW5kOmVvLGFwcGVuZDpub30pfSh0KSxuaSh0LERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtwcmVwZW5kOm9vLGFwcGVuZDppb30pLGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInRleHRDb250ZW50XCIse2VudW1lcmFibGU6bi5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6bi5nZXQsc2V0OmZ1bmN0aW9uKGUpe2lmKHRoaXMubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERSluLnNldC5jYWxsKHRoaXMsZSk7ZWxzZXt2YXIgbz12b2lkIDA7aWYodGhpcy5maXJzdENoaWxkKXt2YXIgaT10aGlzLmNoaWxkTm9kZXMscj1pLmxlbmd0aDtpZigwPHImJmtvKHRoaXMpKXtvPUFycmF5KHIpO2Zvcih2YXIgYT0wO2E8cjthKyspb1thXT1pW2FdfX1pZihuLnNldC5jYWxsKHRoaXMsZSksbylmb3IoZT0wO2U8by5sZW5ndGg7ZSsrKXpvKHQsb1tlXSl9fX0pfU5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZT1mdW5jdGlvbihlLG4pe2lmKGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgbz1GbyhlKTtpZihlPXNvLmNhbGwodGhpcyxlLG4pLGtvKHRoaXMpKWZvcihuPTA7bjxvLmxlbmd0aDtuKyspQm8odCxvW25dKTtyZXR1cm4gZX1yZXR1cm4gbz1lIGluc3RhbmNlb2YgRWxlbWVudCYma28oZSksbj1zby5jYWxsKHRoaXMsZSxuKSxvJiZ6byh0LGUpLGtvKHRoaXMpJiZCbyh0LGUpLG59LE5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkPWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgbj1GbyhlKTtpZihlPWFvLmNhbGwodGhpcyxlKSxrbyh0aGlzKSlmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKylCbyh0LG5bb10pO3JldHVybiBlfXJldHVybiBuPWUgaW5zdGFuY2VvZiBFbGVtZW50JiZrbyhlKSxvPWFvLmNhbGwodGhpcyxlKSxuJiZ6byh0LGUpLGtvKHRoaXMpJiZCbyh0LGUpLG99LE5vZGUucHJvdG90eXBlLmNsb25lTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gZT1yby5jYWxsKHRoaXMsISFlKSx0aGlzLm93bmVyRG9jdW1lbnQuX19DRV9yZWdpc3RyeT9xbyh0LGUpOkhvKHQsZSksZX0sTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQ9ZnVuY3Rpb24oZSl7dmFyIG49ZSBpbnN0YW5jZW9mIEVsZW1lbnQmJmtvKGUpLG89bG8uY2FsbCh0aGlzLGUpO3JldHVybiBuJiZ6byh0LGUpLG99LE5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZD1mdW5jdGlvbihlLG4pe2lmKGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgbz1GbyhlKTtpZihlPWNvLmNhbGwodGhpcyxlLG4pLGtvKHRoaXMpKWZvcih6byh0LG4pLG49MDtuPG8ubGVuZ3RoO24rKylCbyh0LG9bbl0pO3JldHVybiBlfW89ZSBpbnN0YW5jZW9mIEVsZW1lbnQmJmtvKGUpO3ZhciBpPWNvLmNhbGwodGhpcyxlLG4pLHI9a28odGhpcyk7cmV0dXJuIHImJnpvKHQsbiksbyYmem8odCxlKSxyJiZCbyh0LGUpLGl9LHVvJiZ1by5nZXQ/ZShOb2RlLnByb3RvdHlwZSx1byk6ZnVuY3Rpb24odCxlKXt0LlI9ITAsdC5YLnB1c2goZSl9KHQsKGZ1bmN0aW9uKHQpe2UodCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9dGhpcy5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWUubm9kZVR5cGUhPT1Ob2RlLkNPTU1FTlRfTk9ERSYmdC5wdXNoKGUudGV4dENvbnRlbnQpO3JldHVybiB0LmpvaW4oXCJcIil9LHNldDpmdW5jdGlvbih0KXtmb3IoO3RoaXMuZmlyc3RDaGlsZDspbG8uY2FsbCh0aGlzLHRoaXMuZmlyc3RDaGlsZCk7bnVsbCE9dCYmXCJcIiE9PXQmJmFvLmNhbGwodGhpcyxkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSl9fSl9KSl9KHQpLG9pKHQpLHQ9bmV3IEtvKHQpLGRvY3VtZW50Ll9fQ0VfcmVnaXN0cnk9dCxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LFwiY3VzdG9tRWxlbWVudHNcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6dH0pfWZ1bmN0aW9uIHNpKCl7dGhpcy5lbmQ9dGhpcy5zdGFydD0wLHRoaXMucnVsZXM9dGhpcy5wYXJlbnQ9dGhpcy5wcmV2aW91cz1udWxsLHRoaXMuY3NzVGV4dD10aGlzLnBhcnNlZENzc1RleHQ9XCJcIix0aGlzLmF0UnVsZT0hMSx0aGlzLnR5cGU9MCx0aGlzLnBhcnNlZFNlbGVjdG9yPXRoaXMuc2VsZWN0b3I9dGhpcy5rZXlmcmFtZXNOYW1lPVwiXCJ9ZnVuY3Rpb24gbGkodCl7dmFyIGU9dD10LnJlcGxhY2UoX2ksXCJcIikucmVwbGFjZShtaSxcIlwiKSxuPW5ldyBzaTtuLnN0YXJ0PTAsbi5lbmQ9ZS5sZW5ndGg7Zm9yKHZhciBvPW4saT0wLHI9ZS5sZW5ndGg7aTxyO2krKylpZihcIntcIj09PWVbaV0pe28ucnVsZXN8fChvLnJ1bGVzPVtdKTt2YXIgYT1vLHM9YS5ydWxlc1thLnJ1bGVzLmxlbmd0aC0xXXx8bnVsbDsobz1uZXcgc2kpLnN0YXJ0PWkrMSxvLnBhcmVudD1hLG8ucHJldmlvdXM9cyxhLnJ1bGVzLnB1c2gobyl9ZWxzZVwifVwiPT09ZVtpXSYmKG8uZW5kPWkrMSxvPW8ucGFyZW50fHxuKTtyZXR1cm4gZnVuY3Rpb24gdChlLG4pe3ZhciBvPW4uc3Vic3RyaW5nKGUuc3RhcnQsZS5lbmQtMSk7aWYoZS5wYXJzZWRDc3NUZXh0PWUuY3NzVGV4dD1vLnRyaW0oKSxlLnBhcmVudCYmKG89KG89KG89ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXFxcXChbMC05YS1mXXsxLDZ9KVxccy9naSwoZnVuY3Rpb24odCxlKXtmb3IoZT02LSh0PWUpLmxlbmd0aDtlLS07KXQ9XCIwXCIrdDtyZXR1cm5cIlxcXFxcIit0fSkpfShvPW4uc3Vic3RyaW5nKGUucHJldmlvdXM/ZS5wcmV2aW91cy5lbmQ6ZS5wYXJlbnQuc3RhcnQsZS5zdGFydC0xKSkpLnJlcGxhY2UoRWksXCIgXCIpKS5zdWJzdHJpbmcoby5sYXN0SW5kZXhPZihcIjtcIikrMSksbz1lLnBhcnNlZFNlbGVjdG9yPWUuc2VsZWN0b3I9by50cmltKCksZS5hdFJ1bGU9MD09PW8uaW5kZXhPZihcIkBcIiksZS5hdFJ1bGU/MD09PW8uaW5kZXhPZihcIkBtZWRpYVwiKT9lLnR5cGU9Zmk6by5tYXRjaCh3aSkmJihlLnR5cGU9ZGksZS5rZXlmcmFtZXNOYW1lPWUuc2VsZWN0b3Iuc3BsaXQoRWkpLnBvcCgpKTplLnR5cGU9MD09PW8uaW5kZXhPZihcIi0tXCIpP3BpOmhpKSxvPWUucnVsZXMpZm9yKHZhciBpPTAscj1vLmxlbmd0aCxhPXZvaWQgMDtpPHImJihhPW9baV0pO2krKyl0KGEsbik7cmV0dXJuIGV9KG4sdCl9cmkmJiFyaS5mb3JjZVBvbHlmaWxsJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByaS5kZWZpbmUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHJpLmdldHx8YWkoKSx3aW5kb3cuX19DRV9pbnN0YWxsUG9seWZpbGw9YWk7dmFyIGNpLHVpLGhpPTEsZGk9NyxmaT00LHBpPTFlMyxfaT0vXFwvXFwqW14qXSpcXCorKFteLypdW14qXSpcXCorKSpcXC8vZ2ltLG1pPS9AaW1wb3J0W147XSo7L2dpbSx2aT0vKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qPyg/Ols7XFxuXXwkKS9naW0seWk9Lyg/Ol5bXjtcXC1cXHN9XSspPy0tW147e31dKj86W157fTtdKj97W159XSo/fSg/Ols7XFxuXXwkKT8vZ2ltLGdpPS9AYXBwbHlcXHMqXFwoP1teKTtdKlxcKT9cXHMqKD86WztcXG5dfCQpPy9naW0sYmk9L1teOzpdKj86W147XSo/dmFyXFwoW147XSpcXCkoPzpbO1xcbl18JCk/L2dpbSx3aT0vXkBbXlxcc10qa2V5ZnJhbWVzLyxFaT0vXFxzKy9nLE5pPSEod2luZG93LlNoYWR5RE9NJiZ3aW5kb3cuU2hhZHlET00uaW5Vc2UpO2Z1bmN0aW9uIENpKHQpe2NpPSghdHx8IXQuc2hpbWNzc3Byb3BlcnRpZXMpJiYoTml8fCEobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC82MDF8RWRnZVxcLzE1Lyl8fCF3aW5kb3cuQ1NTfHwhQ1NTLnN1cHBvcnRzfHwhQ1NTLnN1cHBvcnRzKFwiYm94LXNoYWRvd1wiLFwiMCAwIDAgdmFyKC0tZm9vKVwiKSkpfXdpbmRvdy5TaGFkeUNTUyYmdm9pZCAwIT09d2luZG93LlNoYWR5Q1NTLmNzc0J1aWxkJiYodWk9d2luZG93LlNoYWR5Q1NTLmNzc0J1aWxkKTt2YXIgU2k9ISghd2luZG93LlNoYWR5Q1NTfHwhd2luZG93LlNoYWR5Q1NTLmRpc2FibGVSdW50aW1lKTt3aW5kb3cuU2hhZHlDU1MmJnZvaWQgMCE9PXdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3M/Y2k9d2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzczp3aW5kb3cuU2hhZHlDU1M/KENpKHdpbmRvdy5TaGFkeUNTUyksd2luZG93LlNoYWR5Q1NTPXZvaWQgMCk6Q2kod2luZG93LldlYkNvbXBvbmVudHMmJndpbmRvdy5XZWJDb21wb25lbnRzLmZsYWdzKTt2YXIgVGk9Y2ksT2k9Lyg/Ol58WztcXHN7XVxccyopKC0tW1xcdy1dKj8pXFxzKjpcXHMqKD86KCg/OicoPzpcXFxcJ3wuKSo/J3xcIig/OlxcXFxcInwuKSo/XCJ8XFwoW14pXSo/XFwpfFtefTt7XSkrKXxcXHsoW159XSopXFx9KD86KD89WztcXHN9XSl8JCkpL2dpLHhpPS8oPzpefFxcVyspQGFwcGx5XFxzKlxcKD8oW14pO1xcbl0qKVxcKT8vZ2ksTWk9LygtLVtcXHctXSspXFxzKihbOiw7KV18JCkvZ2ksRGk9LyhhbmltYXRpb25cXHMqOil8KGFuaW1hdGlvbi1uYW1lXFxzKjopLyxMaT0vQG1lZGlhXFxzKC4qKS8sQWk9L1xce1tefV0qXFx9L2csUGk9bmV3IFNldDtmdW5jdGlvbiBqaSh0LGUpe3JldHVybiB0PyhcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9bGkodCkpLGUmJlJpKHQsZSksZnVuY3Rpb24gdChlLG4sbyl7bz12b2lkIDA9PT1vP1wiXCI6bzt2YXIgaT1cIlwiO2lmKGUuY3NzVGV4dHx8ZS5ydWxlcyl7dmFyIHIsYT1lLnJ1bGVzO2lmKChyPWEpJiYocj0hKChyPWFbMF0pJiZyLnNlbGVjdG9yJiYwPT09ci5zZWxlY3Rvci5pbmRleE9mKFwiLS1cIikpKSxyKXtyPTA7Zm9yKHZhciBzPWEubGVuZ3RoLGw9dm9pZCAwO3I8cyYmKGw9YVtyXSk7cisrKWk9dChsLG4saSl9ZWxzZSBuP249ZS5jc3NUZXh0Om49KG49KG49ZS5jc3NUZXh0KS5yZXBsYWNlKHZpLFwiXCIpLnJlcGxhY2UoeWksXCJcIikpLnJlcGxhY2UoZ2ksXCJcIikucmVwbGFjZShiaSxcIlwiKSwoaT1uLnRyaW0oKSkmJihpPVwiICBcIitpK1wiXFxuXCIpfXJldHVybiBpJiYoZS5zZWxlY3RvciYmKG8rPWUuc2VsZWN0b3IrXCIge1xcblwiKSxvKz1pLGUuc2VsZWN0b3ImJihvKz1cIn1cXG5cXG5cIikpLG99KHQsVGkpKTpcIlwifWZ1bmN0aW9uIGtpKHQpe3JldHVybiF0Ll9fY3NzUnVsZXMmJnQudGV4dENvbnRlbnQmJih0Ll9fY3NzUnVsZXM9bGkodC50ZXh0Q29udGVudCkpLHQuX19jc3NSdWxlc3x8bnVsbH1mdW5jdGlvbiBGaSh0KXtyZXR1cm4hIXQucGFyZW50JiZ0LnBhcmVudC50eXBlPT09ZGl9ZnVuY3Rpb24gUmkodCxlLG4sbyl7aWYodCl7dmFyIGk9ITEscj10LnR5cGU7aWYobyYmcj09PWZpKXt2YXIgYT10LnNlbGVjdG9yLm1hdGNoKExpKTthJiYod2luZG93Lm1hdGNoTWVkaWEoYVsxXSkubWF0Y2hlc3x8KGk9ITApKX1pZihyPT09aGk/ZSh0KTpuJiZyPT09ZGk/bih0KTpyPT09cGkmJihpPSEwKSwodD10LnJ1bGVzKSYmIWkpZm9yKGk9MCxyPXQubGVuZ3RoLGE9dm9pZCAwO2k8ciYmKGE9dFtpXSk7aSsrKVJpKGEsZSxuLG8pfX1mdW5jdGlvbiBWaSh0LGUsbixvKXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIGUmJmkuc2V0QXR0cmlidXRlKFwic2NvcGVcIixlKSxpLnRleHRDb250ZW50PXQsVWkoaSxuLG8pLGl9dmFyIElpPW51bGw7ZnVuY3Rpb24gSGkodCl7dD1kb2N1bWVudC5jcmVhdGVDb21tZW50KFwiIFNoYWR5IERPTSBzdHlsZXMgZm9yIFwiK3QrXCIgXCIpO3ZhciBlPWRvY3VtZW50LmhlYWQ7cmV0dXJuIGUuaW5zZXJ0QmVmb3JlKHQsKElpP0lpLm5leHRTaWJsaW5nOm51bGwpfHxlLmZpcnN0Q2hpbGQpLElpPXR9ZnVuY3Rpb24gVWkodCxlLG4peyhlPWV8fGRvY3VtZW50LmhlYWQpLmluc2VydEJlZm9yZSh0LG4mJm4ubmV4dFNpYmxpbmd8fGUuZmlyc3RDaGlsZCksSWk/dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihJaSk9PT1Ob2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyYmKElpPXQpOklpPXR9ZnVuY3Rpb24gQmkodCxlKXtmb3IodmFyIG49MCxvPXQubGVuZ3RoO2U8bztlKyspaWYoXCIoXCI9PT10W2VdKW4rKztlbHNlIGlmKFwiKVwiPT09dFtlXSYmMD09LS1uKXJldHVybiBlO3JldHVybi0xfWZ1bmN0aW9uIHppKHQsZSl7Tmk/dC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGUpOndpbmRvdy5TaGFkeURPTS5uYXRpdmVNZXRob2RzLnNldEF0dHJpYnV0ZS5jYWxsKHQsXCJjbGFzc1wiLGUpfXZhciBxaT13aW5kb3cuU2hhZHlET00mJndpbmRvdy5TaGFkeURPTS53cmFwfHxmdW5jdGlvbih0KXtyZXR1cm4gdH07ZnVuY3Rpb24gV2kodCl7dmFyIGU9dC5sb2NhbE5hbWUsbj1cIlwiO3JldHVybiBlPy0xPGUuaW5kZXhPZihcIi1cIil8fChuPWUsZT10LmdldEF0dHJpYnV0ZSYmdC5nZXRBdHRyaWJ1dGUoXCJpc1wiKXx8XCJcIik6KGU9dC5pcyxuPXQuZXh0ZW5kcykse2lzOmUsY2E6bn19ZnVuY3Rpb24gR2kodCl7Zm9yKHZhciBlPVtdLG49XCJcIixvPTA7MDw9byYmbzx0Lmxlbmd0aDtvKyspaWYoXCIoXCI9PT10W29dKXt2YXIgaT1CaSh0LG8pO24rPXQuc2xpY2UobyxpKzEpLG89aX1lbHNlXCIsXCI9PT10W29dPyhlLnB1c2gobiksbj1cIlwiKTpuKz10W29dO3JldHVybiBuJiZlLnB1c2gobiksZX1mdW5jdGlvbiBaaSh0KXtpZih2b2lkIDAhPT11aSlyZXR1cm4gdWk7aWYodm9pZCAwPT09dC5fX2Nzc0J1aWxkKXt2YXIgZT10LmdldEF0dHJpYnV0ZShcImNzcy1idWlsZFwiKTtpZihlKXQuX19jc3NCdWlsZD1lO2Vsc2V7aWYoXCJcIiE9PShlPShlPVwidGVtcGxhdGVcIj09PXQubG9jYWxOYW1lP3QuY29udGVudC5maXJzdENoaWxkOnQuZmlyc3RDaGlsZClpbnN0YW5jZW9mIENvbW1lbnQmJlwiY3NzLWJ1aWxkXCI9PT0oZT1lLnRleHRDb250ZW50LnRyaW0oKS5zcGxpdChcIjpcIikpWzBdP2VbMV06XCJcIikpe3ZhciBuPVwidGVtcGxhdGVcIj09PXQubG9jYWxOYW1lP3QuY29udGVudC5maXJzdENoaWxkOnQuZmlyc3RDaGlsZDtuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobil9dC5fX2Nzc0J1aWxkPWV9fXJldHVybiB0Ll9fY3NzQnVpbGR8fFwiXCJ9ZnVuY3Rpb24gWWkodCl7cmV0dXJuIShcIlwiPT09KHQ9dm9pZCAwPT09dD9cIlwiOnQpfHwhVGkpJiYoTmk/XCJzaGFkb3dcIj09PXQ6XCJzaGFkeVwiPT09dCl9ZnVuY3Rpb24gWGkoKXt9ZnVuY3Rpb24gSmkodCxlLG4pe3ZhciBvO2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmbihlKSxvPVwidGVtcGxhdGVcIj09PWUubG9jYWxOYW1lPyhlLmNvbnRlbnR8fGUuX2NvbnRlbnR8fGUpLmNoaWxkTm9kZXM6ZS5jaGlsZHJlbnx8ZS5jaGlsZE5vZGVzKWZvcihlPTA7ZTxvLmxlbmd0aDtlKyspSmkodCxvW2VdLG4pfWZ1bmN0aW9uIEtpKHQsZSxuKXtpZihlKWlmKHQuY2xhc3NMaXN0KW4/KHQuY2xhc3NMaXN0LnJlbW92ZShcInN0eWxlLXNjb3BlXCIpLHQuY2xhc3NMaXN0LnJlbW92ZShlKSk6KHQuY2xhc3NMaXN0LmFkZChcInN0eWxlLXNjb3BlXCIpLHQuY2xhc3NMaXN0LmFkZChlKSk7ZWxzZSBpZih0LmdldEF0dHJpYnV0ZSl7dmFyIG89dC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtuP28mJnppKHQsZT1vLnJlcGxhY2UoXCJzdHlsZS1zY29wZVwiLFwiXCIpLnJlcGxhY2UoZSxcIlwiKSk6emkodCwobz9vK1wiIFwiOlwiXCIpK1wic3R5bGUtc2NvcGUgXCIrZSl9fWZ1bmN0aW9uICRpKHQsZSxuKXtKaShwcix0LChmdW5jdGlvbih0KXtLaSh0LGUsITApLEtpKHQsbil9KSl9ZnVuY3Rpb24gUWkodCxlKXtKaShwcix0LChmdW5jdGlvbih0KXtLaSh0LGV8fFwiXCIsITApfSkpfWZ1bmN0aW9uIHRyKHQsZSxuLG8saSl7dmFyIHI9cHI7cmV0dXJuXCJcIj09PShpPXZvaWQgMD09PWk/XCJcIjppKSYmKE5pfHxcInNoYWR5XCI9PT0odm9pZCAwPT09bz9cIlwiOm8pP2k9amkoZSxuKTppPWZ1bmN0aW9uKHQsZSxuLG8saSl7dmFyIHI9ZXIobixvKTtyZXR1cm4gbj1uP1wiLlwiK246XCJcIixqaShlLChmdW5jdGlvbihlKXtlLmN8fChlLnNlbGVjdG9yPWUudz1ucih0LGUsdC5iLG4sciksZS5jPSEwKSxpJiZpKGUsbixyKX0pKX0ocixlLCh0PVdpKHQpKS5pcyx0LmNhLG4pK1wiXFxuXFxuXCIpLGkudHJpbSgpfWZ1bmN0aW9uIGVyKHQsZSl7cmV0dXJuIGU/XCJbaXM9XCIrdCtcIl1cIjp0fWZ1bmN0aW9uIG5yKHQsZSxuLG8saSl7dmFyIHI9R2koZS5zZWxlY3Rvcik7aWYoIUZpKGUpKXtlPTA7Zm9yKHZhciBhPXIubGVuZ3RoLHM9dm9pZCAwO2U8YSYmKHM9cltlXSk7ZSsrKXJbZV09bi5jYWxsKHQscyxvLGkpfXJldHVybiByLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuISF0fSkpLmpvaW4oXCIsXCIpfWZ1bmN0aW9uIG9yKHQpe3JldHVybiB0LnJlcGxhY2UoYXIsKGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4tMTxuLmluZGV4T2YoXCIrXCIpP249bi5yZXBsYWNlKC9cXCsvZyxcIl9fX1wiKTotMTxuLmluZGV4T2YoXCJfX19cIikmJihuPW4ucmVwbGFjZSgvX19fL2csXCIrXCIpKSxcIjpcIitlK1wiKFwiK24rXCIpXCJ9KSl9ZnVuY3Rpb24gaXIodCxlKXt0PXQuc3BsaXQoLyhcXFsuKz9cXF0pLyk7Zm9yKHZhciBuPVtdLG89MDtvPHQubGVuZ3RoO28rKylpZigxPT1vJTIpbi5wdXNoKHRbb10pO2Vsc2V7dmFyIGk9dFtvXTtcIlwiPT09aSYmbz09PXQubGVuZ3RoLTF8fCgoaT1pLnNwbGl0KFwiOlwiKSlbMF0rPWUsbi5wdXNoKGkuam9pbihcIjpcIikpKX1yZXR1cm4gbi5qb2luKFwiXCIpfWZ1bmN0aW9uIHJyKHQpe1wiOnJvb3RcIj09PXQuc2VsZWN0b3ImJih0LnNlbGVjdG9yPVwiaHRtbFwiKX1YaS5wcm90b3R5cGUuYj1mdW5jdGlvbih0LGUsbil7dmFyIG89ITE7dD10LnRyaW0oKTt2YXIgaT1hci50ZXN0KHQpO2kmJih0PW9yKHQ9dC5yZXBsYWNlKGFyLChmdW5jdGlvbih0LGUsbil7cmV0dXJuXCI6XCIrZStcIihcIituLnJlcGxhY2UoL1xccy9nLFwiXCIpK1wiKVwifSkpKSk7dmFyIHI9ZnIudGVzdCh0KTtpZihyKXt2YXIgYT1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj1bXTtlPXQubWF0Y2goZnIpOyl7dmFyIG89ZS5pbmRleCxpPUJpKHQsbyk7aWYoLTE9PT1pKXRocm93IEVycm9yKGUuaW5wdXQrXCIgc2VsZWN0b3IgbWlzc2luZyAnKSdcIik7ZT10LnNsaWNlKG8saSsxKSx0PXQucmVwbGFjZShlLFwi7oCAXCIpLG4ucHVzaChlKX1yZXR1cm57d2E6dCxtYXRjaGVzOm59fSh0KTt0PWEud2EsYT1hLm1hdGNoZXN9cmV0dXJuIHQ9KHQ9dC5yZXBsYWNlKGNyLFwiOmhvc3QgJDFcIikpLnJlcGxhY2Uoc3IsKGZ1bmN0aW9uKHQsaSxyKXtyZXR1cm4gb3x8KHQ9ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9dC5pbmRleE9mKFwiOjpzbG90dGVkXCIpO2lmKDA8PXQuaW5kZXhPZihcIjpob3N0XCIpP3Q9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1hdGNoKHVyKTtyZXR1cm4obj1uJiZuWzJdLnRyaW0oKXx8XCJcIik/blswXS5tYXRjaChscik/dC5yZXBsYWNlKHVyLChmdW5jdGlvbih0LG4sbyl7cmV0dXJuIGUrb30pKTpuLnNwbGl0KGxyKVswXT09PWU/bjpcInNob3VsZF9ub3RfbWF0Y2hcIjp0LnJlcGxhY2UoXCI6aG9zdFwiLGUpfSh0LG8pOjAhPT1pJiYodD1uP2lyKHQsbik6dCksbj0hMSwwPD1pJiYoZT1cIlwiLG49ITApLG4pe3ZhciByPSEwO24mJih0PXQucmVwbGFjZShociwoZnVuY3Rpb24odCxlKXtyZXR1cm5cIiA+IFwiK2V9KSkpfXJldHVybnt2YWx1ZTp0LFFhOmUsc3RvcDpyfX0ocixpLGUsbiksbz1vfHx0LnN0b3AsaT10LlFhLHI9dC52YWx1ZSksaStyfSkpLHImJih0PWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5zcGxpdChcIu6AgFwiKTtyZXR1cm4gZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gdCtlK25bbysxXX0pLG5bMF0pfSh0LGEpKSxpJiYodD1vcih0KSksdC5yZXBsYWNlKGRyLChmdW5jdGlvbih0LGUsbixvKXtyZXR1cm4nW2Rpcj1cIicrbisnXCJdICcrZStvK1wiLCBcIitlKydbZGlyPVwiJytuKydcIl0nK299KSl9LFhpLnByb3RvdHlwZS5jPWZ1bmN0aW9uKHQpe3JldHVybiB0Lm1hdGNoKFwiOmhvc3RcIik/XCJcIjp0Lm1hdGNoKFwiOjpzbG90dGVkXCIpP3RoaXMuYih0LFwiOm5vdCguc3R5bGUtc2NvcGUpXCIpOmlyKHQudHJpbSgpLFwiOm5vdCguc3R5bGUtc2NvcGUpXCIpfSxyLk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFhpLnByb3RvdHlwZSx7YTp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJzdHlsZS1zY29wZVwifX19KTt2YXIgYXI9LzoobnRoWy1cXHddKylcXCgoW14pXSspXFwpLyxzcj0vKF58W1xccz4rfl0rKSgoPzpcXFsuKz9cXF18W15cXHM+K349W10pKykvZyxscj0vW1suOiMqXS8sY3I9L14oOjpzbG90dGVkKS8sdXI9Lyg6aG9zdCkoPzpcXCgoKD86XFwoW14pKF0qXFwpfFteKShdKikrPylcXCkpLyxocj0vKD86OjpzbG90dGVkKSg/OlxcKCgoPzpcXChbXikoXSpcXCl8W14pKF0qKSs/KVxcKSkvLGRyPS8oLiopOmRpclxcKCg/OihsdHJ8cnRsKSlcXCkoLiopLyxmcj0vOig/Om1hdGNoZXN8YW55fC0oPzp3ZWJraXR8bW96KS1hbnkpLyxwcj1uZXcgWGk7ZnVuY3Rpb24gX3IodCxlLG4sbyxpKXt0aGlzLkg9dHx8bnVsbCx0aGlzLmI9ZXx8bnVsbCx0aGlzLnRhPW58fFtdLHRoaXMuRj1udWxsLHRoaXMuY3NzQnVpbGQ9aXx8XCJcIix0aGlzLmNhPW98fFwiXCIsdGhpcy5hPXRoaXMuRz10aGlzLkw9bnVsbH1mdW5jdGlvbiBtcih0KXtyZXR1cm4gdD90Ll9fc3R5bGVJbmZvOm51bGx9ZnVuY3Rpb24gdnIodCxlKXtyZXR1cm4gdC5fX3N0eWxlSW5mbz1lfWZ1bmN0aW9uIHlyKHQpe3ZhciBlPXRoaXMubWF0Y2hlc3x8dGhpcy5tYXRjaGVzU2VsZWN0b3J8fHRoaXMubW96TWF0Y2hlc1NlbGVjdG9yfHx0aGlzLm1zTWF0Y2hlc1NlbGVjdG9yfHx0aGlzLm9NYXRjaGVzU2VsZWN0b3J8fHRoaXMud2Via2l0TWF0Y2hlc1NlbGVjdG9yO3JldHVybiBlJiZlLmNhbGwodGhpcyx0KX1fci5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkh9LF9yLnByb3RvdHlwZS5fZ2V0U3R5bGVSdWxlcz1fci5wcm90b3R5cGUuYzt2YXIgZ3I9Lzpob3N0XFxzKj5cXHMqLyxicj1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKFwiVHJpZGVudFwiKTtmdW5jdGlvbiB3cigpe31mdW5jdGlvbiBFcih0KXtpZighdC52KXt2YXIgZT17fSxuPXt9O05yKHQsbikmJihlLks9bix0LnJ1bGVzPW51bGwpLGUuY3NzVGV4dD10LnBhcnNlZENzc1RleHQucmVwbGFjZShBaSxcIlwiKS5yZXBsYWNlKE9pLFwiXCIpLHQudj1lfX1mdW5jdGlvbiBOcih0LGUpe3ZhciBuPXQudjtpZighbil7bj10LnBhcnNlZENzc1RleHQ7Zm9yKHZhciBvO3Q9T2kuZXhlYyhuKTspXCJpbmhlcml0XCI9PT0obz0odFsyXXx8dFszXSkudHJpbSgpKSYmXCJ1bnNldFwiPT09b3x8KGVbdFsxXS50cmltKCldPW8pLG89ITA7cmV0dXJuIG99aWYobi5LKXJldHVybiBPYmplY3QuYXNzaWduKGUsbi5LKSwhMH1mdW5jdGlvbiBDcih0LGUsbil7cmV0dXJuIGUmJihlPTA8PWUuaW5kZXhPZihcIjtcIik/U3IodCxlLG4pOmZ1bmN0aW9uIHQoZSxuKXt2YXIgbz1lLmluZGV4T2YoXCJ2YXIoXCIpO2lmKC0xPT09bylyZXR1cm4gbihlLFwiXCIsXCJcIixcIlwiKTt2YXIgaT1CaShlLG8rMykscj1lLnN1YnN0cmluZyhvKzQsaSk7cmV0dXJuIG89ZS5zdWJzdHJpbmcoMCxvKSxlPXQoZS5zdWJzdHJpbmcoaSsxKSxuKSwtMT09PShpPXIuaW5kZXhPZihcIixcIikpP24obyxyLnRyaW0oKSxcIlwiLGUpOm4obyxyLnN1YnN0cmluZygwLGkpLnRyaW0oKSxyLnN1YnN0cmluZyhpKzEpLnRyaW0oKSxlKX0oZSwoZnVuY3Rpb24oZSxvLGkscil7cmV0dXJuIG8/KChvPUNyKHQsbltvXSxuKSkmJlwiaW5pdGlhbFwiIT09bz9cImFwcGx5LXNoaW0taW5oZXJpdFwiPT09byYmKG89XCJpbmhlcml0XCIpOm89Q3IodCxuW2ldfHxpLG4pfHxpLGUrKG98fFwiXCIpK3IpOmUrcn0pKSksZSYmZS50cmltKCl8fFwiXCJ9ZnVuY3Rpb24gU3IodCxlLG4pe2U9ZS5zcGxpdChcIjtcIik7Zm9yKHZhciBvLGkscj0wO3I8ZS5sZW5ndGg7cisrKWlmKG89ZVtyXSl7aWYoeGkubGFzdEluZGV4PTAsaT14aS5leGVjKG8pKW89Q3IodCxuW2lbMV1dLG4pO2Vsc2UgaWYoLTEhPT0oaT1vLmluZGV4T2YoXCI6XCIpKSl7dmFyIGE9by5zdWJzdHJpbmcoaSk7YT1Dcih0LGE9YS50cmltKCksbil8fGEsbz1vLnN1YnN0cmluZygwLGkpK2F9ZVtyXT1vJiZvLmxhc3RJbmRleE9mKFwiO1wiKT09PW8ubGVuZ3RoLTE/by5zbGljZSgwLC0xKTpvfHxcIlwifXJldHVybiBlLmpvaW4oXCI7XCIpfWZ1bmN0aW9uIFRyKHQsZSxuKXt2YXIgbz17fSxpPXt9O3JldHVybiBSaShlLChmdW5jdGlvbihlKXshZnVuY3Rpb24odCxlLG4sbyl7aWYoZS52fHxFcihlKSxlLnYuSyl7dmFyIGk9V2kodCk7dD1pLmlzLGk9aS5jYSxpPXQ/ZXIodCxpKTpcImh0bWxcIjt2YXIgcj1lLnBhcnNlZFNlbGVjdG9yLGE9ISFyLm1hdGNoKGdyKXx8XCJodG1sXCI9PT1pJiYtMTxyLmluZGV4T2YoXCJodG1sXCIpLHM9MD09PXIuaW5kZXhPZihcIjpob3N0XCIpJiYhYTtcInNoYWR5XCI9PT1uJiYocz0hKGE9cj09PWkrXCIgPiAqLlwiK2l8fC0xIT09ci5pbmRleE9mKFwiaHRtbFwiKSkmJjA9PT1yLmluZGV4T2YoaSkpLChhfHxzKSYmKG49aSxzJiYoZS53fHwoZS53PW5yKHByLGUscHIuYix0P1wiLlwiK3Q6XCJcIixpKSksbj1lLnd8fGkpLGEmJlwiaHRtbFwiPT09aSYmKG49ZS53fHxlLkopLG8oe3dhOm4sWGE6cyxtYjphfSkpfX0odCxlLG4sKGZ1bmN0aW9uKG4pe3lyLmNhbGwodC5fZWxlbWVudHx8dCxuLndhKSYmKG4uWGE/TnIoZSxvKTpOcihlLGkpKX0pKX0pLG51bGwsITApLHtjYjppLFZhOm99fWZ1bmN0aW9uIE9yKHQsZSxuLG8pe3ZhciBpPVdpKGUpLHI9ZXIoaS5pcyxpLmNhKSxhPW5ldyBSZWdFeHAoXCIoPzpefFteLiNbOl0pXCIrKGUuZXh0ZW5kcz9cIlxcXFxcIityLnNsaWNlKDAsLTEpK1wiXFxcXF1cIjpyKStcIigkfFsuOltcXFxccz4rfl0pXCIpLHM9bXIoZSk7aT1zLkgscz1zLmNzc0J1aWxkO3ZhciBsPWZ1bmN0aW9uKHQsZSl7dD10LmI7dmFyIG49e307aWYoIU5pJiZ0KWZvcih2YXIgbz0wLGk9dFtvXTtvPHQubGVuZ3RoO2k9dFsrK29dKXt2YXIgcj1pLGE9ZTtyLmw9bmV3IFJlZ0V4cChcIlxcXFxiXCIrci5rZXlmcmFtZXNOYW1lK1wiKD8hXFxcXEJ8LSlcIixcImdcIiksci5hPXIua2V5ZnJhbWVzTmFtZStcIi1cIithLHIudz1yLnd8fHIuc2VsZWN0b3Isci5zZWxlY3Rvcj1yLncucmVwbGFjZShyLmtleWZyYW1lc05hbWUsci5hKSxuW2kua2V5ZnJhbWVzTmFtZV09eHIoaSl9cmV0dXJuIG59KGksbyk7cmV0dXJuIHRyKGUsaSwoZnVuY3Rpb24oZSl7dmFyIGk9XCJcIjtpZihlLnZ8fEVyKGUpLGUudi5jc3NUZXh0JiYoaT1Tcih0LGUudi5jc3NUZXh0LG4pKSxlLmNzc1RleHQ9aSwhTmkmJiFGaShlKSYmZS5jc3NUZXh0KXt2YXIgcz1pPWUuY3NzVGV4dDtpZihudWxsPT1lLkRhJiYoZS5EYT1EaS50ZXN0KGkpKSxlLkRhKWlmKG51bGw9PWUua2EpZm9yKHZhciBjIGluIGUua2E9W10sbClpIT09KHM9KHM9bFtjXSkoaSkpJiYoaT1zLGUua2EucHVzaChjKSk7ZWxzZXtmb3IoYz0wO2M8ZS5rYS5sZW5ndGg7KytjKWk9KHM9bFtlLmthW2NdXSkoaSk7cz1pfWUuY3NzVGV4dD1zLGUudz1lLnd8fGUuc2VsZWN0b3IsaT1cIi5cIitvLHM9MDtmb3IodmFyIHU9KGM9R2koZS53KSkubGVuZ3RoLGg9dm9pZCAwO3M8dSYmKGg9Y1tzXSk7cysrKWNbc109aC5tYXRjaChhKT9oLnJlcGxhY2UocixpKTppK1wiIFwiK2g7ZS5zZWxlY3Rvcj1jLmpvaW4oXCIsXCIpfX0pLHMpfWZ1bmN0aW9uIHhyKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKHQubCx0LmEpfX1mdW5jdGlvbiBNcih0LGUpe3ZhciBuPURyLG89a2kodCk7dC50ZXh0Q29udGVudD1qaShvLChmdW5jdGlvbih0KXt2YXIgbz10LmNzc1RleHQ9dC5wYXJzZWRDc3NUZXh0O3QudiYmdC52LmNzc1RleHQmJihvPW8ucmVwbGFjZSh2aSxcIlwiKS5yZXBsYWNlKHlpLFwiXCIpLHQuY3NzVGV4dD1TcihuLG8sZSkpfSkpfXIuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3IucHJvdG90eXBlLHthOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIngtc2NvcGVcIn19fSk7dmFyIERyPW5ldyB3cixMcj17fSxBcj13aW5kb3cuY3VzdG9tRWxlbWVudHM7aWYoQXImJiFOaSYmIVNpKXt2YXIgUHI9QXIuZGVmaW5lO0FyLmRlZmluZT1mdW5jdGlvbih0LGUsbil7THJbdF18fChMclt0XT1IaSh0KSksUHIuY2FsbChBcix0LGUsbil9fWZ1bmN0aW9uIGpyKCl7dGhpcy5jYWNoZT17fX1mdW5jdGlvbiBrcigpe31qci5wcm90b3R5cGUuc3RvcmU9ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9dGhpcy5jYWNoZVt0XXx8W107aS5wdXNoKHtLOmUsc3R5bGVFbGVtZW50Om4sRzpvfSksMTAwPGkubGVuZ3RoJiZpLnNoaWZ0KCksdGhpcy5jYWNoZVt0XT1pfTt2YXIgRnI9bmV3IFJlZ0V4cChwci5hK1wiXFxcXHMqKFteXFxcXHNdKilcIik7ZnVuY3Rpb24gUnIodCl7cmV0dXJuKHQ9KHQuY2xhc3NMaXN0JiZ0LmNsYXNzTGlzdC52YWx1ZT90LmNsYXNzTGlzdC52YWx1ZTp0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKS5tYXRjaChGcikpP3RbMV06XCJcIn1mdW5jdGlvbiBWcih0KXt2YXIgZT1xaSh0KS5nZXRSb290Tm9kZSgpO3JldHVybiBlPT09dHx8ZT09PXQub3duZXJEb2N1bWVudD9cIlwiOih0PWUuaG9zdCk/V2kodCkuaXM6XCJcIn1mdW5jdGlvbiBJcih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXTtpZihuLnRhcmdldCE9PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmbi50YXJnZXQhPT1kb2N1bWVudC5oZWFkKWZvcih2YXIgbz0wO288bi5hZGRlZE5vZGVzLmxlbmd0aDtvKyspe3ZhciBpPW4uYWRkZWROb2Rlc1tvXTtpZihpLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciByPWkuZ2V0Um9vdE5vZGUoKSxhPVJyKGkpO2lmKGEmJnI9PT1pLm93bmVyRG9jdW1lbnQmJihcInN0eWxlXCIhPT1pLmxvY2FsTmFtZSYmXCJ0ZW1wbGF0ZVwiIT09aS5sb2NhbE5hbWV8fFwiXCI9PT1aaShpKSkpUWkoaSxhKTtlbHNlIGlmKHIgaW5zdGFuY2VvZiBTaGFkb3dSb290KWZvcigocj1WcihpKSkhPT1hJiYkaShpLGEsciksaT13aW5kb3cuU2hhZHlET00ubmF0aXZlTWV0aG9kcy5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoaSxcIjpub3QoLlwiK3ByLmErXCIpXCIpLGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIHM9VnIocj1pW2FdKTtzJiZLaShyLHMpfX19fX1pZighKE5pfHx3aW5kb3cuU2hhZHlET00mJndpbmRvdy5TaGFkeURPTS5oYW5kbGVzRHluYW1pY1Njb3BpbmcpKXt2YXIgSHI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoSXIpLFVyPWZ1bmN0aW9uKHQpe0hyLm9ic2VydmUodCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX07aWYod2luZG93LmN1c3RvbUVsZW1lbnRzJiYhd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2spVXIoZG9jdW1lbnQpO2Vsc2V7dmFyIEJyPWZ1bmN0aW9uKCl7VXIoZG9jdW1lbnQuYm9keSl9O3dpbmRvdy5IVE1MSW1wb3J0cz93aW5kb3cuSFRNTEltcG9ydHMud2hlblJlYWR5KEJyKTpyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7aWYoXCJsb2FkaW5nXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlKXt2YXIgdD1mdW5jdGlvbigpe0JyKCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIix0KX07ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIix0KX1lbHNlIEJyKCl9KSl9a3I9ZnVuY3Rpb24oKXtJcihIci50YWtlUmVjb3JkcygpKX19dmFyIHpyPXt9LHFyPVByb21pc2UucmVzb2x2ZSgpO2Z1bmN0aW9uIFdyKHQpeyh0PXpyW3RdKSYmKHQuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uPXQuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9ufHwwLHQuX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9uPXQuX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9ufHwwLHQuX2FwcGx5U2hpbU5leHRWZXJzaW9uPSh0Ll9hcHBseVNoaW1OZXh0VmVyc2lvbnx8MCkrMSl9ZnVuY3Rpb24gR3IodCl7cmV0dXJuIHQuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uPT09dC5fYXBwbHlTaGltTmV4dFZlcnNpb259dmFyIFpyPXt9LFlyPW5ldyBqcjtmdW5jdGlvbiBYcigpe3RoaXMuWT17fSx0aGlzLmM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3ZhciB0PW5ldyBzaTt0LnJ1bGVzPVtdLHRoaXMubD12cih0aGlzLmMsbmV3IF9yKHQpKSx0aGlzLko9ITEsdGhpcy5hPXRoaXMuYj1udWxsfWZ1bmN0aW9uIEpyKHQpe3ZhciBlPVdpKHQpLG49ZS5pcztlPWUuY2E7dmFyIG89THJbbl18fG51bGwsaT16cltuXTtpZihpKXJldHVybiB2cih0LGU9bmV3IF9yKG49aS5fc3R5bGVBc3QsbyxpLmEsZSxpPVppKGkpKSksZX1mdW5jdGlvbiBLcih0KXtpZighdC5iJiZ3aW5kb3cuU2hhZHlDU1MmJndpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW0pe3QuYj13aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltLHQuYi5pbnZhbGlkQ2FsbGJhY2s9V3I7dmFyIGU9ITB9ZWxzZSBlPSExO3JldHVybiBmdW5jdGlvbih0KXshdC5hJiZ3aW5kb3cuU2hhZHlDU1MmJndpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSYmKHQuYT13aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UsdC5hLnRyYW5zZm9ybUNhbGxiYWNrPWZ1bmN0aW9uKGUpe3QuSGEoZSl9LHQuYS52YWxpZGF0ZUNhbGxiYWNrPWZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbigpeyh0LmEuZW5xdWV1ZWR8fHQuSikmJnQuZmx1c2hDdXN0b21TdHlsZXMoKX0pKX0pfSh0KSxlfWZ1bmN0aW9uICRyKHQsZSxuKXt2YXIgbz1XaShlKS5pcztpZihuLkYpe3ZhciBpLHI9bi5GO2ZvcihpIGluIHIpbnVsbD09PWk/ZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShpKTplLnN0eWxlLnNldFByb3BlcnR5KGkscltpXSl9IShyPXpyW29dKSYmZSE9PXQuY3x8ciYmXCJcIiE9PVppKHIpfHwhcnx8IXIuX3N0eWxlfHxHcihyKXx8KChHcihyKXx8ci5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb24hPT1yLl9hcHBseVNoaW1OZXh0VmVyc2lvbikmJihLcih0KSx0LmImJnQuYi50cmFuc2Zvcm1SdWxlcyhyLl9zdHlsZUFzdCxvKSxyLl9zdHlsZS50ZXh0Q29udGVudD10cihlLG4uSCksZnVuY3Rpb24odCl7dC5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb249dC5fYXBwbHlTaGltTmV4dFZlcnNpb24sdC5fdmFsaWRhdGluZ3x8KHQuX3ZhbGlkYXRpbmc9ITAscXIudGhlbigoZnVuY3Rpb24oKXt0Ll9hcHBseVNoaW1DdXJyZW50VmVyc2lvbj10Ll9hcHBseVNoaW1OZXh0VmVyc2lvbix0Ll92YWxpZGF0aW5nPSExfSkpKX0ocikpLE5pJiYodD1lLnNoYWRvd1Jvb3QpJiYodD10LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVwiKSkmJih0LnRleHRDb250ZW50PXRyKGUsbi5IKSksbi5IPXIuX3N0eWxlQXN0KX1mdW5jdGlvbiBRcih0LGUpe3JldHVybihlPXFpKGUpLmdldFJvb3ROb2RlKCkuaG9zdCk/bXIoZSl8fEpyKGUpP2U6UXIodCxlKTp0LmN9ZnVuY3Rpb24gdGEodCxlLG4pe3ZhciBvPVFyKHQsZSksaT1tcihvKSxyPWkuTDtmb3IodmFyIGEgaW4gbz09PXQuY3x8cnx8KHRhKHQsbyxpKSxyPWkuTCksdD1PYmplY3QuY3JlYXRlKHJ8fG51bGwpLG89VHIoZSxuLkgsbi5jc3NCdWlsZCksZT1mdW5jdGlvbih0LGUpe3ZhciBuPXt9LG89W107cmV0dXJuIFJpKHQsKGZ1bmN0aW9uKHQpe3Qudnx8RXIodCk7dmFyIGk9dC53fHx0LnBhcnNlZFNlbGVjdG9yO2UmJnQudi5LJiZpJiZ5ci5jYWxsKGUsaSkmJihOcih0LG4pLHQ9dC5pbmRleCxpPXBhcnNlSW50KHQvMzIsMTApLG9baV09KG9baV18fDApfDE8PHQlMzIpfSksbnVsbCwhMCkse0s6bixrZXk6b319KGkuSCxlKS5LLE9iamVjdC5hc3NpZ24odCxvLlZhLGUsby5jYiksZT1uLkYpKChpPWVbYV0pfHwwPT09aSkmJih0W2FdPWkpO2ZvcihhPURyLGU9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksaT0wO2k8ZS5sZW5ndGg7aSsrKXRbbz1lW2ldXT1DcihhLHRbb10sdCk7bi5MPXR9KG49WHIucHJvdG90eXBlKS5mbHVzaD1mdW5jdGlvbigpe2tyKCl9LG4uVGE9ZnVuY3Rpb24odCl7cmV0dXJuIGtpKHQpfSxuLmhiPWZ1bmN0aW9uKHQpe3JldHVybiBqaSh0KX0sbi5wcmVwYXJlVGVtcGxhdGU9ZnVuY3Rpb24odCxlLG4pe3RoaXMucHJlcGFyZVRlbXBsYXRlRG9tKHQsZSksdGhpcy5wcmVwYXJlVGVtcGxhdGVTdHlsZXModCxlLG4pfSxuLnByZXBhcmVUZW1wbGF0ZVN0eWxlcz1mdW5jdGlvbih0LGUsbil7aWYoIXQuX3ByZXBhcmVkJiYhU2kpe05pfHxMcltlXXx8KExyW2VdPUhpKGUpKSx0Ll9wcmVwYXJlZD0hMCx0Lm5hbWU9ZSx0LmV4dGVuZHM9bix6cltlXT10O3ZhciBvPVppKHQpLGk9WWkobyk7bj17aXM6ZSxleHRlbmRzOm59O2Zvcih2YXIgcj1bXSxhPXQuY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVcIikscz0wO3M8YS5sZW5ndGg7cysrKXt2YXIgbD1hW3NdO2lmKGwuaGFzQXR0cmlidXRlKFwic2hhZHktdW5zY29wZWRcIikpe2lmKCFOaSl7dmFyIGM9bC50ZXh0Q29udGVudDtpZighUGkuaGFzKGMpKXtQaS5hZGQoYyk7dmFyIHU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3Uuc2V0QXR0cmlidXRlKFwic2hhZHktdW5zY29wZWRcIixcIlwiKSx1LnRleHRDb250ZW50PWMsZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh1KX1sLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobCl9fWVsc2Ugci5wdXNoKGwudGV4dENvbnRlbnQpLGwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKX1yPXIuam9pbihcIlwiKS50cmltKCkrKFpyW2VdfHxcIlwiKSxLcih0aGlzKSxpfHwoKGE9IW8pJiYoYT14aS50ZXN0KHIpfHxPaS50ZXN0KHIpLHhpLmxhc3RJbmRleD0wLE9pLmxhc3RJbmRleD0wKSxzPWxpKHIpLGEmJlRpJiZ0aGlzLmImJnRoaXMuYi50cmFuc2Zvcm1SdWxlcyhzLGUpLHQuX3N0eWxlQXN0PXMpLGE9W10sVGl8fChhPWZ1bmN0aW9uKHQpe3ZhciBlPXt9LG49W10sbz0wO2Zvcih2YXIgaSBpbiBSaSh0LChmdW5jdGlvbih0KXtFcih0KSx0LmluZGV4PW8rKyx0PXQudi5jc3NUZXh0O2Zvcih2YXIgbjtuPU1pLmV4ZWModCk7KXt2YXIgaT1uWzFdO1wiOlwiIT09blsyXSYmKGVbaV09ITApfX0pLChmdW5jdGlvbih0KXtuLnB1c2godCl9KSksdC5iPW4sdD1bXSxlKXQucHVzaChpKTtyZXR1cm4gdH0odC5fc3R5bGVBc3QpKSxhLmxlbmd0aCYmIVRpfHwocz1OaT90LmNvbnRlbnQ6bnVsbCxlPUxyW2VdfHxudWxsLG89KG89dHIobix0Ll9zdHlsZUFzdCxudWxsLG8saT9yOlwiXCIpKS5sZW5ndGg/VmkobyxuLmlzLHMsZSk6bnVsbCx0Ll9zdHlsZT1vKSx0LmE9YX19LG4uYWI9ZnVuY3Rpb24odCxlKXtacltlXT10LmpvaW4oXCIgXCIpfSxuLnByZXBhcmVUZW1wbGF0ZURvbT1mdW5jdGlvbih0LGUpe2lmKCFTaSl7dmFyIG49WmkodCk7Tml8fFwic2hhZHlcIj09PW58fHQuX2RvbVByZXBhcmVkfHwodC5fZG9tUHJlcGFyZWQ9ITAsZnVuY3Rpb24odCxlKXtKaShwcix0LChmdW5jdGlvbih0KXtLaSh0LGV8fFwiXCIpfSkpfSh0LmNvbnRlbnQsZSkpfX0sbi5mbHVzaEN1c3RvbVN0eWxlcz1mdW5jdGlvbigpe2lmKCFTaSl7dmFyIHQ9S3IodGhpcyk7aWYodGhpcy5hKXt2YXIgZT10aGlzLmEucHJvY2Vzc1N0eWxlcygpO2lmKCh0fHx0aGlzLmEuZW5xdWV1ZWQpJiYhWWkodGhpcy5sLmNzc0J1aWxkKSl7aWYoVGkpe2lmKCF0aGlzLmwuY3NzQnVpbGQpZm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49dGhpcy5hLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoZVt0XSk7aWYobiYmVGkmJnRoaXMuYil7dmFyIG89a2kobik7S3IodGhpcyksdGhpcy5iLnRyYW5zZm9ybVJ1bGVzKG8pLG4udGV4dENvbnRlbnQ9amkobyl9fX1lbHNle2ZvcihmdW5jdGlvbih0LGUpeyhlPWUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdC5hLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoZSl9KSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4hIXR9KSkpLnNvcnQoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuKHQ9ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KSkmTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc/MTp0Jk5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HPy0xOjB9KSksdC5sLkgucnVsZXM9ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBraSh0KX0pKX0odGhpcyxlKSx0YSh0aGlzLHRoaXMuYyx0aGlzLmwpLHQ9MDt0PGUubGVuZ3RoO3QrKykobj10aGlzLmEuZ2V0U3R5bGVGb3JDdXN0b21TdHlsZShlW3RdKSkmJk1yKG4sdGhpcy5sLkwpO3RoaXMuSiYmdGhpcy5zdHlsZURvY3VtZW50KCl9dGhpcy5hLmVucXVldWVkPSExfX19fSxuLnN0eWxlRWxlbWVudD1mdW5jdGlvbih0LGUpe2lmKFNpKXtpZihlKXttcih0KXx8dnIodCxuZXcgX3IobnVsbCkpO3ZhciBuPW1yKHQpO24uRj1uLkZ8fHt9LE9iamVjdC5hc3NpZ24obi5GLGUpLCRyKHRoaXMsdCxuKX19ZWxzZSBpZihuPW1yKHQpfHxKcih0KSlpZih0IT09dGhpcy5jJiYodGhpcy5KPSEwKSxlJiYobi5GPW4uRnx8e30sT2JqZWN0LmFzc2lnbihuLkYsZSkpLFRpKSRyKHRoaXMsdCxuKTtlbHNlIGlmKHRoaXMuZmx1c2goKSx0YSh0aGlzLHQsbiksbi50YSYmbi50YS5sZW5ndGgpe3ZhciBvO2U9V2kodCkuaXM7dDp7aWYobz1Zci5jYWNoZVtlXSlmb3IodmFyIGk9by5sZW5ndGgtMTswPD1pO2ktLSl7dmFyIHI9b1tpXTtlOntmb3IodmFyIGE9bi50YSxzPTA7czxhLmxlbmd0aDtzKyspe3ZhciBsPWFbc107aWYoci5LW2xdIT09bi5MW2xdKXthPSExO2JyZWFrIGV9fWE9ITB9aWYoYSl7bz1yO2JyZWFrIHR9fW89dm9pZCAwfWE9bz9vLnN0eWxlRWxlbWVudDpudWxsLGk9bi5HLChyPW8mJm8uRyl8fChyPWUrXCItXCIrKHI9dGhpcy5ZW2VdPSh0aGlzLllbZV18fDApKzEpKSxuLkc9cixyPW4uRyxzPURyLHM9YT9hLnRleHRDb250ZW50fHxcIlwiOk9yKHMsdCxuLkwscik7dmFyIGM9KGw9bXIodCkpLmE7YyYmIU5pJiZjIT09YSYmKGMuX3VzZUNvdW50LS0sMD49Yy5fdXNlQ291bnQmJmMucGFyZW50Tm9kZSYmYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpKSxOaT9sLmE/KGwuYS50ZXh0Q29udGVudD1zLGE9bC5hKTpzJiYoYT1WaShzLHIsdC5zaGFkb3dSb290LGwuYikpOmE/YS5wYXJlbnROb2RlfHwoYnImJi0xPHMuaW5kZXhPZihcIkBtZWRpYVwiKSYmKGEudGV4dENvbnRlbnQ9cyksVWkoYSxudWxsLGwuYikpOnMmJihhPVZpKHMscixudWxsLGwuYikpLGEmJihhLl91c2VDb3VudD1hLl91c2VDb3VudHx8MCxsLmEhPWEmJmEuX3VzZUNvdW50KyssbC5hPWEpLHI9YSxOaXx8KGE9bi5HLGw9cz10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiLGkmJihsPXMucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHMqeC1zY29wZVxcXFxzKlwiK2krXCJcXFxccypcIixcImdcIiksXCIgXCIpKSxzIT09KGwrPShsP1wiIFwiOlwiXCIpK1wieC1zY29wZSBcIithKSYmemkodCxsKSksb3x8WXIuc3RvcmUoZSxuLkwscixuLkcpfX0sbi5zdHlsZURvY3VtZW50PWZ1bmN0aW9uKHQpe3RoaXMuc3R5bGVTdWJ0cmVlKHRoaXMuYyx0KX0sbi5zdHlsZVN1YnRyZWU9ZnVuY3Rpb24odCxlKXt2YXIgbj1xaSh0KSxvPW4uc2hhZG93Um9vdCxpPXQ9PT10aGlzLmM7aWYoKG98fGkpJiZ0aGlzLnN0eWxlRWxlbWVudCh0LGUpLHQ9aT9uOm8pZm9yKHQ9QXJyYXkuZnJvbSh0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBxaSh0KS5zaGFkb3dSb290fSkpLGU9MDtlPHQubGVuZ3RoO2UrKyl0aGlzLnN0eWxlU3VidHJlZSh0W2VdKX0sbi5IYT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49WmkodCk7aWYobiE9PXRoaXMubC5jc3NCdWlsZCYmKHRoaXMubC5jc3NCdWlsZD1uKSwhWWkobikpe3ZhciBvPWtpKHQpO1JpKG8sKGZ1bmN0aW9uKHQpe2lmKE5pKXJyKHQpO2Vsc2V7dmFyIG89cHI7dC5zZWxlY3Rvcj10LnBhcnNlZFNlbGVjdG9yLHJyKHQpLHQuc2VsZWN0b3I9dC53PW5yKG8sdCxvLmMsdm9pZCAwLHZvaWQgMCl9VGkmJlwiXCI9PT1uJiYoS3IoZSksZS5iJiZlLmIudHJhbnNmb3JtUnVsZSh0KSl9KSksVGk/dC50ZXh0Q29udGVudD1qaShvKTp0aGlzLmwuSC5ydWxlcy5wdXNoKG8pfX0sbi5nZXRDb21wdXRlZFN0eWxlVmFsdWU9ZnVuY3Rpb24odCxlKXt2YXIgbjtyZXR1cm4gVGl8fChuPShtcih0KXx8bXIoUXIodGhpcyx0KSkpLkxbZV0pLChuPW58fHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpLmdldFByb3BlcnR5VmFsdWUoZSkpP24udHJpbSgpOlwiXCJ9LG4uZ2I9ZnVuY3Rpb24odCxlKXt2YXIgbixvPXFpKHQpLmdldFJvb3ROb2RlKCk7aWYobj1lPyhcInN0cmluZ1wiPT10eXBlb2YgZT9lOlN0cmluZyhlKSkuc3BsaXQoL1xccy8pOltdLCEoZT1vLmhvc3QmJm8uaG9zdC5sb2NhbE5hbWUpJiYobz10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpKSl7bz1vLnNwbGl0KC9cXHMvKTtmb3IodmFyIGk9MDtpPG8ubGVuZ3RoO2krKylpZihvW2ldPT09cHIuYSl7ZT1vW2krMV07YnJlYWt9fWUmJm4ucHVzaChwci5hLGUpLFRpfHwoZT1tcih0KSkmJmUuRyYmbi5wdXNoKERyLmEsZS5HKSx6aSh0LG4uam9pbihcIiBcIikpfSxuLk9hPWZ1bmN0aW9uKHQpe3JldHVybiBtcih0KX0sbi5mYj1mdW5jdGlvbih0LGUpe0tpKHQsZSl9LG4uaWI9ZnVuY3Rpb24odCxlKXtLaSh0LGUsITApfSxuLmViPWZ1bmN0aW9uKHQpe3JldHVybiBWcih0KX0sbi5SYT1mdW5jdGlvbih0KXtyZXR1cm4gUnIodCl9LFhyLnByb3RvdHlwZS5mbHVzaD1Yci5wcm90b3R5cGUuZmx1c2gsWHIucHJvdG90eXBlLnByZXBhcmVUZW1wbGF0ZT1Yci5wcm90b3R5cGUucHJlcGFyZVRlbXBsYXRlLFhyLnByb3RvdHlwZS5zdHlsZUVsZW1lbnQ9WHIucHJvdG90eXBlLnN0eWxlRWxlbWVudCxYci5wcm90b3R5cGUuc3R5bGVEb2N1bWVudD1Yci5wcm90b3R5cGUuc3R5bGVEb2N1bWVudCxYci5wcm90b3R5cGUuc3R5bGVTdWJ0cmVlPVhyLnByb3RvdHlwZS5zdHlsZVN1YnRyZWUsWHIucHJvdG90eXBlLmdldENvbXB1dGVkU3R5bGVWYWx1ZT1Yci5wcm90b3R5cGUuZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlLFhyLnByb3RvdHlwZS5zZXRFbGVtZW50Q2xhc3M9WHIucHJvdG90eXBlLmdiLFhyLnByb3RvdHlwZS5fc3R5bGVJbmZvRm9yTm9kZT1Yci5wcm90b3R5cGUuT2EsWHIucHJvdG90eXBlLnRyYW5zZm9ybUN1c3RvbVN0eWxlRm9yRG9jdW1lbnQ9WHIucHJvdG90eXBlLkhhLFhyLnByb3RvdHlwZS5nZXRTdHlsZUFzdD1Yci5wcm90b3R5cGUuVGEsWHIucHJvdG90eXBlLnN0eWxlQXN0VG9TdHJpbmc9WHIucHJvdG90eXBlLmhiLFhyLnByb3RvdHlwZS5mbHVzaEN1c3RvbVN0eWxlcz1Yci5wcm90b3R5cGUuZmx1c2hDdXN0b21TdHlsZXMsWHIucHJvdG90eXBlLnNjb3BlTm9kZT1Yci5wcm90b3R5cGUuZmIsWHIucHJvdG90eXBlLnVuc2NvcGVOb2RlPVhyLnByb3RvdHlwZS5pYixYci5wcm90b3R5cGUuc2NvcGVGb3JOb2RlPVhyLnByb3RvdHlwZS5lYixYci5wcm90b3R5cGUuY3VycmVudFNjb3BlRm9yTm9kZT1Yci5wcm90b3R5cGUuUmEsWHIucHJvdG90eXBlLnByZXBhcmVBZG9wdGVkQ3NzVGV4dD1Yci5wcm90b3R5cGUuYWIsT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoWHIucHJvdG90eXBlLHtuYXRpdmVTaGFkb3c6e2dldDpmdW5jdGlvbigpe3JldHVybiBOaX19LG5hdGl2ZUNzczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFRpfX19KTt2YXIgZWEsbmEsb2E9bmV3IFhyO3dpbmRvdy5TaGFkeUNTUyYmKGVhPXdpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW0sbmE9d2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlKSx3aW5kb3cuU2hhZHlDU1M9e1Njb3BpbmdTaGltOm9hLHByZXBhcmVUZW1wbGF0ZTpmdW5jdGlvbih0LGUsbil7b2EuZmx1c2hDdXN0b21TdHlsZXMoKSxvYS5wcmVwYXJlVGVtcGxhdGUodCxlLG4pfSxwcmVwYXJlVGVtcGxhdGVEb206ZnVuY3Rpb24odCxlKXtvYS5wcmVwYXJlVGVtcGxhdGVEb20odCxlKX0scHJlcGFyZVRlbXBsYXRlU3R5bGVzOmZ1bmN0aW9uKHQsZSxuKXtvYS5mbHVzaEN1c3RvbVN0eWxlcygpLG9hLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0LGUsbil9LHN0eWxlU3VidHJlZTpmdW5jdGlvbih0LGUpe29hLmZsdXNoQ3VzdG9tU3R5bGVzKCksb2Euc3R5bGVTdWJ0cmVlKHQsZSl9LHN0eWxlRWxlbWVudDpmdW5jdGlvbih0KXtvYS5mbHVzaEN1c3RvbVN0eWxlcygpLG9hLnN0eWxlRWxlbWVudCh0KX0sc3R5bGVEb2N1bWVudDpmdW5jdGlvbih0KXtvYS5mbHVzaEN1c3RvbVN0eWxlcygpLG9hLnN0eWxlRG9jdW1lbnQodCl9LGZsdXNoQ3VzdG9tU3R5bGVzOmZ1bmN0aW9uKCl7b2EuZmx1c2hDdXN0b21TdHlsZXMoKX0sZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG9hLmdldENvbXB1dGVkU3R5bGVWYWx1ZSh0LGUpfSxuYXRpdmVDc3M6VGksbmF0aXZlU2hhZG93Ok5pLGNzc0J1aWxkOnVpLGRpc2FibGVSdW50aW1lOlNpfSxlYSYmKHdpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW09ZWEpLG5hJiYod2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlPW5hKSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3JldHVyblwiXCI9PXQmJihyLmNhbGwodGhpcyksdGhpcy5oPSEwKSx0LnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gbih0KXt2YXIgZT10LmNoYXJDb2RlQXQoMCk7cmV0dXJuIDMyPGUmJjEyNz5lJiYtMT09WzM0LDM1LDYwLDYyLDYzLDk2XS5pbmRleE9mKGUpP3Q6ZW5jb2RlVVJJQ29tcG9uZW50KHQpfWZ1bmN0aW9uIG8odCl7dmFyIGU9dC5jaGFyQ29kZUF0KDApO3JldHVybiAzMjxlJiYxMjc+ZSYmLTE9PVszNCwzNSw2MCw2Miw5Nl0uaW5kZXhPZihlKT90OmVuY29kZVVSSUNvbXBvbmVudCh0KX1mdW5jdGlvbiBpKHQsaSxhKXtmdW5jdGlvbiBzKHQpe3YucHVzaCh0KX12YXIgbD1pfHxcInNjaGVtZSBzdGFydFwiLGY9MCxwPVwiXCIsXz0hMSxtPSExLHY9W107dDpmb3IoOyhudWxsIT10W2YtMV18fDA9PWYpJiYhdGhpcy5oOyl7dmFyIHk9dFtmXTtzd2l0Y2gobCl7Y2FzZVwic2NoZW1lIHN0YXJ0XCI6aWYoIXl8fCFoLnRlc3QoeSkpe2lmKGkpe3MoXCJJbnZhbGlkIHNjaGVtZS5cIik7YnJlYWsgdH1wPVwiXCIsbD1cIm5vIHNjaGVtZVwiO2NvbnRpbnVlfXArPXkudG9Mb3dlckNhc2UoKSxsPVwic2NoZW1lXCI7YnJlYWs7Y2FzZVwic2NoZW1lXCI6aWYoeSYmZC50ZXN0KHkpKXArPXkudG9Mb3dlckNhc2UoKTtlbHNle2lmKFwiOlwiIT15KXtpZihpKXtudWxsIT15JiZzKFwiQ29kZSBwb2ludCBub3QgYWxsb3dlZCBpbiBzY2hlbWU6IFwiK3kpO2JyZWFrIHR9cD1cIlwiLGY9MCxsPVwibm8gc2NoZW1lXCI7Y29udGludWV9aWYodGhpcy5nPXAscD1cIlwiLGkpYnJlYWsgdDt2b2lkIDAhPT1jW3RoaXMuZ10mJih0aGlzLkE9ITApLGw9XCJmaWxlXCI9PXRoaXMuZz9cInJlbGF0aXZlXCI6dGhpcy5BJiZhJiZhLmc9PXRoaXMuZz9cInJlbGF0aXZlIG9yIGF1dGhvcml0eVwiOnRoaXMuQT9cImF1dGhvcml0eSBmaXJzdCBzbGFzaFwiOlwic2NoZW1lIGRhdGFcIn1icmVhaztjYXNlXCJzY2hlbWUgZGF0YVwiOlwiP1wiPT15Pyh0aGlzLm89XCI/XCIsbD1cInF1ZXJ5XCIpOlwiI1wiPT15Pyh0aGlzLnU9XCIjXCIsbD1cImZyYWdtZW50XCIpOm51bGwhPXkmJlwiXFx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXkmJih0aGlzLnBhKz1uKHkpKTticmVhaztjYXNlXCJubyBzY2hlbWVcIjppZihhJiZ2b2lkIDAhPT1jW2EuZ10pe2w9XCJyZWxhdGl2ZVwiO2NvbnRpbnVlfXMoXCJNaXNzaW5nIHNjaGVtZS5cIiksci5jYWxsKHRoaXMpLHRoaXMuaD0hMDticmVhaztjYXNlXCJyZWxhdGl2ZSBvciBhdXRob3JpdHlcIjppZihcIi9cIiE9eXx8XCIvXCIhPXRbZisxXSl7cyhcIkV4cGVjdGVkIC8sIGdvdDogXCIreSksbD1cInJlbGF0aXZlXCI7Y29udGludWV9bD1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2JyZWFrO2Nhc2VcInJlbGF0aXZlXCI6aWYodGhpcy5BPSEwLFwiZmlsZVwiIT10aGlzLmcmJih0aGlzLmc9YS5nKSxudWxsPT15KXt0aGlzLmk9YS5pLHRoaXMubT1hLm0sdGhpcy5qPWEuai5zbGljZSgpLHRoaXMubz1hLm8sdGhpcy5zPWEucyx0aGlzLmY9YS5mO2JyZWFrIHR9aWYoXCIvXCI9PXl8fFwiXFxcXFwiPT15KVwiXFxcXFwiPT15JiZzKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGw9XCJyZWxhdGl2ZSBzbGFzaFwiO2Vsc2UgaWYoXCI/XCI9PXkpdGhpcy5pPWEuaSx0aGlzLm09YS5tLHRoaXMuaj1hLmouc2xpY2UoKSx0aGlzLm89XCI/XCIsdGhpcy5zPWEucyx0aGlzLmY9YS5mLGw9XCJxdWVyeVwiO2Vsc2V7aWYoXCIjXCIhPXkpe2w9dFtmKzFdO3ZhciBnPXRbZisyXTsoXCJmaWxlXCIhPXRoaXMuZ3x8IWgudGVzdCh5KXx8XCI6XCIhPWwmJlwifFwiIT1sfHxudWxsIT1nJiZcIi9cIiE9ZyYmXCJcXFxcXCIhPWcmJlwiP1wiIT1nJiZcIiNcIiE9ZykmJih0aGlzLmk9YS5pLHRoaXMubT1hLm0sdGhpcy5zPWEucyx0aGlzLmY9YS5mLHRoaXMuaj1hLmouc2xpY2UoKSx0aGlzLmoucG9wKCkpLGw9XCJyZWxhdGl2ZSBwYXRoXCI7Y29udGludWV9dGhpcy5pPWEuaSx0aGlzLm09YS5tLHRoaXMuaj1hLmouc2xpY2UoKSx0aGlzLm89YS5vLHRoaXMudT1cIiNcIix0aGlzLnM9YS5zLHRoaXMuZj1hLmYsbD1cImZyYWdtZW50XCJ9YnJlYWs7Y2FzZVwicmVsYXRpdmUgc2xhc2hcIjppZihcIi9cIiE9eSYmXCJcXFxcXCIhPXkpe1wiZmlsZVwiIT10aGlzLmcmJih0aGlzLmk9YS5pLHRoaXMubT1hLm0sdGhpcy5zPWEucyx0aGlzLmY9YS5mKSxsPVwicmVsYXRpdmUgcGF0aFwiO2NvbnRpbnVlfVwiXFxcXFwiPT15JiZzKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGw9XCJmaWxlXCI9PXRoaXMuZz9cImZpbGUgaG9zdFwiOlwiYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7YnJlYWs7Y2FzZVwiYXV0aG9yaXR5IGZpcnN0IHNsYXNoXCI6aWYoXCIvXCIhPXkpe3MoXCJFeHBlY3RlZCAnLycsIGdvdDogXCIreSksbD1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2NvbnRpbnVlfWw9XCJhdXRob3JpdHkgc2Vjb25kIHNsYXNoXCI7YnJlYWs7Y2FzZVwiYXV0aG9yaXR5IHNlY29uZCBzbGFzaFwiOmlmKGw9XCJhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIixcIi9cIiE9eSl7cyhcIkV4cGVjdGVkICcvJywgZ290OiBcIit5KTtjb250aW51ZX1icmVhaztjYXNlXCJhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIjppZihcIi9cIiE9eSYmXCJcXFxcXCIhPXkpe2w9XCJhdXRob3JpdHlcIjtjb250aW51ZX1zKFwiRXhwZWN0ZWQgYXV0aG9yaXR5LCBnb3Q6IFwiK3kpO2JyZWFrO2Nhc2VcImF1dGhvcml0eVwiOmlmKFwiQFwiPT15KXtmb3IoXyYmKHMoXCJAIGFscmVhZHkgc2Vlbi5cIikscCs9XCIlNDBcIiksXz0hMCx5PTA7eTxwLmxlbmd0aDt5KyspXCJcXHRcIj09KGc9cFt5XSl8fFwiXFxuXCI9PWd8fFwiXFxyXCI9PWc/cyhcIkludmFsaWQgd2hpdGVzcGFjZSBpbiBhdXRob3JpdHkuXCIpOlwiOlwiPT1nJiZudWxsPT09dGhpcy5mP3RoaXMuZj1cIlwiOihnPW4oZyksbnVsbCE9PXRoaXMuZj90aGlzLmYrPWc6dGhpcy5zKz1nKTtwPVwiXCJ9ZWxzZXtpZihudWxsPT15fHxcIi9cIj09eXx8XCJcXFxcXCI9PXl8fFwiP1wiPT15fHxcIiNcIj09eSl7Zi09cC5sZW5ndGgscD1cIlwiLGw9XCJob3N0XCI7Y29udGludWV9cCs9eX1icmVhaztjYXNlXCJmaWxlIGhvc3RcIjppZihudWxsPT15fHxcIi9cIj09eXx8XCJcXFxcXCI9PXl8fFwiP1wiPT15fHxcIiNcIj09eSl7MiE9cC5sZW5ndGh8fCFoLnRlc3QocFswXSl8fFwiOlwiIT1wWzFdJiZcInxcIiE9cFsxXT8oMCE9cC5sZW5ndGgmJih0aGlzLmk9ZS5jYWxsKHRoaXMscCkscD1cIlwiKSxsPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiKTpsPVwicmVsYXRpdmUgcGF0aFwiO2NvbnRpbnVlfVwiXFx0XCI9PXl8fFwiXFxuXCI9PXl8fFwiXFxyXCI9PXk/cyhcIkludmFsaWQgd2hpdGVzcGFjZSBpbiBmaWxlIGhvc3QuXCIpOnArPXk7YnJlYWs7Y2FzZVwiaG9zdFwiOmNhc2VcImhvc3RuYW1lXCI6aWYoXCI6XCIhPXl8fG0pe2lmKG51bGw9PXl8fFwiL1wiPT15fHxcIlxcXFxcIj09eXx8XCI/XCI9PXl8fFwiI1wiPT15KXtpZih0aGlzLmk9ZS5jYWxsKHRoaXMscCkscD1cIlwiLGw9XCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCIsaSlicmVhayB0O2NvbnRpbnVlfVwiXFx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXk/KFwiW1wiPT15P209ITA6XCJdXCI9PXkmJihtPSExKSxwKz15KTpzKFwiSW52YWxpZCBjb2RlIHBvaW50IGluIGhvc3QvaG9zdG5hbWU6IFwiK3kpfWVsc2UgaWYodGhpcy5pPWUuY2FsbCh0aGlzLHApLHA9XCJcIixsPVwicG9ydFwiLFwiaG9zdG5hbWVcIj09aSlicmVhayB0O2JyZWFrO2Nhc2VcInBvcnRcIjppZigvWzAtOV0vLnRlc3QoeSkpcCs9eTtlbHNle2lmKG51bGw9PXl8fFwiL1wiPT15fHxcIlxcXFxcIj09eXx8XCI/XCI9PXl8fFwiI1wiPT15fHxpKXtpZihcIlwiIT1wJiYoKHA9cGFyc2VJbnQocCwxMCkpIT1jW3RoaXMuZ10mJih0aGlzLm09cCtcIlwiKSxwPVwiXCIpLGkpYnJlYWsgdDtsPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiO2NvbnRpbnVlfVwiXFx0XCI9PXl8fFwiXFxuXCI9PXl8fFwiXFxyXCI9PXk/cyhcIkludmFsaWQgY29kZSBwb2ludCBpbiBwb3J0OiBcIit5KTooci5jYWxsKHRoaXMpLHRoaXMuaD0hMCl9YnJlYWs7Y2FzZVwicmVsYXRpdmUgcGF0aCBzdGFydFwiOmlmKFwiXFxcXFwiPT15JiZzKFwiJ1xcXFwnIG5vdCBhbGxvd2VkIGluIHBhdGguXCIpLGw9XCJyZWxhdGl2ZSBwYXRoXCIsXCIvXCIhPXkmJlwiXFxcXFwiIT15KWNvbnRpbnVlO2JyZWFrO2Nhc2VcInJlbGF0aXZlIHBhdGhcIjpudWxsIT15JiZcIi9cIiE9eSYmXCJcXFxcXCIhPXkmJihpfHxcIj9cIiE9eSYmXCIjXCIhPXkpP1wiXFx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXkmJihwKz1uKHkpKTooXCJcXFxcXCI9PXkmJnMoXCJcXFxcIG5vdCBhbGxvd2VkIGluIHJlbGF0aXZlIHBhdGguXCIpLChnPXVbcC50b0xvd2VyQ2FzZSgpXSkmJihwPWcpLFwiLi5cIj09cD8odGhpcy5qLnBvcCgpLFwiL1wiIT15JiZcIlxcXFxcIiE9eSYmdGhpcy5qLnB1c2goXCJcIikpOlwiLlwiPT1wJiZcIi9cIiE9eSYmXCJcXFxcXCIhPXk/dGhpcy5qLnB1c2goXCJcIik6XCIuXCIhPXAmJihcImZpbGVcIj09dGhpcy5nJiYwPT10aGlzLmoubGVuZ3RoJiYyPT1wLmxlbmd0aCYmaC50ZXN0KHBbMF0pJiZcInxcIj09cFsxXSYmKHA9cFswXStcIjpcIiksdGhpcy5qLnB1c2gocCkpLHA9XCJcIixcIj9cIj09eT8odGhpcy5vPVwiP1wiLGw9XCJxdWVyeVwiKTpcIiNcIj09eSYmKHRoaXMudT1cIiNcIixsPVwiZnJhZ21lbnRcIikpO2JyZWFrO2Nhc2VcInF1ZXJ5XCI6aXx8XCIjXCIhPXk/bnVsbCE9eSYmXCJcXHRcIiE9eSYmXCJcXG5cIiE9eSYmXCJcXHJcIiE9eSYmKHRoaXMubys9byh5KSk6KHRoaXMudT1cIiNcIixsPVwiZnJhZ21lbnRcIik7YnJlYWs7Y2FzZVwiZnJhZ21lbnRcIjpudWxsIT15JiZcIlxcdFwiIT15JiZcIlxcblwiIT15JiZcIlxcclwiIT15JiYodGhpcy51Kz15KX1mKyt9fWZ1bmN0aW9uIHIoKXt0aGlzLnM9dGhpcy5wYT10aGlzLmc9XCJcIix0aGlzLmY9bnVsbCx0aGlzLm09dGhpcy5pPVwiXCIsdGhpcy5qPVtdLHRoaXMudT10aGlzLm89XCJcIix0aGlzLkE9dGhpcy5oPSExfWZ1bmN0aW9uIGEodCxlKXt2b2lkIDA9PT1lfHxlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoU3RyaW5nKGUpKSksdGhpcy5hPXQsci5jYWxsKHRoaXMpLGkuY2FsbCh0aGlzLHRoaXMuYS5yZXBsYWNlKC9eWyBcXHRcXHJcXG5cXGZdK3xbIFxcdFxcclxcblxcZl0rJC9nLFwiXCIpLG51bGwsZSl9dmFyIHM9ITE7dHJ5e3ZhciBsPW5ldyBVUkwoXCJiXCIsXCJodHRwOi8vYVwiKTtsLnBhdGhuYW1lPVwiYyUyMGRcIixzPVwiaHR0cDovL2EvYyUyMGRcIj09PWwuaHJlZn1jYXRjaCh0KXt9aWYoIXMpe3ZhciBjPU9iamVjdC5jcmVhdGUobnVsbCk7Yy5mdHA9MjEsYy5maWxlPTAsYy5nb3BoZXI9NzAsYy5odHRwPTgwLGMuaHR0cHM9NDQzLGMud3M9ODAsYy53c3M9NDQzO3ZhciB1PU9iamVjdC5jcmVhdGUobnVsbCk7dVtcIiUyZVwiXT1cIi5cIix1W1wiLiUyZVwiXT1cIi4uXCIsdVtcIiUyZS5cIl09XCIuLlwiLHVbXCIlMmUlMmVcIl09XCIuLlwiO3ZhciBoPS9bYS16QS1aXS8sZD0vW2EtekEtWjAtOVxcK1xcLVxcLl0vO2EucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhyZWZ9LGdldCBocmVmKCl7aWYodGhpcy5oKXJldHVybiB0aGlzLmE7dmFyIHQ9XCJcIjtyZXR1cm5cIlwiPT10aGlzLnMmJm51bGw9PXRoaXMuZnx8KHQ9dGhpcy5zKyhudWxsIT10aGlzLmY/XCI6XCIrdGhpcy5mOlwiXCIpK1wiQFwiKSx0aGlzLnByb3RvY29sKyh0aGlzLkE/XCIvL1wiK3QrdGhpcy5ob3N0OlwiXCIpK3RoaXMucGF0aG5hbWUrdGhpcy5vK3RoaXMudX0sc2V0IGhyZWYodCl7ci5jYWxsKHRoaXMpLGkuY2FsbCh0aGlzLHQpfSxnZXQgcHJvdG9jb2woKXtyZXR1cm4gdGhpcy5nK1wiOlwifSxzZXQgcHJvdG9jb2wodCl7dGhpcy5ofHxpLmNhbGwodGhpcyx0K1wiOlwiLFwic2NoZW1lIHN0YXJ0XCIpfSxnZXQgaG9zdCgpe3JldHVybiB0aGlzLmg/XCJcIjp0aGlzLm0/dGhpcy5pK1wiOlwiK3RoaXMubTp0aGlzLml9LHNldCBob3N0KHQpeyF0aGlzLmgmJnRoaXMuQSYmaS5jYWxsKHRoaXMsdCxcImhvc3RcIil9LGdldCBob3N0bmFtZSgpe3JldHVybiB0aGlzLml9LHNldCBob3N0bmFtZSh0KXshdGhpcy5oJiZ0aGlzLkEmJmkuY2FsbCh0aGlzLHQsXCJob3N0bmFtZVwiKX0sZ2V0IHBvcnQoKXtyZXR1cm4gdGhpcy5tfSxzZXQgcG9ydCh0KXshdGhpcy5oJiZ0aGlzLkEmJmkuY2FsbCh0aGlzLHQsXCJwb3J0XCIpfSxnZXQgcGF0aG5hbWUoKXtyZXR1cm4gdGhpcy5oP1wiXCI6dGhpcy5BP1wiL1wiK3RoaXMuai5qb2luKFwiL1wiKTp0aGlzLnBhfSxzZXQgcGF0aG5hbWUodCl7IXRoaXMuaCYmdGhpcy5BJiYodGhpcy5qPVtdLGkuY2FsbCh0aGlzLHQsXCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCIpKX0sZ2V0IHNlYXJjaCgpe3JldHVybiB0aGlzLmh8fCF0aGlzLm98fFwiP1wiPT10aGlzLm8/XCJcIjp0aGlzLm99LHNldCBzZWFyY2godCl7IXRoaXMuaCYmdGhpcy5BJiYodGhpcy5vPVwiP1wiLFwiP1wiPT10WzBdJiYodD10LnNsaWNlKDEpKSxpLmNhbGwodGhpcyx0LFwicXVlcnlcIikpfSxnZXQgaGFzaCgpe3JldHVybiB0aGlzLmh8fCF0aGlzLnV8fFwiI1wiPT10aGlzLnU/XCJcIjp0aGlzLnV9LHNldCBoYXNoKHQpe3RoaXMuaHx8KHQ/KHRoaXMudT1cIiNcIixcIiNcIj09dFswXSYmKHQ9dC5zbGljZSgxKSksaS5jYWxsKHRoaXMsdCxcImZyYWdtZW50XCIpKTp0aGlzLnU9XCJcIil9LGdldCBvcmlnaW4oKXt2YXIgdDtpZih0aGlzLmh8fCF0aGlzLmcpcmV0dXJuXCJcIjtzd2l0Y2godGhpcy5nKXtjYXNlXCJkYXRhXCI6Y2FzZVwiZmlsZVwiOmNhc2VcImphdmFzY3JpcHRcIjpjYXNlXCJtYWlsdG9cIjpyZXR1cm5cIm51bGxcIn1yZXR1cm4odD10aGlzLmhvc3QpP3RoaXMuZytcIjovL1wiK3Q6XCJcIn19O3ZhciBmPXQuVVJMO2YmJihhLmNyZWF0ZU9iamVjdFVSTD1mdW5jdGlvbih0KXtyZXR1cm4gZi5jcmVhdGVPYmplY3RVUkwuYXBwbHkoZixhcmd1bWVudHMpfSxhLnJldm9rZU9iamVjdFVSTD1mdW5jdGlvbih0KXtmLnJldm9rZU9iamVjdFVSTCh0KX0pLHQuVVJMPWF9fSh3aW5kb3cpLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsXCJiYXNlVVJJXCIpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsXCJiYXNlVVJJXCIse2dldDpmdW5jdGlvbigpe3ZhciB0PSh0aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMpLnF1ZXJ5U2VsZWN0b3IoXCJiYXNlW2hyZWZdXCIpO3JldHVybiB0JiZ0LmhyZWZ8fHdpbmRvdy5sb2NhdGlvbi5ocmVmfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH0pO3ZhciBpYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7aWEudGV4dENvbnRlbnQ9XCJib2R5IHt0cmFuc2l0aW9uOiBvcGFjaXR5IGVhc2UtaW4gMC4yczsgfSBcXG5ib2R5W3VucmVzb2x2ZWRdIHtvcGFjaXR5OiAwOyBkaXNwbGF5OiBibG9jazsgb3ZlcmZsb3c6IGhpZGRlbjsgcG9zaXRpb246IHJlbGF0aXZlOyB9IFxcblwiO3ZhciByYT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKTtyYS5pbnNlcnRCZWZvcmUoaWEscmEuZmlyc3RDaGlsZCk7dmFyIGFhPXdpbmRvdy5jdXN0b21FbGVtZW50cyxzYT0hMSxsYT1udWxsO2Z1bmN0aW9uIGNhKCl7d2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQuYm9vdHN0cmFwJiZ3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAod2luZG93LmRvY3VtZW50KSxsYSYmbGEoKSxzYT0hMCx3aW5kb3cuV2ViQ29tcG9uZW50cy5yZWFkeT0hMCxkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcIldlYkNvbXBvbmVudHNSZWFkeVwiLHtidWJibGVzOiEwfSkpfWFhLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2smJmFhLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2soKGZ1bmN0aW9uKHQpe2xhPXQsc2EmJnQoKX0pKSxcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlPyh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixjYSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsKGZ1bmN0aW9uKCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsY2EpLGNhKCl9KSkpOmNhKCl9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLG4oMiksbig3KS5zZXRJbW1lZGlhdGUpfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKHQpe3ZhciBvPXZvaWQgMCE9PXQmJnR8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmfHx3aW5kb3csaT1GdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7ZnVuY3Rpb24gcih0LGUpe3RoaXMuX2lkPXQsdGhpcy5fY2xlYXJGbj1lfWUuc2V0VGltZW91dD1mdW5jdGlvbigpe3JldHVybiBuZXcgcihpLmNhbGwoc2V0VGltZW91dCxvLGFyZ3VtZW50cyksY2xlYXJUaW1lb3V0KX0sZS5zZXRJbnRlcnZhbD1mdW5jdGlvbigpe3JldHVybiBuZXcgcihpLmNhbGwoc2V0SW50ZXJ2YWwsbyxhcmd1bWVudHMpLGNsZWFySW50ZXJ2YWwpfSxlLmNsZWFyVGltZW91dD1lLmNsZWFySW50ZXJ2YWw9ZnVuY3Rpb24odCl7dCYmdC5jbG9zZSgpfSxyLnByb3RvdHlwZS51bnJlZj1yLnByb3RvdHlwZS5yZWY9ZnVuY3Rpb24oKXt9LHIucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy5fY2xlYXJGbi5jYWxsKG8sdGhpcy5faWQpfSxlLmVucm9sbD1mdW5jdGlvbih0LGUpe2NsZWFyVGltZW91dCh0Ll9pZGxlVGltZW91dElkKSx0Ll9pZGxlVGltZW91dD1lfSxlLnVuZW5yb2xsPWZ1bmN0aW9uKHQpe2NsZWFyVGltZW91dCh0Ll9pZGxlVGltZW91dElkKSx0Ll9pZGxlVGltZW91dD0tMX0sZS5fdW5yZWZBY3RpdmU9ZS5hY3RpdmU9ZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KHQuX2lkbGVUaW1lb3V0SWQpO3ZhciBlPXQuX2lkbGVUaW1lb3V0O2U+PTAmJih0Ll9pZGxlVGltZW91dElkPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5fb25UaW1lb3V0JiZ0Ll9vblRpbWVvdXQoKX0pLGUpKX0sbig4KSxlLnNldEltbWVkaWF0ZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5zZXRJbW1lZGlhdGV8fHZvaWQgMCE9PXQmJnQuc2V0SW1tZWRpYXRlfHx0aGlzJiZ0aGlzLnNldEltbWVkaWF0ZSxlLmNsZWFySW1tZWRpYXRlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLmNsZWFySW1tZWRpYXRlfHx2b2lkIDAhPT10JiZ0LmNsZWFySW1tZWRpYXRlfHx0aGlzJiZ0aGlzLmNsZWFySW1tZWRpYXRlfSkuY2FsbCh0aGlzLG4oMikpfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKHQsZSl7IWZ1bmN0aW9uKHQsbil7XCJ1c2Ugc3RyaWN0XCI7aWYoIXQuc2V0SW1tZWRpYXRlKXt2YXIgbyxpLHIsYSxzLGw9MSxjPXt9LHU9ITEsaD10LmRvY3VtZW50LGQ9T2JqZWN0LmdldFByb3RvdHlwZU9mJiZPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7ZD1kJiZkLnNldFRpbWVvdXQ/ZDp0LFwiW29iamVjdCBwcm9jZXNzXVwiPT09e30udG9TdHJpbmcuY2FsbCh0LnByb2Nlc3MpP289ZnVuY3Rpb24odCl7ZS5uZXh0VGljaygoZnVuY3Rpb24oKXtwKHQpfSkpfTohZnVuY3Rpb24oKXtpZih0LnBvc3RNZXNzYWdlJiYhdC5pbXBvcnRTY3JpcHRzKXt2YXIgZT0hMCxuPXQub25tZXNzYWdlO3JldHVybiB0Lm9ubWVzc2FnZT1mdW5jdGlvbigpe2U9ITF9LHQucG9zdE1lc3NhZ2UoXCJcIixcIipcIiksdC5vbm1lc3NhZ2U9bixlfX0oKT90Lk1lc3NhZ2VDaGFubmVsPygocj1uZXcgTWVzc2FnZUNoYW5uZWwpLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbih0KXtwKHQuZGF0YSl9LG89ZnVuY3Rpb24odCl7ci5wb3J0Mi5wb3N0TWVzc2FnZSh0KX0pOmgmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBoLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/KGk9aC5kb2N1bWVudEVsZW1lbnQsbz1mdW5jdGlvbih0KXt2YXIgZT1oLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtwKHQpLGUub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsaS5yZW1vdmVDaGlsZChlKSxlPW51bGx9LGkuYXBwZW5kQ2hpbGQoZSl9KTpvPWZ1bmN0aW9uKHQpe3NldFRpbWVvdXQocCwwLHQpfTooYT1cInNldEltbWVkaWF0ZSRcIitNYXRoLnJhbmRvbSgpK1wiJFwiLHM9ZnVuY3Rpb24oZSl7ZS5zb3VyY2U9PT10JiZcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYwPT09ZS5kYXRhLmluZGV4T2YoYSkmJnAoK2UuZGF0YS5zbGljZShhLmxlbmd0aCkpfSx0LmFkZEV2ZW50TGlzdGVuZXI/dC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLHMsITEpOnQuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIixzKSxvPWZ1bmN0aW9uKGUpe3QucG9zdE1lc3NhZ2UoYStlLFwiKlwiKX0pLGQuc2V0SW1tZWRpYXRlPWZ1bmN0aW9uKHQpe1wiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJih0PW5ldyBGdW5jdGlvbihcIlwiK3QpKTtmb3IodmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSksbj0wO248ZS5sZW5ndGg7bisrKWVbbl09YXJndW1lbnRzW24rMV07dmFyIGk9e2NhbGxiYWNrOnQsYXJnczplfTtyZXR1cm4gY1tsXT1pLG8obCksbCsrfSxkLmNsZWFySW1tZWRpYXRlPWZ9ZnVuY3Rpb24gZih0KXtkZWxldGUgY1t0XX1mdW5jdGlvbiBwKHQpe2lmKHUpc2V0VGltZW91dChwLDAsdCk7ZWxzZXt2YXIgZT1jW3RdO2lmKGUpe3U9ITA7dHJ5eyFmdW5jdGlvbih0KXt2YXIgZT10LmNhbGxiYWNrLG49dC5hcmdzO3N3aXRjaChuLmxlbmd0aCl7Y2FzZSAwOmUoKTticmVhaztjYXNlIDE6ZShuWzBdKTticmVhaztjYXNlIDI6ZShuWzBdLG5bMV0pO2JyZWFrO2Nhc2UgMzplKG5bMF0sblsxXSxuWzJdKTticmVhaztkZWZhdWx0OmUuYXBwbHkodm9pZCAwLG4pfX0oZSl9ZmluYWxseXtmKHQpLHU9ITF9fX19fShcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZj92b2lkIDA9PT10P3RoaXM6dDpzZWxmKX0pLmNhbGwodGhpcyxuKDIpLG4oOSkpfSxmdW5jdGlvbih0LGUpe3ZhciBuLG8saT10LmV4cG9ydHM9e307ZnVuY3Rpb24gcigpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gYSgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBzKHQpe2lmKG49PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KHQsMCk7aWYoKG49PT1yfHwhbikmJnNldFRpbWVvdXQpcmV0dXJuIG49c2V0VGltZW91dCxzZXRUaW1lb3V0KHQsMCk7dHJ5e3JldHVybiBuKHQsMCl9Y2F0Y2goZSl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCx0LDApfWNhdGNoKGUpe3JldHVybiBuLmNhbGwodGhpcyx0LDApfX19IWZ1bmN0aW9uKCl7dHJ5e249XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnJ9Y2F0Y2godCl7bj1yfXRyeXtvPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6YX1jYXRjaCh0KXtvPWF9fSgpO3ZhciBsLGM9W10sdT0hMSxoPS0xO2Z1bmN0aW9uIGQoKXt1JiZsJiYodT0hMSxsLmxlbmd0aD9jPWwuY29uY2F0KGMpOmg9LTEsYy5sZW5ndGgmJmYoKSl9ZnVuY3Rpb24gZigpe2lmKCF1KXt2YXIgdD1zKGQpO3U9ITA7Zm9yKHZhciBlPWMubGVuZ3RoO2U7KXtmb3IobD1jLGM9W107KytoPGU7KWwmJmxbaF0ucnVuKCk7aD0tMSxlPWMubGVuZ3RofWw9bnVsbCx1PSExLGZ1bmN0aW9uKHQpe2lmKG89PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dCh0KTtpZigobz09PWF8fCFvKSYmY2xlYXJUaW1lb3V0KXJldHVybiBvPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQodCk7dHJ5e28odCl9Y2F0Y2goZSl7dHJ5e3JldHVybiBvLmNhbGwobnVsbCx0KX1jYXRjaChlKXtyZXR1cm4gby5jYWxsKHRoaXMsdCl9fX0odCl9fWZ1bmN0aW9uIHAodCxlKXt0aGlzLmZ1bj10LHRoaXMuYXJyYXk9ZX1mdW5jdGlvbiBfKCl7fWkubmV4dFRpY2s9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspZVtuLTFdPWFyZ3VtZW50c1tuXTtjLnB1c2gobmV3IHAodCxlKSksMSE9PWMubGVuZ3RofHx1fHxzKGYpfSxwLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxpLnRpdGxlPVwiYnJvd3NlclwiLGkuYnJvd3Nlcj0hMCxpLmVudj17fSxpLmFyZ3Y9W10saS52ZXJzaW9uPVwiXCIsaS52ZXJzaW9ucz17fSxpLm9uPV8saS5hZGRMaXN0ZW5lcj1fLGkub25jZT1fLGkub2ZmPV8saS5yZW1vdmVMaXN0ZW5lcj1fLGkucmVtb3ZlQWxsTGlzdGVuZXJzPV8saS5lbWl0PV8saS5wcmVwZW5kTGlzdGVuZXI9XyxpLnByZXBlbmRPbmNlTGlzdGVuZXI9XyxpLmxpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm5bXX0saS5iaW5kaW5nPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxpLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxpLmNoZGlyPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0saS51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24ucihlKTt2YXIgbz1uKDEpLGk9ZnVuY3Rpb24odCxlLG4sbyl7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKGkscil7ZnVuY3Rpb24gYSh0KXt0cnl7bChvLm5leHQodCkpfWNhdGNoKHQpe3IodCl9fWZ1bmN0aW9uIHModCl7dHJ5e2woby50aHJvdyh0KSl9Y2F0Y2godCl7cih0KX19ZnVuY3Rpb24gbCh0KXt2YXIgZTt0LmRvbmU/aSh0LnZhbHVlKTooZT10LnZhbHVlLGUgaW5zdGFuY2VvZiBuP2U6bmV3IG4oKGZ1bmN0aW9uKHQpe3QoZSl9KSkpLnRoZW4oYSxzKX1sKChvPW8uYXBwbHkodCxlfHxbXSkpLm5leHQoKSl9KSl9LHI9ZnVuY3Rpb24odCxlKXt2YXIgbixvLGkscixhPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiByPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYocltTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxyO2Z1bmN0aW9uIHMocil7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihyKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7YTspdHJ5e2lmKG49MSxvJiYoaT0yJnJbMF0/by5yZXR1cm46clswXT9vLnRocm93fHwoKGk9by5yZXR1cm4pJiZpLmNhbGwobyksMCk6by5uZXh0KSYmIShpPWkuY2FsbChvLHJbMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChvPTAsaSYmKHI9WzImclswXSxpLnZhbHVlXSksclswXSl7Y2FzZSAwOmNhc2UgMTppPXI7YnJlYWs7Y2FzZSA0OnJldHVybiBhLmxhYmVsKysse3ZhbHVlOnJbMV0sZG9uZTohMX07Y2FzZSA1OmEubGFiZWwrKyxvPXJbMV0scj1bMF07Y29udGludWU7Y2FzZSA3OnI9YS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPWEudHJ5cywoaT1pLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKXx8NiE9PXJbMF0mJjIhPT1yWzBdKSl7YT0wO2NvbnRpbnVlfWlmKDM9PT1yWzBdJiYoIWl8fHJbMV0+aVswXSYmclsxXTxpWzNdKSl7YS5sYWJlbD1yWzFdO2JyZWFrfWlmKDY9PT1yWzBdJiZhLmxhYmVsPGlbMV0pe2EubGFiZWw9aVsxXSxpPXI7YnJlYWt9aWYoaSYmYS5sYWJlbDxpWzJdKXthLmxhYmVsPWlbMl0sYS5vcHMucHVzaChyKTticmVha31pWzJdJiZhLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWV9cj1lLmNhbGwodCxhKX1jYXRjaCh0KXtyPVs2LHRdLG89MH1maW5hbGx5e249aT0wfWlmKDUmclswXSl0aHJvdyByWzFdO3JldHVybnt2YWx1ZTpyWzBdP3JbMV06dm9pZCAwLGRvbmU6ITB9fShbcixzXSl9fX0sYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5fbWluVmFsdWU9MCx0aGlzLl9tYXhWYWx1ZT0xMDAsdGhpcy5fdmFsdWVGcm9tPTAsdGhpcy5fdmFsdWVUbz0xMDAsdGhpcy5fc3RlcFNpemU9MSx0aGlzLl9vblJhbmdlPSExLHRoaXMuX29uVG9vbHRpcD0hMSx0aGlzLl9vblZlcnRpY2FsPSExLHRoaXMuX29uU2NhbGU9ITEsdGhpcy5fc2VydmVyVVJMPVwiaHR0cDovL2xvY2FsaG9zdDo5MDAwL3NsaWRlclwiLHRoaXMuX29ic2VydmVyPXR9cmV0dXJuIHQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD90aGlzLmluaXRNb2RlbEZyb21FbGVtZW50KHQpOnQgaW5zdGFuY2VvZiBGb3JtRGF0YT90aGlzLmluaXRNb2RlbEZyb21TZXJ2ZXIodCk6dGhpcy5pbml0TW9kZWxGcm9tT2JqZWN0KHQpfSx0LnByb3RvdHlwZS5pbml0TW9kZWxGcm9tU2VydmVyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuc2VydmVyVVJMPXQuZ2V0KFwidXJpXCIpLGZldGNoKHRoaXMuc2VydmVyVVJMLHttZXRob2Q6XCJQT1NUXCIsYm9keTp0fSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQuanNvbigpfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBlLmluaXRNb2RlbEZyb21PYmplY3QodCl9KSl9LHQucHJvdG90eXBlLmluaXRNb2RlbEZyb21PYmplY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9zZXJ2ZXJVUkw9dC5zZXJ2ZXJVUkwsdGhpcy5fb2JzZXJ2ZXIoXCJzZXJ2ZXJVUkxcIix0aGlzLl9zZXJ2ZXJVUkwpLHRoaXMuX29uVmVydGljYWw9dC5vblZlcnRpY2FsLHRoaXMuX29ic2VydmVyKFwib25WZXJ0aWNhbFwiLHRoaXMuX29uVmVydGljYWwpLHRoaXMuX29uUmFuZ2U9dC5vblJhbmdlLHRoaXMuX29ic2VydmVyKFwib25SYW5nZVwiLHRoaXMuX29uUmFuZ2UpLHRoaXMuX29uVG9vbHRpcD10Lm9uVG9vbHRpcCx0aGlzLl9vYnNlcnZlcihcIm9uVG9vbHRpcFwiLHRoaXMuX29uVG9vbHRpcCksdGhpcy5fb25TY2FsZT10Lm9uU2NhbGUsdGhpcy5fb2JzZXJ2ZXIoXCJvblNjYWxlXCIsdGhpcy5fb25TY2FsZSksdC5taW5WYWx1ZT90aGlzLl9taW5WYWx1ZT10Lm1pblZhbHVlOnRoaXMuX21pblZhbHVlPTAsdGhpcy5fb2JzZXJ2ZXIoXCJtaW5WYWx1ZVwiLHRoaXMuX21pblZhbHVlKSx0LnN0ZXBTaXplPU1hdGgucm91bmQoTWF0aC5hYnModC5zdGVwU2l6ZSkpLHQuc3RlcFNpemU+MD90aGlzLl9zdGVwU2l6ZT10LnN0ZXBTaXplOnRoaXMuX3N0ZXBTaXplPTEsdGhpcy5fb2JzZXJ2ZXIoXCJzdGVwU2l6ZVwiLHRoaXMuX3N0ZXBTaXplKSx0Lm1heFZhbHVlPnRoaXMuX21pblZhbHVlK3RoaXMuX3N0ZXBTaXplP3RoaXMuX21heFZhbHVlPU1hdGgucm91bmQoKHQubWF4VmFsdWUtdGhpcy5fbWluVmFsdWUpL3RoaXMuX3N0ZXBTaXplKSp0aGlzLl9zdGVwU2l6ZSt0aGlzLl9taW5WYWx1ZTp0aGlzLl9tYXhWYWx1ZT10aGlzLl9zdGVwU2l6ZSt0aGlzLl9taW5WYWx1ZSx0aGlzLl9vYnNlcnZlcihcIm1heFZhbHVlXCIsdGhpcy5fbWF4VmFsdWUpLHQudmFsdWVGcm9tPnRoaXMuX21pblZhbHVlJiZ0LnZhbHVlRnJvbTx0aGlzLl9tYXhWYWx1ZT90aGlzLl92YWx1ZUZyb209TWF0aC5yb3VuZCgodC52YWx1ZUZyb20tdGhpcy5fbWluVmFsdWUpL3RoaXMuX3N0ZXBTaXplKSp0aGlzLl9zdGVwU2l6ZSt0aGlzLl9taW5WYWx1ZTp0LnZhbHVlRnJvbT49dGhpcy5fbWF4VmFsdWU/dGhpcy5fdmFsdWVGcm9tPXRoaXMuX21heFZhbHVlOnRoaXMuX3ZhbHVlRnJvbT10aGlzLl9taW5WYWx1ZSx0aGlzLl9vYnNlcnZlcihcInZhbHVlRnJvbVwiLHRoaXMuX3ZhbHVlRnJvbSksdC52YWx1ZVRvPnRoaXMuX3ZhbHVlRnJvbSYmdC52YWx1ZVRvPHRoaXMuX21heFZhbHVlP3RoaXMuX3ZhbHVlVG89TWF0aC5yb3VuZCgodC52YWx1ZVRvLXRoaXMuX21pblZhbHVlKS90aGlzLl9zdGVwU2l6ZSkqdGhpcy5fc3RlcFNpemUrdGhpcy5fbWluVmFsdWU6dC52YWx1ZVRvPj10aGlzLl9tYXhWYWx1ZT90aGlzLl92YWx1ZVRvPXRoaXMuX21heFZhbHVlOnRoaXMuX3ZhbHVlVG89dGhpcy5fdmFsdWVGcm9tLHRoaXMuX29ic2VydmVyKFwidmFsdWVUb1wiLHRoaXMuX3ZhbHVlVG8pLFsyLCEwXX0pKX0pKX0sdC5wcm90b3R5cGUuaW5pdE1vZGVsRnJvbUVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3JldHVybiBlPXtvblZlcnRpY2FsOlwidHJ1ZVwiPT09dC5kYXRhc2V0Lm9uVmVydGljYWwsb25SYW5nZTpcInRydWVcIj09PXQuZGF0YXNldC5vblJhbmdlLG9uVG9vbHRpcDpcInRydWVcIj09PXQuZGF0YXNldC5vblRvb2x0aXAsb25TY2FsZTpcInRydWVcIj09PXQuZGF0YXNldC5vblNjYWxlLG1pblZhbHVlOk51bWJlcih0LmRhdGFzZXQubWluVmFsdWUpLG1heFZhbHVlOk51bWJlcih0LmRhdGFzZXQubWF4VmFsdWUpLHZhbHVlRnJvbTpOdW1iZXIodC5kYXRhc2V0LnZhbHVlRnJvbSksdmFsdWVUbzpOdW1iZXIodC5kYXRhc2V0LnZhbHVlVG8pLHN0ZXBTaXplOk51bWJlcih0LmRhdGFzZXQuc3RlcFNpemUpLHNlcnZlclVSTDpTdHJpbmcodC5kYXRhc2V0LnNlcnZlclVSTCl9LFsyLHRoaXMuaW5pdE1vZGVsRnJvbU9iamVjdChlKV19KSl9KSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm1pblZhbHVlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9taW5WYWx1ZX0sc2V0OmZ1bmN0aW9uKHQpe3Q8dGhpcy5fdmFsdWVGcm9tP3RoaXMuX21pblZhbHVlPXRoaXMuX3ZhbHVlRnJvbS1NYXRoLnJvdW5kKCh0aGlzLl92YWx1ZUZyb20tdCkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplOnRoaXMuX21pblZhbHVlPXRoaXMuX3ZhbHVlRnJvbSx0aGlzLl9taW5WYWx1ZT09PXRoaXMuX21heFZhbHVlJiYodGhpcy5fbWluVmFsdWU9dGhpcy5fbWluVmFsdWUtdGhpcy5fc3RlcFNpemUpLHRoaXMuX29ic2VydmVyKFwibWluVmFsdWVcIix0aGlzLl9taW5WYWx1ZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibWF4VmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heFZhbHVlfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25SYW5nZSYmdDw9dGhpcy5fdmFsdWVUbz90aGlzLl9tYXhWYWx1ZT10aGlzLl92YWx1ZVRvOnQ8PXRoaXMuX3ZhbHVlRnJvbT90aGlzLl9tYXhWYWx1ZT10aGlzLl92YWx1ZUZyb206dGhpcy5fbWF4VmFsdWU9TWF0aC5yb3VuZCgodC10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlLHRoaXMuX21heFZhbHVlPT09dGhpcy5fbWluVmFsdWUmJih0aGlzLl9tYXhWYWx1ZT10aGlzLl9tYXhWYWx1ZSt0aGlzLl9zdGVwU2l6ZSksdGhpcy5fb2JzZXJ2ZXIoXCJtYXhWYWx1ZVwiLHRoaXMuX21heFZhbHVlKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ2YWx1ZUZyb21cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZhbHVlRnJvbX0sc2V0OmZ1bmN0aW9uKHQpe3Q8PXRoaXMuX21pblZhbHVlP3RoaXMuX3ZhbHVlRnJvbT10aGlzLl9taW5WYWx1ZTp0aGlzLl9vblJhbmdlJiZ0Pj10aGlzLl92YWx1ZVRvP3RoaXMuX3ZhbHVlRnJvbT10aGlzLl92YWx1ZVRvOnQ+PXRoaXMuX21heFZhbHVlP3RoaXMuX3ZhbHVlRnJvbT10aGlzLl9tYXhWYWx1ZTp0aGlzLl92YWx1ZUZyb209TWF0aC5yb3VuZCgodC10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlLHRoaXMuX29ic2VydmVyKFwidmFsdWVGcm9tXCIsdGhpcy5fdmFsdWVGcm9tKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ2YWx1ZVRvXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl92YWx1ZVRvfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25SYW5nZSYmKHQ+dGhpcy5fdmFsdWVGcm9tJiZ0PHRoaXMuX21heFZhbHVlP3RoaXMuX3ZhbHVlVG89TWF0aC5yb3VuZCgodC10aGlzLl92YWx1ZUZyb20pL3RoaXMuX3N0ZXBTaXplKSp0aGlzLl9zdGVwU2l6ZSt0aGlzLl92YWx1ZUZyb206dD49dGhpcy5fbWF4VmFsdWU/dGhpcy5fdmFsdWVUbz10aGlzLl9tYXhWYWx1ZTp0aGlzLl92YWx1ZVRvPXRoaXMuX3ZhbHVlRnJvbSx0aGlzLl9vYnNlcnZlcihcInZhbHVlVG9cIix0aGlzLl92YWx1ZVRvKSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwic3RlcFNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0ZXBTaXplfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9TWF0aC5hYnModGhpcy5fbWF4VmFsdWUtdGhpcy5fbWluVmFsdWUpO3RoaXMuX3N0ZXBTaXplPXQ8ZSYmdD4wP01hdGgucm91bmQodCk6dD49ZT9lOjEsdGhpcy5fb2JzZXJ2ZXIoXCJzdGVwU2l6ZVwiLHRoaXMuX3N0ZXBTaXplKSx0aGlzLl92YWx1ZUZyb20+dGhpcy5fbWluVmFsdWU/dGhpcy5fdmFsdWVGcm9tPU1hdGgucm91bmQoKHRoaXMuX3ZhbHVlRnJvbS10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlOnRoaXMuX3ZhbHVlRnJvbT10aGlzLl9taW5WYWx1ZSx0aGlzLl9vYnNlcnZlcihcInZhbHVlRnJvbVwiLHRoaXMuX3ZhbHVlRnJvbSksdGhpcy5fb25SYW5nZSYmKHRoaXMuX3ZhbHVlVG8+dGhpcy5fdmFsdWVGcm9tP3RoaXMuX3ZhbHVlVG89TWF0aC5yb3VuZCgodGhpcy5fdmFsdWVUby10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlOnRoaXMuX3ZhbHVlVG89dGhpcy5fdmFsdWVGcm9tLHRoaXMuX29ic2VydmVyKFwidmFsdWVUb1wiLHRoaXMuX3ZhbHVlVG8pKSx0aGlzLm1heFZhbHVlPXRoaXMubWF4VmFsdWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwib25WZXJ0aWNhbFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25WZXJ0aWNhbH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX29uVmVydGljYWw9dCx0aGlzLl9vYnNlcnZlcihcIm9uVmVydGljYWxcIix0aGlzLl9vblZlcnRpY2FsKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJvblJhbmdlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vblJhbmdlfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25SYW5nZT10LHRoaXMuX29ic2VydmVyKFwib25SYW5nZVwiLHRoaXMuX29uUmFuZ2UpLHRoaXMudmFsdWVUbz10aGlzLl92YWx1ZVRvfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm9uVG9vbHRpcFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25Ub29sdGlwfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25Ub29sdGlwPXQsdGhpcy5fb2JzZXJ2ZXIoXCJvblRvb2x0aXBcIix0aGlzLl9vblRvb2x0aXApfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm9uU2NhbGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29uU2NhbGV9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9vblNjYWxlPXQsdGhpcy5fb2JzZXJ2ZXIoXCJvblNjYWxlXCIsdGhpcy5fb25TY2FsZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwic2VydmVyVVJMXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXJ2ZXJVUkx9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9zZXJ2ZXJVUkw9dCx0aGlzLl9vYnNlcnZlcihcInNlcnZlclVSTFwiLHRoaXMuX3NlcnZlclVSTCl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksdH0oKSxzPShuKDQpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuX21vZGVsPW5ldyBhKHRoaXMub2JzZXJ2ZXIuYmluZCh0aGlzKSksdGhpcy52aWV3PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dC1zbGlkZXJcIiksdGhpcy52aWV3LnByZXNlbnRlcj10aGlzLHRoaXMudmlldy5hZGRFdmVudExpc3RlbmVyKFwic2xpZGVyLXZpZXdcIix0aGlzLmhhbmRsZVZpZXdFdmVudHMuYmluZCh0aGlzKSl9cmV0dXJuIHQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCl7dGhpcy5fbW9kZWwuaW5pdCh0KS50aGVuKChmdW5jdGlvbigpe3JldHVybiBjb25zb2xlLmxvZyhcImluaXRpYWxpemF0aW9uIE1vZGVsIHN1Y2Nlc3NmdWxcIiksITB9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3JldHVybiBjb25zb2xlLmxvZyhcIkVycm9yIG1vZGVsIGluaXRpYWxpemF0aW9uLlwiLHQpLCExfSkpfSx0LnByb3RvdHlwZS5zZXRQcm9wcz1mdW5jdGlvbih0LGUpe3RoaXMuX21vZGVsW3RdPWV9LHQucHJvdG90eXBlLmdldFByb3BzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9tb2RlbFt0XX0sdC5wcm90b3R5cGUuaGFuZGxlVmlld0V2ZW50cz1mdW5jdGlvbih0KXtzd2l0Y2godC5zdG9wUHJvcGFnYXRpb24oKSx0LmRldGFpbC5uYW1lKXtjYXNlXCJ2YWx1ZUZyb21cIjpjYXNlXCJ2YWx1ZVRvXCI6dGhpcy5zZXRQcm9wcyh0LmRldGFpbC5uYW1lLHRoaXMuY2FsY0Zyb21Ub1ZhbHVlcyh0KSl9fSx0LnByb3RvdHlwZS5jYWxjRnJvbVRvVmFsdWVzPWZ1bmN0aW9uKHQpe3ZhciBlPSh0aGlzLl9tb2RlbC5tYXhWYWx1ZS10aGlzLl9tb2RlbC5taW5WYWx1ZSkvMTAwLG49dGhpcy5fbW9kZWwuc3RlcFNpemUvZTtyZXR1cm4gZT1lKihuPU1hdGgucm91bmQodC5kZXRhaWwudmFsdWUvbikqbikrdGhpcy5fbW9kZWwubWluVmFsdWUsTWF0aC5yb3VuZChlKX0sdC5wcm90b3R5cGUub2JzZXJ2ZXI9ZnVuY3Rpb24odCxlKXt0aGlzLnZpZXcuc2V0TW9kZWxEYXRhKHQsZSksdGhpcy52aWV3LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwic2xpZGVyLWRhdGFcIix7YnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNvbXBvc2VkOiEwLGRldGFpbDp7bmFtZTp0LHZhbHVlOmV9fSkpfSx0fSgpKTshZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXtyZXR1cm5cInByZXNlbnRlclwiaW4gdH10LmZuLnNsaWRlcj1mdW5jdGlvbihuLG8pe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm4gdGhpczt2YXIgaT1bXTtpZih2b2lkIDA9PT1uKXJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7ZSh0aGlzKSYmaS5wdXNoKHRoaXMpfSkpLHQoKS5wdXNoU3RhY2soaSk7aWYoXCJpbml0XCI9PT1uKXJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7aWYoZSh0aGlzKSlvJiZ0aGlzLnByZXNlbnRlciYmdGhpcy5wcmVzZW50ZXIuaW5pdChvKSxpLnB1c2godGhpcyk7ZWxzZXt2YXIgdD1uZXcgczt0LnZpZXcuY2xhc3NOYW1lPXRoaXMuY2xhc3NOYW1lLHRoaXMucmVwbGFjZVdpdGgodC52aWV3KSxpLnB1c2godC52aWV3KSx2b2lkIDA9PT1vP3QuaW5pdCh0aGlzKTp0LmluaXQobyl9fSkpLHQoKS5wdXNoU3RhY2soaSk7aWYobil7aWYodm9pZCAwIT09b3x8IWUodGhpc1swXSkpcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtpZihlKHRoaXMpJiZ0aGlzLnByZXNlbnRlcilyZXR1cm4gdGhpcy5wcmVzZW50ZXIuc2V0UHJvcHMobixvKX0pKSx0aGlzO2lmKHRoaXNbMF0ucHJlc2VudGVyKXJldHVybiB0aGlzWzBdLnByZXNlbnRlci5nZXRQcm9wcyhuKX19fShvKX1dKTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9yYW5nZS1zbGlkZXIuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vZGF0ZS1maWx0ZXIuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4uL2NoZWNrYm94L2NoZWNrYm94JztcclxuaW1wb3J0ICcuL2NoZWNrYm94LWxpc3Quc2Fzcyc7XHJcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2NoZWNrYm94LnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2NoZWNrYm94LWxpc3Quc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vY2hlY2tib3gtZ3JvdXAuc2Fzcyc7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vY2hlY2tib3gtZ3JvdXAuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vcGFnaW5hdGlvbi5zYXNzJzsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9wYWdpbmF0aW9uLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuLi9jaGVja2JveC9jaGVja2JveCc7XHJcbmltcG9ydCAnLi9jaGVja2JveC1yaWNoLnNhc3MnO1xyXG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9jaGVja2JveC1yaWNoLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuL2J1bGxldC1saXN0LnNhc3MnOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2J1bGxldC1saXN0LnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2luZm8uc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vbGlrZS5zYXNzJztcclxuXHJcbiQoJy5saWtlJykub24oJ2NoYW5nZScsIGhhbmRsZU9uQ2hhbmdlTGlrZS5iaW5kKHRoaXMpKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZU9uQ2hhbmdlTGlrZShldnQpIHtcclxuICBjb25zdCBpc0NoZWNrZWQgPSAkKGV2dC5jdXJyZW50VGFyZ2V0KS5maW5kKCcubGlrZV9fdHJ1ZScpLmlzKCc6Y2hlY2tlZCcpO1xyXG5cclxuICAkKGV2dC5jdXJyZW50VGFyZ2V0KS5maW5kKCcubGlrZV9fZmFsc2UtcXVhbnRpdHknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChpc0NoZWNrZWQpIHtcclxuICAgICAgJCh0aGlzKS50ZXh0KE51bWJlcigkKHRoaXMpLnRleHQoKSkgKyAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICQodGhpcykudGV4dChOdW1iZXIoJCh0aGlzKS50ZXh0KCkpIC0gMSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9saWtlLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL3Jldmlldy5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2luZm8taWNvMS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2luZm8taWNvMi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2luZm8taWNvMy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL3Jldmlldy1hdmF0YXIxLmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcmV2aWV3LWF2YXRhcjIuanBnXCI7IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgUmFuZ2VTbGlkZXIgZnJvbSAnLi4vcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlcic7XHJcbmltcG9ydCBEcm9wZG93blF1YW50aXR5IGZyb20gJy4uL2Ryb3Bkb3duLXF1YW50aXR5L2Ryb3Bkb3duLXF1YW50aXR5JztcclxuaW1wb3J0IERhdGVSYW5nZSBmcm9tICcuLi9kYXRlLXJhbmdlL2RhdGUtcmFuZ2UnO1xyXG5pbXBvcnQgRGF0ZUZpbHRlciBmcm9tICcuLi9kYXRlLWZpbHRlci9kYXRlLWZpbHRlcic7XHJcbmltcG9ydCAnLi4vcmF0ZS1idXR0b24vcmF0ZS1idXR0b24nO1xyXG5pbXBvcnQgJy4uL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdCc7XHJcbmltcG9ydCAnLi4vdGV4dC1maWVsZC90ZXh0LWZpZWxkJztcclxuaW1wb3J0ICcuLi9zdWJzY3JpcHRpb24vc3Vic2NyaXB0aW9uJztcclxuaW1wb3J0ICcuLi9jaGVja2JveC1ncm91cC9jaGVja2JveC1ncm91cCc7XHJcbmltcG9ydCAnLi4vcmFkaW8vcmFkaW8nO1xyXG5pbXBvcnQgJy4uL3RvZ2dsZS90b2dnbGUnO1xyXG5pbXBvcnQgJy4uL2J1dHRvbi9idXR0b24nO1xyXG5pbXBvcnQgJy4uL3BhZ2luYXRpb24vcGFnaW5hdGlvbic7XHJcbmltcG9ydCAnLi4vY2hlY2tib3gtcmljaC9jaGVja2JveC1yaWNoJztcclxuaW1wb3J0ICcuLi9idWxsZXQtbGlzdC9idWxsZXQtbGlzdCc7XHJcbmltcG9ydCAnLi4vaW5mby9pbmZvJztcclxuaW1wb3J0ICcuLi9yZXZpZXcvcmV2aWV3JztcclxuaW1wb3J0ICcuLi90ZW1wbGF0ZS11aWtpdC90ZW1wbGF0ZS11aWtpdCc7XHJcbmltcG9ydCAnLi9wYWdlLXVpa2l0LWVsZW1lbnRzLnNhc3MnO1xyXG5cclxuXHJcbmxldCAkdWlraXRFbGVtZW50cyA9ICQoJy51aWtpdC1lbGVtZW50cycpO1xyXG5sZXQgJGRyb3Bkb3duUXVhbnRpdHkgPSAkdWlraXRFbGVtZW50cy5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHknKTtcclxubGV0ICRyYW5nZVNsaWRlciA9ICR1aWtpdEVsZW1lbnRzLmZpbmQoJy5yYW5nZS1zbGlkZXInKTtcclxubGV0ICRkYXRlUmFuZ2UgPSAkdWlraXRFbGVtZW50cy5maW5kKCcuZGF0ZS1yYW5nZScpO1xyXG5sZXQgJGRhdGVGaWx0ZXIgPSAkdWlraXRFbGVtZW50cy5maW5kKCcuZGF0ZS1maWx0ZXInKTtcclxuXHJcbm5ldyBEcm9wZG93blF1YW50aXR5KCRkcm9wZG93blF1YW50aXR5LmVxKDApKTtcclxubmV3IERhdGVSYW5nZSgkZGF0ZVJhbmdlKTtcclxubmV3IERhdGVGaWx0ZXIoJGRhdGVGaWx0ZXIpO1xyXG5uZXcgUmFuZ2VTbGlkZXIoJHJhbmdlU2xpZGVyKTtcclxubmV3IERyb3Bkb3duUXVhbnRpdHkoJGRyb3Bkb3duUXVhbnRpdHkuZXEoMSksICdyb29tJyk7XHJcbm5ldyBEcm9wZG93blF1YW50aXR5KCRkcm9wZG93blF1YW50aXR5LmVxKDIpLCAncm9vbScpLnRvZ2dsZVBpY2tlcigpO1xyXG5uZXcgRHJvcGRvd25RdWFudGl0eSgkZHJvcGRvd25RdWFudGl0eS5lcSgzKSkudG9nZ2xlUGlja2VyKCk7XHJcbm5ldyBEcm9wZG93blF1YW50aXR5KCRkcm9wZG93blF1YW50aXR5LmVxKDQpKS50b2dnbGVQaWNrZXIoKTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9wYWdlLXVpa2l0LWVsZW1lbnRzLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=