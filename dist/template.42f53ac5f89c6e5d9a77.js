!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=119)}([function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],r=0;r<e.length;r++){var o=e[r],l=t.base?o[0]+t.base:o[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var d=s(u),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(a[d].references++,a[d].updater(h)):a.push({identifier:u,updater:v(h,t),references:1}),i.push(u)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function h(e,t,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var p=null,m=0;function v(e,t){var n,i,r;if(t.singleton){var o=m++;n=p||(p=c(t)),i=h.bind(null,n,o,!1),r=h.bind(null,n,o,!0)}else n=c(t),i=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var r=s(n[i]);a[r].references--}for(var o=l(e,t),c=0;c<n.length;c++){var u=s(n[c]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=o}}}},function(e,t,n){"use strict";n(11)},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,u=o.indexOf,d={},h=d.toString,f=d.hasOwnProperty,p=f.toString,m=p.call(Object),v={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},_=n.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||_).createElement("script");if(o.text=e,t)for(i in b)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var x=function(e,t){return new x.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:"3.5.1",constructor:x,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},x.extend=x.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(c&&i&&(x.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[t],o=r&&!Array.isArray(n)?[]:r||x.isPlainObject(n)?n:{},r=!1,a[t]=x.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},x.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?x.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(C(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return l(a)},guid:1,support:v}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=o[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,i,r,o,a,s,l,c,u,d,h,f,p,m,v,g,y,_,b="sizzle"+1*new Date,w=e.document,E=0,x=0,C=le(),S=le(),T=le(),N=le(),k=function(e,t){return e===t&&(d=!0),0},O={}.hasOwnProperty,M=[],D=M.pop,A=M.push,j=M.push,L=M.slice,P=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+R+"*("+F+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+R+"*\\]",q=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",V=new RegExp(R+"+","g"),W=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),B=new RegExp("^"+R+"*,"+R+"*"),U=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),z=new RegExp(R+"|>"),$=new RegExp(q),G=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){h()},ae=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(M=L.call(w.childNodes),w.childNodes),M[w.childNodes.length].nodeType}catch(e){j={apply:M.length?function(e,t){A.apply(e,L.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var o,s,c,u,d,p,g,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&(h(t),t=t||f,m)){if(11!==w&&(d=Q.exec(e)))if(o=d[1]){if(9===w){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(y&&(c=y.getElementById(o))&&_(t,c)&&c.id===o)return i.push(c),i}else{if(d[2])return j.apply(i,t.getElementsByTagName(e)),i;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!N[e+" "]&&(!v||!v.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===w&&(z.test(e)||U.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,re):t.setAttribute("id",u=b)),s=(p=a(e)).length;s--;)p[s]=(u?"#"+u:":scope")+" "+_e(p[s]);g=p.join(",")}try{return j.apply(i,y.querySelectorAll(g)),i}catch(t){N(e,!0)}finally{u===b&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ce(e){return e[b]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function he(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},h=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;return a!=f&&9===a.nodeType&&a.documentElement?(p=(f=a).documentElement,m=!o(f),w!=f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ue((function(e){return p.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(f.getElementsByClassName),n.getById=ue((function(e){return p.appendChild(e).id=b,!f.getElementsByName||!f.getElementsByName(b).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},g=[],v=[],(n.qsa=K.test(f.querySelectorAll))&&(ue((function(e){var t;p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+R+"*(?:value|"+I+")"),e.querySelectorAll("[id~="+b+"-]").length||v.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=K.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",q)})),v=v.length&&new RegExp(v.join("|")),g=g.length&&new RegExp(g.join("|")),t=K.test(p.compareDocumentPosition),_=t||K.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==f||e.ownerDocument==w&&_(w,e)?-1:t==f||t.ownerDocument==w&&_(w,t)?1:u?P(u,e)-P(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e==f?-1:t==f?1:r?-1:o?1:u?P(u,e)-P(u,t):0;if(r===o)return he(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?he(a[i],s[i]):a[i]==w?-1:s[i]==w?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(h(e),n.matchesSelector&&m&&!N[t+" "]&&(!g||!g.test(t))&&(!v||!v.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){N(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&h(e),_(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&h(e);var r=i.attrHandle[t.toLowerCase()],o=r&&O.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(ie,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(k),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return u=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=se.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(V," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,h,f,p,m=o!==a?"nextSibling":"previousSibling",v=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!l&&!s,_=!1;if(v){if(o){for(;m;){for(h=t;h=h[m];)if(s?h.nodeName.toLowerCase()===g:1===h.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?v.firstChild:v.lastChild],a&&y){for(_=(f=(c=(u=(d=(h=v)[b]||(h[b]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],h=f&&v.childNodes[f];h=++f&&h&&h[m]||(_=f=0)||p.pop();)if(1===h.nodeType&&++_&&h===t){u[e]=[E,f,_];break}}else if(y&&(_=f=(c=(u=(d=(h=t)[b]||(h[b]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===_)for(;(h=++f&&h&&h[m]||(_=f=0)||p.pop())&&((s?h.nodeName.toLowerCase()!==g:1!==h.nodeType)||!++_||(y&&((u=(d=h[b]||(h[b]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[E,_]),h!==t)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=P(e,o[a])]=!(n[i]=o[a])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ce((function(e){var t=[],n=[],i=s(e.replace(W,"$1"));return i[b]?ce((function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ce((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ve((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=pe(t);function ye(){}function _e(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function be(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=x++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,h=[E,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=(d=t[b]||(t[b]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===E&&c[1]===s)return h[2]=c[2];if(u[o]=h,h[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function Ee(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function xe(e,t,n,i,r,o){return i&&!i[b]&&(i=xe(i)),r&&!r[b]&&(r=xe(r,o)),ce((function(o,a,s,l){var c,u,d,h=[],f=[],p=a.length,m=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?m:Ee(m,h,e,s,l),g=n?r||(o?e:p||i)?[]:a:v;if(n&&n(v,g,s,l),i)for(c=Ee(g,f),i(c,[],s,l),u=c.length;u--;)(d=c[u])&&(g[f[u]]=!(v[f[u]]=d));if(o){if(r||e){if(r){for(c=[],u=g.length;u--;)(d=g[u])&&c.push(v[u]=d);r(null,g=[],c,l)}for(u=g.length;u--;)(d=g[u])&&(c=r?P(o,d):h[u])>-1&&(o[c]=!(a[c]=d))}}else g=Ee(g===a?g.splice(p,g.length):g),r?r(null,a,g,l):j.apply(a,g)}))}function Ce(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,u=be((function(e){return e===t}),s,!0),d=be((function(e){return P(t,e)>-1}),s,!0),h=[function(e,n,i){var r=!a&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])h=[be(we(h),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[b]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return xe(l>1&&we(h),l>1&&_e(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<r&&Ce(e.slice(l,r)),r<o&&Ce(e=e.slice(r)),r<o&&_e(e))}h.push(n)}return we(h)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,a=se.tokenize=function(e,t){var n,r,o,a,s,l,c,u=S[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=i.preFilter;s;){for(a in n&&!(r=B.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W," ")}),s=s.slice(n.length)),i.filter)!(r=X[a].exec(s))||c[a]&&!(r=c[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,l).slice(0)},s=se.compile=function(e,t){var n,r=[],o=[],s=T[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Ce(t[n]))[b]?r.push(s):o.push(s);(s=T(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,u){var d,p,v,g=0,y="0",_=o&&[],b=[],w=c,x=o||r&&i.find.TAG("*",u),C=E+=null==w?1:Math.random()||.1,S=x.length;for(u&&(c=a==f||a||u);y!==S&&null!=(d=x[y]);y++){if(r&&d){for(p=0,a||d.ownerDocument==f||(h(d),s=!m);v=e[p++];)if(v(d,a||f,s)){l.push(d);break}u&&(E=C)}n&&((d=!v&&d)&&g--,o&&_.push(d))}if(g+=y,n&&y!==g){for(p=0;v=t[p++];)v(_,b,a,s);if(o){if(g>0)for(;y--;)_[y]||b[y]||(b[y]=D.call(l));b=Ee(b)}j.apply(l,b),u&&!o&&b.length>0&&g+t.length>1&&se.uniqueSort(l)}return u&&(E=C,c=w),_};return n?ce(o):o}(o,r))).selector=e}return s},l=se.select=function(e,t,n,r){var o,l,c,u,d,h="function"==typeof e&&e,f=!r&&a(e=h.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=X.needsContext.test(e)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((d=i.find[u])&&(r=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&_e(l)))return j.apply(n,r),n;break}}return(h||s(e,f))(r,t,!m,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(k).join("")===b,n.detectDuplicates=!!d,h(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(I,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),se}(n);x.find=S,x.expr=S.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=S.uniqueSort,x.text=S.getText,x.isXMLDoc=S.isXML,x.contains=S.contains,x.escapeSelector=S.escape;var T=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&x(e).is(n))break;i.push(e)}return i},N=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=x.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,n){return g(t)?x.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return u.call(t,e)>-1!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?x.find.matchesSelector(i,e)?[i]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<i;t++)if(x.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)x.find(e,r[t],n);return i>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&k.test(e)?x(e):e||[],!1).length}});var A,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:j.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:_,!0)),M.test(i[1])&&x.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=_.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,A=x(_);var L=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&x(e);if(!k.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?x.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(x(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(O(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,i){var r=x.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=x.filter(i,r)),this.length>1&&(P[e]||x.uniqueSort(r),L.test(e)&&r.reverse()),this.pushStack(r)}}));var R=/[^\x20\t\r\n\f]+/g;function F(e){return e}function H(e){throw e}function q(e,t,n,i){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):x.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){x.each(n,(function(n,i){g(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==E(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;(n=x.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?x.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(n){x.each(t,(function(t,i){var r=g(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var o=0;function a(e,t,i,r){return function(){var s=this,l=arguments,c=function(){var n,c;if(!(e<o)){if((n=i.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(c)?r?c.call(n,a(o,t,F,r),a(o,t,H,r)):(o++,c.call(n,a(o,t,F,r),a(o,t,H,r),a(o,t,F,t.notifyWith))):(i!==F&&(s=void 0,l=[n]),(r||t.resolveWith)(s,l))}},u=r?c:function(){try{c()}catch(n){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(n,u.stackTrace),e+1>=o&&(i!==H&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?u():(x.Deferred.getStackHook&&(u.stackTrace=x.Deferred.getStackHook()),n.setTimeout(u))}}return x.Deferred((function(n){t[0][3].add(a(0,n,g(r)?r:F,n.notifyWith)),t[1][3].add(a(0,n,g(e)?e:F)),t[2][3].add(a(0,n,g(i)?i:H))})).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},o={};return x.each(t,(function(e,n){var a=n[2],s=n[5];r[n[1]]=a.add,s&&a.add((function(){i=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=s.call(arguments),o=x.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(q(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||g(r[n]&&r[n].then)))return o.then();for(;n--;)q(r[n],a(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&V.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){n.setTimeout((function(){throw e}))};var W=x.Deferred();function B(){_.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),x.ready()}x.fn.ready=function(e){return W.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||W.resolveWith(_,[x]))}}),x.ready.then=W.then,"complete"===_.readyState||"loading"!==_.readyState&&!_.documentElement.doScroll?n.setTimeout(x.ready):(_.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var U=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===E(n))for(s in r=!0,n)U(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,g(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(x(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},z=/^-ms-/,$=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function X(e){return e.replace(z,"ms-").replace($,G)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Z(){this.expando=x.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[X(t)]=n;else for(i in t)r[X(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||x.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var J=new Z,K=new Z,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Q.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=X(i.slice(5)),te(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){K.set(this,e)})):U(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=te(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,x.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),i=n.length,r=n.shift(),o=x._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){x.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:x.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=x.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],oe=_.documentElement,ae=function(e){return x.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ae=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===x.css(e,"display")};function ce(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return x.css(e,t,"")},l=s(),c=n&&n[3]||(x.cssNumber[t]?"":"px"),u=e.nodeType&&(x.cssNumber[t]||"px"!==c&&+l)&&ie.exec(x.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)x.style(e,t,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,x.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ue={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,r=ue[i];return r||(t=n.body.appendChild(n.createElement(i)),r=x.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ue[i]=r,r)}function he(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&le(i)&&(r[o]=de(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}x.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?x(this).show():x(this).hide()}))}});var fe,pe,me=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i;fe=_.createDocumentFragment().appendChild(_.createElement("div")),(pe=_.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),fe.appendChild(pe),v.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",v.option=!!fe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?x.merge([e],n):n}function be(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,v.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function Ee(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),h=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===E(o))x.merge(h,o.nodeType?[o]:o);else if(we.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ve.exec(o)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,a.innerHTML=l[1]+x.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;x.merge(h,a.childNodes),(a=d.firstChild).textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",f=0;o=h[f++];)if(i&&x.inArray(o,i)>-1)r&&r.push(o);else if(c=ae(o),a=_e(d.appendChild(o),"script"),c&&be(a),n)for(u=0;o=a[u++];)ge.test(o.type||"")&&n.push(o);return d}var xe=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ne(){return!1}function ke(e,t){return e===function(){try{return _.activeElement}catch(e){}}()==("focus"===t)}function Oe(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Oe(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ne;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return x().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=x.guid++)),e.each((function(){x.event.add(this,t,r,i,n)}))}function Me(e,t,n){n?(J.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),J.set(this,t,o),i=n(this,t),this[t](),o!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else o.length&&(J.set(this,t,{value:x.event.trigger(x.extend(o[0],x.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&x.event.add(e,t,Te)}x.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,d,h,f,p,m,v=J.get(e);if(Y(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&x.find.matchesSelector(oe,r),n.guid||(n.guid=x.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)f=m=(s=Se.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f&&(d=x.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=x.event.special[f]||{},u=x.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&x.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=l[f])||((h=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,p,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,u):h.push(u),x.event.global[f]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,h,f,p,m,v=J.hasData(e)&&J.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(f=m=(s=Se.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f){for(d=x.event.special[f]||{},h=l[f=(i?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)u=h[o],!r&&m!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(h.splice(o,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(e,u));a&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,p,v.handle)||x.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)x.event.remove(e,f+t[c],n,i,!0);x.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=new Array(arguments.length),l=x.event.fix(e),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=x.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=x.event.handlers.call(this,l,c),t=0;(r=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((x.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?x(r,this).index(c)>-1:x.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&O(t,"input")&&Me(t,"click",Te),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&O(t,"input")&&Me(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&O(t,"input")&&J.get(t,"click")||O(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ne,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Ne,isPropagationStopped:Ne,isImmediatePropagationStopped:Ne,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return Me(this,e,ke),!1},trigger:function(){return Me(this,e),!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||x.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,i){return Oe(this,e,t,n,i)},one:function(e,t,n,i){return Oe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ne),this.each((function(){x.event.remove(this,e,n,t)}))}});var De=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Re(e,t){var n,i,r,o,a,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(r in J.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)x.event.add(t,r,s[r][n]);K.hasData(e)&&(o=K.access(e),a=x.extend({},o),K.set(t,a))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function He(e,t,n,i){t=l(t);var r,o,a,s,c,u,d=0,h=e.length,f=h-1,p=t[0],m=g(p);if(m||h>1&&"string"==typeof p&&!v.checkClone&&Ae.test(p))return e.each((function(r){var o=e.eq(r);m&&(t[0]=p.call(this,r,o.html())),He(o,t,n,i)}));if(h&&(o=(r=Ee(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=x.map(_e(r,"script"),Pe)).length;d<h;d++)c=r,d!==f&&(c=x.clone(c,!0,!0),s&&x.merge(a,_e(c,"script"))),n.call(e[d],c,d);if(s)for(u=a[a.length-1].ownerDocument,x.map(a,Ie),d=0;d<s;d++)c=a[d],ge.test(c.type||"")&&!J.access(c,"globalEval")&&x.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(je,""),c,u))}return e}function qe(e,t,n){for(var i,r=t?x.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||x.cleanData(_e(i)),i.parentNode&&(n&&ae(i)&&be(_e(i,"script")),i.parentNode.removeChild(i));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=ae(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(a=_e(s),i=0,r=(o=_e(e)).length;i<r;i++)Fe(o[i],a[i]);if(t)if(n)for(o=o||_e(e),a=a||_e(s),i=0,r=o.length;i<r;i++)Re(o[i],a[i]);else Re(e,s);return(a=_e(s,"script")).length>0&&be(a,!l&&_e(e,"script")),s},cleanData:function(e){for(var t,n,i,r=x.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),x.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return U(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return He(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)}))},prepend:function(){return He(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return He(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return He(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(_e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!ye[(ve.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(_e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(_e(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,i=[],r=x(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),x(r[a])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var Ve=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Ue=new RegExp(re.join("|"),"i");function ze(e,t,n){var i,r,o,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=x.style(e,t)),!v.pixelBoxStyles()&&Ve.test(a)&&Ue.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(c).appendChild(u);var e=n.getComputedStyle(u);i="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),r=36===t(e.width),u.style.position="absolute",o=12===t(u.offsetWidth/3),oe.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,s,l,c=_.createElement("div"),u=_.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===u.style.backgroundClip,x.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,i,r;return null==s&&(e=_.createElement("table"),t=_.createElement("tr"),i=_.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(i),r=n.getComputedStyle(t),s=parseInt(r.height)>3,oe.removeChild(e)),s}}))}();var Ge=["Webkit","Moz","ms"],Xe=_.createElement("div").style,Ye={};function Ze(e){var t=x.cssProps[e]||Ye[e];return t||(e in Xe?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Xe)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var i=ie.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function nt(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=x.css(e,n+re[a],!0,r)),i?("content"===n&&(l-=x.css(e,"padding"+re[a],!0,r)),"margin"!==n&&(l-=x.css(e,"border"+re[a]+"Width",!0,r))):(l+=x.css(e,"padding"+re[a],!0,r),"padding"!==n?l+=x.css(e,"border"+re[a]+"Width",!0,r):s+=x.css(e,"border"+re[a]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function it(e,t,n){var i=We(e),r=(!v.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,i),o=r,a=ze(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ve.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&O(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===x.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===x.css(e,"boxSizing",!1,i),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(r?"border":"content"),o,i,a)+"px"}function rt(e,t,n,i,r){return new rt.prototype.init(e,t,n,i,r)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=X(t),l=Ke.test(t),c=e.style;if(l||(t=Ze(s)),a=x.cssHooks[t]||x.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=ie.exec(n))&&r[1]&&(n=ce(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(x.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=X(t);return Ke.test(t)||(t=Ze(s)),(a=x.cssHooks[t]||x.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=ze(e,t,i)),"normal"===r&&t in et&&(r=et[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,i){if(n)return!Je.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,i):Be(e,Qe,(function(){return it(e,t,i)}))},set:function(e,n,i){var r,o=We(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||i)&&"border-box"===x.css(e,"boxSizing",!1,o),l=i?nt(e,t,i,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),l&&(r=ie.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),tt(0,n,l)}}})),x.cssHooks.marginLeft=$e(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(ze(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+re[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(x.cssHooks[e+t].set=tt)})),x.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=We(e),r=t.length;a<r;a++)o[t[a]]=x.css(e,t[a],!1,i);return o}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=rt.prototype.init,x.fx.step={};var ot,at,st=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ct(){at&&(!1===_.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,x.fx.interval),x.fx.tick())}function ut(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function dt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=re[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ht(e,t,n){for(var i,r=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function ft(e,t,n){var i,r,o=0,a=ft.prefilters.length,s=x.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=ot||ut(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(i);return s.notifyWith(e,[c,i,n]),i<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var i=x.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=X(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=x.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);o<a;o++)if(i=ft.prefilters[o].call(c,e,u,c.opts))return g(i.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return x.map(u,ht,c),g(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,h=this,f={},p=e.style,m=e.nodeType&&le(e),v=J.get(e,"fxshow");for(i in n.queue||(null==(a=x._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()}))}))),t)if(r=t[i],st.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;m=!0}f[i]=v&&v[i]||x.style(e,i)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=v&&v.display)&&(c=J.get(e,"display")),"none"===(u=x.css(e,"display"))&&(c?u=c:(he([e],!0),c=e.style.display||c,u=x.css(e,"display"),he([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===x.css(e,"float")&&(l||(h.done((function(){p.display=c})),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,f)l||(v?"hidden"in v&&(m=v.hidden):v=J.access(e,"fxshow",{display:c}),o&&(v.hidden=!m),m&&he([e],!0),h.done((function(){for(i in m||he([e]),J.remove(e,"fxshow"),f)x.style(e,i,f[i])}))),l=ht(m?v[i]:0,i,h),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),x.speed=function(e,t,n){var i=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return x.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in x.fx.speeds?i.duration=x.fx.speeds[i.duration]:i.duration=x.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&x.dequeue(this,i.queue)},i},x.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=x.isEmptyObject(e),o=x.speed(t,n,i),a=function(){var t=ft(this,x.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=x.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&lt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=x.timers,a=i?i.length:0;for(n.finish=!0,x.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,i,r)}})),x.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),ot=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){at||(at=!0,ct())},x.fx.stop=function(){at=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},function(){var e=_.createElement("input"),t=_.createElement("select").appendChild(_.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=_.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var pt,mt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return U(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?x.prop(e,t,n):(1===o&&x.isXMLDoc(e)||(r=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=x.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&O(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||x.find.attr;mt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=mt[a],mt[a]=r,r=null!=n(e,t,i)?a:null,mt[a]=o),r}}));var vt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function yt(e){return(e.match(R)||[]).join(" ")}function _t(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}x.fn.extend({prop:function(e,t){return U(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&x.isXMLDoc(e)||(t=x.propFix[t]||t,r=x.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(g(e))return this.each((function(t){x(this).addClass(e.call(this,t,_t(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(r=_t(n),i=1===n.nodeType&&" "+yt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=yt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(g(e))return this.each((function(t){x(this).removeClass(e.call(this,t,_t(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(r=_t(n),i=1===n.nodeType&&" "+yt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=yt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){x(this).toggleClass(e.call(this,n,_t(this),t),t)})):this.each((function(){var t,r,o,a;if(i)for(r=0,o=x(this),a=bt(e);t=a[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=_t(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+yt(_t(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;x.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=g(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,x(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=x.map(r,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=x.valHooks[r.type]||x.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(wt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:yt(x.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!O(n.parentNode,"optgroup"))){if(t=x(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=x.makeArray(t),a=r.length;a--;)((i=r[a]).selected=x.inArray(x.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},v.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var Et=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,i,r){var o,a,s,l,c,u,d,h,p=[i||_],m=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=h=s=i=i||_,3!==i.nodeType&&8!==i.nodeType&&!Et.test(m+x.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[x.expando]?e:new x.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:x.makeArray(t,[e]),d=x.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(i,t))){if(!r&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,Et.test(l+m)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(i.ownerDocument||_)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)h=a,e.type=o>1?l:d.bindType||m,(u=(J.get(a,"events")||Object.create(null))[e.type]&&J.get(a,"handle"))&&u.apply(a,t),(u=c&&a[c])&&u.apply&&Y(a)&&(e.result=u.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!Y(i)||c&&g(i[m])&&!y(i)&&((s=i[c])&&(i[c]=null),x.event.triggered=m,e.isPropagationStopped()&&h.addEventListener(m,xt),i[m](),e.isPropagationStopped()&&h.removeEventListener(m,xt),x.event.triggered=void 0,s&&(i[c]=s)),e.result}},simulate:function(e,t,n){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(i,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),v.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var Ct=n.location,St={guid:Date.now()},Tt=/\?/;x.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),t};var Nt=/\[\]$/,kt=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,i){var r;if(Array.isArray(t))x.each(t,(function(t,r){n||Nt.test(e)?i(e,r):Dt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==E(t))i(e,t);else for(r in t)Dt(e+"["+r+"]",t[r],n,i)}x.param=function(e,t){var n,i=[],r=function(e,t){var n=g(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){r(this.name,this.value)}));else for(n in e)Dt(n,e[n],t,r);return i.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Mt.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(kt,"\r\n")}})):{name:t.name,value:n.replace(kt,"\r\n")}})).get()}});var At=/%20/g,jt=/#.*$/,Lt=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Rt=/^\/\//,Ft={},Ht={},qt="*/".concat("*"),Vt=_.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(R)||[];if(g(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Bt(e,t,n,i){var r={},o=e===Ht;function a(s){var l;return r[s]=!0,x.each(e[s]||[],(function(e,s){var c=s(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Ut(e,t){var n,i,r=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&x.extend(!0,e,i),e}Vt.href=Ct.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,x.ajaxSettings),t):Ut(x.ajaxSettings,e)},ajaxPrefilter:Wt(Ft),ajaxTransport:Wt(Ht),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,s,l,c,u,d,h,f=x.ajaxSetup({},t),p=f.context||f,m=f.context&&(p.nodeType||p.jquery)?x(p):x.event,v=x.Deferred(),g=x.Callbacks("once memory"),y=f.statusCode||{},b={},w={},E="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Pt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||E;return i&&i.abort(t),S(0,t),this}};if(v.promise(C),f.url=((e||f.url||Ct.href)+"").replace(Rt,Ct.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(R)||[""],null==f.crossDomain){l=_.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=x.param(f.data,f.traditional)),Bt(Ft,f,t,C),c)return C;for(d in(u=x.event&&f.global)&&0==x.active++&&x.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),r=f.url.replace(jt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(At,"+")):(h=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Tt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Lt,"$1"),h=(Tt.test(r)?"&":"?")+"_="+St.guid+++h),f.url=r+h),f.ifModified&&(x.lastModified[r]&&C.setRequestHeader("If-Modified-Since",x.lastModified[r]),x.etag[r]&&C.setRequestHeader("If-None-Match",x.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+qt+"; q=0.01":""):f.accepts["*"]),f.headers)C.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(p,C,f)||c))return C.abort();if(E="abort",g.add(f.complete),C.done(f.success),C.fail(f.error),i=Bt(Ht,f,t,C)){if(C.readyState=1,u&&m.trigger("ajaxSend",[C,f]),c)return C;f.async&&f.timeout>0&&(s=n.setTimeout((function(){C.abort("timeout")}),f.timeout));try{c=!1,i.send(b,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,l){var d,h,_,b,w,E=t;c||(c=!0,s&&n.clearTimeout(s),i=void 0,o=l||"",C.readyState=e>0?4:0,d=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,C,a)),!d&&x.inArray("script",f.dataTypes)>-1&&(f.converters["text script"]=function(){}),b=function(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,b,C,d),d?(f.ifModified&&((w=C.getResponseHeader("Last-Modified"))&&(x.lastModified[r]=w),(w=C.getResponseHeader("etag"))&&(x.etag[r]=w)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=b.state,h=b.data,d=!(_=b.error))):(_=E,!e&&E||(E="error",e<0&&(e=0))),C.status=e,C.statusText=(t||E)+"",d?v.resolveWith(p,[h,E,C]):v.rejectWith(p,[C,E,_]),C.statusCode(y),y=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[C,f,d?h:_]),g.fireWith(p,[C,E]),u&&(m.trigger("ajaxComplete",[C,f]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,i,r){return g(n)&&(r=r||i,i=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:r,data:n,success:i},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},$t=x.ajaxSettings.xhr();v.cors=!!$t&&"withCredentials"in $t,v.ajax=$t=!!$t,x.ajaxTransport((function(e){var t,i;if(v.cors||$t&&!e.crossDomain)return{send:function(r,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(a,r[a]);t=function(e){return function(){t&&(t=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(zt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),i=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),_.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Gt,Xt=[],Yt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||x.expando+"_"+St.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,t,i){var r,o,a,s=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||x.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){a=arguments},i.always((function(){void 0===o?x(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(r)),a&&g(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Gt=_.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Gt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=_.implementation.createHTMLDocument("")).createElement("base")).href=_.location.href,t.head.appendChild(i)):t=_),o=!n&&[],(r=M.exec(e))?[t.createElement(r[1])]:(r=Ee([e],t,o),o&&o.length&&x(o).remove(),x.merge([],r.childNodes)));var i,r,o},x.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=yt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&x.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c=x.css(e,"position"),u=x(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),o=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(i=u.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),g(t)&&(t=t.call(e,n,x.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===x.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),r.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-x.css(i,"marginTop",!0),left:t.left-r.left-x.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||oe}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(i){return U(this,(function(e,i,r){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=$e(v.pixelPosition,(function(e,n){if(n)return n=ze(e,t),Ve.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){x.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return U(this,(function(t,n,r){var o;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?x.css(t,n,s):x.style(t,n,r,s)}),t,a?r:void 0,a)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return i=s.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(s.call(arguments)))}).guid=e.guid=e.guid||x.guid++,r},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=O,x.isFunction=g,x.isWindow=y,x.camelCase=X,x.type=E,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},void 0===(i=function(){return x}.apply(t,[]))||(e.exports=i);var Jt=n.jQuery,Kt=n.$;return x.noConflict=function(e){return n.$===x&&(n.$=Kt),e&&n.jQuery===x&&(n.jQuery=Jt),x},void 0===r&&(n.jQuery=n.$=x),x}))},,function(e,t,n){"use strict";(function(e){n(1),n(26);function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function o(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function a(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),P.add(this),L.add(this),j.add(this),A.add(this),D.add(this),M.add(this),O.add(this),k.add(this),N.add(this),T.add(this),S.add(this),C.add(this),x.add(this),E.add(this),w.add(this),l.set(this,{writable:!0,value:void 0}),c.set(this,{writable:!0,value:void 0}),u.set(this,{writable:!0,value:void 0}),d.set(this,{writable:!0,value:void 0}),h.set(this,{writable:!0,value:void 0}),f.set(this,{writable:!0,value:void 0}),p.set(this,{writable:!0,value:void 0}),m.set(this,{writable:!0,value:void 0}),v.set(this,{writable:!0,value:void 0}),g.set(this,{writable:!0,value:void 0}),y.set(this,{writable:!0,value:void 0}),_.set(this,{writable:!0,value:void 0}),b.set(this,{writable:!0,value:{firstItem:0,secondItem:0,thirdItem:0,isFirstItem:void 0,isSecondItem:void 0,isThirdItem:void 0}}),a(this,l,t),a(this,u,t.find(".dropdown-quantity__head")),a(this,d,t.find(".dropdown-quantity__picker-item-header")),a(this,c,t.find(".dropdown-quantity__head-out")),a(this,h,t.find(".dropdown-quantity__picker")),a(this,f,t.find(".dropdown-quantity__picker-item-quantity-minus")),a(this,p,t.find(".dropdown-quantity__picker-item-quantity-plus")),a(this,m,t.find(".dropdown-quantity__picker-item-quantity-amount")),a(this,v,t.find(".dropdown-quantity__picker-item-clear")),a(this,g,t.find(".dropdown-quantity__picker-item-submit")),o(this,v).on("click",r(this,L,Y).bind(this)),o(this,u).on("click",this.togglePicker.bind(this)),o(this,g).on("click",this.togglePicker.bind(this)),o(this,f).eq(0).on("click",r(this,O,U).bind(this)),o(this,f).eq(1).on("click",r(this,D,$).bind(this)),o(this,f).eq(2).on("click",r(this,j,X).bind(this)),o(this,p).eq(0).on("click",r(this,k,B).bind(this)),o(this,p).eq(1).on("click",r(this,M,z).bind(this)),o(this,p).eq(2).on("click",r(this,A,G).bind(this)),document.addEventListener("mouseup",r(this,P,Z).bind(this)),"room"===n?r(this,w,I).call(this):r(this,E,R).call(this),this.togglePicker()}var t,n,s;return t=e,(n=[{key:"togglePicker",value:function(){o(this,h).toggleClass("dropdown-quantity__picker_hidden")}}])&&i(t.prototype,n),s&&i(t,s),e}(),l=new WeakMap,c=new WeakMap,u=new WeakMap,d=new WeakMap,h=new WeakMap,f=new WeakMap,p=new WeakMap,m=new WeakMap,v=new WeakMap,g=new WeakMap,y=new WeakMap,_=new WeakMap,b=new WeakMap,w=new WeakSet,E=new WeakSet,x=new WeakSet,C=new WeakSet,S=new WeakSet,T=new WeakSet,N=new WeakSet,k=new WeakSet,O=new WeakSet,M=new WeakSet,D=new WeakSet,A=new WeakSet,j=new WeakSet,L=new WeakSet,P=new WeakSet,I=function(){o(this,h).find(".dropdown-quantity__picker-item:last-of-type").hide(),o(this,c).text("Ð£Ð´Ð¾Ð±ÑÑÐ²Ð° Ð½Ð¾Ð¼ÐµÑÐ°"),o(this,d).eq(0).text("Ð¡Ð¿Ð°Ð»ÑÐ½Ð¸"),o(this,d).eq(1).text("ÐÑÐ¾Ð²Ð°ÑÐ¸"),o(this,d).eq(2).text("ÐÐ°Ð½Ð½ÑÐµ ÐºÐ¾Ð¼Ð½Ð°ÑÑ"),a(this,y,r(this,x,F)),a(this,_,r(this,C,H))},R=function(){o(this,c).text("Ð¡ÐºÐ¾Ð»ÑÐºÐ¾ Ð³Ð¾ÑÑÐµÐ¹"),o(this,d).eq(0).text("ÐÐ·ÑÐ¾ÑÐ»ÑÐµ"),o(this,d).eq(1).text("ÐÐµÑÐ¸"),o(this,d).eq(2).text("ÐÐ»Ð°Ð´ÐµÐ½ÑÑ"),a(this,y,r(this,S,q)),a(this,_,r(this,T,V))},F=function(){switch(o(this,b).isFirstItem){case!0:o(this,b).firstItem<5&&o(this,b).firstItem++;break;case void 0:break;case!1:o(this,b).firstItem>0&&o(this,b).firstItem--}if(o(this,b).firstItem>0)switch(o(this,b).isSecondItem){case!0:o(this,b).secondItem<5&&o(this,b).secondItem++;break;case void 0:break;case!1:o(this,b).secondItem>0&&o(this,b).secondItem--}else o(this,b).secondItem=0,o(this,b).thirdItem=0;if(o(this,b).firstItem>0&&o(this,b).secondItem>0)switch(o(this,b).isThirdItem){case!0:o(this,b).thirdItem<5&&o(this,b).thirdItem++;break;case void 0:break;case!1:0!==o(this,b).thirdItem&&o(this,b).thirdItem--}else o(this,b).thirdItem=0;o(this,b).isFirstItem=void 0,o(this,b).isSecondItem=void 0,o(this,b).isThirdItem=void 0},H=function(){var t="";switch(e(o(this,m)[0]).text(o(this,b).firstItem),e(o(this,m)[1]).text(o(this,b).secondItem),e(o(this,m)[2]).text(o(this,b).thirdItem),o(this,b).firstItem){case 0:o(this,v).css("visibility","hidden"),t="Ð£Ð´Ð¾Ð±ÑÑÐ²Ð° Ð½Ð¾Ð¼ÐµÑÐ°";break;case 1:o(this,v).css("visibility","visible"),t="".concat(o(this,b).firstItem," ÑÐ¿Ð°Ð»ÑÐ½Ñ");break;case 2:case 3:case 4:t="".concat(o(this,b).firstItem," ÑÐ¿Ð°Ð»ÑÐ½Ð¸");break;case 5:t="".concat(o(this,b).firstItem," ÑÐ¿Ð°Ð»ÐµÐ½")}switch(o(this,b).secondItem){case 1:t+=", ".concat(o(this,b).secondItem," ÐºÑÐ¾Ð²Ð°ÑÑ");break;case 2:case 3:case 4:t+=", ".concat(o(this,b).secondItem," ÐºÑÐ¾Ð²Ð°ÑÐ¸");break;case 5:t+=", ".concat(o(this,b).secondItem," ÐºÑÐ¾Ð²Ð°ÑÐµÐ¹")}o(this,c).text(t)},q=function(){var e=o(this,b).firstItem+o(this,b).secondItem;switch(o(this,b).isFirstItem){case!0:e<5&&o(this,b).firstItem++;break;case void 0:break;case!1:o(this,b).firstItem>0&&o(this,b).firstItem--}switch(e=o(this,b).firstItem+o(this,b).secondItem,o(this,b).isSecondItem){case!0:e<5&&o(this,b).secondItem++;break;case void 0:break;case!1:o(this,b).secondItem>0&&o(this,b).secondItem--}if((e=o(this,b).firstItem+o(this,b).secondItem)>0)switch(o(this,b).isThirdItem){case!0:o(this,b).thirdItem<5&&o(this,b).thirdItem++;break;case void 0:break;case!1:0!==o(this,b).thirdItem&&o(this,b).thirdItem--}else o(this,b).thirdItem=0;o(this,b).isFirstItem=void 0,o(this,b).isSecondItem=void 0,o(this,b).isThirdItem=void 0},V=function(){var t="",n=o(this,b).firstItem+o(this,b).secondItem;switch(e(o(this,m)[0]).text(o(this,b).firstItem),e(o(this,m)[1]).text(o(this,b).secondItem),e(o(this,m)[2]).text(o(this,b).thirdItem),n){case 0:o(this,v).css("visibility","hidden"),t="Ð¡ÐºÐ¾Ð»ÑÐºÐ¾ Ð³Ð¾ÑÑÐµÐ¹";break;case 1:o(this,v).css("visibility","visible"),t="".concat(n," Ð³Ð¾ÑÑÑ");break;case 2:case 3:case 4:t="".concat(n," Ð³Ð¾ÑÑÑ");break;case 5:t="".concat(n," Ð³Ð¾ÑÑÐµÐ¹")}switch(o(this,b).thirdItem){case 1:t+=", ".concat(o(this,b).thirdItem," Ð¼Ð»Ð°Ð´ÐµÐ½ÐµÑ");break;case 2:case 3:case 4:t+=", ".concat(o(this,b).thirdItem," Ð¼Ð»Ð°Ð´ÐµÐ½ÑÐ°");break;case 5:t+=", ".concat(o(this,b).thirdItem," Ð¼Ð»Ð°Ð´ÐµÐ½ÑÐµÐ²")}o(this,c).text(t)},W=function(){switch(o(this,b).firstItem){case 0:e(o(this,f)[0]).prop("disabled",!0);break;case 1:e(o(this,f)[0]).prop("disabled",!1)}switch(o(this,b).secondItem){case 0:e(o(this,f)[1]).prop("disabled",!0);break;case 1:e(o(this,f)[1]).prop("disabled",!1)}switch(o(this,b).thirdItem){case 0:e(o(this,f)[2]).prop("disabled",!0);break;case 1:e(o(this,f)[2]).prop("disabled",!1)}},B=function(){o(this,b).isFirstItem=!0,o(this,y).call(this),o(this,_).call(this),r(this,N,W).call(this)},U=function(){o(this,b).isFirstItem=!1,o(this,y).call(this),o(this,_).call(this),r(this,N,W).call(this)},z=function(){o(this,b).isSecondItem=!0,o(this,y).call(this),o(this,_).call(this),r(this,N,W).call(this)},$=function(){o(this,b).isSecondItem=!1,o(this,y).call(this),o(this,_).call(this),r(this,N,W).call(this)},G=function(){o(this,b).isThirdItem=!0,o(this,y).call(this),o(this,_).call(this),r(this,N,W).call(this)},X=function(){o(this,b).isThirdItem=!1,o(this,y).call(this),o(this,_).call(this),r(this,N,W).call(this)},Y=function(){o(this,b).firstItem=0,o(this,b).secondItem=0,o(this,b).thirdItem=0,o(this,_).call(this),r(this,N,W).call(this)},Z=function(e){e.target.closest(".dropdown-quantity")||o(this,h).addClass("dropdown-quantity__picker_hidden")};t.a=s}).call(this,n(2))},function(e,t,n){"use strict";n(1),n(28);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function o(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}function a(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}var s=new WeakMap,l=new WeakMap,c=new WeakMap,u=new WeakMap,d=new WeakMap,h=new WeakMap,f=new WeakMap,p=new WeakMap,m=new WeakMap,v=new WeakMap,g=new WeakMap,y=new WeakMap,_=new WeakMap,b=new WeakSet,w=new WeakSet,E=new WeakSet,x=new WeakSet,C=new WeakSet,S=new WeakSet,T=new WeakSet,N=new WeakSet,k=function(){a(this,s).trigger(a(this,h))},O=function(){this.counter=0,a(this,m).setTime(a(this,_)),this.dateComeIn=void 0,this.dateCheckOut=void 0,r(this,E,M).call(this),r(this,N,P).call(this),r(this,T,L).call(this),a(this,s).trigger(a(this,d))},M=function(){a(this,l).text("".concat(a(this,v)[a(this,m).getMonth()]," ").concat(a(this,m).getFullYear()))},D=function(){a(this,m).setMonth(a(this,m).getMonth()-1),r(this,N,P).call(this)},A=function(){a(this,m).setMonth(a(this,m).getMonth()+1),r(this,N,P).call(this)},j=function(e){switch(this.counter){case 0:o(this,g,this.dateComeIn),this.dateComeIn=e.currentTarget.getAttribute("data-timestamp"),r(this,T,L).call(this),this.counter++,a(this,s).trigger(a(this,f));break;case 1:o(this,y,this.dateCheckOut),this.dateCheckOut=e.currentTarget.getAttribute("data-timestamp"),r(this,T,L).call(this),this.counter--,a(this,s).trigger(a(this,p))}},L=function(){var e=this;a(this,c).each((function(t,n){var i=n.getAttribute("data-timestamp");i>=e.dateComeIn&&i<=e.dateCheckOut&&e.dateComeIn!==e.dateCheckOut?a(e,u)[t].classList.add("date-picker__body-range"):a(e,u)[t].classList.remove("date-picker__body-range"),i===e.dateComeIn||i===e.dateCheckOut?(n.classList.add("date-picker__body-date_selected"),i===e.dateComeIn?a(e,u)[t].setAttribute("data-range","first"):a(e,u)[t].setAttribute("data-range","last")):(n.classList.remove("date-picker__body-date_selected"),a(e,u)[t].removeAttribute("data-range")),i===String(a(e,_))?n.classList.add("date-picker__body-date_current"):n.classList.remove("date-picker__body-date_current")}))},P=function(){var e=new Date(a(this,m)),t=e.getMonth();e.setDate(1);var n=e.getDay();0===n&&(n=7),e.setDate(1-n),a(this,c).each((function(n,i){e.setDate(e.getDate()+1),e.getMonth()===t?i.classList.add("date-picker__body-date_day-month"):i.classList.remove("date-picker__body-date_day-month"),i.setAttribute("data-timestamp",e.getTime()),i.value=e.getDate()})),r(this,E,M).call(this),r(this,T,L).call(this)};t.a=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),N.add(this),T.add(this),S.add(this),C.add(this),x.add(this),E.add(this),w.add(this),b.add(this),s.set(this,{writable:!0,value:void 0}),l.set(this,{writable:!0,value:void 0}),c.set(this,{writable:!0,value:void 0}),u.set(this,{writable:!0,value:void 0}),d.set(this,{writable:!0,value:"date-picker-clear"}),h.set(this,{writable:!0,value:"date-picker-submit"}),f.set(this,{writable:!0,value:"date-picker-select-in"}),p.set(this,{writable:!0,value:"date-picker-select-out"}),m.set(this,{writable:!0,value:new Date}),v.set(this,{writable:!0,value:["Ð¯Ð½Ð²Ð°ÑÑ","Ð¤ÐµÐ²ÑÐ°Ð»Ñ","ÐÐ°ÑÑ","ÐÐ¿ÑÐµÐ»Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³ÑÑÑ","Ð¡ÐµÐ½ÑÑÐ±Ñ","ÐÐºÑÑÐ±ÑÑ","ÐÐ¾ÑÐ±ÑÑ","ÐÐµÐºÐ°Ð±ÑÑ"]}),g.set(this,{writable:!0,value:void 0}),y.set(this,{writable:!0,value:void 0}),_.set(this,{writable:!0,value:a(this,m).getTime()}),i(this,"dateComeIn",a(this,_).toString()),i(this,"dateCheckOut",a(this,_).toString()),i(this,"counter",0),o(this,s,t),o(this,l,t.find(".date-picker__head-title")),o(this,u,t.find(".date-picker__body-range")),o(this,c,t.find(".date-picker__body-date").on("click",r(this,S,j).bind(this))),t.find(".date-picker__head-list-left").on("click",r(this,x,D).bind(this)),t.find(".date-picker__head-list-right").on("click",r(this,C,A).bind(this)),t.find(".date-picker__footer-clear").on("click",r(this,w,O).bind(this)),t.find(".date-picker__footer-submit").on("click",r(this,b,k).bind(this)),r(this,N,P).call(this)}},function(e,t,n){var i=n(0),r=n(7);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(9);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(6),n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n(8)},function(e,t,n){var i=n(0),r=n(12);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(14)},function(e,t,n){var i=n(0),r=n(15);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},,function(e,t,n){"use strict";n(1),n(18)},function(e,t,n){var i=n(0),r=n(19);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(13),n(21)},function(e,t,n){var i=n(0),r=n(22);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(24)},function(e,t,n){var i=n(0),r=n(25);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(27);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(29);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(31);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(10),n(17),n(20),n(23),n.p,n(30)},,,,,,,,,,function(e){e.exports=JSON.parse('[{"img1":"img/card-room-980-4.jpg","img2":"img/card-room-856-4.jpg","img3":"img/card-room-840-4.jpg","img4":"img/card-room-888-4.jpg","alt1":"room 888 pic 1","alt2":"room 888 pic 2","alt3":"room 888 pic 3","alt4":"room 888 pic 4","number":888,"level":"Ð»ÑÐºÑ","amount":"9 990","review":145,"rate":5},{"img1":"img/card-room-350-4.jpg","img2":"img/card-room-856-4.jpg","img3":"img/card-room-678-4.jpg","img4":"img/card-room-840-4.jpg","alt1":"room 840 pic 1","alt2":"room 840 pic 2","alt3":"room 840 pic 3","alt4":"room 840 pic 4","number":840,"level":"","amount":"9 900","review":65,"rate":4},{"img1":"img/card-room-840-4.jpg","img2":"img/card-room-856-4.jpg","img3":"img/card-room-740-4.jpg","img4":"img/card-room-980-4.jpg","alt1":"room 980 pic 1","alt2":"room 980 pic 2","alt3":"room 980 pic 3","alt4":"room 980 pic 4","number":980,"level":"Ð»ÑÐºÑ","amount":"8 500","review":35,"rate":3},{"img1":"img/card-room-840-4.jpg","img2":"img/card-room-980-4.jpg","img3":"img/card-room-740-4.jpg","img4":"img/card-room-856-4.jpg","alt1":"room 856 pic 1","alt2":"room 856 pic 2","alt3":"room 856 pic 3","alt4":"room 856 pic 4","number":856,"level":"","amount":"7 300","review":19,"rate":5},{"img1":"img/card-room-980-4.jpg","img2":"img/card-room-856-4.jpg","img3":"img/card-room-840-4.jpg","img4":"img/card-room-740-4.jpg","alt1":"room 740 pic 1","alt2":"room 740 pic 2","alt3":"room 740 pic 3","alt4":"room 740 pic 4","number":740,"level":"","amount":"6 000","review":44,"rate":4},{"img1":"img/card-room-840-4.jpg","img2":"img/card-room-444-4.jpg","img3":"img/card-room-666-4.jpg","img4":"img/card-room-982-4.jpg","alt1":"room 982 pic 1","alt2":"room 982 pic 2","alt3":"room 982 pic 3","alt4":"room 982 pic 4","number":982,"level":"","amount":"5 800","review":56,"rate":3},{"img1":"img/card-room-740-4.jpg","img2":"img/card-room-666-4.jpg","img3":"img/card-room-982-4.jpg","img4":"img/card-room-678-4.jpg","alt1":"room 678 pic 1","alt2":"room 678 pic 2","alt3":"room 678 pic 3","alt4":"room 678 pic 4","number":678,"level":"","amount":"5 500","review":45,"rate":5},{"img1":"img/card-room-678-4.jpg","img2":"img/card-room-982-4.jpg","img3":"img/card-room-444-4.jpg","img4":"img/card-room-450-4.jpg","alt1":"room 450 pic 1","alt2":"room 450 pic 2","alt3":"room 450 pic 3","alt4":"room 450 pic 4","number":450,"level":"","amount":"5 300","review":39,"rate":4},{"img1":"img/card-room-450-4.jpg","img2":"img/card-room-666-4.jpg","img3":"img/card-room-444-4.jpg","img4":"img/card-room-350-4.jpg","alt1":"room 350 pic 1","alt2":"room 350 pic 2","alt3":"room 350 pic 3","alt4":"room 350 pic 4","number":350,"level":"","amount":"5 000","review":77,"rate":3},{"img1":"img/card-room-980-4.jpg","img2":"img/card-room-740-4.jpg","img3":"img/card-room-840-4.jpg","img4":"img/card-room-666-4.jpg","alt1":"room 666 pic 1","alt2":"room 666 pic 2","alt3":"room 666 pic 3","alt4":"room 666 pic 4","number":666,"level":"","amount":"5 000","review":25,"rate":5},{"img1":"img/card-room-352-4.jpg","img2":"img/card-room-450-4.jpg","img3":"img/card-room-982-4.jpg","img4":"img/card-room-444-4.jpg","alt1":"room 444 pic 1","alt2":"room 444 pic 2","alt3":"room 444 pic 3","alt4":"room 444 pic 4","number":444,"level":"","amount":"5 000","review":15,"rate":4},{"img1":"img/card-room-980-4.jpg","img2":"img/card-room-982-4.jpg","img3":"img/card-room-856-4.jpg","img4":"img/card-room-352-4.jpg","alt1":"room 352 pic 1","alt2":"room 352 pic 2","alt3":"room 352 pic 3","alt4":"room 352 pic 4","number":352,"level":"","amount":"5 000","review":55,"rate":3}]')},function(e,t,n){"use strict";n(44),n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n(85);function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a.set(this,{writable:!0,value:void 0}),function(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}}(this,a,t.find(".card-room__slider-radio"));var i=t.find(".card-room__slider-img");t.find(".rate-button__radio").eq(n.rate-1).prop("checked",!0),i.eq(0).attr("src",n.img1).attr("alt",n.alt),i.eq(1).attr("src",n.img2).attr("alt",n.alt),i.eq(2).attr("src",n.img3).attr("alt",n.alt),i.eq(3).attr("src",n.img4).attr("alt",n.alt),t.find(".card-room__price-number").text(n.number),t.find(".card-room__price-level").text(n.level),t.find(".card-room__price-pay-amount").text(n.amount),t.find(".card-room__review-quantity").text(n.review),t.find(".card-room__slider-control-right-button").on("click",this.listRight.bind(this)),t.find(".card-room__slider-control-left-button").on("click",this.listLeft.bind(this))}var t,n,o;return t=e,(n=[{key:"listRight",value:function(){for(var e=1;e<5;e++)if(r(this,a).eq(e).prop("checked"))return r(this,a).eq(e-1).prop("checked",!0),void r(this,a).eq(e-1).attr("data-dir","r")}},{key:"listLeft",value:function(){for(var e=0;e<4;e++)if(r(this,a).eq(e).prop("checked"))return r(this,a).eq(e+1).prop("checked",!0),void r(this,a).eq(e+1).attr("data-dir","l")}}])&&i(t.prototype,n),o&&i(t,o),e}(),a=new WeakMap;t.a=o},function(e,t,n){"use strict";n(45)},function(e,t,n){var i=n(0),r=n(46);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(62)},,,,,,,function(e,t,n){"use strict";n(56),n(57);function i(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function r(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function o(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var a=new WeakMap,s=new WeakMap,l=new WeakMap,c=new WeakSet,u=new WeakSet,d=function(e){"valueFrom"===e.detail.name&&o(this,s,r(this,u,h).call(this,this.$slider.slider("valueFrom"))),"valueTo"===e.detail.name&&o(this,l,r(this,u,h).call(this,this.$slider.slider("valueTo"))),i(this,a).text("".concat(i(this,s),"ââ½ - ").concat(i(this,l),"ââ½"))},h=function(e){return e.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1 ")};t.a=function e(t){var n,f,p;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u.add(this),c.add(this),p=void 0,(f="$slider")in(n=this)?Object.defineProperty(n,f,{value:p,enumerable:!0,configurable:!0,writable:!0}):n[f]=p,a.set(this,{writable:!0,value:void 0}),s.set(this,{writable:!0,value:void 0}),l.set(this,{writable:!0,value:void 0}),this.$slider=t.find(".range-slider__plugin").slider("init"),o(this,a,t.find(".range-slider__title-range")),o(this,s,r(this,u,h).call(this,this.$slider.slider("valueFrom"))),o(this,l,r(this,u,h).call(this,this.$slider.slider("valueTo"))),i(this,a).text("".concat(i(this,s),"â½ - ").concat(i(this,l),"â½")),this.$slider.on("slider-data",r(this,c,d).bind(this))}},function(e,t,n){"use strict";var i=n(5);n(1),n(59);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=c(e);if(t){var r=c(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function d(e,t){var n=t.get(e);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(e):n.value}function h(e,t,n){var i=t.get(e);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(e,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(n,e);var t=a(n);function n(e){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),i=t.call(this,e.find(".date-picker")),E.add(l(i)),w.add(l(i)),b.add(l(i)),p.set(l(i),{writable:!0,value:void 0}),m.set(l(i),{writable:!0,value:void 0}),v.set(l(i),{writable:!0,value:void 0}),g.set(l(i),{writable:!0,value:void 0}),y.set(l(i),{writable:!0,value:["ÑÐ½Ð²","ÑÐµÐ²","Ð¼Ð°Ñ","Ð°Ð¿Ñ","Ð¼Ð°Ð¹","Ð¸ÑÐ½","Ð¸ÑÐ»","Ð°Ð²Ð³","ÑÐµÐ½","Ð¾ÐºÑ","Ð½Ð¾Ñ","Ð´ÐµÐº"]}),_.set(l(i),{writable:!0,value:new Date}),h(l(i),p,e),h(l(i),g,e.find(".date-filter__body")),h(l(i),m,e.find(".date-filter__body-range")),h(l(i),v,e.find(".date-filter__picker")),d(l(i),g).on("click",u(l(i),w,C).bind(l(i))),d(l(i),v).on("date-picker-select-out",u(l(i),b,x).bind(l(i))),d(l(i),v).on("date-picker-submit",u(l(i),w,C).bind(l(i))),document.addEventListener("mouseup",u(l(i),E,S).bind(l(i))),u(l(i),w,C).call(l(i)),u(l(i),b,x).call(l(i)),i}return n}(i.a),p=new WeakMap,m=new WeakMap,v=new WeakMap,g=new WeakMap,y=new WeakMap,_=new WeakMap,b=new WeakSet,w=new WeakSet,E=new WeakSet,x=function(){d(this,_).setTime(Number(this.dateComeIn));var e="".concat(d(this,_).getDate()," ").concat(d(this,y)[d(this,_).getMonth()]," ");d(this,_).setTime(Number(this.dateCheckOut));var t="".concat(d(this,_).getDate()," ").concat(d(this,y)[d(this,_).getMonth()]);d(this,m).text("".concat(e," - ").concat(t))},C=function(){d(this,v).toggleClass("date-filter__picker_hidden")},S=function(e){e.target.closest(".date-filter")||d(this,v).addClass("date-filter__picker_hidden")};t.a=f},function(e,t,n){(function(e){function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){var n={};function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==t(e)&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)i.d(r,o,function(t){return e[t]}.bind(null,o));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=10)}([function(e,t,n){"use strict";var i=n(3),r=n.n(i)()(!1);r.push([e.i,".O33-ei1R727yQA9Kb5YG1{display:flex;position:relative;align-items:center;background:#fff;height:6px;border:1px solid rgba(31,32,65,.25);border-radius:3px;box-sizing:border-box;cursor:pointer}._1dCWMnXS8vbmyZqBSrYtZx{flex-direction:column;width:6px;height:100%}._3XAUvLt0Enu1jUsfafTIAj{display:flex;z-index:10;position:absolute;margin-left:-8px;margin-top:-6px;background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);border:2px solid #fff;border-radius:10px;padding:6px}._2YRaup35clJkIe3m329KvT{margin-left:-6px;margin-top:-7px}._2xx5pMSDcw1QRyeJhOqErL{position:absolute;z-index:10;display:flex;align-items:center;justify-content:center;width:30px;height:20px;top:-30px;left:-10px;border:2px solid #66d2ea;background-color:#6fcf97;opacity:.5;border-radius:5px}.sVs5s72HAvl74CswSHZTd{left:-40px;top:-5px}._3w9clh0nyZio_5gDLGl1Dd{position:absolute;background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);border-radius:3px;height:100%}._2A-xufeD3ynNsidYpLrfR0{width:100%;height:auto}._3pQhlkt4_s_HsZUtlEM2O8{display:block;margin-top:5px;cursor:pointer}._2V8liRhCgcAbMkFk-6zlKs{display:flex;height:100%;margin-left:5px;margin-top:0}.zgU06o9yZgvRzV5YPxRii{display:flex;justify-content:space-between}.VIHJ_QpDrWcgSNMe8nRhU{flex-direction:column}._2Rr9y7AuA2SjHe7Sy-wpAp{display:flex;justify-content:space-around;align-items:flex-end;width:100%;height:8px;border-bottom:2px solid #66d2ea;border-right:2px solid #66d2ea;padding-bottom:2px}.catpezZSplMi6LkZL0OdA{flex-direction:column;border-right:2px solid #66d2ea;border-top:2px solid #66d2ea;padding-right:2px;width:8px;height:100%;border-bottom:none;padding-bottom:0}._2Rr9y7AuA2SjHe7Sy-wpAp:first-child{border-left:2px solid #66d2ea}.catpezZSplMi6LkZL0OdA:last-child{border-bottom:2px solid #66d2ea}.catpezZSplMi6LkZL0OdA:first-child{border-left:none}.Ly2lMDhTDAeYyF2IPMVHf{width:100%;height:5px}._1VpZbOL-88Z6hyqyBGhuoN{width:5px;height:100%}.Ly2lMDhTDAeYyF2IPMVHf:not(:first-child){border-left:1px solid #66d2ea}._1VpZbOL-88Z6hyqyBGhuoN:not(:last-child){border-bottom:1px solid #66d2ea}._1VpZbOL-88Z6hyqyBGhuoN:not(:first-child){border-left:none}.AIgAiCSSgJXl_1ODSJM9H{display:flex;justify-content:space-between}._2JY8jz5wTD68z_QvA96q28{flex-direction:column}._1VduyRI1NyVORvFuA6CRa4{display:flex;justify-content:center;width:0;color:#6fcf97}._3IwBKLWh1i6fViGZ9Nc1qd{align-items:center;height:0;width:auto}",""]),r.locals={rail:"O33-ei1R727yQA9Kb5YG1",rail_ver:"_1dCWMnXS8vbmyZqBSrYtZx",thumb:"_3XAUvLt0Enu1jUsfafTIAj",thumb_ver:"_2YRaup35clJkIe3m329KvT",thumb__tooltip:"_2xx5pMSDcw1QRyeJhOqErL",thumb__tooltip_ver:"sVs5s72HAvl74CswSHZTd",progress:"_3w9clh0nyZio_5gDLGl1Dd",progress_ver:"_2A-xufeD3ynNsidYpLrfR0",scale:"_3pQhlkt4_s_HsZUtlEM2O8",scale_ver:"_2V8liRhCgcAbMkFk-6zlKs",scale__wrapper:"zgU06o9yZgvRzV5YPxRii",scale__wrapper_ver:"VIHJ_QpDrWcgSNMe8nRhU",scale__division:"_2Rr9y7AuA2SjHe7Sy-wpAp",scale__division_ver:"catpezZSplMi6LkZL0OdA",scale__subdivision:"Ly2lMDhTDAeYyF2IPMVHf",scale__subdivision_ver:"_1VpZbOL-88Z6hyqyBGhuoN",scale__values:"AIgAiCSSgJXl_1ODSJM9H",scale__values_ver:"_2JY8jz5wTD68z_QvA96q28",scale__valuesItem:"_1VduyRI1NyVORvFuA6CRa4",scale__valuesItem_ver:"_3IwBKLWh1i6fViGZ9Nc1qd"},t.a=r},function(t,n){t.exports=e},function(e,n){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==("undefined"==typeof window?"undefined":t(window))&&(i=window)}e.exports=i},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,i,r,o=e[1]||"",a=e[3];if(!a)return o;if(t&&"function"==typeof btoa){var s=(n=a,i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(r," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([s]).join("\n")}return[o].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);i&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";(function(e){n(5),n(6);var t,i=n(0),r=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,n)},function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}),o=function(t){function n(e){var n=t.call(this)||this;return n.rail=new a,n.scale=new c,n.styles=document.createElement("style"),n.presenter=e,n.styles.innerHTML=i.a,n.attachShadow({mode:"open"}),n.shadowRoot&&(n.shadowRoot.appendChild(n.styles),n.shadowRoot.appendChild(n.rail),n.shadowRoot.appendChild(n.scale)),n}return r(n,t),n.prototype.connectedCallback=function(){this.style.display="flex",this.style.justifyContent="center"},n.prototype.setModelData=function(t,n){switch(t){case"minValue":this.rail.setAttribute("data-min-value",n.toString()),this.scale.setAttribute("data-min-value",n.toString());break;case"maxValue":this.rail.setAttribute("data-max-value",n.toString()),this.scale.setAttribute("data-max-value",n.toString());break;case"valueFrom":this.rail.setAttribute("data-value-from",n.toString());break;case"valueTo":this.rail.setAttribute("data-value-to",n.toString());break;case"onScale":n?e(this.scale).show():e(this.scale).hide();break;case"onTooltip":this.rail.setAttribute("data-on-tooltip",n.toString());break;case"onRange":this.rail.setAttribute("data-on-range",n.toString()),this.scale.setAttribute("data-on-range",n.toString());break;case"onVertical":this.style.flexDirection=n?"row":"column",this.rail.setAttribute("data-on-vertical",n.toString()),this.scale.setAttribute("data-on-vertical",n.toString())}},n}(HTMLElement),a=function(t){function n(){var e=t.call(this)||this;return e._thumbFrom=new l("valueFrom"),e._thumbTo=new l("valueTo"),e._progress=new s,e.className=i.a.locals.rail,e.appendChild(e._thumbFrom),e.appendChild(e._thumbTo),e.appendChild(e._progress),e}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-min-value","data-max-value","data-value-from","data-value-to","data-on-tooltip","data-on-range","data-on-vertical"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-min-value":case"data-max-value":this._thumbFrom.setAttribute("data-position",this.calcThumbPosition("from").toString()),this._progress.setAttribute("data-position-from",this.calcThumbPosition("from").toString()),this._thumbTo.setAttribute("data-position",this.calcThumbPosition("to").toString()),this._progress.setAttribute("data-position-to",this.calcThumbPosition("to").toString());break;case"data-on-tooltip":this._thumbFrom.setAttribute("data-on-tooltip",this.dataset.onTooltip),this._thumbTo.setAttribute("data-on-tooltip",this.dataset.onTooltip);break;case"data-on-range":this._progress.setAttribute("data-on-range",this.dataset.onRange),"false"===this.dataset.onRange?e(this._thumbTo).hide():e(this._thumbTo).show();break;case"data-on-vertical":this._thumbFrom.setAttribute("data-on-vertical",this.dataset.onVertical),this._progress.setAttribute("data-on-vertical",this.dataset.onVertical),this._thumbTo.setAttribute("data-on-vertical",this.dataset.onVertical),"true"===this.dataset.onVertical?e(this).addClass(i.a.locals.rail_ver):e(this).removeClass(i.a.locals.rail_ver);break;case"data-value-from":this._thumbFrom.setAttribute("data-position",this.calcThumbPosition("from").toString()),this._thumbFrom.setAttribute("data-value",Number(this.dataset.valueFrom).toFixed()),this._progress.setAttribute("data-position-from",this.calcThumbPosition("from").toString());break;case"data-value-to":this._thumbTo.setAttribute("data-position",this.calcThumbPosition("to").toString()),this._thumbTo.setAttribute("data-value",Number(this.dataset.valueTo).toFixed()),this._progress.setAttribute("data-position-to",this.calcThumbPosition("to").toString())}},n.prototype.calcThumbPosition=function(e){var t=Number(this.dataset.minValue),n=Number(this.dataset.maxValue);return(Number("from"===e?this.dataset.valueFrom:this.dataset.valueTo)-t)/((n-t)/100)},n}(HTMLElement),s=function(t){function n(){var e=t.call(this)||this;return e._leftOrTop="left",e._rightOrBottom="right",e.className=i.a.locals.progress,e}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-position-from","data-position-to","data-on-range","data-on-vertical"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-position-from":this.setPosFrom();break;case"data-position-to":case"data-on-range":this.setPosTo();break;case"data-on-vertical":"true"===this.dataset.onVertical?e(this).addClass(i.a.locals.progress_ver):e(this).removeClass(i.a.locals.progress_ver),this.setDirection(),this.setPosFrom(),this.setPosTo()}},n.prototype.setPosFrom=function(){e(this).css(""+this._leftOrTop,this.dataset.positionFrom+"%")},n.prototype.setPosTo=function(){"true"===this.dataset.onRange?e(this).css(""+this._rightOrBottom,100-Number(this.dataset.positionTo)+"%"):e(this).css(""+this._rightOrBottom,"0")},n.prototype.setDirection=function(){"true"===this.dataset.onVertical?(this._leftOrTop="top",this._rightOrBottom="bottom",this.style.left="0"):(this._leftOrTop="left",this._rightOrBottom="right",this.style.top="0")},n}(HTMLElement),l=function(t){function n(e){var n=t.call(this)||this;return n._position=0,n._clientXorY="clientX",n._offsetXorY=0,n._widthOrHeight=0,n._direction="left",n._tooltip=document.createElement("div"),n._mouseMove=n.onMouseMove.bind(n),n._mouseUp=n.onMouseUp.bind(n),n._name=e,n.className=i.a.locals.thumb,n._tooltip.className=i.a.locals.thumb__tooltip,n.appendChild(n._tooltip),n.addEventListener("mousedown",n.onMouseDown.bind(n)),n}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-value","data-position","data-on-vertical","data-on-tooltip"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-value":this._tooltip.textContent=this.dataset.value;break;case"data-position":this._position=Number(this.dataset.position),this.moveToPosition(this._position);break;case"data-on-vertical":"true"===this.dataset.onVertical?(e(this).addClass(i.a.locals.thumb_ver),e(this._tooltip).addClass(i.a.locals.thumb__tooltip_ver)):(e(this).removeClass(i.a.locals.thumb_ver),e(this._tooltip).removeClass(i.a.locals.thumb__tooltip_ver)),this.setPosition(),this.moveToPosition(this._position);break;case"data-on-tooltip":"false"===this.dataset.onTooltip?e(this._tooltip).hide():e(this._tooltip).show()}},n.prototype.moveToPosition=function(t){e(this).css(""+this._direction,t+"%")},n.prototype.setPosition=function(){if(this.parentElement){var e=this.parentElement.getBoundingClientRect();"true"===this.dataset.onVertical?(this._clientXorY="clientY",this._direction="top",this._offsetXorY=e.top,this._widthOrHeight=e.height,this.style.left="0"):(this._clientXorY="clientX",this._direction="left",this._offsetXorY=e.left,this._widthOrHeight=e.width,this.style.top="0")}},n.prototype.onMouseDown=function(e){e.preventDefault(),this.setPosition(),document.addEventListener("mousemove",this._mouseMove),document.addEventListener("mouseup",this._mouseUp)},n.prototype.onMouseMove=function(e){this._position=(e[this._clientXorY]-this._offsetXorY)/(this._widthOrHeight/100),this._position<0&&(this._position=0),this._position>100&&(this._position=100),this.dispatchEvent(new CustomEvent("slider-view",{bubbles:!0,cancelable:!0,composed:!0,detail:{name:this._name,value:this._position}}))},n.prototype.onMouseUp=function(){document.removeEventListener("mousemove",this._mouseMove),document.removeEventListener("mouseup",this._mouseUp)},n}(HTMLElement),c=function(t){function n(){var e=t.call(this)||this;e._scaleValueItems=[],e._name="valueTo",e.className=i.a.locals.scale;for(var n=0;n<4;n++)e._scaleValueItems[n]=document.createElement("span"),e._scaleValueItems[n].className=i.a.locals.scale__valuesItem;var r=document.createElement("div");r.className=i.a.locals.scale__values;for(var o=0,a=e._scaleValueItems;o<a.length;o++){var s=a[o];r.appendChild(s)}return e.innerHTML='      \n      <div class="'+i.a.locals.scale__wrapper+'">\n        <div class="'+i.a.locals.scale__division+'">\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n        </div>\n        <div class="'+i.a.locals.scale__division+'">\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n        </div>\n        <div class="'+i.a.locals.scale__division+'">\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n          <span class="'+i.a.locals.scale__subdivision+'"></span>\n        </div>\n      </div>',e.appendChild(r),e.addEventListener("mousedown",e.handleMouseDown.bind(e)),e}return r(n,t),Object.defineProperty(n,"observedAttributes",{get:function(){return["data-min-value","data-max-value","data-on-vertical"]},enumerable:!1,configurable:!0}),n.prototype.attributeChangedCallback=function(t){switch(t){case"data-min-value":case"data-max-value":this.render();break;case"data-on-vertical":"true"===this.dataset.onVertical?(e(this).addClass(i.a.locals.scale_ver),e(this).find("."+i.a.locals.scale__wrapper).addClass(i.a.locals.scale__wrapper_ver),e(this).find("."+i.a.locals.scale__values).addClass(i.a.locals.scale__values_ver),e(this).find("."+i.a.locals.scale__valuesItem).addClass(i.a.locals.scale__valuesItem_ver),e(this).find("."+i.a.locals.scale__division).addClass(i.a.locals.scale__division_ver),e(this).find("."+i.a.locals.scale__subdivision).addClass(i.a.locals.scale__subdivision_ver)):(e(this).removeClass(i.a.locals.scale_ver),e(this).find("."+i.a.locals.scale__wrapper).removeClass(i.a.locals.scale__wrapper_ver),e(this).find("."+i.a.locals.scale__values).removeClass(i.a.locals.scale__values_ver),e(this).find("."+i.a.locals.scale__valuesItem).removeClass(i.a.locals.scale__valuesItem_ver),e(this).find("."+i.a.locals.scale__division).removeClass(i.a.locals.scale__division_ver),e(this).find("."+i.a.locals.scale__subdivision).removeClass(i.a.locals.scale__subdivision_ver))}},n.prototype.render=function(){var e=Number(this.dataset.minValue),t=Number(this.dataset.maxValue),n=(t-e)/3;this._scaleValueItems[0].textContent=e.toFixed(),this._scaleValueItems[1].textContent=(e+n).toFixed(),this._scaleValueItems[2].textContent=(e+n+n).toFixed(),this._scaleValueItems[3].textContent=t.toFixed()},n.prototype.handleMouseDown=function(e){var t=this.getBoundingClientRect(),n=0;e.clientX&&e.clientY&&(n="true"===this.dataset.onVertical?(e.clientY-t.top)/(t.height/100):(e.clientX-t.left)/(t.width/100)),"true"===this.dataset.onRange&&"valueFrom"===this._name?this._name="valueTo":this._name="valueFrom",this.dispatchEvent(new CustomEvent("slider-view",{bubbles:!0,cancelable:!0,composed:!0,detail:{name:this._name,value:n}}))},n}(HTMLElement);customElements.get("input-slider")||(customElements.define("input-slider",o),customElements.define("input-slider-view-thumb",l),customElements.define("input-slider-view-rail",a),customElements.define("input-slider-view-scale",c),customElements.define("input-slider-view-progress",s))}).call(this,n(1))},function(e,t){
/**
  @license @nocompile
  Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
!function(){"use strict";!function(){if(void 0!==window.Reflect&&void 0!==window.customElements&&!window.customElements.polyfillWrapFlushCallback){var e=HTMLElement;window.HTMLElement={HTMLElement:function(){return Reflect.construct(e,[],this.constructor)}}.HTMLElement,HTMLElement.prototype=e.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,e)}}()}()},function(e,n,i){(function(e,n){
/**
    @license @nocompile
    Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */
(function(){"use strict";var i;function r(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}var o="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){e!=Array.prototype&&e!=Object.prototype&&(e[t]=n.value)},a="undefined"!=typeof window&&window===this?this:void 0!==e&&null!=e?e:this;function s(){s=function(){},a.Symbol||(a.Symbol=d)}function l(e,t){this.a=e,o(this,"description",{configurable:!0,writable:!0,value:t})}l.prototype.toString=function(){return this.a};var c,u,d=(c=0,function e(t){if(this instanceof e)throw new TypeError("Symbol is not a constructor");return new l("jscomp_symbol_"+(t||"")+"_"+c++,t)});function h(){s();var e=a.Symbol.iterator;e||(e=a.Symbol.iterator=a.Symbol("Symbol.iterator")),"function"!=typeof Array.prototype[e]&&o(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return function(e){return h(),(e={next:e})[a.Symbol.iterator]=function(){return this},e}(r(this))}}),h=function(){}}function f(e){var t="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return t?t.call(e):{next:r(e)}}function p(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}if("function"==typeof Object.setPrototypeOf)u=Object.setPrototypeOf;else{var m;e:{var v={};try{v.__proto__={Pa:!0},m=v.Pa;break e}catch(nt){}m=!1}u=m?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var g=u;function y(){this.l=!1,this.b=null,this.Ea=void 0,this.a=1,this.Y=0,this.c=null}function _(e){if(e.l)throw new TypeError("Generator is already running");e.l=!0}function b(e,t){e.c={Sa:t,Wa:!0},e.a=e.Y}function w(e,t){return e.a=3,{value:t}}function E(e){this.a=new y,this.b=e}function x(e,t,n,i){try{var r=t.call(e.a.b,n);if(!(r instanceof Object))throw new TypeError("Iterator result "+r+" is not an object");if(!r.done)return e.a.l=!1,r;var o=r.value}catch(t){return e.a.b=null,b(e.a,t),C(e)}return e.a.b=null,i.call(e.a,o),C(e)}function C(e){for(;e.a.a;)try{var t=e.b(e.a);if(t)return e.a.l=!1,{value:t.value,done:!1}}catch(t){e.a.Ea=void 0,b(e.a,t)}if(e.a.l=!1,e.a.c){if(t=e.a.c,e.a.c=null,t.Wa)throw t.Sa;return{value:t.return,done:!0}}return{value:void 0,done:!0}}function S(e){this.next=function(t){return _(e.a),e.a.b?t=x(e,e.a.b.next,t,e.a.J):(e.a.J(t),t=C(e)),t},this.throw=function(t){return _(e.a),e.a.b?t=x(e,e.a.b.throw,t,e.a.J):(b(e.a,t),t=C(e)),t},this.return=function(t){return function(e,t){_(e.a);var n=e.a.b;return n?x(e,"return"in n?n.return:function(e){return{value:e,done:!0}},t,e.a.return):(e.a.return(t),C(e))}(e,t)},h(),this[Symbol.iterator]=function(){return this}}function T(e,t){return t=new S(new E(t)),g&&g(t,e.prototype),t}y.prototype.J=function(e){this.Ea=e},y.prototype.return=function(e){this.c={return:e},this.a=this.Y},Array.from||(Array.from=function(e){return[].slice.call(e)}),Object.assign||(Object.assign=function(e){for(var t,n=[].slice.call(arguments,1),i=0;i<n.length;i++)if(t=n[i])for(var r=e,o=Object.keys(t),a=0;a<o.length;a++){var s=o[a];r[s]=t[s]}return e});var N=document.createEvent("Event");if(N.initEvent("foo",!0,!0),N.preventDefault(),!N.defaultPrevented){var k=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(k.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}}var O=/Trident/.test(navigator.userAgent);if(!window.Event||O&&"function"!=typeof window.Event){var M=window.Event;if(window.Event=function(e,t){t=t||{};var n=document.createEvent("Event");return n.initEvent(e,!!t.bubbles,!!t.cancelable),n},M){for(var D in M)window.Event[D]=M[D];window.Event.prototype=M.prototype}}if((!window.CustomEvent||O&&"function"!=typeof window.CustomEvent)&&(window.CustomEvent=function(e,t){t=t||{};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!!t.bubbles,!!t.cancelable,t.detail),n},window.CustomEvent.prototype=window.Event.prototype),!window.MouseEvent||O&&"function"!=typeof window.MouseEvent){var A=window.MouseEvent;if(window.MouseEvent=function(e,t){t=t||{};var n=document.createEvent("MouseEvent");return n.initMouseEvent(e,!!t.bubbles,!!t.cancelable,t.view||window,t.detail,t.screenX,t.screenY,t.clientX,t.clientY,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,t.relatedTarget),n},A)for(var j in A)window.MouseEvent[j]=A[j];window.MouseEvent.prototype=A.prototype}!function(){function e(){}function t(e,t){if(!e.childNodes.length)return[];switch(e.nodeType){case Node.DOCUMENT_NODE:return m.call(e,t);case Node.DOCUMENT_FRAGMENT_NODE:return v.call(e,t);default:return p.call(e,t)}}var n="undefined"==typeof HTMLTemplateElement,i=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),r=!1;/Trident/.test(navigator.userAgent)&&function(){function e(e,t){if(e instanceof DocumentFragment)for(var i;i=e.firstChild;)n.call(this,i,t);else n.call(this,e,t);return e}r=!0;var t=Node.prototype.cloneNode;Node.prototype.cloneNode=function(e){return e=t.call(this,e),this instanceof DocumentFragment&&(e.__proto__=DocumentFragment.prototype),e},DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll,DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector,Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},configurable:!0},nodeName:{get:function(){return"#document-fragment"},configurable:!0}});var n=Node.prototype.insertBefore;Node.prototype.insertBefore=e;var i=Node.prototype.appendChild;Node.prototype.appendChild=function(t){return t instanceof DocumentFragment?e.call(this,t,null):i.call(this,t),t};var o=Node.prototype.removeChild,a=Node.prototype.replaceChild;Node.prototype.replaceChild=function(t,n){return t instanceof DocumentFragment?(e.call(this,t,n),o.call(this,n)):a.call(this,t,n),n},Document.prototype.createDocumentFragment=function(){var e=this.createElement("df");return e.__proto__=DocumentFragment.prototype,e};var s=Document.prototype.importNode;Document.prototype.importNode=function(e,t){return t=s.call(this,e,t||!1),e instanceof DocumentFragment&&(t.__proto__=DocumentFragment.prototype),t}}();var o=Node.prototype.cloneNode,a=Document.prototype.createElement,s=Document.prototype.importNode,l=Node.prototype.removeChild,c=Node.prototype.appendChild,u=Node.prototype.replaceChild,d=DOMParser.prototype.parseFromString,h=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML")||{get:function(){return this.innerHTML},set:function(e){this.innerHTML=e}},f=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes")||{get:function(){return this.childNodes}},p=Element.prototype.querySelectorAll,m=Document.prototype.querySelectorAll,v=DocumentFragment.prototype.querySelectorAll,g=function(){if(!n){var e=document.createElement("template"),t=document.createElement("template");return t.content.appendChild(document.createElement("div")),e.content.appendChild(t),0===(e=e.cloneNode(!0)).content.childNodes.length||0===e.content.firstChild.content.childNodes.length||i}}();if(n){var y=document.implementation.createHTMLDocument("template"),_=!0,b=document.createElement("style");b.textContent="template{display:none;}";var w=document.head;w.insertBefore(b,w.firstElementChild),e.prototype=Object.create(HTMLElement.prototype);var E=!document.createElement("div").hasOwnProperty("innerHTML");e.U=function(t){if(!t.content&&t.namespaceURI===document.documentElement.namespaceURI){t.content=y.createDocumentFragment();for(var n;n=t.firstChild;)c.call(t.content,n);if(E)t.__proto__=e.prototype;else if(t.cloneNode=function(t){return e.b(this,t)},_)try{C(t),S(t)}catch(e){_=!1}e.a(t.content)}};var x={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},C=function(t){Object.defineProperty(t,"innerHTML",{get:function(){return D(this)},set:function(t){var n=x[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(t)||["",""])[1].toLowerCase()];if(n)for(var i=0;i<n.length;i++)t="<"+n[i]+">"+t+"</"+n[i]+">";for(y.body.innerHTML=t,e.a(y);this.content.firstChild;)l.call(this.content,this.content.firstChild);if(t=y.body,n)for(i=0;i<n.length;i++)t=t.lastChild;for(;t.firstChild;)c.call(this.content,t.firstChild)},configurable:!0})},S=function(e){Object.defineProperty(e,"outerHTML",{get:function(){return"<template>"+this.innerHTML+"</template>"},set:function(e){if(!this.parentNode)throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");for(y.body.innerHTML=e,e=this.ownerDocument.createDocumentFragment();y.body.firstChild;)c.call(e,y.body.firstChild);u.call(this.parentNode,e,this)},configurable:!0})};C(e.prototype),S(e.prototype),e.a=function(n){for(var i,r=0,o=(n=t(n,"template")).length;r<o&&(i=n[r]);r++)e.U(i)},document.addEventListener("DOMContentLoaded",(function(){e.a(document)})),Document.prototype.createElement=function(){var t=a.apply(this,arguments);return"template"===t.localName&&e.U(t),t},DOMParser.prototype.parseFromString=function(){var t=d.apply(this,arguments);return e.a(t),t},Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return D(this)},set:function(t){h.set.call(this,t),e.a(this)},configurable:!0,enumerable:!0});var T=/[&\u00A0"]/g,N=/[&\u00A0<>]/g,k=function(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case"Â ":return"&nbsp;"}},O=(b=function(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t})("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),M=b("style script xmp iframe noembed noframes plaintext noscript".split(" ")),D=function e(t,n){"template"===t.localName&&(t=t.content);for(var i,r="",o=n?n(t):f.get.call(t),a=0,s=o.length;a<s&&(i=o[a]);a++){e:{var l=i,c=t,u=n;switch(l.nodeType){case Node.ELEMENT_NODE:for(var d=l.localName,h="<"+d,p=l.attributes,m=0;c=p[m];m++)h+=" "+c.name+'="'+c.value.replace(T,k)+'"';h+=">",l=O[d]?h:h+e(l,u)+"</"+d+">";break e;case Node.TEXT_NODE:l=l.data,l=c&&M[c.localName]?l:l.replace(N,k);break e;case Node.COMMENT_NODE:l="\x3c!--"+l.data+"--\x3e";break e;default:throw window.console.error(l),Error("not implemented")}}r+=l}return r}}if(n||g){e.b=function(e,t){var n=o.call(e,!1);return this.U&&this.U(n),t&&(c.call(n.content,o.call(e.content,!0)),A(n.content,e.content)),n};var A=function(n,i){if(i.querySelectorAll&&0!==(i=t(i,"template")).length)for(var r,o,a=0,s=(n=t(n,"template")).length;a<s;a++)o=i[a],r=n[a],e&&e.U&&e.U(o),u.call(r.parentNode,j.call(o,!0),r)},j=Node.prototype.cloneNode=function(t){if(!r&&i&&this instanceof DocumentFragment){if(!t)return this.ownerDocument.createDocumentFragment();var n=L.call(this.ownerDocument,this,!0)}else n=this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?e.b(this,t):o.call(this,t);return t&&A(n,this),n},L=Document.prototype.importNode=function(n,i){if(i=i||!1,"template"===n.localName)return e.b(n,i);var r=s.call(this,n,i);if(i){A(r,n),n=t(r,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');for(var o,l=0;l<n.length;l++){o=n[l],(i=a.call(document,"script")).textContent=o.textContent;for(var c,d=o.attributes,h=0;h<d.length;h++)c=d[h],i.setAttribute(c.name,c.value);u.call(o.parentNode,i,o)}}return r}}n&&(window.HTMLTemplateElement=e)}();var L=setTimeout;function P(){}function I(e){if(!(this instanceof I))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this.I=0,this.za=!1,this.C=void 0,this.W=[],W(e,this)}function R(e,t){for(;3===e.I;)e=e.C;0===e.I?e.W.push(t):(e.za=!0,U((function(){var n=1===e.I?t.Ya:t.Za;if(null===n)(1===e.I?F:H)(t.va,e.C);else{try{var i=n(e.C)}catch(e){return void H(t.va,e)}F(t.va,i)}})))}function F(e,n){try{if(n===e)throw new TypeError("A promise cannot be resolved with itself.");if(n&&("object"==t(n)||"function"==typeof n)){var i=n.then;if(n instanceof I)return e.I=3,e.C=n,void q(e);if("function"==typeof i)return void W(function(e,t){return function(){e.apply(t,arguments)}}(i,n),e)}e.I=1,e.C=n,q(e)}catch(n){H(e,n)}}function H(e,t){e.I=2,e.C=t,q(e)}function q(e){2===e.I&&0===e.W.length&&U((function(){e.za||"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e.C)}));for(var t=0,n=e.W.length;t<n;t++)R(e,e.W[t]);e.W=null}function V(e,t,n){this.Ya="function"==typeof e?e:null,this.Za="function"==typeof t?t:null,this.va=n}function W(e,t){var n=!1;try{e((function(e){n||(n=!0,F(t,e))}),(function(e){n||(n=!0,H(t,e))}))}catch(e){n||(n=!0,H(t,e))}}function B(e){return e&&"object"==t(e)&&e.constructor===I?e:new I((function(t){t(e)}))}I.prototype.catch=function(e){return this.then(null,e)},I.prototype.then=function(e,t){var n=new this.constructor(P);return R(this,new V(e,t,n)),n},I.prototype.finally=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))};var U="function"==typeof n&&function(e){n(e)}||function(e){L(e,0)};if(!window.Promise){window.Promise=I,I.prototype.then=I.prototype.then,I.all=function(e){return new I((function(n,i){function r(e,s){try{if(s&&("object"==t(s)||"function"==typeof s)){var l=s.then;if("function"==typeof l)return void l.call(s,(function(t){r(e,t)}),i)}o[e]=s,0==--a&&n(o)}catch(e){i(e)}}if(!e||void 0===e.length)return i(new TypeError("Promise.all accepts an array"));var o=Array.prototype.slice.call(e);if(0===o.length)return n([]);for(var a=o.length,s=0;s<o.length;s++)r(s,o[s])}))},I.race=function(e){return new I((function(t,n){if(!e||void 0===e.length)return n(new TypeError("Promise.race accepts an array"));for(var i=0,r=e.length;i<r;i++)B(e[i]).then(t,n)}))},I.resolve=B,I.reject=function(e){return new I((function(t,n){n(e)}))};var z=document.createTextNode(""),$=[];new MutationObserver((function(){for(var e=$.length,t=0;t<e;t++)$[t]();$.splice(0,e)})).observe(z,{characterData:!0}),U=function(e){$.push(e),z.textContent=0<z.textContent.length?"":"a"}}!function(n,i){if(!(i in n)){var r=t(e)==t(r)?window:e,o=0,a=""+Math.random(),s="__symbol@@"+a,l=n.getOwnPropertyNames,c=n.getOwnPropertyDescriptor,u=n.create,d=n.keys,h=n.freeze||n,f=n.defineProperty,p=n.defineProperties,m=c(n,"getOwnPropertyNames"),v=n.prototype,g=v.hasOwnProperty,y=v.propertyIsEnumerable,_=v.toString,b=function(e,t,n){g.call(e,s)||f(e,s,{enumerable:!1,configurable:!1,writable:!1,value:{}}),e[s]["@@"+t]=n},w=function(e,t){var n=u(e);return l(t).forEach((function(e){S.call(t,e)&&D(n,e,t[e])})),n},E=function(){},x=function(e){return e!=s&&!g.call(k,e)},C=function(e){return e!=s&&g.call(k,e)},S=function(e){var t=""+e;return C(t)?g.call(this,t)&&this[s]["@@"+t]:y.call(this,e)},T=function(e){return f(v,e,{enumerable:!1,configurable:!0,get:E,set:function(t){j(this,e,{enumerable:!1,configurable:!0,writable:!0,value:t}),b(this,e,!0)}}),h(k[e]=f(n(e),"constructor",O))},N=function e(t){if(this instanceof e)throw new TypeError("Symbol is not a constructor");return T("__symbol:".concat(t||"",a,++o))},k=u(null),O={value:N},M=function(e){return k[e]},D=function(e,t,n){var i=""+t;if(C(i)){if(t=j,n.enumerable){var r=u(n);r.enumerable=!1}else r=n;t(e,i,r),b(e,i,!!n.enumerable)}else f(e,t,n);return e},A=function(e){return l(e).filter(C).map(M)};m.value=D,f(n,"defineProperty",m),m.value=A,f(n,i,m),m.value=function(e){return l(e).filter(x)},f(n,"getOwnPropertyNames",m),m.value=function(e,t){var n=A(t);return n.length?d(t).concat(n).forEach((function(n){S.call(t,n)&&D(e,n,t[n])})):p(e,t),e},f(n,"defineProperties",m),m.value=S,f(v,"propertyIsEnumerable",m),m.value=N,f(r,"Symbol",m),m.value=function(e){return(e="__symbol:".concat("__symbol:",e,a))in v?k[e]:T(e)},f(N,"for",m),m.value=function(e){if(x(e))throw new TypeError(e+" is not a symbol");if(g.call(k,e)&&"__symbol:"===(e=e.slice(10)).slice(0,10)&&(e=e.slice(10))!==a)return 0<(e=e.slice(0,e.length-a.length)).length?e:void 0},f(N,"keyFor",m),m.value=function(e,t){var n=c(e,t);return n&&C(t)&&(n.enumerable=S.call(e,t)),n},f(n,"getOwnPropertyDescriptor",m),m.value=function(e,t){return 1===arguments.length||void 0===t?u(e):w(e,t)},f(n,"create",m),m.value=function(){var e=_.call(this);return"[object String]"===e&&C(this)?"[object Symbol]":e},f(v,"toString",m);try{if(!0!==u(f({},"__symbol:",{get:function(){return f(this,"__symbol:",{value:!0})["__symbol:"]}}))["__symbol:"])throw"IE11";var j=f}catch(e){j=function(e,t,n){var i=c(v,t);delete v[t],f(e,t,n),f(v,t,i)}}}}(Object,"getOwnPropertySymbols"),function(e,t){var n,i=e.defineProperty,r=e.prototype,o=r.toString;"iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach((function(a){if(!(a in t))switch(i(t,a,{value:t(a)}),a){case"toStringTag":(n=e.getOwnPropertyDescriptor(r,"toString")).value=function(){var e=o.call(this),n=null!=this?this[t.toStringTag]:this;return null==n?e:"[object "+n+"]"},i(r,"toString",n)}}))}(Object,Symbol),function(e,t,n){function i(){return this}t[e]||(t[e]=function(){var t=0,n=this,r={next:function(){var e=n.length<=t;return e?{done:e}:{done:e,value:n[t++]}}};return r[e]=i,r}),n[e]||(n[e]=function(){var t=String.fromCodePoint,n=this,r=0,o=n.length,a={next:function(){var e=o<=r,i=e?"":t(n.codePointAt(r));return r+=i.length,e?{done:e}:{done:e,value:i}}};return a[e]=i,a})}(Symbol.iterator,Array.prototype,String.prototype);var G=Object.prototype.toString;Object.prototype.toString=function(){return void 0===this?"[object Undefined]":null===this?"[object Null]":G.call(this)},Object.keys=function(e){return Object.getOwnPropertyNames(e).filter((function(t){return(t=Object.getOwnPropertyDescriptor(e,t))&&t.enumerable}))},s(),h(),String.prototype[Symbol.iterator]&&String.prototype.codePointAt||(s(),h(),String.prototype[Symbol.iterator]=function e(){var t,n=this;return T(e,(function(e){if(1==e.a&&(t=0),3!=e.a)return t<n.length?e=w(e,n[t]):(e.a=0,e=void 0),e;t++,e.a=2}))}),s(),h(),Set.prototype[Symbol.iterator]||(s(),h(),Set.prototype[Symbol.iterator]=function e(){var t,n,i=this;return T(e,(function(e){if(1==e.a&&(t=[],i.forEach((function(e){t.push(e)})),n=0),3!=e.a)return n<t.length?e=w(e,t[n]):(e.a=0,e=void 0),e;n++,e.a=2}))}),s(),h(),Map.prototype[Symbol.iterator]||(s(),h(),Map.prototype[Symbol.iterator]=function e(){var t,n,i=this;return T(e,(function(e){if(1==e.a&&(t=[],i.forEach((function(e,n){t.push([n,e])})),n=0),3!=e.a)return n<t.length?e=w(e,t[n]):(e.a=0,e=void 0),e;n++,e.a=2}))});var X=window;X.WebComponents=X.WebComponents||{flags:{}};var Y=document.querySelector('script[src*="webcomponents-bundle"]'),Z=/wc-(.+)/,J={};if(!J.noOpts){if(location.search.slice(1).split("&").forEach((function(e){var t;(e=e.split("="))[0]&&(t=e[0].match(Z))&&(J[t[1]]=e[1]||!0)})),Y)for(var K=0,Q=void 0;Q=Y.attributes[K];K++)"src"!==Q.name&&(J[Q.name]=Q.value||!0);var ee={};J.log&&J.log.split&&J.log.split(",").forEach((function(e){ee[e]=!0})),J.log=ee}X.WebComponents.flags=J;var te=J.shadydom;if(te){X.ShadyDOM=X.ShadyDOM||{},X.ShadyDOM.force=te;var ne=J.noPatch;X.ShadyDOM.noPatch="true"===ne||ne}var ie=J.register||J.ce;function re(){}function oe(e){return e.__shady||(e.__shady=new re),e.__shady}function ae(e){return e&&e.__shady}ie&&window.customElements&&(X.customElements.forcePolyfill=ie),re.prototype.toJSON=function(){return{}};var se=window.ShadyDOM||{};se.Ua=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var le=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");function ce(e){return(e=ae(e))&&void 0!==e.firstChild}function ue(e){return e instanceof ShadowRoot}function de(e){return(e=(e=ae(e))&&e.root)&&Wn(e)}se.B=!!(le&&le.configurable&&le.get),se.sa=se.force||!se.Ua,se.D=se.noPatch||!1,se.aa=se.preferPerformance,se.ua="on-demand"===se.D,se.Ia=navigator.userAgent.match("Trident");var he=Element.prototype,fe=he.matches||he.matchesSelector||he.mozMatchesSelector||he.msMatchesSelector||he.oMatchesSelector||he.webkitMatchesSelector,pe=document.createTextNode(""),me=0,ve=[];function ge(e){ve.push(e),pe.textContent=me++}new MutationObserver((function(){for(;ve.length;)try{ve.shift()()}catch(e){throw pe.textContent=me++,e}})).observe(pe,{characterData:!0});var ye=document.contains?function(e,t){return e.__shady_native_contains(t)}:function(e,t){return e===t||e.documentElement&&e.documentElement.__shady_native_contains(t)};function _e(e,t){for(;t;){if(t==e)return!0;t=t.__shady_parentNode}return!1}function be(e){for(var t=e.length-1;0<=t;t--){var n=e[t],i=n.getAttribute("id")||n.getAttribute("name");i&&"length"!==i&&isNaN(i)&&(e[i]=n)}return e.item=function(t){return e[t]},e.namedItem=function(t){if("length"!==t&&isNaN(t)&&e[t])return e[t];for(var n=f(e),i=n.next();!i.done;i=n.next())if(((i=i.value).getAttribute("id")||i.getAttribute("name"))==t)return i;return null},e}function we(e){var t=[];for(e=e.__shady_native_firstChild;e;e=e.__shady_native_nextSibling)t.push(e);return t}function Ee(e){var t=[];for(e=e.__shady_firstChild;e;e=e.__shady_nextSibling)t.push(e);return t}function xe(e,t,n){if(n.configurable=!0,n.value)e[t]=n.value;else try{Object.defineProperty(e,t,n)}catch(e){}}function Ce(e,t,n,i){for(var r in n=void 0===n?"":n,t)i&&0<=i.indexOf(r)||xe(e,n+r,t[r])}function Se(e,t){for(var n in t)n in e&&xe(e,n,t[n])}function Te(e){var t={};return Object.getOwnPropertyNames(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t}function Ne(e,t){for(var n,i=Object.getOwnPropertyNames(t),r=0;r<i.length;r++)e[n=i[r]]=t[n]}var ke,Oe=[];function Me(e){ke||(ke=!0,ge(De)),Oe.push(e)}function De(){ke=!1;for(var e=!!Oe.length;Oe.length;)Oe.shift()();return e}function Ae(){this.a=!1,this.addedNodes=[],this.removedNodes=[],this.ja=new Set}De.list=Oe,Ae.prototype.flush=function(){if(this.a){this.a=!1;var e=this.takeRecords();e.length&&this.ja.forEach((function(t){t(e)}))}},Ae.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var e=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];return this.addedNodes=[],this.removedNodes=[],e}return[]};var je=/[&\u00A0"]/g,Le=/[&\u00A0<>]/g;function Pe(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case"Â ":return"&nbsp;"}}function Ie(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t}var Re=Ie("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),Fe=Ie("style script xmp iframe noembed noframes plaintext noscript".split(" "));function He(e,t){"template"===e.localName&&(e=e.content);for(var n="",i=t?t(e):e.childNodes,r=0,o=i.length,a=void 0;r<o&&(a=i[r]);r++){e:{var s=a,l=e,c=t;switch(s.nodeType){case Node.ELEMENT_NODE:for(var u,d="<"+(l=s.localName),h=s.attributes,f=0;u=h[f];f++)d+=" "+u.name+'="'+u.value.replace(je,Pe)+'"';d+=">",s=Re[l]?d:d+He(s,c)+"</"+l+">";break e;case Node.TEXT_NODE:s=s.data,s=l&&Fe[l.localName]?s:s.replace(Le,Pe);break e;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break e;default:throw window.console.error(s),Error("not implemented")}}n+=s}return n}var qe=se.B,Ve={querySelector:function(e){return this.__shady_native_querySelector(e)},querySelectorAll:function(e){return this.__shady_native_querySelectorAll(e)}},We={};function Be(e){We[e]=function(t){return t["__shady_native_"+e]}}function Ue(e,t){for(var n in Ce(e,t,"__shady_native_"),t)Be(n)}function ze(e,t){t=void 0===t?[]:t;for(var n=0;n<t.length;n++){var i=t[n],r=Object.getOwnPropertyDescriptor(e,i);r&&(Object.defineProperty(e,"__shady_native_"+i,r),r.value?Ve[i]||(Ve[i]=r.value):Be(i))}}var $e=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),Ge=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1),Xe=document.implementation.createHTMLDocument("inert");function Ye(e){for(var t;t=e.__shady_native_firstChild;)e.__shady_native_removeChild(t)}var Ze=["firstElementChild","lastElementChild","children","childElementCount"],Je=["querySelector","querySelectorAll"],Ke=Te({get childNodes(){return this.__shady_childNodes},get firstChild(){return this.__shady_firstChild},get lastChild(){return this.__shady_lastChild},get childElementCount(){return this.__shady_childElementCount},get children(){return this.__shady_children},get firstElementChild(){return this.__shady_firstElementChild},get lastElementChild(){return this.__shady_lastElementChild},get shadowRoot(){return this.__shady_shadowRoot}}),Qe=Te({get textContent(){return this.__shady_textContent},set textContent(e){this.__shady_textContent=e},get innerHTML(){return this.__shady_innerHTML},set innerHTML(e){return this.__shady_innerHTML=e}}),et=Te({get parentElement(){return this.__shady_parentElement},get parentNode(){return this.__shady_parentNode},get nextSibling(){return this.__shady_nextSibling},get previousSibling(){return this.__shady_previousSibling},get nextElementSibling(){return this.__shady_nextElementSibling},get previousElementSibling(){return this.__shady_previousElementSibling},get className(){return this.__shady_className},set className(e){return this.__shady_className=e}});function tt(e){for(var t in e){var n=e[t];n&&(n.enumerable=!1)}}tt(Ke),tt(Qe),tt(et);var nt,it=se.B||!0===se.D,rt=it?function(){}:function(e){var t=oe(e);t.Ka||(t.Ka=!0,Se(e,et))},ot=it?function(){}:function(e){var t=oe(e);t.Ja||(t.Ja=!0,Se(e,Ke),window.customElements&&window.customElements.polyfillWrapFlushCallback&&!se.D||Se(e,Qe))},at="__eventWrappers"+Date.now(),st=(nt=Object.getOwnPropertyDescriptor(Event.prototype,"composed"))?function(e){return nt.get.call(e)}:null,lt=function(){function e(){}var t=!1,n={get capture(){return t=!0,!1}};return window.addEventListener("test",e,n),window.removeEventListener("test",e,n),t}();function ct(e){if(e&&"object"==t(e))var n=!!e.capture,i=!!e.once,r=!!e.passive,o=e.O;else n=!!e,r=i=!1;return{Ga:o,capture:n,once:i,passive:r,Fa:lt?e:n}}var ut={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},dt={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function ht(e){return e instanceof Node?e.__shady_getRootNode():e}function ft(e,t){var n=[],i=e;for(e=ht(e);i;)n.push(i),i=i.__shady_assignedSlot?i.__shady_assignedSlot:i.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&i.host&&(t||i!==e)?i.host:i.__shady_parentNode;return n[n.length-1]===document&&n.push(window),n}function pt(e,t){if(!ue)return e;e=ft(e,!0);for(var n,i,r=0,o=void 0,a=void 0;r<t.length;r++)if((i=ht(n=t[r]))!==o&&(a=e.indexOf(i),o=i),!ue(i)||-1<a)return n}function mt(e){function t(t,n){return(t=new e(t,n)).__composed=n&&!!n.composed,t}return t.__proto__=e,t.prototype=e.prototype,t}var vt={focus:!0,blur:!0};function gt(e){return e.__target!==e.target||e.__relatedTarget!==e.relatedTarget}function yt(e,t,n){if(n=t.__handlers&&t.__handlers[e.type]&&t.__handlers[e.type][n])for(var i,r=0;(i=n[r])&&(!gt(e)||e.target!==e.relatedTarget)&&(i.call(t,e),!e.__immediatePropagationStopped);r++);}function _t(e){var t=e.composedPath(),n=t.map((function(e){return pt(e,t)})),i=e.bubbles;Object.defineProperty(e,"currentTarget",{configurable:!0,enumerable:!0,get:function(){return a}});var r=Event.CAPTURING_PHASE;Object.defineProperty(e,"eventPhase",{configurable:!0,enumerable:!0,get:function(){return r}});for(var o=t.length-1;0<=o;o--){var a=t[o];if(r=a===n[o]?Event.AT_TARGET:Event.CAPTURING_PHASE,yt(e,a,"capture"),e.ma)return}for(o=0;o<t.length;o++){var s=(a=t[o])===n[o];if((s||i)&&(r=s?Event.AT_TARGET:Event.BUBBLING_PHASE,yt(e,a,"bubble"),e.ma))return}r=0,a=null}function bt(e,t,n,i,r,o){for(var a=0;a<e.length;a++){var s=e[a],l=s.type,c=s.capture,u=s.once,d=s.passive;if(t===s.node&&n===l&&i===c&&r===u&&o===d)return a}return-1}function wt(e){return De(),!se.aa&&this instanceof Node&&!ye(document,this)?(e.__target||St(e,this),_t(e)):this.__shady_native_dispatchEvent(e)}function Et(e,n,i){var r=ct(i),o=r.capture,a=r.once,s=r.passive,l=r.Ga;if(r=r.Fa,n){var c=t(n);if(("function"===c||"object"===c)&&("object"!==c||n.handleEvent&&"function"==typeof n.handleEvent)){if(dt[e])return this.__shady_native_addEventListener(e,n,r);var u=l||this;if(l=n[at]){if(-1<bt(l,u,e,o,a,s))return}else n[at]=[];l=function(t){if(a&&this.__shady_removeEventListener(e,n,i),t.__target||St(t),u!==this){var r=Object.getOwnPropertyDescriptor(t,"currentTarget");Object.defineProperty(t,"currentTarget",{get:function(){return u},configurable:!0});var s=Object.getOwnPropertyDescriptor(t,"eventPhase");Object.defineProperty(t,"eventPhase",{configurable:!0,enumerable:!0,get:function(){return o?Event.CAPTURING_PHASE:Event.BUBBLING_PHASE}})}if(t.__previousCurrentTarget=t.currentTarget,(!ue(u)&&"slot"!==u.localName||-1!=t.composedPath().indexOf(u))&&(t.composed||-1<t.composedPath().indexOf(u)))if(gt(t)&&t.target===t.relatedTarget)t.eventPhase===Event.BUBBLING_PHASE&&t.stopImmediatePropagation();else if(t.eventPhase===Event.CAPTURING_PHASE||t.bubbles||t.target===u||u instanceof Window){var l="function"===c?n.call(u,t):n.handleEvent&&n.handleEvent(t);return u!==this&&(r?(Object.defineProperty(t,"currentTarget",r),r=null):delete t.currentTarget,s?(Object.defineProperty(t,"eventPhase",s),s=null):delete t.eventPhase),l}},n[at].push({node:u,type:e,capture:o,once:a,passive:s,lb:l}),this.__handlers=this.__handlers||{},this.__handlers[e]=this.__handlers[e]||{capture:[],bubble:[]},this.__handlers[e][o?"capture":"bubble"].push(l),vt[e]||this.__shady_native_addEventListener(e,l,r)}}}function xt(e,t,n){if(t){var i=ct(n);n=i.capture;var r=i.once,o=i.passive,a=i.Ga;if(i=i.Fa,dt[e])return this.__shady_native_removeEventListener(e,t,i);var s=a||this;a=void 0;var l=null;try{l=t[at]}catch(e){}l&&-1<(r=bt(l,s,e,n,r,o))&&(a=l.splice(r,1)[0].lb,l.length||(t[at]=void 0)),this.__shady_native_removeEventListener(e,a||t,i),a&&this.__handlers&&this.__handlers[e]&&-1<(t=(e=this.__handlers[e][n?"capture":"bubble"]).indexOf(a))&&e.splice(t,1)}}var Ct=Te({get composed(){return void 0===this.__composed&&(st?this.__composed="focusin"===this.type||"focusout"===this.type||st(this):!1!==this.isTrusted&&(this.__composed=ut[this.type])),this.__composed||!1},composedPath:function(){return this.__composedPath||(this.__composedPath=ft(this.__target,this.composed)),this.__composedPath},get target(){return pt(this.currentTarget||this.__previousCurrentTarget,this.composedPath())},get relatedTarget(){return this.__relatedTarget?(this.__relatedTargetComposedPath||(this.__relatedTargetComposedPath=ft(this.__relatedTarget,!0)),pt(this.currentTarget||this.__previousCurrentTarget,this.__relatedTargetComposedPath)):null},stopPropagation:function(){Event.prototype.stopPropagation.call(this),this.ma=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this),this.ma=this.__immediatePropagationStopped=!0}});function St(e,t){if(t=void 0===t?e.target:t,e.__target=t,e.__relatedTarget=e.relatedTarget,se.B){if(!(t=Object.getPrototypeOf(e)).hasOwnProperty("__shady_patchedProto")){var n=Object.create(t);n.__shady_sourceProto=t,Ce(n,Ct),t.__shady_patchedProto=n}e.__proto__=t.__shady_patchedProto}else Ce(e,Ct)}var Tt=mt(Event),Nt=mt(CustomEvent),kt=mt(MouseEvent),Ot=Object.getOwnPropertyNames(Element.prototype).filter((function(e){return"on"===e.substring(0,2)})),Mt=Object.getOwnPropertyNames(HTMLElement.prototype).filter((function(e){return"on"===e.substring(0,2)}));function Dt(e){return{set:function(t){var n=oe(this),i=e.substring(2);n.N||(n.N={}),n.N[e]&&this.removeEventListener(i,n.N[e]),this.__shady_addEventListener(i,t),n.N[e]=t},get:function(){var t=ae(this);return t&&t.N&&t.N[e]},configurable:!0}}function At(e,t){return{index:e,ba:[],ia:t}}function jt(e,t,n,i){var r=0,o=0,a=0,s=0,l=Math.min(t-r,i-o);if(0==r&&0==o)e:{for(a=0;a<l;a++)if(e[a]!==n[a])break e;a=l}if(t==e.length&&i==n.length){s=e.length;for(var c=n.length,u=0;u<l-a&&Lt(e[--s],n[--c]);)u++;s=u}if(o+=a,i-=s,0==(t-=s)-(r+=a)&&0==i-o)return[];if(r==t){for(t=At(r,0);o<i;)t.ba.push(n[o++]);return[t]}if(o==i)return[At(r,t-r)];for(i=i-(a=o)+1,s=t-(l=r)+1,t=Array(i),c=0;c<i;c++)t[c]=Array(s),t[c][0]=c;for(c=0;c<s;c++)t[0][c]=c;for(c=1;c<i;c++)for(u=1;u<s;u++)if(e[l+u-1]===n[a+c-1])t[c][u]=t[c-1][u-1];else{var d=t[c-1][u]+1,h=t[c][u-1]+1;t[c][u]=d<h?d:h}for(l=t.length-1,a=t[0].length-1,i=t[l][a],e=[];0<l||0<a;)0==l?(e.push(2),a--):0==a?(e.push(3),l--):(s=t[l-1][a-1],(d=(c=t[l-1][a])<(u=t[l][a-1])?c<s?c:s:u<s?u:s)==s?(s==i?e.push(0):(e.push(1),i=s),l--,a--):d==c?(e.push(3),l--,i=c):(e.push(2),a--,i=u));for(e.reverse(),t=void 0,l=[],a=0;a<e.length;a++)switch(e[a]){case 0:t&&(l.push(t),t=void 0),r++,o++;break;case 1:t||(t=At(r,0)),t.ia++,r++,t.ba.push(n[o]),o++;break;case 2:t||(t=At(r,0)),t.ia++,r++;break;case 3:t||(t=At(r,0)),t.ba.push(n[o]),o++}return t&&l.push(t),l}function Lt(e,t){return e===t}var Pt=Te({dispatchEvent:wt,addEventListener:Et,removeEventListener:xt}),It=null;function Rt(){return It||(It=window.ShadyCSS&&window.ShadyCSS.ScopingShim),It||null}function Ft(e,t,n){var i=Rt();return!(!i||"class"!==t||(i.setElementClass(e,n),0))}function Ht(e,t){var n=Rt();n&&n.unscopeNode(e,t)}function qt(e){if(e.nodeType!==Node.ELEMENT_NODE)return"";var t=Rt();return t?t.currentScopeForNode(e):""}function Vt(e,t){if(e)for(e.nodeType===Node.ELEMENT_NODE&&t(e),e=e.__shady_firstChild;e;e=e.__shady_nextSibling)e.nodeType===Node.ELEMENT_NODE&&Vt(e,t)}var Wt=window.document,Bt=se.aa,Ut=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),zt=Ut&&Ut.get;function $t(e){for(var t;t=e.__shady_firstChild;)e.__shady_removeChild(t)}function Gt(e,t,n){if(e=(e=ae(e))&&e.Z){if(t)if(t.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(var i=0,r=t.childNodes.length;i<r;i++)e.addedNodes.push(t.childNodes[i]);else e.addedNodes.push(t);n&&e.removedNodes.push(n),function(e){e.a||(e.a=!0,ge((function(){e.flush()})))}(e)}}var Xt=Te({get parentNode(){var e=ae(this);return void 0!==(e=e&&e.parentNode)?e:this.__shady_native_parentNode},get firstChild(){var e=ae(this);return void 0!==(e=e&&e.firstChild)?e:this.__shady_native_firstChild},get lastChild(){var e=ae(this);return void 0!==(e=e&&e.lastChild)?e:this.__shady_native_lastChild},get nextSibling(){var e=ae(this);return void 0!==(e=e&&e.nextSibling)?e:this.__shady_native_nextSibling},get previousSibling(){var e=ae(this);return void 0!==(e=e&&e.previousSibling)?e:this.__shady_native_previousSibling},get childNodes(){if(ce(this)){var e=ae(this);if(!e.childNodes){e.childNodes=[];for(var t=this.__shady_firstChild;t;t=t.__shady_nextSibling)e.childNodes.push(t)}var n=e.childNodes}else n=this.__shady_native_childNodes;return n.item=function(e){return n[e]},n},get parentElement(){var e=ae(this);return(e=e&&e.parentNode)&&e.nodeType!==Node.ELEMENT_NODE&&(e=null),void 0!==e?e:this.__shady_native_parentElement},get isConnected(){if(zt&&zt.call(this))return!0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return!1;var e=this.ownerDocument;if(null===e||ye(e,this))return!0;for(e=this;e&&!(e instanceof Document);)e=e.__shady_parentNode||(ue(e)?e.host:void 0);return!!(e&&e instanceof Document)},get textContent(){if(ce(this)){for(var e=[],t=this.__shady_firstChild;t;t=t.__shady_nextSibling)t.nodeType!==Node.COMMENT_NODE&&e.push(t.__shady_textContent);return e.join("")}return this.__shady_native_textContent},set textContent(e){switch(null==e&&(e=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!ce(this)&&se.B){var t=this.__shady_firstChild;(t!=this.__shady_lastChild||t&&t.nodeType!=Node.TEXT_NODE)&&$t(this),this.__shady_native_textContent=e}else $t(this),(0<e.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_insertBefore(document.createTextNode(e));break;default:this.nodeValue=e}},insertBefore:function(e,t){if(this.ownerDocument!==Wt&&e.ownerDocument!==Wt)return this.__shady_native_insertBefore(e,t),e;if(e===this)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(t){var n=ae(t);if(void 0!==(n=n&&n.parentNode)&&n!==this||void 0===n&&t.__shady_native_parentNode!==this)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.")}if(t===e)return e;Gt(this,e);var i=[],r=(n=$n(this))?n.host.localName:qt(this),o=e.__shady_parentNode;if(o){var a=qt(e),s=!!n||!$n(e)||Bt&&void 0!==this.__noInsertionPoint;o.__shady_removeChild(e,s)}o=!0;var l=(!Bt||void 0===e.__noInsertionPoint&&void 0===this.__noInsertionPoint)&&!function e(t,n){var i=Rt();if(!i)return!0;if(t.nodeType===Node.DOCUMENT_FRAGMENT_NODE){for(i=!0,t=t.__shady_firstChild;t;t=t.__shady_nextSibling)i=i&&e(t,n);return i}return t.nodeType!==Node.ELEMENT_NODE||i.currentScopeForNode(t)===n}(e,r),c=n&&!e.__noInsertionPoint&&(!Bt||e.nodeType===Node.DOCUMENT_FRAGMENT_NODE);return(c||l)&&(l&&(a=a||qt(e)),Vt(e,(function(e){if(c&&"slot"===e.localName&&i.push(e),l){var t=a;Rt()&&(t&&Ht(e,t),(t=Rt())&&t.scopeNode(e,r))}}))),i.length&&(Fn(n),n.c.push.apply(n.c,i instanceof Array?i:p(f(i))),jn(n)),ce(this)&&(function(e,t,n){En(t,2);var i=oe(t);if(void 0!==i.firstChild&&(i.childNodes=null),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(e=e.__shady_native_firstChild;e;e=e.__shady_native_nextSibling)xn(e,t,i,n);else xn(e,t,i,n)}(e,this,t),(s=ae(this)).root?(o=!1,de(this)&&jn(s.root)):n&&"slot"===this.localName&&(o=!1,jn(n))),o?(n=ue(this)?this.host:this,t?(t=function e(t){var n=t;if(t&&"slot"===t.localName){var i=ae(t);(i=i&&i.V)&&(n=i.length?i[0]:e(t.__shady_nextSibling))}return n}(t),n.__shady_native_insertBefore(e,t)):n.__shady_native_appendChild(e)):e.ownerDocument!==this.ownerDocument&&this.ownerDocument.adoptNode(e),e},appendChild:function(e){if(this!=e||!ue(e))return this.__shady_insertBefore(e)},removeChild:function(e,t){if(t=void 0!==t&&t,this.ownerDocument!==Wt)return this.__shady_native_removeChild(e);if(e.__shady_parentNode!==this)throw Error("The node to be removed is not a child of this node: "+e);Gt(this,null,e);var n=$n(e),i=n&&function(e,t){if(e.a){Hn(e);var n,i=e.b;for(n in i)for(var r=i[n],o=0;o<r.length;o++){var a=r[o];if(_e(t,a)){r.splice(o,1);var s=e.a.indexOf(a);if(0<=s&&(e.a.splice(s,1),(s=ae(a.__shady_parentNode))&&s.da&&s.da--),o--,s=(a=ae(a)).V)for(var l=0;l<s.length;l++){var c=s[l],u=c.__shady_native_parentNode;u&&u.__shady_native_removeChild(c)}a.V=[],a.assignedNodes=[],s=!0}}return s}}(n,e),r=ae(this);if(ce(this)&&(function(e,t){var n=oe(e);e===(t=oe(t)).firstChild&&(t.firstChild=n.nextSibling),e===t.lastChild&&(t.lastChild=n.previousSibling),e=n.previousSibling;var i=n.nextSibling;e&&(oe(e).nextSibling=i),i&&(oe(i).previousSibling=e),n.parentNode=n.previousSibling=n.nextSibling=void 0,void 0!==t.childNodes&&(t.childNodes=null)}(e,this),de(this))){jn(r.root);var o=!0}if(Rt()&&!t&&n&&e.nodeType!==Node.TEXT_NODE){var a=qt(e);Vt(e,(function(e){Ht(e,a)}))}return function e(t){var n=ae(t);if(n&&void 0!==n.la)for(n=t.__shady_firstChild;n;n=n.__shady_nextSibling)e(n);(t=ae(t))&&(t.la=void 0)}(e),n&&((t="slot"===this.localName)&&(o=!0),(i||t)&&jn(n)),o||(o=ue(this)?this.host:this,(!r.root&&"slot"!==e.localName||o===e.__shady_native_parentNode)&&o.__shady_native_removeChild(e)),e},replaceChild:function(e,t){return this.__shady_insertBefore(e,t),this.__shady_removeChild(t),e},cloneNode:function(e){if("template"==this.localName)return this.__shady_native_cloneNode(e);var t=this.__shady_native_cloneNode(!1);if(e&&t.nodeType!==Node.ATTRIBUTE_NODE){e=this.__shady_firstChild;for(var n;e;e=e.__shady_nextSibling)n=e.__shady_cloneNode(!0),t.__shady_appendChild(n)}return t},getRootNode:function(e){if(this&&this.nodeType){var t=oe(this),n=t.la;return void 0===n&&(ue(this)?(n=this,t.la=n):(n=(n=this.__shady_parentNode)?n.__shady_getRootNode(e):this,document.documentElement.__shady_native_contains(this)&&(t.la=n))),n}},contains:function(e){return _e(this,e)}}),Yt=Te({get assignedSlot(){var e=this.__shady_parentNode;return(e=e&&e.__shady_shadowRoot)&&Ln(e),(e=ae(this))&&e.assignedSlot||null}});function Zt(e,t,n){var i=[];return function e(t,n,i,r){for(t=t.__shady_firstChild;t;t=t.__shady_nextSibling){var o;if(o=t.nodeType===Node.ELEMENT_NODE){var a=n,s=i,l=r,c=a(o=t);c&&l.push(o),s&&s(c)?o=c:(e(o,a,s,l),o=void 0)}if(o)break}}(e,t,n,i),i}var Jt=Te({get firstElementChild(){var e=ae(this);if(e&&void 0!==e.firstChild){for(e=this.__shady_firstChild;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_nextSibling;return e}return this.__shady_native_firstElementChild},get lastElementChild(){var e=ae(this);if(e&&void 0!==e.lastChild){for(e=this.__shady_lastChild;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_previousSibling;return e}return this.__shady_native_lastElementChild},get children(){return ce(this)?be(Array.prototype.filter.call(Ee(this),(function(e){return e.nodeType===Node.ELEMENT_NODE}))):this.__shady_native_children},get childElementCount(){var e=this.__shady_children;return e?e.length:0}}),Kt=Te({querySelector:function(e){return Zt(this,(function(t){return fe.call(t,e)}),(function(e){return!!e}))[0]||null},querySelectorAll:function(e,t){if(t){t=Array.prototype.slice.call(this.__shady_native_querySelectorAll(e));var n=this.__shady_getRootNode();return be(t.filter((function(e){return e.__shady_getRootNode()==n})))}return be(Zt(this,(function(t){return fe.call(t,e)})))}}),Qt=se.aa&&!se.D?Ne({},Jt):Jt;Ne(Jt,Kt);var en=window.document;function tn(e,t){if("slot"===t)de(e=e.__shady_parentNode)&&jn(ae(e).root);else if("slot"===e.localName&&"name"===t&&(t=$n(e))){if(t.a){Hn(t);var n=e.La,i=qn(e);if(i!==n){var r=(n=t.b[n]).indexOf(e);0<=r&&n.splice(r,1),(n=t.b[i]||(t.b[i]=[])).push(e),1<n.length&&(t.b[i]=Vn(n))}}jn(t)}}var nn=Te({get previousElementSibling(){var e=ae(this);if(e&&void 0!==e.previousSibling){for(e=this.__shady_previousSibling;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_previousSibling;return e}return this.__shady_native_previousElementSibling},get nextElementSibling(){var e=ae(this);if(e&&void 0!==e.nextSibling){for(e=this.__shady_nextSibling;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.__shady_nextSibling;return e}return this.__shady_native_nextElementSibling},get slot(){return this.getAttribute("slot")},set slot(e){this.__shady_setAttribute("slot",e)},get className(){return this.getAttribute("class")||""},set className(e){this.__shady_setAttribute("class",e)},setAttribute:function(e,t){this.ownerDocument!==en?this.__shady_native_setAttribute(e,t):Ft(this,e,t)||(this.__shady_native_setAttribute(e,t),tn(this,e))},removeAttribute:function(e){this.ownerDocument!==en?this.__shady_native_removeAttribute(e):Ft(this,e,"")?""===this.getAttribute(e)&&this.__shady_native_removeAttribute(e):(this.__shady_native_removeAttribute(e),tn(this,e))}});se.aa||Ot.forEach((function(e){nn[e]=Dt(e)}));var rn=Te({attachShadow:function(e){if(!this)throw Error("Must provide a host.");if(!e)throw Error("Not enough arguments.");if(e.shadyUpgradeFragment&&!se.Ia){var t=e.shadyUpgradeFragment;if(t.__proto__=ShadowRoot.prototype,An(t,this,e),Cn(t,t),e=t.__noInsertionPoint?null:t.querySelectorAll("slot"),t.__noInsertionPoint=void 0,e&&e.length){var n=t;Fn(n),n.c.push.apply(n.c,e instanceof Array?e:p(f(e))),jn(t)}t.host.__shady_native_appendChild(t)}else t=new Dn(kn,this,e);return this.__CE_shadowRoot=t},get shadowRoot(){var e=ae(this);return e&&e.bb||null}});Ne(nn,rn);var on=document.implementation.createHTMLDocument("inert"),an=Te({get innerHTML(){return ce(this)?He("template"===this.localName?this.content:this,Ee):this.__shady_native_innerHTML},set innerHTML(e){if("template"===this.localName)this.__shady_native_innerHTML=e;else{$t(this);var t=this.localName||"div";for(t=this.namespaceURI&&this.namespaceURI!==on.namespaceURI?on.createElementNS(this.namespaceURI,t):on.createElement(t),se.B?t.__shady_native_innerHTML=e:t.innerHTML=e;e=t.__shady_firstChild;)this.__shady_insertBefore(e)}}}),sn=Te({blur:function(){var e=ae(this);(e=(e=e&&e.root)&&e.activeElement)?e.__shady_blur():this.__shady_native_blur()}});se.aa||Mt.forEach((function(e){sn[e]=Dt(e)}));var ln=Te({assignedNodes:function(e){if("slot"===this.localName){var t=this.__shady_getRootNode();return t&&ue(t)&&Ln(t),(t=ae(this))&&(e&&e.flatten?t.V:t.assignedNodes)||[]}},addEventListener:function(e,n,i){if("slot"!==this.localName||"slotchange"===e)Et.call(this,e,n,i);else{"object"!=t(i)&&(i={capture:!!i});var r=this.__shady_parentNode;if(!r)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");i.O=this,r.__shady_addEventListener(e,n,i)}},removeEventListener:function(e,n,i){if("slot"!==this.localName||"slotchange"===e)xt.call(this,e,n,i);else{"object"!=t(i)&&(i={capture:!!i});var r=this.__shady_parentNode;if(!r)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");i.O=this,r.__shady_removeEventListener(e,n,i)}}}),cn=Te({getElementById:function(e){return""===e?null:Zt(this,(function(t){return t.id==e}),(function(e){return!!e}))[0]||null}}),un=Te({get activeElement(){var e=se.B?document.__shady_native_activeElement:document.activeElement;if(!e||!e.nodeType)return null;var t=!!ue(this);if(!(this===document||t&&this.host!==e&&this.host.__shady_native_contains(e)))return null;for(t=$n(e);t&&t!==this;)t=$n(e=t.host);return this===document?t?null:e:t===this?e:null}}),dn=window.document,hn=Te({importNode:function(e,t){if(e.ownerDocument!==dn||"template"===e.localName)return this.__shady_native_importNode(e,t);var n=this.__shady_native_importNode(e,!1);if(t)for(e=e.__shady_firstChild;e;e=e.__shady_nextSibling)t=this.__shady_importNode(e,!0),n.__shady_appendChild(t);return n}}),fn=Te({dispatchEvent:wt,addEventListener:Et.bind(window),removeEventListener:xt.bind(window)}),pn={};Object.getOwnPropertyDescriptor(HTMLElement.prototype,"parentElement")&&(pn.parentElement=Xt.parentElement),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"contains")&&(pn.contains=Xt.contains),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"children")&&(pn.children=Jt.children),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"innerHTML")&&(pn.innerHTML=an.innerHTML),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"className")&&(pn.className=nn.className);var mn={EventTarget:[Pt],Node:[Xt,window.EventTarget?null:Pt],Text:[Yt],Comment:[Yt],CDATASection:[Yt],ProcessingInstruction:[Yt],Element:[nn,Jt,Yt,!se.B||"innerHTML"in Element.prototype?an:null,window.HTMLSlotElement?null:ln],HTMLElement:[sn,pn],HTMLSlotElement:[ln],DocumentFragment:[Qt,cn],Document:[hn,Qt,cn,un],Window:[fn]},vn=se.B?null:["innerHTML","textContent"];function gn(e,t,n,i){t.forEach((function(t){return e&&t&&Ce(e,t,n,i)}))}function yn(e){var t,n=e?null:vn;for(t in mn)gn(window[t]&&window[t].prototype,mn[t],e,n)}function _n(e){return e.__shady_protoIsPatched=!0,gn(e,mn.EventTarget),gn(e,mn.Node),gn(e,mn.Element),gn(e,mn.HTMLElement),gn(e,mn.HTMLSlotElement),e}["Text","Comment","CDATASection","ProcessingInstruction"].forEach((function(e){var t=window[e],n=Object.create(t.prototype);n.__shady_protoIsPatched=!0,gn(n,mn.EventTarget),gn(n,mn.Node),mn[e]&&gn(n,mn[e]),t.prototype.__shady_patchedProto=n}));var bn=se.ua,wn=se.B;function En(e,t){if(bn&&!e.__shady_protoIsPatched&&!ue(e)){var n=Object.getPrototypeOf(e),i=n.hasOwnProperty("__shady_patchedProto")&&n.__shady_patchedProto;i||(_n(i=Object.create(n)),n.__shady_patchedProto=i),Object.setPrototypeOf(e,i)}wn||(1===t?rt(e):2===t&&ot(e))}function xn(e,t,n,i){En(e,1),i=i||null;var r=oe(e),o=i?oe(i):null;r.previousSibling=i?o.previousSibling:t.__shady_lastChild,(o=ae(r.previousSibling))&&(o.nextSibling=e),(o=ae(r.nextSibling=i))&&(o.previousSibling=e),r.parentNode=t,i?i===n.firstChild&&(n.firstChild=e):(n.lastChild=e,n.firstChild||(n.firstChild=e)),n.childNodes=null}function Cn(e,t){var n=oe(e);if(t||void 0===n.firstChild){n.childNodes=null;var i=n.firstChild=e.__shady_native_firstChild;for(n.lastChild=e.__shady_native_lastChild,En(e,2),n=i,i=void 0;n;n=n.__shady_native_nextSibling){var r=oe(n);r.parentNode=t||e,r.nextSibling=n.__shady_native_nextSibling,r.previousSibling=i||null,i=n,En(n,1)}}}var Sn=Te({addEventListener:function(e,n,i){"object"!=t(i)&&(i={capture:!!i}),i.O=i.O||this,this.host.__shady_addEventListener(e,n,i)},removeEventListener:function(e,n,i){"object"!=t(i)&&(i={capture:!!i}),i.O=i.O||this,this.host.__shady_removeEventListener(e,n,i)}});function Tn(e,t){Ce(e,Sn,t),Ce(e,un,t),Ce(e,an,t),Ce(e,Jt,t),se.D&&!t?(Ce(e,Xt,t),Ce(e,cn,t)):se.B||(Ce(e,et),Ce(e,Ke),Ce(e,Qe))}var Nn,kn={},On=se.deferConnectionCallbacks&&"loading"===document.readyState;function Mn(e){var t=[];do{t.unshift(e)}while(e=e.__shady_parentNode);return t}function Dn(e,t,n){if(e!==kn)throw new TypeError("Illegal constructor");this.a=null,An(this,t,n)}function An(e,t,n){if(e.host=t,e.mode=n&&n.mode,Cn(e.host),(t=oe(e.host)).root=e,t.bb="closed"!==e.mode?e:null,(t=oe(e)).firstChild=t.lastChild=t.parentNode=t.nextSibling=t.previousSibling=null,se.preferPerformance)for(;t=e.host.__shady_native_firstChild;)e.host.__shady_native_removeChild(t);else jn(e)}function jn(e){e.T||(e.T=!0,Me((function(){return Ln(e)})))}function Ln(e){var t;if(t=e.T){for(var n;e;)e.T&&(n=e),ue(e=(t=e).host.__shady_getRootNode())&&(t=ae(t.host))&&0<t.da||(e=void 0);t=n}(n=t)&&n._renderSelf()}function Pn(e,t,n){var i=oe(t),r=i.oa;i.oa=null,n||(n=(e=e.b[t.__shady_slot||"__catchall"])&&e[0]),n?(oe(n).assignedNodes.push(t),i.assignedSlot=n):i.assignedSlot=void 0,r!==i.assignedSlot&&i.assignedSlot&&(oe(i.assignedSlot).ra=!0)}function In(e,t,n){for(var i=0,r=void 0;i<n.length&&(r=n[i]);i++)if("slot"==r.localName){var o=ae(r).assignedNodes;o&&o.length&&In(e,t,o)}else t.push(n[i])}function Rn(e,t){t.__shady_native_dispatchEvent(new Event("slotchange")),(t=ae(t)).assignedSlot&&Rn(e,t.assignedSlot)}function Fn(e){e.c=e.c||[],e.a=e.a||[],e.b=e.b||{}}function Hn(e){if(e.c&&e.c.length){for(var t,n=e.c,i=0;i<n.length;i++){var r=n[i];Cn(r);var o=r.__shady_parentNode;Cn(o),(o=ae(o)).da=(o.da||0)+1,o=qn(r),e.b[o]?((t=t||{})[o]=!0,e.b[o].push(r)):e.b[o]=[r],e.a.push(r)}if(t)for(var a in t)e.b[a]=Vn(e.b[a]);e.c=[]}}function qn(e){var t=e.name||e.getAttribute("name")||"__catchall";return e.La=t}function Vn(e){return e.sort((function(e,t){e=Mn(e);for(var n=Mn(t),i=0;i<e.length;i++){t=e[i];var r=n[i];if(t!==r)return(e=Ee(t.__shady_parentNode)).indexOf(t)-e.indexOf(r)}}))}function Wn(e){return Hn(e),!(!e.a||!e.a.length)}if(Dn.prototype._renderSelf=function(){var e=On;if(On=!0,this.T=!1,this.a){Hn(this);for(var t,n=0;n<this.a.length;n++){var i=ae(t=this.a[n]),r=i.assignedNodes;if(i.assignedNodes=[],i.V=[],i.Ba=r)for(i=0;i<r.length;i++){var o=ae(r[i]);o.oa=o.assignedSlot,o.assignedSlot===t&&(o.assignedSlot=null)}}for(n=this.host.__shady_firstChild;n;n=n.__shady_nextSibling)Pn(this,n);for(n=0;n<this.a.length;n++){if(!(r=ae(t=this.a[n])).assignedNodes.length)for(i=t.__shady_firstChild;i;i=i.__shady_nextSibling)Pn(this,i,t);if((i=(i=ae(t.__shady_parentNode))&&i.root)&&(Wn(i)||i.T)&&i._renderSelf(),In(this,r.V,r.assignedNodes),i=r.Ba){for(o=0;o<i.length;o++)ae(i[o]).oa=null;r.Ba=null,i.length>r.assignedNodes.length&&(r.ra=!0)}r.ra&&(r.ra=!1,Rn(this,t))}for(t=this.a,n=[],r=0;r<t.length;r++)(o=ae(i=t[r].__shady_parentNode))&&o.root||!(0>n.indexOf(i))||n.push(i);for(t=0;t<n.length;t++){for(r=(o=n[t])===this?this.host:o,i=[],o=o.__shady_firstChild;o;o=o.__shady_nextSibling)if("slot"==o.localName)for(var a=ae(o).V,s=0;s<a.length;s++)i.push(a[s]);else i.push(o);o=we(r),a=jt(i,i.length,o,o.length);for(var l=s=0,c=void 0;s<a.length&&(c=a[s]);s++){for(var u=0,d=void 0;u<c.ba.length&&(d=c.ba[u]);u++)d.__shady_native_parentNode===r&&r.__shady_native_removeChild(d),o.splice(c.index+l,1);l-=c.ia}for(l=0,c=void 0;l<a.length&&(c=a[l]);l++)for(s=o[c.index],u=c.index;u<c.index+c.ia;u++)d=i[u],r.__shady_native_insertBefore(d,s),o.splice(u,0,d)}}if(!se.preferPerformance&&!this.Aa)for(n=this.host.__shady_firstChild;n;n=n.__shady_nextSibling)t=ae(n),n.__shady_native_parentNode!==this.host||"slot"!==n.localName&&t.assignedSlot||this.host.__shady_native_removeChild(n);this.Aa=!0,On=e,Nn&&Nn()},function(e){e.__proto__=DocumentFragment.prototype,Tn(e,"__shady_"),Tn(e),Object.defineProperties(e,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}}),["localName","namespaceURI","prefix"].forEach((function(t){Object.defineProperty(e,t,{value:void 0,configurable:!0})})),["ownerDocument","baseURI","isConnected"].forEach((function(t){Object.defineProperty(e,t,{get:function(){return this.host[t]},configurable:!0})}))}(Dn.prototype),window.customElements&&window.customElements.define&&se.sa&&!se.preferPerformance){var Bn=new Map;Nn=function(){var e=[];Bn.forEach((function(t,n){e.push([n,t])})),Bn.clear();for(var t=0;t<e.length;t++){var n=e[t][0];e[t][1]?n.__shadydom_connectedCallback():n.__shadydom_disconnectedCallback()}},On&&document.addEventListener("readystatechange",(function(){On=!1,Nn()}),{once:!0});var Un=window.customElements.define,zn=function(e,t){var n=t.prototype.connectedCallback,i=t.prototype.disconnectedCallback;Un.call(window.customElements,e,function(e,t,n){var i=0,r="__isConnected"+i++;return(t||n)&&(e.prototype.connectedCallback=e.prototype.__shadydom_connectedCallback=function(){On?Bn.set(this,!0):this[r]||(this[r]=!0,t&&t.call(this))},e.prototype.disconnectedCallback=e.prototype.__shadydom_disconnectedCallback=function(){On?this.isConnected||Bn.set(this,!1):this[r]&&(this[r]=!1,n&&n.call(this))}),e}(t,n,i)),t.prototype.connectedCallback=n,t.prototype.disconnectedCallback=i};window.customElements.define=zn,Object.defineProperty(window.CustomElementRegistry.prototype,"define",{value:zn,configurable:!0})}function $n(e){if(ue(e=e.__shady_getRootNode()))return e}function Gn(e){this.node=e}function Xn(e){Object.defineProperty(Gn.prototype,e,{get:function(){return this.node["__shady_"+e]},set:function(t){this.node["__shady_"+e]=t},configurable:!0})}(i=Gn.prototype).addEventListener=function(e,t,n){return this.node.__shady_addEventListener(e,t,n)},i.removeEventListener=function(e,t,n){return this.node.__shady_removeEventListener(e,t,n)},i.appendChild=function(e){return this.node.__shady_appendChild(e)},i.insertBefore=function(e,t){return this.node.__shady_insertBefore(e,t)},i.removeChild=function(e){return this.node.__shady_removeChild(e)},i.replaceChild=function(e,t){return this.node.__shady_replaceChild(e,t)},i.cloneNode=function(e){return this.node.__shady_cloneNode(e)},i.getRootNode=function(e){return this.node.__shady_getRootNode(e)},i.contains=function(e){return this.node.__shady_contains(e)},i.dispatchEvent=function(e){return this.node.__shady_dispatchEvent(e)},i.setAttribute=function(e,t){this.node.__shady_setAttribute(e,t)},i.getAttribute=function(e){return this.node.__shady_native_getAttribute(e)},i.hasAttribute=function(e){return this.node.__shady_native_hasAttribute(e)},i.removeAttribute=function(e){this.node.__shady_removeAttribute(e)},i.attachShadow=function(e){return this.node.__shady_attachShadow(e)},i.focus=function(){this.node.__shady_native_focus()},i.blur=function(){this.node.__shady_blur()},i.importNode=function(e,t){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_importNode(e,t)},i.getElementById=function(e){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_getElementById(e)},i.querySelector=function(e){return this.node.__shady_querySelector(e)},i.querySelectorAll=function(e,t){return this.node.__shady_querySelectorAll(e,t)},i.assignedNodes=function(e){if("slot"===this.node.localName)return this.node.__shady_assignedNodes(e)},a.Object.defineProperties(Gn.prototype,{activeElement:{configurable:!0,enumerable:!0,get:function(){if(ue(this.node)||this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_activeElement}},_activeElement:{configurable:!0,enumerable:!0,get:function(){return this.activeElement}},host:{configurable:!0,enumerable:!0,get:function(){if(ue(this.node))return this.node.host}},parentNode:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentNode}},firstChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstChild}},lastChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastChild}},nextSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextSibling}},previousSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousSibling}},childNodes:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childNodes}},parentElement:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentElement}},firstElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstElementChild}},lastElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastElementChild}},nextElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextElementSibling}},previousElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousElementSibling}},children:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_children}},childElementCount:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childElementCount}},shadowRoot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_shadowRoot}},assignedSlot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_assignedSlot}},isConnected:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_isConnected}},innerHTML:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_innerHTML},set:function(e){this.node.__shady_innerHTML=e}},textContent:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_textContent},set:function(e){this.node.__shady_textContent=e}},slot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_slot},set:function(e){this.node.__shady_slot=e}},className:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_className},set:function(e){return this.node.__shady_className=e}}}),Ot.forEach((function(e){return Xn(e)})),Mt.forEach((function(e){return Xn(e)}));var Yn=new WeakMap;function Zn(e){if(ue(e)||e instanceof Gn)return e;var t=Yn.get(e);return t||(t=new Gn(e),Yn.set(e,t)),t}if(se.sa){var Jn=se.B?function(e){return e}:function(e){return ot(e),rt(e),e},Kn={inUse:se.sa,patch:Jn,isShadyRoot:ue,enqueue:Me,flush:De,flushInitial:function(e){!e.Aa&&e.T&&Ln(e)},settings:se,filterMutations:function(e,t){var n=t.getRootNode();return e.map((function(e){var t=n===e.target.getRootNode();if(t&&e.addedNodes){if((t=[].slice.call(e.addedNodes).filter((function(e){return n===e.getRootNode()}))).length)return e=Object.create(e),Object.defineProperty(e,"addedNodes",{value:t,configurable:!0}),e}else if(t)return e})).filter((function(e){return e}))},observeChildren:function(e,t){var n=oe(e);n.Z||(n.Z=new Ae),n.Z.ja.add(t);var i=n.Z;return{Ma:t,S:i,Na:e,takeRecords:function(){return i.takeRecords()}}},unobserveChildren:function(e){var t=e&&e.S;t&&(t.ja.delete(e.Ma),t.ja.size||(oe(e.Na).Z=null))},deferConnectionCallbacks:se.deferConnectionCallbacks,preferPerformance:se.preferPerformance,handlesDynamicScoping:!0,wrap:se.D?Zn:Jn,wrapIfNeeded:!0===se.D?Zn:function(e){return e},Wrapper:Gn,composedPath:function(e){return e.__composedPath||(e.__composedPath=ft(e.target,!0)),e.__composedPath},noPatch:se.D,patchOnDemand:se.ua,nativeMethods:Ve,nativeTree:We,patchElementProto:_n};window.ShadyDOM=Kn,function(){var e=["dispatchEvent","addEventListener","removeEventListener"];window.EventTarget?ze(window.EventTarget.prototype,e):(ze(Node.prototype,e),ze(Window.prototype,e)),qe?ze(Node.prototype,"parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")):Ue(Node.prototype,{parentNode:{get:function(){return $e.currentNode=this,$e.parentNode()}},firstChild:{get:function(){return $e.currentNode=this,$e.firstChild()}},lastChild:{get:function(){return $e.currentNode=this,$e.lastChild()}},previousSibling:{get:function(){return $e.currentNode=this,$e.previousSibling()}},nextSibling:{get:function(){return $e.currentNode=this,$e.nextSibling()}},childNodes:{get:function(){var e=[];$e.currentNode=this;for(var t=$e.firstChild();t;)e.push(t),t=$e.nextSibling();return e}},parentElement:{get:function(){return Ge.currentNode=this,Ge.parentNode()}},textContent:{get:function(){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(var e,t=document.createTreeWalker(this,NodeFilter.SHOW_TEXT,null,!1),n="";e=t.nextNode();)n+=e.nodeValue;return n;default:return this.nodeValue}},set:function(e){switch(null==e&&(e=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:Ye(this),(0<e.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_native_insertBefore(document.createTextNode(e),void 0);break;default:this.nodeValue=e}}}}),ze(Node.prototype,"appendChild insertBefore removeChild replaceChild cloneNode contains".split(" ")),ze(HTMLElement.prototype,["parentElement","contains"]),e={firstElementChild:{get:function(){return Ge.currentNode=this,Ge.firstChild()}},lastElementChild:{get:function(){return Ge.currentNode=this,Ge.lastChild()}},children:{get:function(){var e=[];Ge.currentNode=this;for(var t=Ge.firstChild();t;)e.push(t),t=Ge.nextSibling();return be(e)}},childElementCount:{get:function(){return this.children?this.children.length:0}}},qe?(ze(Element.prototype,Ze),ze(Element.prototype,["previousElementSibling","nextElementSibling","innerHTML","className"]),ze(HTMLElement.prototype,["children","innerHTML","className"])):(Ue(Element.prototype,e),Ue(Element.prototype,{previousElementSibling:{get:function(){return Ge.currentNode=this,Ge.previousSibling()}},nextElementSibling:{get:function(){return Ge.currentNode=this,Ge.nextSibling()}},innerHTML:{get:function(){return He(this,we)},set:function(e){var t="template"===this.localName?this.content:this;Ye(t);var n=this.localName||"div";for((n=this.namespaceURI&&this.namespaceURI!==Xe.namespaceURI?Xe.createElementNS(this.namespaceURI,n):Xe.createElement(n)).innerHTML=e,e="template"===this.localName?n.content:n;n=e.__shady_native_firstChild;)t.__shady_native_insertBefore(n,void 0)}},className:{get:function(){return this.getAttribute("class")||""},set:function(e){this.setAttribute("class",e)}}})),ze(Element.prototype,"setAttribute getAttribute hasAttribute removeAttribute focus blur".split(" ")),ze(Element.prototype,Je),ze(HTMLElement.prototype,["focus","blur"]),window.HTMLTemplateElement&&ze(window.HTMLTemplateElement.prototype,["innerHTML"]),qe?ze(DocumentFragment.prototype,Ze):Ue(DocumentFragment.prototype,e),ze(DocumentFragment.prototype,Je),qe?(ze(Document.prototype,Ze),ze(Document.prototype,["activeElement"])):Ue(Document.prototype,e),ze(Document.prototype,["importNode","getElementById"]),ze(Document.prototype,Je)}(),yn("__shady_"),Object.defineProperty(document,"_activeElement",un.activeElement),Ce(Window.prototype,fn,"__shady_"),se.D?se.ua&&Ce(Element.prototype,rn):(yn(),function(){if(!st&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var e=function(){var e=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.__shady_dispatchEvent(e)};Element.prototype.click?Element.prototype.click=e:HTMLElement.prototype.click&&(HTMLElement.prototype.click=e)}}()),function(){for(var e in vt)window.__shady_native_addEventListener(e,(function(e){e.__target||(St(e),_t(e))}),!0)}(),window.Event=Tt,window.CustomEvent=Nt,window.MouseEvent=kt,window.ShadowRoot=Dn}var Qn=window.Document.prototype.createElement,ei=window.Document.prototype.createElementNS,ti=window.Document.prototype.importNode,ni=window.Document.prototype.prepend,ii=window.Document.prototype.append,ri=window.DocumentFragment.prototype.prepend,oi=window.DocumentFragment.prototype.append,ai=window.Node.prototype.cloneNode,si=window.Node.prototype.appendChild,li=window.Node.prototype.insertBefore,ci=window.Node.prototype.removeChild,ui=window.Node.prototype.replaceChild,di=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),hi=window.Element.prototype.attachShadow,fi=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),pi=window.Element.prototype.getAttribute,mi=window.Element.prototype.setAttribute,vi=window.Element.prototype.removeAttribute,gi=window.Element.prototype.getAttributeNS,yi=window.Element.prototype.setAttributeNS,_i=window.Element.prototype.removeAttributeNS,bi=window.Element.prototype.insertAdjacentElement,wi=window.Element.prototype.insertAdjacentHTML,Ei=window.Element.prototype.prepend,xi=window.Element.prototype.append,Ci=window.Element.prototype.before,Si=window.Element.prototype.after,Ti=window.Element.prototype.replaceWith,Ni=window.Element.prototype.remove,ki=window.HTMLElement,Oi=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),Mi=window.HTMLElement.prototype.insertAdjacentElement,Di=window.HTMLElement.prototype.insertAdjacentHTML,Ai=new Set;function ji(e){var t=Ai.has(e);return e=/^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(e),!t&&e}"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach((function(e){return Ai.add(e)}));var Li=document.contains?document.contains.bind(document):document.documentElement.contains.bind(document.documentElement);function Pi(e){var t=e.isConnected;if(void 0!==t)return t;if(Li(e))return!0;for(;e&&!(e.__CE_isImportDocument||e instanceof Document);)e=e.parentNode||(window.ShadowRoot&&e instanceof ShadowRoot?e.host:void 0);return!(!e||!(e.__CE_isImportDocument||e instanceof Document))}function Ii(e){var t=e.children;if(t)return Array.prototype.slice.call(t);for(t=[],e=e.firstChild;e;e=e.nextSibling)e.nodeType===Node.ELEMENT_NODE&&t.push(e);return t}function Ri(e,t){for(;t&&t!==e&&!t.nextSibling;)t=t.parentNode;return t&&t!==e?t.nextSibling:null}function Fi(){var e=!(null==rr||!rr.noDocumentConstructionObserver),t=!(null==rr||!rr.shadyDomFastWalk);this.X=[],this.a=[],this.R=!1,this.shadyDomFastWalk=t,this.jb=!e}function Hi(e,t,n,i){var r=window.ShadyDom;if(e.shadyDomFastWalk&&r&&r.inUse){if(t.nodeType===Node.ELEMENT_NODE&&n(t),t.querySelectorAll)for(e=r.nativeMethods.querySelectorAll.call(t,"*"),t=0;t<e.length;t++)n(e[t])}else!function e(t,n,i){for(var r=t;r;){if(r.nodeType===Node.ELEMENT_NODE){var o=r;n(o);var a=o.localName;if("link"===a&&"import"===o.getAttribute("rel")){if(r=o.import,void 0===i&&(i=new Set),r instanceof Node&&!i.has(r))for(i.add(r),r=r.firstChild;r;r=r.nextSibling)e(r,n,i);r=Ri(t,o);continue}if("template"===a){r=Ri(t,o);continue}if(o=o.__CE_shadowRoot)for(o=o.firstChild;o;o=o.nextSibling)e(o,n,i)}r=r.firstChild?r.firstChild:Ri(t,r)}}(t,n,i)}function qi(e,t){e.R&&Hi(e,t,(function(t){return Vi(e,t)}))}function Vi(e,t){if(e.R&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.X.length;n++)e.X[n](t);for(n=0;n<e.a.length;n++)e.a[n](t)}}function Wi(e,t){var n=[];for(Hi(e,t,(function(e){return n.push(e)})),t=0;t<n.length;t++){var i=n[t];1===i.__CE_state?e.connectedCallback(i):zi(e,i)}}function Bi(e,t){var n=[];for(Hi(e,t,(function(e){return n.push(e)})),t=0;t<n.length;t++){var i=n[t];1===i.__CE_state&&e.disconnectedCallback(i)}}function Ui(e,t,n){var i=(n=void 0===n?{}:n).kb,r=n.upgrade||function(t){return zi(e,t)},o=[];for(Hi(e,t,(function(t){if(e.R&&Vi(e,t),"link"===t.localName&&"import"===t.getAttribute("rel")){var n=t.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_registry=document.__CE_registry),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:t.addEventListener("load",(function(){var n=t.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var o=new Set;i&&(i.forEach((function(e){return o.add(e)})),o.delete(n)),Ui(e,n,{kb:o,upgrade:r})}}))}else o.push(t)}),i),t=0;t<o.length;t++)r(o[t])}function zi(e,t){try{var n=t.ownerDocument,i=n.__CE_registry,r=i&&(n.defaultView||n.__CE_isImportDocument)?tr(i,t.localName):void 0;if(r&&void 0===t.__CE_state){r.constructionStack.push(t);try{try{if(new r.constructorFunction!==t)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{r.constructionStack.pop()}}catch(e){throw t.__CE_state=2,e}if(t.__CE_state=1,t.__CE_definition=r,r.attributeChangedCallback&&t.hasAttributes()){var o=r.observedAttributes;for(r=0;r<o.length;r++){var a=o[r],s=t.getAttribute(a);null!==s&&e.attributeChangedCallback(t,a,null,s,null)}}Pi(t)&&e.connectedCallback(t)}}catch(e){Gi(e)}}function $i(e,t,n,i){var r=t.__CE_registry;if(r&&(null===i||"http://www.w3.org/1999/xhtml"===i)&&(r=tr(r,n)))try{var o=new r.constructorFunction;if(void 0===o.__CE_state||void 0===o.__CE_definition)throw Error("Failed to construct '"+n+"': The returned value was not constructed with the HTMLElement constructor.");if("http://www.w3.org/1999/xhtml"!==o.namespaceURI)throw Error("Failed to construct '"+n+"': The constructed element's namespace must be the HTML namespace.");if(o.hasAttributes())throw Error("Failed to construct '"+n+"': The constructed element must not have any attributes.");if(null!==o.firstChild)throw Error("Failed to construct '"+n+"': The constructed element must not have any children.");if(null!==o.parentNode)throw Error("Failed to construct '"+n+"': The constructed element must not have a parent node.");if(o.ownerDocument!==t)throw Error("Failed to construct '"+n+"': The constructed element's owner document is incorrect.");if(o.localName!==n)throw Error("Failed to construct '"+n+"': The constructed element's local name is incorrect.");return o}catch(r){return Gi(r),t=null===i?Qn.call(t,n):ei.call(t,i,n),Object.setPrototypeOf(t,HTMLUnknownElement.prototype),t.__CE_state=2,t.__CE_definition=void 0,Vi(e,t),t}return Vi(e,t=null===i?Qn.call(t,n):ei.call(t,i,n)),t}function Gi(e){var t=e.message,n=e.sourceURL||e.fileName||"",i=e.line||e.lineNumber||0,r=e.column||e.columnNumber||0,o=void 0;void 0===ErrorEvent.prototype.initErrorEvent?o=new ErrorEvent("error",{cancelable:!0,message:t,filename:n,lineno:i,colno:r,error:e}):((o=document.createEvent("ErrorEvent")).initErrorEvent("error",!1,!0,t,n,i),o.preventDefault=function(){Object.defineProperty(this,"defaultPrevented",{configurable:!0,get:function(){return!0}})}),void 0===o.error&&Object.defineProperty(o,"error",{configurable:!0,enumerable:!0,get:function(){return e}}),window.dispatchEvent(o),o.defaultPrevented||console.error(e)}function Xi(){var e=this;this.C=void 0,this.Ca=new Promise((function(t){e.a=t}))}function Yi(e){var t=document;this.S=void 0,this.M=e,this.a=t,Ui(this.M,this.a),"loading"===this.a.readyState&&(this.S=new MutationObserver(this.b.bind(this)),this.S.observe(this.a,{childList:!0,subtree:!0}))}function Zi(e){e.S&&e.S.disconnect()}function Ji(e){this.fa=new Map,this.ga=new Map,this.xa=new Map,this.na=!1,this.qa=new Map,this.ea=function(e){return e()},this.P=!1,this.ha=[],this.M=e,this.ya=e.jb?new Yi(e):void 0}function Ki(e,t){if(!ji(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(tr(e,t))throw Error("A custom element with name '"+t+"' has already been defined.");if(e.na)throw Error("A custom element is already being defined.")}function Qi(e,t,n){var i;e.na=!0;try{var r=n.prototype;if(!(r instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var o=function(e){var t=r[e];if(void 0!==t&&!(t instanceof Function))throw Error("The '"+e+"' callback must be a function.");return t},a=o("connectedCallback"),s=o("disconnectedCallback"),l=o("adoptedCallback"),c=(i=o("attributeChangedCallback"))&&n.observedAttributes||[]}catch(e){throw e}finally{e.na=!1}return n={localName:t,constructorFunction:n,connectedCallback:a,disconnectedCallback:s,adoptedCallback:l,attributeChangedCallback:i,observedAttributes:c,constructionStack:[]},e.ga.set(t,n),e.xa.set(n.constructorFunction,n),n}function er(e){if(!1!==e.P){e.P=!1;for(var t=[],n=e.ha,i=new Map,r=0;r<n.length;r++)i.set(n[r],[]);for(Ui(e.M,document,{upgrade:function(n){if(void 0===n.__CE_state){var r=n.localName,o=i.get(r);o?o.push(n):e.ga.has(r)&&t.push(n)}}}),r=0;r<t.length;r++)zi(e.M,t[r]);for(r=0;r<n.length;r++){for(var o=n[r],a=i.get(o),s=0;s<a.length;s++)zi(e.M,a[s]);(o=e.qa.get(o))&&o.resolve(void 0)}n.length=0}}function tr(e,t){var n=e.ga.get(t);if(n)return n;if(n=e.fa.get(t)){e.fa.delete(t);try{return Qi(e,t,n())}catch(e){Gi(e)}}}function nr(e,t,n){function i(t){return function(n){for(var i=[],r=0;r<arguments.length;++r)i[r]=arguments[r];r=[];for(var o=[],a=0;a<i.length;a++){var s=i[a];if(s instanceof Element&&Pi(s)&&o.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)r.push(s);else r.push(s)}for(t.apply(this,i),i=0;i<o.length;i++)Bi(e,o[i]);if(Pi(this))for(i=0;i<r.length;i++)(o=r[i])instanceof Element&&Wi(e,o)}}void 0!==n.prepend&&(t.prepend=i(n.prepend)),void 0!==n.append&&(t.append=i(n.append))}Fi.prototype.connectedCallback=function(e){var t=e.__CE_definition;if(t.connectedCallback)try{t.connectedCallback.call(e)}catch(e){Gi(e)}},Fi.prototype.disconnectedCallback=function(e){var t=e.__CE_definition;if(t.disconnectedCallback)try{t.disconnectedCallback.call(e)}catch(e){Gi(e)}},Fi.prototype.attributeChangedCallback=function(e,t,n,i,r){var o=e.__CE_definition;if(o.attributeChangedCallback&&-1<o.observedAttributes.indexOf(t))try{o.attributeChangedCallback.call(e,t,n,i,r)}catch(e){Gi(e)}},Xi.prototype.resolve=function(e){if(this.C)throw Error("Already resolved.");this.C=e,this.a(e)},Yi.prototype.b=function(e){var t=this.a.readyState;for("interactive"!==t&&"complete"!==t||Zi(this),t=0;t<e.length;t++)for(var n=e[t].addedNodes,i=0;i<n.length;i++)Ui(this.M,n[i])},(i=Ji.prototype).$a=function(e,t){var n=this;if(!(t instanceof Function))throw new TypeError("Custom element constructor getters must be functions.");Ki(this,e),this.fa.set(e,t),this.ha.push(e),this.P||(this.P=!0,this.ea((function(){return er(n)})))},i.define=function(e,t){var n=this;if(!(t instanceof Function))throw new TypeError("Custom element constructors must be functions.");Ki(this,e),Qi(this,e,t),this.ha.push(e),this.P||(this.P=!0,this.ea((function(){return er(n)})))},i.upgrade=function(e){Ui(this.M,e)},i.get=function(e){if(e=tr(this,e))return e.constructorFunction},i.whenDefined=function(e){if(!ji(e))return Promise.reject(new SyntaxError("'"+e+"' is not a valid custom element name."));var t=this.qa.get(e);if(t)return t.Ca;t=new Xi,this.qa.set(e,t);var n=this.ga.has(e)||this.fa.has(e);return e=-1===this.ha.indexOf(e),n&&e&&t.resolve(void 0),t.Ca},i.polyfillWrapFlushCallback=function(e){this.ya&&Zi(this.ya);var t=this.ea;this.ea=function(n){return e((function(){return t(n)}))}},window.CustomElementRegistry=Ji,Ji.prototype.define=Ji.prototype.define,Ji.prototype.upgrade=Ji.prototype.upgrade,Ji.prototype.get=Ji.prototype.get,Ji.prototype.whenDefined=Ji.prototype.whenDefined,Ji.prototype.polyfillDefineLazy=Ji.prototype.$a,Ji.prototype.polyfillWrapFlushCallback=Ji.prototype.polyfillWrapFlushCallback;var ir={},rr=window.customElements;function or(){var e=new Fi;!function(e){function t(){var t=this.constructor,n=document.__CE_registry.xa.get(t);if(!n)throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");var i=n.constructionStack;if(0===i.length)return i=Qn.call(document,n.localName),Object.setPrototypeOf(i,t.prototype),i.__CE_state=1,i.__CE_definition=n,Vi(e,i),i;var r=i.length-1,o=i[r];if(o===ir)throw Error("Failed to construct '"+n.localName+"': This element was already constructed.");return i[r]=ir,Object.setPrototypeOf(o,t.prototype),Vi(e,o),o}t.prototype=ki.prototype,Object.defineProperty(HTMLElement.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:t}),window.HTMLElement=t}(e),function(e){Document.prototype.createElement=function(t){return $i(e,this,t,null)},Document.prototype.importNode=function(t,n){return t=ti.call(this,t,!!n),this.__CE_registry?Ui(e,t):qi(e,t),t},Document.prototype.createElementNS=function(t,n){return $i(e,this,n,t)},nr(e,Document.prototype,{prepend:ni,append:ii})}(e),nr(e,DocumentFragment.prototype,{prepend:ri,append:oi}),function(e){function t(t,n){Object.defineProperty(t,"textContent",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(t){if(this.nodeType===Node.TEXT_NODE)n.set.call(this,t);else{var i=void 0;if(this.firstChild){var r=this.childNodes,o=r.length;if(0<o&&Pi(this)){i=Array(o);for(var a=0;a<o;a++)i[a]=r[a]}}if(n.set.call(this,t),i)for(t=0;t<i.length;t++)Bi(e,i[t])}}})}Node.prototype.insertBefore=function(t,n){if(t instanceof DocumentFragment){var i=Ii(t);if(t=li.call(this,t,n),Pi(this))for(n=0;n<i.length;n++)Wi(e,i[n]);return t}return i=t instanceof Element&&Pi(t),n=li.call(this,t,n),i&&Bi(e,t),Pi(this)&&Wi(e,t),n},Node.prototype.appendChild=function(t){if(t instanceof DocumentFragment){var n=Ii(t);if(t=si.call(this,t),Pi(this))for(var i=0;i<n.length;i++)Wi(e,n[i]);return t}return n=t instanceof Element&&Pi(t),i=si.call(this,t),n&&Bi(e,t),Pi(this)&&Wi(e,t),i},Node.prototype.cloneNode=function(t){return t=ai.call(this,!!t),this.ownerDocument.__CE_registry?Ui(e,t):qi(e,t),t},Node.prototype.removeChild=function(t){var n=t instanceof Element&&Pi(t),i=ci.call(this,t);return n&&Bi(e,t),i},Node.prototype.replaceChild=function(t,n){if(t instanceof DocumentFragment){var i=Ii(t);if(t=ui.call(this,t,n),Pi(this))for(Bi(e,n),n=0;n<i.length;n++)Wi(e,i[n]);return t}i=t instanceof Element&&Pi(t);var r=ui.call(this,t,n),o=Pi(this);return o&&Bi(e,n),i&&Bi(e,t),o&&Wi(e,t),r},di&&di.get?t(Node.prototype,di):function(e,t){e.R=!0,e.X.push(t)}(e,(function(e){t(e,{enumerable:!0,configurable:!0,get:function(){for(var e=[],t=this.firstChild;t;t=t.nextSibling)t.nodeType!==Node.COMMENT_NODE&&e.push(t.textContent);return e.join("")},set:function(e){for(;this.firstChild;)ci.call(this,this.firstChild);null!=e&&""!==e&&si.call(this,document.createTextNode(e))}})}))}(e),function(e){function t(t,n){Object.defineProperty(t,"innerHTML",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(t){var i=this,r=void 0;if(Pi(this)&&(r=[],Hi(e,this,(function(e){e!==i&&r.push(e)}))),n.set.call(this,t),r)for(var o=0;o<r.length;o++){var a=r[o];1===a.__CE_state&&e.disconnectedCallback(a)}return this.ownerDocument.__CE_registry?Ui(e,this):qi(e,this),t}})}function n(t,n){t.insertAdjacentElement=function(t,i){var r=Pi(i);return t=n.call(this,t,i),r&&Bi(e,i),Pi(t)&&Wi(e,i),t}}function i(t,n){function i(t,n){for(var i=[];t!==n;t=t.nextSibling)i.push(t);for(n=0;n<i.length;n++)Ui(e,i[n])}t.insertAdjacentHTML=function(e,t){if("beforebegin"===(e=e.toLowerCase())){var r=this.previousSibling;n.call(this,e,t),i(r||this.parentNode.firstChild,this)}else if("afterbegin"===e)r=this.firstChild,n.call(this,e,t),i(this.firstChild,r);else if("beforeend"===e)r=this.lastChild,n.call(this,e,t),i(r||this.firstChild,null);else{if("afterend"!==e)throw new SyntaxError("The value provided ("+String(e)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");r=this.nextSibling,n.call(this,e,t),i(this.nextSibling,r)}}}hi&&(Element.prototype.attachShadow=function(t){if(t=hi.call(this,t),e.R&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.X.length;n++)e.X[n](t)}return this.__CE_shadowRoot=t}),fi&&fi.get?t(Element.prototype,fi):Oi&&Oi.get?t(HTMLElement.prototype,Oi):function(e,t){e.R=!0,e.a.push(t)}(e,(function(e){t(e,{enumerable:!0,configurable:!0,get:function(){return ai.call(this,!0).innerHTML},set:function(e){var t="template"===this.localName,n=t?this.content:this,i=ei.call(document,this.namespaceURI,this.localName);for(i.innerHTML=e;0<n.childNodes.length;)ci.call(n,n.childNodes[0]);for(e=t?i.content:i;0<e.childNodes.length;)si.call(n,e.childNodes[0])}})})),Element.prototype.setAttribute=function(t,n){if(1!==this.__CE_state)return mi.call(this,t,n);var i=pi.call(this,t);mi.call(this,t,n),n=pi.call(this,t),e.attributeChangedCallback(this,t,i,n,null)},Element.prototype.setAttributeNS=function(t,n,i){if(1!==this.__CE_state)return yi.call(this,t,n,i);var r=gi.call(this,t,n);yi.call(this,t,n,i),i=gi.call(this,t,n),e.attributeChangedCallback(this,n,r,i,t)},Element.prototype.removeAttribute=function(t){if(1!==this.__CE_state)return vi.call(this,t);var n=pi.call(this,t);vi.call(this,t),null!==n&&e.attributeChangedCallback(this,t,n,null,null)},Element.prototype.removeAttributeNS=function(t,n){if(1!==this.__CE_state)return _i.call(this,t,n);var i=gi.call(this,t,n);_i.call(this,t,n);var r=gi.call(this,t,n);i!==r&&e.attributeChangedCallback(this,n,i,r,t)},Mi?n(HTMLElement.prototype,Mi):bi&&n(Element.prototype,bi),Di?i(HTMLElement.prototype,Di):wi&&i(Element.prototype,wi),nr(e,Element.prototype,{prepend:Ei,append:xi}),function(e){function t(t){return function(n){for(var i=[],r=0;r<arguments.length;++r)i[r]=arguments[r];r=[];for(var o=[],a=0;a<i.length;a++){var s=i[a];if(s instanceof Element&&Pi(s)&&o.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)r.push(s);else r.push(s)}for(t.apply(this,i),i=0;i<o.length;i++)Bi(e,o[i]);if(Pi(this))for(i=0;i<r.length;i++)(o=r[i])instanceof Element&&Wi(e,o)}}var n=Element.prototype;void 0!==Ci&&(n.before=t(Ci)),void 0!==Si&&(n.after=t(Si)),void 0!==Ti&&(n.replaceWith=function(t){for(var n=[],i=0;i<arguments.length;++i)n[i]=arguments[i];i=[];for(var r=[],o=0;o<n.length;o++){var a=n[o];if(a instanceof Element&&Pi(a)&&r.push(a),a instanceof DocumentFragment)for(a=a.firstChild;a;a=a.nextSibling)i.push(a);else i.push(a)}for(o=Pi(this),Ti.apply(this,n),n=0;n<r.length;n++)Bi(e,r[n]);if(o)for(Bi(e,this),n=0;n<i.length;n++)(r=i[n])instanceof Element&&Wi(e,r)}),void 0!==Ni&&(n.remove=function(){var t=Pi(this);Ni.call(this),t&&Bi(e,this)})}(e)}(e),e=new Ji(e),document.__CE_registry=e,Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:e})}function ar(){this.end=this.start=0,this.rules=this.parent=this.previous=null,this.cssText=this.parsedCssText="",this.atRule=!1,this.type=0,this.parsedSelector=this.selector=this.keyframesName=""}function sr(e){var t=e=e.replace(pr,"").replace(mr,""),n=new ar;n.start=0,n.end=t.length;for(var i=n,r=0,o=t.length;r<o;r++)if("{"===t[r]){i.rules||(i.rules=[]);var a=i,s=a.rules[a.rules.length-1]||null;(i=new ar).start=r+1,i.parent=a,i.previous=s,a.rules.push(i)}else"}"===t[r]&&(i.end=r+1,i=i.parent||n);return function e(t,n){var i=n.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=i.trim(),t.parent&&(i=(i=(i=function(e){return e.replace(/\\([0-9a-f]{1,6})\s/gi,(function(e,t){for(t=6-(e=t).length;t--;)e="0"+e;return"\\"+e}))}(i=n.substring(t.previous?t.previous.end:t.parent.start,t.start-1))).replace(wr," ")).substring(i.lastIndexOf(";")+1),i=t.parsedSelector=t.selector=i.trim(),t.atRule=0===i.indexOf("@"),t.atRule?0===i.indexOf("@media")?t.type=hr:i.match(br)&&(t.type=dr,t.keyframesName=t.selector.split(wr).pop()):t.type=0===i.indexOf("--")?fr:ur),i=t.rules)for(var r=0,o=i.length,a=void 0;r<o&&(a=i[r]);r++)e(a,n);return t}(n,e)}rr&&!rr.forcePolyfill&&"function"==typeof rr.define&&"function"==typeof rr.get||or(),window.__CE_installPolyfill=or;var lr,cr,ur=1,dr=7,hr=4,fr=1e3,pr=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,mr=/@import[^;]*;/gim,vr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,gr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,yr=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,_r=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,br=/^@[^\s]*keyframes/,wr=/\s+/g,Er=!(window.ShadyDOM&&window.ShadyDOM.inUse);function xr(e){lr=(!e||!e.shimcssproperties)&&(Er||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(cr=window.ShadyCSS.cssBuild);var Cr=!(!window.ShadyCSS||!window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?lr=window.ShadyCSS.nativeCss:window.ShadyCSS?(xr(window.ShadyCSS),window.ShadyCSS=void 0):xr(window.WebComponents&&window.WebComponents.flags);var Sr=lr,Tr=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,Nr=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,kr=/(--[\w-]+)\s*([:,;)]|$)/gi,Or=/(animation\s*:)|(animation-name\s*:)/,Mr=/@media\s(.*)/,Dr=/\{[^}]*\}/g,Ar=new Set;function jr(e,t){return e?("string"==typeof e&&(e=sr(e)),t&&Ir(e,t),function e(t,n,i){i=void 0===i?"":i;var r="";if(t.cssText||t.rules){var o,a=t.rules;if((o=a)&&(o=!((o=a[0])&&o.selector&&0===o.selector.indexOf("--"))),o){o=0;for(var s=a.length,l=void 0;o<s&&(l=a[o]);o++)r=e(l,n,r)}else(r=(n=n?t.cssText:(n=(n=t.cssText).replace(vr,"").replace(gr,"")).replace(yr,"").replace(_r,"")).trim())&&(r="  "+r+"\n")}return r&&(t.selector&&(i+=t.selector+" {\n"),i+=r,t.selector&&(i+="}\n\n")),i}(e,Sr)):""}function Lr(e){return!e.__cssRules&&e.textContent&&(e.__cssRules=sr(e.textContent)),e.__cssRules||null}function Pr(e){return!!e.parent&&e.parent.type===dr}function Ir(e,t,n,i){if(e){var r=!1,o=e.type;if(i&&o===hr){var a=e.selector.match(Mr);a&&(window.matchMedia(a[1]).matches||(r=!0))}if(o===ur?t(e):n&&o===dr?n(e):o===fr&&(r=!0),(e=e.rules)&&!r)for(r=0,o=e.length,a=void 0;r<o&&(a=e[r]);r++)Ir(a,t,n,i)}}function Rr(e,t,n,i){var r=document.createElement("style");return t&&r.setAttribute("scope",t),r.textContent=e,qr(r,n,i),r}var Fr=null;function Hr(e){e=document.createComment(" Shady DOM styles for "+e+" ");var t=document.head;return t.insertBefore(e,(Fr?Fr.nextSibling:null)||t.firstChild),Fr=e}function qr(e,t,n){(t=t||document.head).insertBefore(e,n&&n.nextSibling||t.firstChild),Fr?e.compareDocumentPosition(Fr)===Node.DOCUMENT_POSITION_PRECEDING&&(Fr=e):Fr=e}function Vr(e,t){for(var n=0,i=e.length;t<i;t++)if("("===e[t])n++;else if(")"===e[t]&&0==--n)return t;return-1}function Wr(e,t){Er?e.setAttribute("class",t):window.ShadyDOM.nativeMethods.setAttribute.call(e,"class",t)}var Br=window.ShadyDOM&&window.ShadyDOM.wrap||function(e){return e};function Ur(e){var t=e.localName,n="";return t?-1<t.indexOf("-")||(n=t,t=e.getAttribute&&e.getAttribute("is")||""):(t=e.is,n=e.extends),{is:t,ca:n}}function zr(e){for(var t=[],n="",i=0;0<=i&&i<e.length;i++)if("("===e[i]){var r=Vr(e,i);n+=e.slice(i,r+1),i=r}else","===e[i]?(t.push(n),n=""):n+=e[i];return n&&t.push(n),t}function $r(e){if(void 0!==cr)return cr;if(void 0===e.__cssBuild){var t=e.getAttribute("css-build");if(t)e.__cssBuild=t;else{if(""!==(t=(t="template"===e.localName?e.content.firstChild:e.firstChild)instanceof Comment&&"css-build"===(t=t.textContent.trim().split(":"))[0]?t[1]:"")){var n="template"===e.localName?e.content.firstChild:e.firstChild;n.parentNode.removeChild(n)}e.__cssBuild=t}}return e.__cssBuild||""}function Gr(e){return!(""===(e=void 0===e?"":e)||!Sr)&&(Er?"shadow"===e:"shady"===e)}function Xr(){}function Yr(e,t,n){var i;if(t.nodeType===Node.ELEMENT_NODE&&n(t),i="template"===t.localName?(t.content||t._content||t).childNodes:t.children||t.childNodes)for(t=0;t<i.length;t++)Yr(e,i[t],n)}function Zr(e,t,n){if(t)if(e.classList)n?(e.classList.remove("style-scope"),e.classList.remove(t)):(e.classList.add("style-scope"),e.classList.add(t));else if(e.getAttribute){var i=e.getAttribute("class");n?i&&Wr(e,t=i.replace("style-scope","").replace(t,"")):Wr(e,(i?i+" ":"")+"style-scope "+t)}}function Jr(e,t,n){Yr(po,e,(function(e){Zr(e,t,!0),Zr(e,n)}))}function Kr(e,t){Yr(po,e,(function(e){Zr(e,t||"",!0)}))}function Qr(e,t,n,i,r){var o=po;return""===(r=void 0===r?"":r)&&(r=Er||"shady"===(void 0===i?"":i)?jr(t,n):function(e,t,n,i,r){var o=eo(n,i);return n=n?"."+n:"",jr(t,(function(t){t.c||(t.selector=t.w=to(e,t,e.b,n,o),t.c=!0),r&&r(t,n,o)}))}(o,t,(e=Ur(e)).is,e.ca,n)+"\n\n"),r.trim()}function eo(e,t){return t?"[is="+e+"]":e}function to(e,t,n,i,r){var o=zr(t.selector);if(!Pr(t)){t=0;for(var a=o.length,s=void 0;t<a&&(s=o[t]);t++)o[t]=n.call(e,s,i,r)}return o.filter((function(e){return!!e})).join(",")}function no(e){return e.replace(oo,(function(e,t,n){return-1<n.indexOf("+")?n=n.replace(/\+/g,"___"):-1<n.indexOf("___")&&(n=n.replace(/___/g,"+")),":"+t+"("+n+")"}))}function io(e,t){e=e.split(/(\[.+?\])/);for(var n=[],i=0;i<e.length;i++)if(1==i%2)n.push(e[i]);else{var r=e[i];""===r&&i===e.length-1||((r=r.split(":"))[0]+=t,n.push(r.join(":")))}return n.join("")}function ro(e){":root"===e.selector&&(e.selector="html")}Xr.prototype.b=function(e,t,n){var i=!1;e=e.trim();var r=oo.test(e);r&&(e=no(e=e.replace(oo,(function(e,t,n){return":"+t+"("+n.replace(/\s/g,"")+")"}))));var o=fo.test(e);if(o){var a=function(e){for(var t,n=[];t=e.match(fo);){var i=t.index,r=Vr(e,i);if(-1===r)throw Error(t.input+" selector missing ')'");t=e.slice(i,r+1),e=e.replace(t,"î"),n.push(t)}return{wa:e,matches:n}}(e);e=a.wa,a=a.matches}return e=(e=e.replace(lo,":host $1")).replace(ao,(function(e,r,o){return i||(e=function(e,t,n,i){var r=e.indexOf("::slotted");if(0<=e.indexOf(":host")?e=function(e,t){var n=e.match(co);return(n=n&&n[2].trim()||"")?n[0].match(so)?e.replace(co,(function(e,n,i){return t+i})):n.split(so)[0]===t?n:"should_not_match":e.replace(":host",t)}(e,i):0!==r&&(e=n?io(e,n):e),n=!1,0<=r&&(t="",n=!0),n){var o=!0;n&&(e=e.replace(uo,(function(e,t){return" > "+t})))}return{value:e,Qa:t,stop:o}}(o,r,t,n),i=i||e.stop,r=e.Qa,o=e.value),r+o})),o&&(e=function(e,t){var n=e.split("î");return t.reduce((function(e,t,i){return e+t+n[i+1]}),n[0])}(e,a)),r&&(e=no(e)),e.replace(ho,(function(e,t,n,i){return'[dir="'+n+'"] '+t+i+", "+t+'[dir="'+n+'"]'+i}))},Xr.prototype.c=function(e){return e.match(":host")?"":e.match("::slotted")?this.b(e,":not(.style-scope)"):io(e.trim(),":not(.style-scope)")},a.Object.defineProperties(Xr.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"style-scope"}}});var oo=/:(nth[-\w]+)\(([^)]+)\)/,ao=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,so=/[[.:#*]/,lo=/^(::slotted)/,co=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,uo=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,ho=/(.*):dir\((?:(ltr|rtl))\)(.*)/,fo=/:(?:matches|any|-(?:webkit|moz)-any)/,po=new Xr;function mo(e,t,n,i,r){this.H=e||null,this.b=t||null,this.ta=n||[],this.F=null,this.cssBuild=r||"",this.ca=i||"",this.a=this.G=this.L=null}function vo(e){return e?e.__styleInfo:null}function go(e,t){return e.__styleInfo=t}function yo(e){var t=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return t&&t.call(this,e)}mo.prototype.c=function(){return this.H},mo.prototype._getStyleRules=mo.prototype.c;var _o=/:host\s*>\s*/,bo=navigator.userAgent.match("Trident");function wo(){}function Eo(e){if(!e.v){var t={},n={};xo(e,n)&&(t.K=n,e.rules=null),t.cssText=e.parsedCssText.replace(Dr,"").replace(Tr,""),e.v=t}}function xo(e,t){var n=e.v;if(!n){n=e.parsedCssText;for(var i;e=Tr.exec(n);)"inherit"===(i=(e[2]||e[3]).trim())&&"unset"===i||(t[e[1].trim()]=i),i=!0;return i}if(n.K)return Object.assign(t,n.K),!0}function Co(e,t,n){return t&&(t=0<=t.indexOf(";")?So(e,t,n):function e(t,n){var i=t.indexOf("var(");if(-1===i)return n(t,"","","");var r=Vr(t,i+3),o=t.substring(i+4,r);return i=t.substring(0,i),t=e(t.substring(r+1),n),-1===(r=o.indexOf(","))?n(i,o.trim(),"",t):n(i,o.substring(0,r).trim(),o.substring(r+1).trim(),t)}(t,(function(t,i,r,o){return i?((i=Co(e,n[i],n))&&"initial"!==i?"apply-shim-inherit"===i&&(i="inherit"):i=Co(e,n[r]||r,n)||r,t+(i||"")+o):t+o}))),t&&t.trim()||""}function So(e,t,n){t=t.split(";");for(var i,r,o=0;o<t.length;o++)if(i=t[o]){if(Nr.lastIndex=0,r=Nr.exec(i))i=Co(e,n[r[1]],n);else if(-1!==(r=i.indexOf(":"))){var a=i.substring(r);a=Co(e,a=a.trim(),n)||a,i=i.substring(0,r)+a}t[o]=i&&i.lastIndexOf(";")===i.length-1?i.slice(0,-1):i||""}return t.join(";")}function To(e){return function(t){return t.replace(e.l,e.a)}}function No(e,t){var n=ko,i=Lr(e);e.textContent=jr(i,(function(e){var i=e.cssText=e.parsedCssText;e.v&&e.v.cssText&&(i=i.replace(vr,"").replace(gr,""),e.cssText=So(n,i,t))}))}a.Object.defineProperties(wo.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"x-scope"}}});var ko=new wo,Oo={},Mo=window.customElements;if(Mo&&!Er&&!Cr){var Do=Mo.define;Mo.define=function(e,t,n){Oo[e]||(Oo[e]=Hr(e)),Do.call(Mo,e,t,n)}}function Ao(){this.cache={}}function jo(){}Ao.prototype.store=function(e,t,n,i){var r=this.cache[e]||[];r.push({K:t,styleElement:n,G:i}),100<r.length&&r.shift(),this.cache[e]=r};var Lo=new RegExp(po.a+"\\s*([^\\s]*)");function Po(e){return(e=(e.classList&&e.classList.value?e.classList.value:e.getAttribute("class")||"").match(Lo))?e[1]:""}function Io(e){var t=Br(e).getRootNode();return t===e||t===e.ownerDocument?"":(e=t.host)?Ur(e).is:""}function Ro(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.target!==document.documentElement&&n.target!==document.head)for(var i=0;i<n.addedNodes.length;i++){var r=n.addedNodes[i];if(r.nodeType===Node.ELEMENT_NODE){var o=r.getRootNode(),a=Po(r);if(a&&o===r.ownerDocument&&("style"!==r.localName&&"template"!==r.localName||""===$r(r)))Kr(r,a);else if(o instanceof ShadowRoot)for((o=Io(r))!==a&&Jr(r,a,o),r=window.ShadyDOM.nativeMethods.querySelectorAll.call(r,":not(."+po.a+")"),a=0;a<r.length;a++){var s=Io(o=r[a]);s&&Zr(o,s)}}}}}if(!(Er||window.ShadyDOM&&window.ShadyDOM.handlesDynamicScoping)){var Fo=new MutationObserver(Ro),Ho=function(e){Fo.observe(e,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)Ho(document);else{var qo=function(){Ho(document.body)};window.HTMLImports?window.HTMLImports.whenReady(qo):requestAnimationFrame((function(){if("loading"===document.readyState){document.addEventListener("readystatechange",(function e(){qo(),document.removeEventListener("readystatechange",e)}))}else qo()}))}jo=function(){Ro(Fo.takeRecords())}}var Vo={},Wo=Promise.resolve();function Bo(e){(e=Vo[e])&&(e._applyShimCurrentVersion=e._applyShimCurrentVersion||0,e._applyShimValidatingVersion=e._applyShimValidatingVersion||0,e._applyShimNextVersion=(e._applyShimNextVersion||0)+1)}function Uo(e){return e._applyShimCurrentVersion===e._applyShimNextVersion}var zo={},$o=new Ao;function Go(){this.Y={},this.c=document.documentElement;var e=new ar;e.rules=[],this.l=go(this.c,new mo(e)),this.J=!1,this.a=this.b=null}function Xo(e){var t=Ur(e),n=t.is;t=t.ca;var i=Oo[n]||null,r=Vo[n];if(r)return go(e,t=new mo(n=r._styleAst,i,r.a,t,r=$r(r))),t}function Yo(e){if(!e.b&&window.ShadyCSS&&window.ShadyCSS.ApplyShim){e.b=window.ShadyCSS.ApplyShim,e.b.invalidCallback=Bo;var t=!0}else t=!1;return function(e){!e.a&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(e.a=window.ShadyCSS.CustomStyleInterface,e.a.transformCallback=function(t){e.Ha(t)},e.a.validateCallback=function(){requestAnimationFrame((function(){(e.a.enqueued||e.J)&&e.flushCustomStyles()}))})}(e),t}function Zo(e,t,n){var i=Ur(t).is;if(n.F){var r,o=n.F;for(r in o)null===r?t.style.removeProperty(r):t.style.setProperty(r,o[r])}!(o=Vo[i])&&t!==e.c||o&&""!==$r(o)||!o||!o._style||Uo(o)||((Uo(o)||o._applyShimValidatingVersion!==o._applyShimNextVersion)&&(Yo(e),e.b&&e.b.transformRules(o._styleAst,i),o._style.textContent=Qr(t,n.H),function(e){e._applyShimValidatingVersion=e._applyShimNextVersion,e._validating||(e._validating=!0,Wo.then((function(){e._applyShimCurrentVersion=e._applyShimNextVersion,e._validating=!1})))}(o)),Er&&(e=t.shadowRoot)&&(e=e.querySelector("style"))&&(e.textContent=Qr(t,n.H)),n.H=o._styleAst)}function Jo(e,t){return(t=Br(t).getRootNode().host)?vo(t)||Xo(t)?t:Jo(e,t):e.c}function Ko(e,t,n){var i=Jo(e,t),r=vo(i),o=r.L;for(var a in i===e.c||o||(Ko(e,i,r),o=r.L),e=Object.create(o||null),i=function(e,t,n){var i={},r={};return Ir(t,(function(t){!function(e,t,n,i){if(t.v||Eo(t),t.v.K){var r=Ur(e);e=r.is,r=r.ca,r=e?eo(e,r):"html";var o=t.parsedSelector,a=!!o.match(_o)||"html"===r&&-1<o.indexOf("html"),s=0===o.indexOf(":host")&&!a;"shady"===n&&(s=!(a=o===r+" > *."+r||-1!==o.indexOf("html"))&&0===o.indexOf(r)),(a||s)&&(n=r,s&&(t.w||(t.w=to(po,t,po.b,e?"."+e:"",r)),n=t.w||r),a&&"html"===r&&(n=t.w||t.J),i({wa:n,Xa:s,mb:a}))}}(e,t,n,(function(n){yo.call(e._element||e,n.wa)&&(n.Xa?xo(t,i):xo(t,r))}))}),null,!0),{cb:r,Va:i}}(t,n.H,n.cssBuild),t=function(e,t){var n={},i=[];return Ir(e,(function(e){e.v||Eo(e);var r=e.w||e.parsedSelector;t&&e.v.K&&r&&yo.call(t,r)&&(xo(e,n),e=e.index,r=parseInt(e/32,10),i[r]=(i[r]||0)|1<<e%32)}),null,!0),{K:n,key:i}}(r.H,t).K,Object.assign(e,i.Va,t,i.cb),t=n.F)((r=t[a])||0===r)&&(e[a]=r);for(a=ko,t=Object.getOwnPropertyNames(e),r=0;r<t.length;r++)e[i=t[r]]=Co(a,e[i],e);n.L=e}(i=Go.prototype).flush=function(){jo()},i.Ta=function(e){return Lr(e)},i.hb=function(e){return jr(e)},i.prepareTemplate=function(e,t,n){this.prepareTemplateDom(e,t),this.prepareTemplateStyles(e,t,n)},i.prepareTemplateStyles=function(e,t,n){if(!e._prepared&&!Cr){Er||Oo[t]||(Oo[t]=Hr(t)),e._prepared=!0,e.name=t,e.extends=n,Vo[t]=e;var i=$r(e),r=Gr(i);n={is:t,extends:n};for(var o=[],a=e.content.querySelectorAll("style"),s=0;s<a.length;s++){var l=a[s];if(l.hasAttribute("shady-unscoped")){if(!Er){var c=l.textContent;if(!Ar.has(c)){Ar.add(c);var u=document.createElement("style");u.setAttribute("shady-unscoped",""),u.textContent=c,document.head.appendChild(u)}l.parentNode.removeChild(l)}}else o.push(l.textContent),l.parentNode.removeChild(l)}o=o.join("").trim()+(zo[t]||""),Yo(this),r||((a=!i)&&(a=Nr.test(o)||Tr.test(o),Nr.lastIndex=0,Tr.lastIndex=0),s=sr(o),a&&Sr&&this.b&&this.b.transformRules(s,t),e._styleAst=s),a=[],Sr||(a=function(e){var t={},n=[],i=0;for(var r in Ir(e,(function(e){Eo(e),e.index=i++,e=e.v.cssText;for(var n;n=kr.exec(e);){var r=n[1];":"!==n[2]&&(t[r]=!0)}}),(function(e){n.push(e)})),e.b=n,e=[],t)e.push(r);return e}(e._styleAst)),a.length&&!Sr||(s=Er?e.content:null,t=Oo[t]||null,i=(i=Qr(n,e._styleAst,null,i,r?o:"")).length?Rr(i,n.is,s,t):null,e._style=i),e.a=a}},i.ab=function(e,t){zo[t]=e.join(" ")},i.prepareTemplateDom=function(e,t){if(!Cr){var n=$r(e);Er||"shady"===n||e._domPrepared||(e._domPrepared=!0,function(e,t){Yr(po,e,(function(e){Zr(e,t||"")}))}(e.content,t))}},i.flushCustomStyles=function(){if(!Cr){var e=Yo(this);if(this.a){var t=this.a.processStyles();if((e||this.a.enqueued)&&!Gr(this.l.cssBuild)){if(Sr){if(!this.l.cssBuild)for(e=0;e<t.length;e++){var n=this.a.getStyleForCustomStyle(t[e]);if(n&&Sr&&this.b){var i=Lr(n);Yo(this),this.b.transformRules(i),n.textContent=jr(i)}}}else{for(function(e,t){(t=t.map((function(t){return e.a.getStyleForCustomStyle(t)})).filter((function(e){return!!e}))).sort((function(e,t){return(e=t.compareDocumentPosition(e))&Node.DOCUMENT_POSITION_FOLLOWING?1:e&Node.DOCUMENT_POSITION_PRECEDING?-1:0})),e.l.H.rules=t.map((function(e){return Lr(e)}))}(this,t),Ko(this,this.c,this.l),e=0;e<t.length;e++)(n=this.a.getStyleForCustomStyle(t[e]))&&No(n,this.l.L);this.J&&this.styleDocument()}this.a.enqueued=!1}}}},i.styleElement=function(e,t){if(Cr){if(t){vo(e)||go(e,new mo(null));var n=vo(e);n.F=n.F||{},Object.assign(n.F,t),Zo(this,e,n)}}else if(n=vo(e)||Xo(e))if(e!==this.c&&(this.J=!0),t&&(n.F=n.F||{},Object.assign(n.F,t)),Sr)Zo(this,e,n);else if(this.flush(),Ko(this,e,n),n.ta&&n.ta.length){var i;t=Ur(e).is;e:{if(i=$o.cache[t])for(var r=i.length-1;0<=r;r--){var o=i[r];t:{for(var a=n.ta,s=0;s<a.length;s++){var l=a[s];if(o.K[l]!==n.L[l]){a=!1;break t}}a=!0}if(a){i=o;break e}}i=void 0}a=i?i.styleElement:null,r=n.G,(o=i&&i.G)||(o=t+"-"+(o=this.Y[t]=(this.Y[t]||0)+1)),n.G=o,o=n.G,s=ko,s=a?a.textContent||"":function(e,t,n,i){var r=Ur(t),o=eo(r.is,r.ca),a=new RegExp("(?:^|[^.#[:])"+(t.extends?"\\"+o.slice(0,-1)+"\\]":o)+"($|[.:[\\s>+~])"),s=vo(t);r=s.H,s=s.cssBuild;var l=function(e,t){e=e.b;var n={};if(!Er&&e)for(var i=0,r=e[i];i<e.length;r=e[++i]){var o=r,a=t;o.l=new RegExp("\\b"+o.keyframesName+"(?!\\B|-)","g"),o.a=o.keyframesName+"-"+a,o.w=o.w||o.selector,o.selector=o.w.replace(o.keyframesName,o.a),n[r.keyframesName]=To(r)}return n}(r,i);return Qr(t,r,(function(t){var r="";if(t.v||Eo(t),t.v.cssText&&(r=So(e,t.v.cssText,n)),t.cssText=r,!Er&&!Pr(t)&&t.cssText){var s=r=t.cssText;if(null==t.Da&&(t.Da=Or.test(r)),t.Da)if(null==t.ka)for(var c in t.ka=[],l)r!==(s=(s=l[c])(r))&&(r=s,t.ka.push(c));else{for(c=0;c<t.ka.length;++c)r=(s=l[t.ka[c]])(r);s=r}t.cssText=s,t.w=t.w||t.selector,r="."+i,s=0;for(var u=(c=zr(t.w)).length,d=void 0;s<u&&(d=c[s]);s++)c[s]=d.match(a)?d.replace(o,r):r+" "+d;t.selector=c.join(",")}}),s)}(s,e,n.L,o);var c=(l=vo(e)).a;c&&!Er&&c!==a&&(c._useCount--,0>=c._useCount&&c.parentNode&&c.parentNode.removeChild(c)),Er?l.a?(l.a.textContent=s,a=l.a):s&&(a=Rr(s,o,e.shadowRoot,l.b)):a?a.parentNode||(bo&&-1<s.indexOf("@media")&&(a.textContent=s),qr(a,null,l.b)):s&&(a=Rr(s,o,null,l.b)),a&&(a._useCount=a._useCount||0,l.a!=a&&a._useCount++,l.a=a),o=a,Er||(a=n.G,l=s=e.getAttribute("class")||"",r&&(l=s.replace(new RegExp("\\s*x-scope\\s*"+r+"\\s*","g")," ")),s!==(l+=(l?" ":"")+"x-scope "+a)&&Wr(e,l)),i||$o.store(t,n.L,o,n.G)}},i.styleDocument=function(e){this.styleSubtree(this.c,e)},i.styleSubtree=function(e,t){var n=Br(e),i=n.shadowRoot,r=e===this.c;if((i||r)&&this.styleElement(e,t),e=r?n:i)for(e=Array.from(e.querySelectorAll("*")).filter((function(e){return Br(e).shadowRoot})),t=0;t<e.length;t++)this.styleSubtree(e[t])},i.Ha=function(e){var t=this,n=$r(e);if(n!==this.l.cssBuild&&(this.l.cssBuild=n),!Gr(n)){var i=Lr(e);Ir(i,(function(e){if(Er)ro(e);else{var i=po;e.selector=e.parsedSelector,ro(e),e.selector=e.w=to(i,e,i.c,void 0,void 0)}Sr&&""===n&&(Yo(t),t.b&&t.b.transformRule(e))})),Sr?e.textContent=jr(i):this.l.H.rules.push(i)}},i.getComputedStyleValue=function(e,t){var n;return Sr||(n=(vo(e)||vo(Jo(this,e))).L[t]),(n=n||window.getComputedStyle(e).getPropertyValue(t))?n.trim():""},i.gb=function(e,t){var n,i=Br(e).getRootNode();if(n=t?("string"==typeof t?t:String(t)).split(/\s/):[],!(t=i.host&&i.host.localName)&&(i=e.getAttribute("class"))){i=i.split(/\s/);for(var r=0;r<i.length;r++)if(i[r]===po.a){t=i[r+1];break}}t&&n.push(po.a,t),Sr||(t=vo(e))&&t.G&&n.push(ko.a,t.G),Wr(e,n.join(" "))},i.Oa=function(e){return vo(e)},i.fb=function(e,t){Zr(e,t)},i.ib=function(e,t){Zr(e,t,!0)},i.eb=function(e){return Io(e)},i.Ra=function(e){return Po(e)},Go.prototype.flush=Go.prototype.flush,Go.prototype.prepareTemplate=Go.prototype.prepareTemplate,Go.prototype.styleElement=Go.prototype.styleElement,Go.prototype.styleDocument=Go.prototype.styleDocument,Go.prototype.styleSubtree=Go.prototype.styleSubtree,Go.prototype.getComputedStyleValue=Go.prototype.getComputedStyleValue,Go.prototype.setElementClass=Go.prototype.gb,Go.prototype._styleInfoForNode=Go.prototype.Oa,Go.prototype.transformCustomStyleForDocument=Go.prototype.Ha,Go.prototype.getStyleAst=Go.prototype.Ta,Go.prototype.styleAstToString=Go.prototype.hb,Go.prototype.flushCustomStyles=Go.prototype.flushCustomStyles,Go.prototype.scopeNode=Go.prototype.fb,Go.prototype.unscopeNode=Go.prototype.ib,Go.prototype.scopeForNode=Go.prototype.eb,Go.prototype.currentScopeForNode=Go.prototype.Ra,Go.prototype.prepareAdoptedCssText=Go.prototype.ab,Object.defineProperties(Go.prototype,{nativeShadow:{get:function(){return Er}},nativeCss:{get:function(){return Sr}}});var Qo,ea,ta=new Go;window.ShadyCSS&&(Qo=window.ShadyCSS.ApplyShim,ea=window.ShadyCSS.CustomStyleInterface),window.ShadyCSS={ScopingShim:ta,prepareTemplate:function(e,t,n){ta.flushCustomStyles(),ta.prepareTemplate(e,t,n)},prepareTemplateDom:function(e,t){ta.prepareTemplateDom(e,t)},prepareTemplateStyles:function(e,t,n){ta.flushCustomStyles(),ta.prepareTemplateStyles(e,t,n)},styleSubtree:function(e,t){ta.flushCustomStyles(),ta.styleSubtree(e,t)},styleElement:function(e){ta.flushCustomStyles(),ta.styleElement(e)},styleDocument:function(e){ta.flushCustomStyles(),ta.styleDocument(e)},flushCustomStyles:function(){ta.flushCustomStyles()},getComputedStyleValue:function(e,t){return ta.getComputedStyleValue(e,t)},nativeCss:Sr,nativeShadow:Er,cssBuild:cr,disableRuntime:Cr},Qo&&(window.ShadyCSS.ApplyShim=Qo),ea&&(window.ShadyCSS.CustomStyleInterface=ea),function(e){function t(e){return""==e&&(o.call(this),this.h=!0),e.toLowerCase()}function n(e){var t=e.charCodeAt(0);return 32<t&&127>t&&-1==[34,35,60,62,63,96].indexOf(t)?e:encodeURIComponent(e)}function i(e){var t=e.charCodeAt(0);return 32<t&&127>t&&-1==[34,35,60,62,96].indexOf(t)?e:encodeURIComponent(e)}function r(e,r,a){function s(e){g.push(e)}var l=r||"scheme start",f=0,p="",m=!1,v=!1,g=[];e:for(;(null!=e[f-1]||0==f)&&!this.h;){var y=e[f];switch(l){case"scheme start":if(!y||!d.test(y)){if(r){s("Invalid scheme.");break e}p="",l="no scheme";continue}p+=y.toLowerCase(),l="scheme";break;case"scheme":if(y&&h.test(y))p+=y.toLowerCase();else{if(":"!=y){if(r){null!=y&&s("Code point not allowed in scheme: "+y);break e}p="",f=0,l="no scheme";continue}if(this.g=p,p="",r)break e;void 0!==c[this.g]&&(this.A=!0),l="file"==this.g?"relative":this.A&&a&&a.g==this.g?"relative or authority":this.A?"authority first slash":"scheme data"}break;case"scheme data":"?"==y?(this.o="?",l="query"):"#"==y?(this.u="#",l="fragment"):null!=y&&"\t"!=y&&"\n"!=y&&"\r"!=y&&(this.pa+=n(y));break;case"no scheme":if(a&&void 0!==c[a.g]){l="relative";continue}s("Missing scheme."),o.call(this),this.h=!0;break;case"relative or authority":if("/"!=y||"/"!=e[f+1]){s("Expected /, got: "+y),l="relative";continue}l="authority ignore slashes";break;case"relative":if(this.A=!0,"file"!=this.g&&(this.g=a.g),null==y){this.i=a.i,this.m=a.m,this.j=a.j.slice(),this.o=a.o,this.s=a.s,this.f=a.f;break e}if("/"==y||"\\"==y)"\\"==y&&s("\\ is an invalid code point."),l="relative slash";else if("?"==y)this.i=a.i,this.m=a.m,this.j=a.j.slice(),this.o="?",this.s=a.s,this.f=a.f,l="query";else{if("#"!=y){l=e[f+1];var _=e[f+2];("file"!=this.g||!d.test(y)||":"!=l&&"|"!=l||null!=_&&"/"!=_&&"\\"!=_&&"?"!=_&&"#"!=_)&&(this.i=a.i,this.m=a.m,this.s=a.s,this.f=a.f,this.j=a.j.slice(),this.j.pop()),l="relative path";continue}this.i=a.i,this.m=a.m,this.j=a.j.slice(),this.o=a.o,this.u="#",this.s=a.s,this.f=a.f,l="fragment"}break;case"relative slash":if("/"!=y&&"\\"!=y){"file"!=this.g&&(this.i=a.i,this.m=a.m,this.s=a.s,this.f=a.f),l="relative path";continue}"\\"==y&&s("\\ is an invalid code point."),l="file"==this.g?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!=y){s("Expected '/', got: "+y),l="authority ignore slashes";continue}l="authority second slash";break;case"authority second slash":if(l="authority ignore slashes","/"!=y){s("Expected '/', got: "+y);continue}break;case"authority ignore slashes":if("/"!=y&&"\\"!=y){l="authority";continue}s("Expected authority, got: "+y);break;case"authority":if("@"==y){for(m&&(s("@ already seen."),p+="%40"),m=!0,y=0;y<p.length;y++)"\t"==(_=p[y])||"\n"==_||"\r"==_?s("Invalid whitespace in authority."):":"==_&&null===this.f?this.f="":(_=n(_),null!==this.f?this.f+=_:this.s+=_);p=""}else{if(null==y||"/"==y||"\\"==y||"?"==y||"#"==y){f-=p.length,p="",l="host";continue}p+=y}break;case"file host":if(null==y||"/"==y||"\\"==y||"?"==y||"#"==y){2!=p.length||!d.test(p[0])||":"!=p[1]&&"|"!=p[1]?(0!=p.length&&(this.i=t.call(this,p),p=""),l="relative path start"):l="relative path";continue}"\t"==y||"\n"==y||"\r"==y?s("Invalid whitespace in file host."):p+=y;break;case"host":case"hostname":if(":"!=y||v){if(null==y||"/"==y||"\\"==y||"?"==y||"#"==y){if(this.i=t.call(this,p),p="",l="relative path start",r)break e;continue}"\t"!=y&&"\n"!=y&&"\r"!=y?("["==y?v=!0:"]"==y&&(v=!1),p+=y):s("Invalid code point in host/hostname: "+y)}else if(this.i=t.call(this,p),p="",l="port","hostname"==r)break e;break;case"port":if(/[0-9]/.test(y))p+=y;else{if(null==y||"/"==y||"\\"==y||"?"==y||"#"==y||r){if(""!=p&&((p=parseInt(p,10))!=c[this.g]&&(this.m=p+""),p=""),r)break e;l="relative path start";continue}"\t"==y||"\n"==y||"\r"==y?s("Invalid code point in port: "+y):(o.call(this),this.h=!0)}break;case"relative path start":if("\\"==y&&s("'\\' not allowed in path."),l="relative path","/"!=y&&"\\"!=y)continue;break;case"relative path":null!=y&&"/"!=y&&"\\"!=y&&(r||"?"!=y&&"#"!=y)?"\t"!=y&&"\n"!=y&&"\r"!=y&&(p+=n(y)):("\\"==y&&s("\\ not allowed in relative path."),(_=u[p.toLowerCase()])&&(p=_),".."==p?(this.j.pop(),"/"!=y&&"\\"!=y&&this.j.push("")):"."==p&&"/"!=y&&"\\"!=y?this.j.push(""):"."!=p&&("file"==this.g&&0==this.j.length&&2==p.length&&d.test(p[0])&&"|"==p[1]&&(p=p[0]+":"),this.j.push(p)),p="","?"==y?(this.o="?",l="query"):"#"==y&&(this.u="#",l="fragment"));break;case"query":r||"#"!=y?null!=y&&"\t"!=y&&"\n"!=y&&"\r"!=y&&(this.o+=i(y)):(this.u="#",l="fragment");break;case"fragment":null!=y&&"\t"!=y&&"\n"!=y&&"\r"!=y&&(this.u+=y)}f++}}function o(){this.s=this.pa=this.g="",this.f=null,this.m=this.i="",this.j=[],this.u=this.o="",this.A=this.h=!1}function a(e,t){void 0===t||t instanceof a||(t=new a(String(t))),this.a=e,o.call(this),r.call(this,this.a.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,""),null,t)}var s=!1;try{var l=new URL("b","http://a");l.pathname="c%20d",s="http://a/c%20d"===l.href}catch(e){}if(!s){var c=Object.create(null);c.ftp=21,c.file=0,c.gopher=70,c.http=80,c.https=443,c.ws=80,c.wss=443;var u=Object.create(null);u["%2e"]=".",u[".%2e"]="..",u["%2e."]="..",u["%2e%2e"]="..";var d=/[a-zA-Z]/,h=/[a-zA-Z0-9\+\-\.]/;a.prototype={toString:function(){return this.href},get href(){if(this.h)return this.a;var e="";return""==this.s&&null==this.f||(e=this.s+(null!=this.f?":"+this.f:"")+"@"),this.protocol+(this.A?"//"+e+this.host:"")+this.pathname+this.o+this.u},set href(e){o.call(this),r.call(this,e)},get protocol(){return this.g+":"},set protocol(e){this.h||r.call(this,e+":","scheme start")},get host(){return this.h?"":this.m?this.i+":"+this.m:this.i},set host(e){!this.h&&this.A&&r.call(this,e,"host")},get hostname(){return this.i},set hostname(e){!this.h&&this.A&&r.call(this,e,"hostname")},get port(){return this.m},set port(e){!this.h&&this.A&&r.call(this,e,"port")},get pathname(){return this.h?"":this.A?"/"+this.j.join("/"):this.pa},set pathname(e){!this.h&&this.A&&(this.j=[],r.call(this,e,"relative path start"))},get search(){return this.h||!this.o||"?"==this.o?"":this.o},set search(e){!this.h&&this.A&&(this.o="?","?"==e[0]&&(e=e.slice(1)),r.call(this,e,"query"))},get hash(){return this.h||!this.u||"#"==this.u?"":this.u},set hash(e){this.h||(e?(this.u="#","#"==e[0]&&(e=e.slice(1)),r.call(this,e,"fragment")):this.u="")},get origin(){var e;if(this.h||!this.g)return"";switch(this.g){case"data":case"file":case"javascript":case"mailto":return"null"}return(e=this.host)?this.g+"://"+e:""}};var f=e.URL;f&&(a.createObjectURL=function(e){return f.createObjectURL.apply(f,arguments)},a.revokeObjectURL=function(e){f.revokeObjectURL(e)}),e.URL=a}}(window),Object.getOwnPropertyDescriptor(Node.prototype,"baseURI")||Object.defineProperty(Node.prototype,"baseURI",{get:function(){var e=(this.ownerDocument||this).querySelector("base[href]");return e&&e.href||window.location.href},configurable:!0,enumerable:!0});var na=document.createElement("style");na.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var ia=document.querySelector("head");ia.insertBefore(na,ia.firstChild);var ra=window.customElements,oa=!1,aa=null;function sa(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document),aa&&aa(),oa=!0,window.WebComponents.ready=!0,document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}))}ra.polyfillWrapFlushCallback&&ra.polyfillWrapFlushCallback((function(e){aa=e,oa&&e()})),"complete"!==document.readyState?(window.addEventListener("load",sa),window.addEventListener("DOMContentLoaded",(function(){window.removeEventListener("load",sa),sa()}))):sa()}).call(this)}).call(this,i(2),i(7).setImmediate)},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(8),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(2))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,l=1,c={},u=!1,d=e.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(e);h=h&&h.setTimeout?h:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){p(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}):e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(r=d.documentElement,i=function(e){var t=d.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(p,0,e)},h.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[l]=r,i(l),l++},h.clearImmediate=f}function f(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(2),n(9))},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var l,c=[],u=!1,d=-1;function h(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=s(h);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||u||s(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var i=n(1),r=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},o=function(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},a=function(){function e(e){this._minValue=0,this._maxValue=100,this._valueFrom=0,this._valueTo=100,this._stepSize=1,this._onRange=!1,this._onTooltip=!1,this._onVertical=!1,this._onScale=!1,this._serverURL="http://localhost:9000/slider",this._observer=e}return e.prototype.init=function(e){return e instanceof HTMLElement?this.initModelFromElement(e):e instanceof FormData?this.initModelFromServer(e):this.initModelFromObject(e)},e.prototype.initModelFromServer=function(e){var t=this;return this.serverURL=e.get("uri"),fetch(this.serverURL,{method:"POST",body:e}).then((function(e){return e.json()})).then((function(e){return t.initModelFromObject(e)}))},e.prototype.initModelFromObject=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){return this._serverURL=e.serverURL,this._observer("serverURL",this._serverURL),this._onVertical=e.onVertical,this._observer("onVertical",this._onVertical),this._onRange=e.onRange,this._observer("onRange",this._onRange),this._onTooltip=e.onTooltip,this._observer("onTooltip",this._onTooltip),this._onScale=e.onScale,this._observer("onScale",this._onScale),e.minValue?this._minValue=e.minValue:this._minValue=0,this._observer("minValue",this._minValue),e.stepSize=Math.round(Math.abs(e.stepSize)),e.stepSize>0?this._stepSize=e.stepSize:this._stepSize=1,this._observer("stepSize",this._stepSize),e.maxValue>this._minValue+this._stepSize?this._maxValue=Math.round((e.maxValue-this._minValue)/this._stepSize)*this._stepSize+this._minValue:this._maxValue=this._stepSize+this._minValue,this._observer("maxValue",this._maxValue),e.valueFrom>this._minValue&&e.valueFrom<this._maxValue?this._valueFrom=Math.round((e.valueFrom-this._minValue)/this._stepSize)*this._stepSize+this._minValue:e.valueFrom>=this._maxValue?this._valueFrom=this._maxValue:this._valueFrom=this._minValue,this._observer("valueFrom",this._valueFrom),e.valueTo>this._valueFrom&&e.valueTo<this._maxValue?this._valueTo=Math.round((e.valueTo-this._minValue)/this._stepSize)*this._stepSize+this._minValue:e.valueTo>=this._maxValue?this._valueTo=this._maxValue:this._valueTo=this._valueFrom,this._observer("valueTo",this._valueTo),[2,!0]}))}))},e.prototype.initModelFromElement=function(e){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){return t={onVertical:"true"===e.dataset.onVertical,onRange:"true"===e.dataset.onRange,onTooltip:"true"===e.dataset.onTooltip,onScale:"true"===e.dataset.onScale,minValue:Number(e.dataset.minValue),maxValue:Number(e.dataset.maxValue),valueFrom:Number(e.dataset.valueFrom),valueTo:Number(e.dataset.valueTo),stepSize:Number(e.dataset.stepSize),serverURL:String(e.dataset.serverURL)},[2,this.initModelFromObject(t)]}))}))},Object.defineProperty(e.prototype,"minValue",{get:function(){return this._minValue},set:function(e){e<this._valueFrom?this._minValue=this._valueFrom-Math.round((this._valueFrom-e)/this._stepSize)*this._stepSize:this._minValue=this._valueFrom,this._minValue===this._maxValue&&(this._minValue=this._minValue-this._stepSize),this._observer("minValue",this._minValue)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxValue",{get:function(){return this._maxValue},set:function(e){this._onRange&&e<=this._valueTo?this._maxValue=this._valueTo:e<=this._valueFrom?this._maxValue=this._valueFrom:this._maxValue=Math.round((e-this._minValue)/this._stepSize)*this._stepSize+this._minValue,this._maxValue===this._minValue&&(this._maxValue=this._maxValue+this._stepSize),this._observer("maxValue",this._maxValue)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueFrom",{get:function(){return this._valueFrom},set:function(e){e<=this._minValue?this._valueFrom=this._minValue:this._onRange&&e>=this._valueTo?this._valueFrom=this._valueTo:e>=this._maxValue?this._valueFrom=this._maxValue:this._valueFrom=Math.round((e-this._minValue)/this._stepSize)*this._stepSize+this._minValue,this._observer("valueFrom",this._valueFrom)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueTo",{get:function(){return this._valueTo},set:function(e){this._onRange&&(e>this._valueFrom&&e<this._maxValue?this._valueTo=Math.round((e-this._valueFrom)/this._stepSize)*this._stepSize+this._valueFrom:e>=this._maxValue?this._valueTo=this._maxValue:this._valueTo=this._valueFrom,this._observer("valueTo",this._valueTo))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"stepSize",{get:function(){return this._stepSize},set:function(e){var t=Math.abs(this._maxValue-this._minValue);this._stepSize=e<t&&e>0?Math.round(e):e>=t?t:1,this._observer("stepSize",this._stepSize),this._valueFrom>this._minValue?this._valueFrom=Math.round((this._valueFrom-this._minValue)/this._stepSize)*this._stepSize+this._minValue:this._valueFrom=this._minValue,this._observer("valueFrom",this._valueFrom),this._onRange&&(this._valueTo>this._valueFrom?this._valueTo=Math.round((this._valueTo-this._minValue)/this._stepSize)*this._stepSize+this._minValue:this._valueTo=this._valueFrom,this._observer("valueTo",this._valueTo)),this.maxValue=this.maxValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onVertical",{get:function(){return this._onVertical},set:function(e){this._onVertical=e,this._observer("onVertical",this._onVertical)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onRange",{get:function(){return this._onRange},set:function(e){this._onRange=e,this._observer("onRange",this._onRange),this.valueTo=this._valueTo},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTooltip",{get:function(){return this._onTooltip},set:function(e){this._onTooltip=e,this._observer("onTooltip",this._onTooltip)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onScale",{get:function(){return this._onScale},set:function(e){this._onScale=e,this._observer("onScale",this._onScale)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverURL",{get:function(){return this._serverURL},set:function(e){this._serverURL=e,this._observer("serverURL",this._serverURL)},enumerable:!1,configurable:!0}),e}(),s=(n(4),function(){function e(){this._model=new a(this.observer.bind(this)),this.view=document.createElement("input-slider"),this.view.presenter=this,this.view.addEventListener("slider-view",this.handleViewEvents.bind(this))}return e.prototype.init=function(e){this._model.init(e).then((function(){return console.log("initialization Model successful"),!0})).catch((function(e){return console.log("Error model initialization.",e),!1}))},e.prototype.setProps=function(e,t){this._model[e]=t},e.prototype.getProps=function(e){return this._model[e]},e.prototype.handleViewEvents=function(e){switch(e.stopPropagation(),e.detail.name){case"valueFrom":case"valueTo":this.setProps(e.detail.name,this.calcFromToValues(e))}},e.prototype.calcFromToValues=function(e){var t=(this._model.maxValue-this._model.minValue)/100,n=this._model.stepSize/t;return t=t*(n=Math.round(e.detail.value/n)*n)+this._model.minValue,Math.round(t)},e.prototype.observer=function(e,t){this.view.setModelData(e,t),this.view.dispatchEvent(new CustomEvent("slider-data",{bubbles:!0,cancelable:!0,composed:!0,detail:{name:e,value:t}}))},e}());!function(e){function t(e){return"presenter"in e}e.fn.slider=function(n,i){if(0===this.length)return this;var r=[];if(void 0===n)return this.each((function(){t(this)&&r.push(this)})),e().pushStack(r);if("init"===n)return this.each((function(){if(t(this))i&&this.presenter&&this.presenter.init(i),r.push(this);else{var e=new s;e.view.className=this.className,this.replaceWith(e.view),r.push(e.view),void 0===i?e.init(this):e.init(i)}})),e().pushStack(r);if(n){if(void 0!==i||!t(this[0]))return this.each((function(){if(t(this)&&this.presenter)return this.presenter.setProps(n,i)})),this;if(this[0].presenter)return this[0].presenter.getProps(n)}}}(i)}])}).call(this,n(2))},function(e,t,n){var i=n(0),r=n(58);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(60);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(47),n(64)},function(e,t,n){var i=n(0),r=n(63);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(65);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(67)},function(e,t,n){var i=n(0),r=n(68);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(70)},function(e,t,n){var i=n(0),r=n(71);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(47),n(73)},function(e,t,n){var i=n(0),r=n(74);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},,,,,,,,,,,function(e,t,n){var i=n(0),r=n(86);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);n(120),n(123),n(32),n(126)},function(e,t,n){"use strict";(function(e){var t=n(43),i=n(42);n(69),n(121);e(".pagination-cards").find(".card-room").each((function(n){new t.a(e(this),i[n])}))}).call(this,n(2))},function(e,t,n){var i=n(0),r=n(122);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){"use strict";(function(e){var t=n(55),i=n(4),r=n(54),o=(n(66),n(72),n(61),n(124),e(".filter")),a=o.find(".range-slider"),s=o.find(".date-filter"),l=o.find(".dropdown-quantity");new t.a(s.eq(0)),new r.a(a),new i.a(l.eq(0)),new i.a(l.eq(1),"room")}).call(this,n(2))},function(e,t,n){var i=n(0),r=n(125);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){},function(e,t,n){var i=n(0),r=n(127);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9idXR0b24vYnV0dG9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2Ryb3Bkb3duLXF1YW50aXR5L2Ryb3Bkb3duLXF1YW50aXR5LmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2ZvbnRzL2ZvbnRzLnNhc3M/MjY3OSIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL3RlbXBsYXRlLW1haW4uc2Fzcz80ZGVlIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9mYXZpY29uLmljbyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL2Zhdmljb24vZmF2aWNvbi0xNngxNi5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL2Zhdmljb24tMzJ4MzIucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9hbmRyb2lkLWNocm9tZS0xOTJ4MTkyLnBuZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL2Zhdmljb24vYW5kcm9pZC1jaHJvbWUtNTEyeDUxMi5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL3RveGluLndlYm1hbmlmZXN0Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9zYWZhcmktcGlubmVkLXRhYi5zdmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL2FwcGxlLXRvdWNoLWljb24ucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9tc3RpbGUtNzB4NzAucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9tc3RpbGUtMTQ0eDE0NC5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL21zdGlsZS0xNTB4MTUwLnBuZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1tYWluL2Zhdmljb24vbXN0aWxlLTMxMHgxNTAucG5nIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLW1haW4vZmF2aWNvbi9tc3RpbGUtMzEweDMxMC5wbmciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvdGVtcGxhdGUtbWFpbi9mYXZpY29uL2Jyb3dzZXJjb25maWcueG1sIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2J1dHRvbi9idXR0b24uc2Fzcz9lZDdlIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3N1YnNjcmlwdGlvbi9zdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3Mvc3Vic2NyaXB0aW9uL3N1YnNjcmlwdGlvbi5zYXNzP2IzM2QiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvaGVhZGVyL2hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9oZWFkZXIvaGVhZGVyLnNhc3M/ODBjYSIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9mb290ZXIvZm9vdGVyLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2Zvb3Rlci9mb290ZXIuc2Fzcz9mOWU2Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NvcHlyaWdodC9jb3B5cmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY29weXJpZ2h0L2NvcHlyaWdodC5zYXNzP2RkOTAiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvZHJvcGRvd24tcXVhbnRpdHkvZHJvcGRvd24tcXVhbnRpdHkuc2Fzcz9mNjc5Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLnNhc3M/YTY2OCIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy90ZW1wbGF0ZS1zaXRlL3RlbXBsYXRlLXNpdGUuc2Fzcz82NWEyIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3RlbXBsYXRlLXNpdGUvdGVtcGxhdGUtc2l0ZS1sb2dvLnN2ZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jYXJkLXJvb20vMzUwL2NhcmQtcm9vbS0zNTAtNC5qcGciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2FyZC1yb29tLzM1Mi9jYXJkLXJvb20tMzUyLTQuanBnIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NhcmQtcm9vbS80NDQvY2FyZC1yb29tLTQ0NC00LmpwZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jYXJkLXJvb20vNDUwL2NhcmQtcm9vbS00NTAtNC5qcGciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2FyZC1yb29tLzY2Ni9jYXJkLXJvb20tNjY2LTQuanBnIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NhcmQtcm9vbS82NzgvY2FyZC1yb29tLTY3OC00LmpwZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jYXJkLXJvb20vNzQwL2NhcmQtcm9vbS03NDAtNC5qcGciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2FyZC1yb29tLzg0MC9jYXJkLXJvb20tODQwLTQuanBnIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NhcmQtcm9vbS84NTYvY2FyZC1yb29tLTg1Ni00LmpwZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jYXJkLXJvb20vODg4L2NhcmQtcm9vbS04ODgtNC5qcGciLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2FyZC1yb29tLzk4MC9jYXJkLXJvb20tOTgwLTQuanBnIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NhcmQtcm9vbS85ODIvY2FyZC1yb29tLTk4Mi00LmpwZyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jYXJkLXJvb20vY2FyZC1yb29tLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3JhdGUtYnV0dG9uL3JhdGUtYnV0dG9uLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3JhdGUtYnV0dG9uL3JhdGUtYnV0dG9uLnNhc3M/YWFlNSIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jaGVja2JveC9jaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2RhdGUtZmlsdGVyL2RhdGUtZmlsdGVyLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3JhbmdlLXNsaWRlci9zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zYXNzPzc2NGIiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvZGF0ZS1maWx0ZXIvZGF0ZS1maWx0ZXIuc2Fzcz84ODk0Iiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jaGVja2JveC9jaGVja2JveC5zYXNzPzU5MDMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2hlY2tib3gtbGlzdC9jaGVja2JveC1saXN0LnNhc3M/OTZkZiIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jaGVja2JveC1ncm91cC9jaGVja2JveC1ncm91cC5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9jaGVja2JveC1ncm91cC9jaGVja2JveC1ncm91cC5zYXNzPzM4MzUiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5zYXNzP2ZlYzAiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2hlY2tib3gtcmljaC9jaGVja2JveC1yaWNoLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2NoZWNrYm94LXJpY2gvY2hlY2tib3gtcmljaC5zYXNzPzljZWQiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvY2FyZC1yb29tL2NhcmQtcm9vbS5zYXNzPzUyMGYiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcGFnZS1yb29tLXNlYXJjaC9wYWdlLXJvb20tc2VhcmNoLmpzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL3BhZ2luYXRpb24tY2FyZHMvcGFnaW5hdGlvbi1jYXJkcy5qcyIsIndlYnBhY2s6Ly8vLi9kZXNrdG9wLmJsb2Nrcy9wYWdpbmF0aW9uLWNhcmRzL3BhZ2luYXRpb24tY2FyZHMuc2Fzcz8wODkzIiwid2VicGFjazovLy8uL2Rlc2t0b3AuYmxvY2tzL2ZpbHRlci9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvZmlsdGVyL2ZpbHRlci5zYXNzPzRmNGUiLCJ3ZWJwYWNrOi8vLy4vZGVza3RvcC5ibG9ja3MvcGFnZS1yb29tLXNlYXJjaC9wYWdlLXJvb20tc2VhcmNoLnNhc3M/Y2Q2NyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsImxlbmd0aCIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImpvaW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInNwbGljZSIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwidGhpcyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiZmxhdCIsImFycmF5IiwiYXBwbHkiLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwiaXNBcnJheUxpa2UiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsImV4dGVuZCIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9TZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJfbmFtZSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiaGFzIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsImVyciIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiZm9jdXMiLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIkRyb3Bkb3duUXVhbnRpdHkiLCIkZHJvcGRvd24iLCJmaXJzdEl0ZW0iLCJzZWNvbmRJdGVtIiwidGhpcmRJdGVtIiwiaXNGaXJzdEl0ZW0iLCJpc1NlY29uZEl0ZW0iLCJpc1RoaXJkSXRlbSIsInRvZ2dsZVBpY2tlciIsInNlbGVjdGVkQ2FwdGlvbiIsImFkdWx0c0FuZENoaWxkcmVuIiwiY291bnRlciIsInNldFRpbWUiLCJkYXRlQ29tZUluIiwiZGF0ZUNoZWNrT3V0IiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInNldE1vbnRoIiwiZGF0ZSIsImNsYXNzTGlzdCIsImRhdGVDdXJyZW50IiwibW9udGgiLCJzZXREYXRlIiwid2Vla0RheSIsImdldERheSIsImdldERhdGUiLCJnZXRUaW1lIiwiRGF0ZVBpY2tlciIsIiRwaWNrZXIiLCJhcGkiLCJkZWZhdWx0IiwibG9jYWxzIiwiQ2FyZFJvb20iLCIkY2FyZCIsInJvb20iLCIkaW1hZ2VzIiwicmF0ZSIsImltZzEiLCJhbHQiLCJpbWcyIiwiaW1nMyIsImltZzQiLCJudW1iZXIiLCJsZXZlbCIsImFtb3VudCIsInJldmlldyIsImxpc3RSaWdodCIsImxpc3RMZWZ0IiwiJHNsaWRlciIsInNsaWRlciIsIlJhbmdlU2xpZGVyIiwiJHJhbmdlU2xpZGVyIiwiRGF0ZUZpbHRlciIsIiRkYXRlRmlsdGVyIiwiTnVtYmVyIiwiZnJvbURhdGUiLCJ0b0RhdGUiLCJyYWlsIiwicmFpbF92ZXIiLCJ0aHVtYiIsInRodW1iX3ZlciIsInRodW1iX190b29sdGlwIiwidGh1bWJfX3Rvb2x0aXBfdmVyIiwicHJvZ3Jlc3NfdmVyIiwic2NhbGVfdmVyIiwic2NhbGVfX3dyYXBwZXIiLCJzY2FsZV9fd3JhcHBlcl92ZXIiLCJzY2FsZV9fZGl2aXNpb24iLCJzY2FsZV9fZGl2aXNpb25fdmVyIiwic2NhbGVfX3N1YmRpdmlzaW9uIiwic2NhbGVfX3N1YmRpdmlzaW9uX3ZlciIsInNjYWxlX192YWx1ZXMiLCJzY2FsZV9fdmFsdWVzX3ZlciIsInNjYWxlX192YWx1ZXNJdGVtIiwic2NhbGVfX3ZhbHVlc0l0ZW1fdmVyIiwiRnVuY3Rpb24iLCJzb3VyY2VzIiwic291cmNlUm9vdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicHJlc2VudGVyIiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdCIsImNvbm5lY3RlZENhbGxiYWNrIiwianVzdGlmeUNvbnRlbnQiLCJzZXRNb2RlbERhdGEiLCJmbGV4RGlyZWN0aW9uIiwiSFRNTEVsZW1lbnQiLCJfdGh1bWJGcm9tIiwiX3RodW1iVG8iLCJfcHJvZ3Jlc3MiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJjYWxjVGh1bWJQb3NpdGlvbiIsImRhdGFzZXQiLCJvblRvb2x0aXAiLCJvblJhbmdlIiwib25WZXJ0aWNhbCIsInZhbHVlRnJvbSIsInRvRml4ZWQiLCJ2YWx1ZVRvIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsIl9sZWZ0T3JUb3AiLCJfcmlnaHRPckJvdHRvbSIsInNldFBvc0Zyb20iLCJzZXRQb3NUbyIsInNldERpcmVjdGlvbiIsInBvc2l0aW9uRnJvbSIsInBvc2l0aW9uVG8iLCJfcG9zaXRpb24iLCJfY2xpZW50WG9yWSIsIl9vZmZzZXRYb3JZIiwiX3dpZHRoT3JIZWlnaHQiLCJfZGlyZWN0aW9uIiwiX3Rvb2x0aXAiLCJfbW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJfbW91c2VVcCIsIm9uTW91c2VVcCIsIm9uTW91c2VEb3duIiwibW92ZVRvUG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsInBhcmVudEVsZW1lbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJfc2NhbGVWYWx1ZUl0ZW1zIiwiaGFuZGxlTW91c2VEb3duIiwicmVuZGVyIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJSZWZsZWN0IiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsImNvbnN0cnVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJ1IiwiaCIsImYiLCJQYSIsImVlIiwiRWEiLCJZIiwieSIsImciLCJTYSIsIldhIiwiRSIsIk4iLCJyZXR1cm4iLCJDIiwiSiIsInRocm93IiwiUyIsImZyb20iLCJhc3NpZ24iLCJUIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJPIiwieCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIk0iLCJEIiwiaW5pdEN1c3RvbUV2ZW50IiwiTW91c2VFdmVudCIsIkwiLCJpbml0TW91c2VFdmVudCIsIkEiLCJOb2RlIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsImxvY2FsTmFtZSIsIkRvY3VtZW50IiwiaW1wb3J0Tm9kZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkVsZW1lbnQiLCJVIiwiRUxFTUVOVF9OT0RFIiwiVEVYVF9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiUCIsImsiLCJJIiwiemEiLCJXIiwiRiIsInoiLCJZYSIsIlphIiwiUiIsIlYiLCJ2YSIsIkgiLCJCIiwiZmluYWxseSIsIlByb21pc2UiLCJyYWNlIiwicSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImdldE93blByb3BlcnR5TmFtZXMiLCJmcmVlemUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImZyb21Db2RlUG9pbnQiLCJjb2RlUG9pbnRBdCIsIkciLCJTZXQiLCJNYXAiLCJaIiwiV2ViQ29tcG9uZW50cyIsImZsYWdzIiwiWCIsIm5vT3B0cyIsInNlYXJjaCIsIksiLCJRIiwibG9nIiwidHQiLCJzaGFkeWRvbSIsIlNoYWR5RE9NIiwiZm9yY2UiLCJldCIsIm5vUGF0Y2giLCJudCIsInJlZ2lzdGVyIiwiY2UiLCJvdCIsIml0IiwiX19zaGFkeSIsInJ0IiwiZm9yY2VQb2x5ZmlsbCIsInRvSlNPTiIsImF0IiwiVWEiLCJzdCIsImx0IiwiU2hhZG93Um9vdCIsInV0IiwiVW4iLCJzYSIsImFhIiwicHJlZmVyUGVyZm9ybWFuY2UiLCJ1YSIsIklhIiwiaHQiLCJkdCIsImZ0IiwicHQiLCJfdCIsIm10IiwidnQiLCJfX3NoYWR5X25hdGl2ZV9jb250YWlucyIsInl0IiwiX19zaGFkeV9wYXJlbnROb2RlIiwiZ3QiLCJuYW1lZEl0ZW0iLCJidCIsIl9fc2hhZHlfbmF0aXZlX2ZpcnN0Q2hpbGQiLCJfX3NoYWR5X25hdGl2ZV9uZXh0U2libGluZyIsInd0IiwiX19zaGFkeV9maXJzdENoaWxkIiwiX19zaGFkeV9uZXh0U2libGluZyIsIkV0IiwiTnQiLCJDdCIsIlN0IiwiVHQiLCJPdCIsInh0IiwiTXQiLCJEdCIsIkx0IiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsImphIiwiZmx1c2giLCJ0YWtlUmVjb3JkcyIsIkF0IiwiUHQiLCJqdCIsImt0IiwiRnQiLCJSdCIsIlZ0IiwiSXQiLCJIdCIsIl9fc2hhZHlfbmF0aXZlX3F1ZXJ5U2VsZWN0b3IiLCJfX3NoYWR5X25hdGl2ZV9xdWVyeVNlbGVjdG9yQWxsIiwiVXQiLCJCdCIsInp0IiwicXQiLCJXdCIsImNyZWF0ZVRyZWVXYWxrZXIiLCJOb2RlRmlsdGVyIiwiU0hPV19BTEwiLCJHdCIsIlNIT1dfRUxFTUVOVCIsIlp0IiwiWXQiLCJfX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZCIsIlh0IiwiSnQiLCJLdCIsIl9fc2hhZHlfY2hpbGROb2RlcyIsIl9fc2hhZHlfbGFzdENoaWxkIiwiX19zaGFkeV9jaGlsZEVsZW1lbnRDb3VudCIsIl9fc2hhZHlfY2hpbGRyZW4iLCJfX3NoYWR5X2ZpcnN0RWxlbWVudENoaWxkIiwiX19zaGFkeV9sYXN0RWxlbWVudENoaWxkIiwiX19zaGFkeV9zaGFkb3dSb290IiwiJHQiLCJfX3NoYWR5X3RleHRDb250ZW50IiwiX19zaGFkeV9pbm5lckhUTUwiLCJRdCIsIl9fc2hhZHlfcGFyZW50RWxlbWVudCIsIl9fc2hhZHlfcHJldmlvdXNTaWJsaW5nIiwiX19zaGFkeV9uZXh0RWxlbWVudFNpYmxpbmciLCJfX3NoYWR5X3ByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJfX3NoYWR5X2NsYXNzTmFtZSIsInRlIiwibmUiLCJvZSIsIkthIiwiaWUiLCJKYSIsInJlIiwiYWUiLCJzZSIsImxlIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJHYSIsIkZhIiwiZm9jdXNvdXQiLCJkYmxjbGljayIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsIm1vdXNlb3V0IiwibW91c2VvdmVyIiwibW91c2V1cCIsIndoZWVsIiwiYmVmb3JlaW5wdXQiLCJrZXlkb3duIiwia2V5dXAiLCJjb21wb3NpdGlvbnN0YXJ0IiwiY29tcG9zaXRpb251cGRhdGUiLCJjb21wb3NpdGlvbmVuZCIsInRvdWNoc3RhcnQiLCJ0b3VjaGVuZCIsInRvdWNobW92ZSIsInRvdWNoY2FuY2VsIiwicG9pbnRlcm92ZXIiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmNhbmNlbCIsInBvaW50ZXJvdXQiLCJnb3Rwb2ludGVyY2FwdHVyZSIsImxvc3Rwb2ludGVyY2FwdHVyZSIsImRyYWdzdGFydCIsImRyYWciLCJkcmFnZW50ZXIiLCJkcmFnbGVhdmUiLCJkcmFnb3ZlciIsImRyb3AiLCJkcmFnZW5kIiwiRE9NQWN0aXZhdGUiLCJET01Gb2N1c0luIiwiRE9NRm9jdXNPdXQiLCJrZXlwcmVzcyIsInVlIiwiRE9NQXR0ck1vZGlmaWVkIiwiRE9NQXR0cmlidXRlTmFtZUNoYW5nZWQiLCJET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWQiLCJET01FbGVtZW50TmFtZUNoYW5nZWQiLCJET01Ob2RlSW5zZXJ0ZWQiLCJET01Ob2RlSW5zZXJ0ZWRJbnRvRG9jdW1lbnQiLCJET01Ob2RlUmVtb3ZlZCIsIkRPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50IiwiRE9NU3VidHJlZU1vZGlmaWVkIiwiaGUiLCJfX3NoYWR5X2dldFJvb3ROb2RlIiwiZGUiLCJfX3NoYWR5X2Fzc2lnbmVkU2xvdCIsImZlIiwicGUiLCJfX2NvbXBvc2VkIiwiX2UiLCJtZSIsIl9fdGFyZ2V0IiwiX19yZWxhdGVkVGFyZ2V0IiwidmUiLCJfX2hhbmRsZXJzIiwiX19pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJ5ZSIsImNvbXBvc2VkUGF0aCIsIkNBUFRVUklOR19QSEFTRSIsIkFUX1RBUkdFVCIsIm1hIiwiQlVCQkxJTkdfUEhBU0UiLCJnZSIsImJlIiwiQ2UiLCJfX3NoYWR5X25hdGl2ZV9kaXNwYXRjaEV2ZW50Iiwid2UiLCJoYW5kbGVFdmVudCIsIl9fc2hhZHlfbmF0aXZlX2FkZEV2ZW50TGlzdGVuZXIiLCJfX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIiLCJfX3ByZXZpb3VzQ3VycmVudFRhcmdldCIsIldpbmRvdyIsImxiIiwiYnViYmxlIiwiRWUiLCJfX3NoYWR5X25hdGl2ZV9yZW1vdmVFdmVudExpc3RlbmVyIiwiTmUiLCJpc1RydXN0ZWQiLCJfX2NvbXBvc2VkUGF0aCIsIl9fcmVsYXRlZFRhcmdldENvbXBvc2VkUGF0aCIsIl9fc2hhZHlfc291cmNlUHJvdG8iLCJfX3NoYWR5X3BhdGNoZWRQcm90byIsIlNlIiwiVGUiLCJPZSIsInhlIiwic3Vic3RyaW5nIiwiTWUiLCJEZSIsIl9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lciIsIkxlIiwiYmEiLCJpYSIsIkFlIiwibWluIiwiUGUiLCJqZSIsImtlIiwiRmUiLCJTaGFkeUNTUyIsIlNjb3BpbmdTaGltIiwiUmUiLCJzZXRFbGVtZW50Q2xhc3MiLCJWZSIsInVuc2NvcGVOb2RlIiwiSWUiLCJjdXJyZW50U2NvcGVGb3JOb2RlIiwiSGUiLCJVZSIsIkJlIiwiemUiLCJxZSIsIldlIiwiX19zaGFkeV9yZW1vdmVDaGlsZCIsIkdlIiwiWmUiLCJfX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlIiwiX19zaGFkeV9uYXRpdmVfbGFzdENoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiX19zaGFkeV9uYXRpdmVfcHJldmlvdXNTaWJsaW5nIiwiX19zaGFkeV9uYXRpdmVfY2hpbGROb2RlcyIsIl9fc2hhZHlfbmF0aXZlX3BhcmVudEVsZW1lbnQiLCJfX3NoYWR5X25hdGl2ZV90ZXh0Q29udGVudCIsIl9fc2hhZHlfaW5zZXJ0QmVmb3JlIiwiX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlIiwiV24iLCJfX25vSW5zZXJ0aW9uUG9pbnQiLCJzY29wZU5vZGUiLCJSbiIsIkFuIiwid24iLCJFbiIsIl9fc2hhZHlfbmF0aXZlX2FwcGVuZENoaWxkIiwiYWRvcHROb2RlIiwiVm4iLCJkYSIsImFzc2lnbmVkTm9kZXMiLCJsYSIsIl9fc2hhZHlfbmF0aXZlX2Nsb25lTm9kZSIsIkFUVFJJQlVURV9OT0RFIiwiX19zaGFkeV9jbG9uZU5vZGUiLCJfX3NoYWR5X2FwcGVuZENoaWxkIiwiWWUiLCJQbiIsImFzc2lnbmVkU2xvdCIsIlhlIiwiSmUiLCJfX3NoYWR5X25hdGl2ZV9maXJzdEVsZW1lbnRDaGlsZCIsIl9fc2hhZHlfbmF0aXZlX2xhc3RFbGVtZW50Q2hpbGQiLCJfX3NoYWR5X25hdGl2ZV9jaGlsZHJlbiIsIktlIiwiJGUiLCJRZSIsInRuIiwiTGEiLCJJbiIsIkhuIiwiZW4iLCJfX3NoYWR5X25hdGl2ZV9wcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiX19zaGFkeV9uYXRpdmVfbmV4dEVsZW1lbnRTaWJsaW5nIiwiX19zaGFkeV9zZXRBdHRyaWJ1dGUiLCJfX3NoYWR5X25hdGl2ZV9zZXRBdHRyaWJ1dGUiLCJfX3NoYWR5X25hdGl2ZV9yZW1vdmVBdHRyaWJ1dGUiLCJubiIsInNoYWR5VXBncmFkZUZyYWdtZW50IiwiTG4iLCJObiIsIkRuIiwiT24iLCJfX0NFX3NoYWRvd1Jvb3QiLCJiYiIsInJuIiwiX19zaGFkeV9uYXRpdmVfaW5uZXJIVE1MIiwiY3JlYXRlRWxlbWVudE5TIiwiYW4iLCJfX3NoYWR5X2JsdXIiLCJfX3NoYWR5X25hdGl2ZV9ibHVyIiwic24iLCJmbGF0dGVuIiwibG4iLCJjbiIsIl9fc2hhZHlfbmF0aXZlX2FjdGl2ZUVsZW1lbnQiLCJ1biIsImhuIiwiX19zaGFkeV9uYXRpdmVfaW1wb3J0Tm9kZSIsIl9fc2hhZHlfaW1wb3J0Tm9kZSIsImRuIiwicG4iLCJFdmVudFRhcmdldCIsIlRleHQiLCJDb21tZW50IiwiQ0RBVEFTZWN0aW9uIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiSFRNTFNsb3RFbGVtZW50IiwiX24iLCJtbiIsInZuIiwieW4iLCJfX3NoYWR5X3Byb3RvSXNQYXRjaGVkIiwiZ24iLCJibiIsIkNuIiwiU24iLCJUbiIsInhuIiwiZGVmZXJDb25uZWN0aW9uQ2FsbGJhY2tzIiwiTW4iLCJfcmVuZGVyU2VsZiIsImpuIiwib2EiLCJfX3NoYWR5X3Nsb3QiLCJyYSIsImtuIiwiRm4iLCJCYSIsIkFhIiwiQm4iLCJjbGVhciIsIl9fc2hhZHlkb21fY29ubmVjdGVkQ2FsbGJhY2siLCJfX3NoYWR5ZG9tX2Rpc2Nvbm5lY3RlZENhbGxiYWNrIiwiem4iLCJxbiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaXNDb25uZWN0ZWQiLCJDdXN0b21FbGVtZW50UmVnaXN0cnkiLCJHbiIsIlpuIiwiX19zaGFkeV9yZXBsYWNlQ2hpbGQiLCJfX3NoYWR5X2NvbnRhaW5zIiwiX19zaGFkeV9kaXNwYXRjaEV2ZW50IiwiX19zaGFkeV9uYXRpdmVfZ2V0QXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwiX19zaGFkeV9uYXRpdmVfaGFzQXR0cmlidXRlIiwiX19zaGFkeV9yZW1vdmVBdHRyaWJ1dGUiLCJfX3NoYWR5X2F0dGFjaFNoYWRvdyIsIl9fc2hhZHlfbmF0aXZlX2ZvY3VzIiwiX19zaGFkeV9nZXRFbGVtZW50QnlJZCIsIl9fc2hhZHlfcXVlcnlTZWxlY3RvciIsIl9fc2hhZHlfcXVlcnlTZWxlY3RvckFsbCIsIl9fc2hhZHlfYXNzaWduZWROb2RlcyIsIl9fc2hhZHlfYWN0aXZlRWxlbWVudCIsIl9hY3RpdmVFbGVtZW50IiwibGFzdEVsZW1lbnRDaGlsZCIsIm5leHRFbGVtZW50U2libGluZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjaGlsZEVsZW1lbnRDb3VudCIsIl9fc2hhZHlfaXNDb25uZWN0ZWQiLCJzbG90IiwiWW4iLCJXZWFrTWFwIiwiWG4iLCJKbiIsIktuIiwiaW5Vc2UiLCJwYXRjaCIsImlzU2hhZHlSb290IiwiZW5xdWV1ZSIsImZsdXNoSW5pdGlhbCIsImZpbHRlck11dGF0aW9ucyIsIm9ic2VydmVDaGlsZHJlbiIsIk1hIiwiTmEiLCJ1bm9ic2VydmVDaGlsZHJlbiIsImRlbGV0ZSIsInNpemUiLCJoYW5kbGVzRHluYW1pY1Njb3BpbmciLCJ3cmFwSWZOZWVkZWQiLCJXcmFwcGVyIiwicGF0Y2hPbkRlbWFuZCIsIm5hdGl2ZU1ldGhvZHMiLCJuYXRpdmVUcmVlIiwicGF0Y2hFbGVtZW50UHJvdG8iLCJjdXJyZW50Tm9kZSIsIlNIT1dfVEVYVCIsIm5leHROb2RlIiwiJG4iLCJRbiIsImVvIiwibm8iLCJvbyIsImlvIiwicm8iLCJhbyIsInNvIiwibG8iLCJjbyIsInVvIiwiaG8iLCJmbyIsInBvIiwiX28iLCJtbyIsInZvIiwiZ2V0QXR0cmlidXRlTlMiLCJ5byIsInNldEF0dHJpYnV0ZU5TIiwiZ28iLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImJvIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50Iiwid28iLCJpbnNlcnRBZGphY2VudEhUTUwiLCJFbyIsIk5vIiwiQ28iLCJTbyIsIlRvIiwiT28iLCJ4byIsIk1vIiwiRG8iLCJMbyIsIkFvIiwiUG8iLCJqbyIsImtvIiwiX19DRV9pc0ltcG9ydERvY3VtZW50IiwiRm8iLCJSbyIsIlZvIiwicmkiLCJub0RvY3VtZW50Q29uc3RydWN0aW9uT2JzZXJ2ZXIiLCJzaGFkeURvbUZhc3RXYWxrIiwiamIiLCJJbyIsIlNoYWR5RG9tIiwiaW1wb3J0IiwiSG8iLCJVbyIsIl9fQ0VfcGF0Y2hlZCIsIkJvIiwiX19DRV9zdGF0ZSIsIldvIiwiem8iLCJxbyIsImtiIiwidXBncmFkZSIsIl9fQ0VfcmVnaXN0cnkiLCJfX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQiLCJlaSIsImNvbnN0cnVjdGlvblN0YWNrIiwiY29uc3RydWN0b3JGdW5jdGlvbiIsIl9fQ0VfZGVmaW5pdGlvbiIsImhhc0F0dHJpYnV0ZXMiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJabyIsIkdvIiwiSFRNTFVua25vd25FbGVtZW50Iiwic291cmNlVVJMIiwiZmlsZU5hbWUiLCJsaW5lIiwibGluZU51bWJlciIsImNvbHVtbiIsImNvbHVtbk51bWJlciIsIkVycm9yRXZlbnQiLCJpbml0RXJyb3JFdmVudCIsImZpbGVuYW1lIiwibGluZW5vIiwiY29sbm8iLCJZbyIsIkNhIiwiWG8iLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiSm8iLCJkaXNjb25uZWN0IiwiS28iLCJmYSIsImdhIiwieGEiLCJuYSIsInFhIiwiZWEiLCJoYSIsInlhIiwiJG8iLCJTeW50YXhFcnJvciIsIlFvIiwiYWRvcHRlZENhbGxiYWNrIiwidGkiLCJuaSIsIiRhIiwid2hlbkRlZmluZWQiLCJwb2x5ZmlsbERlZmluZUxhenkiLCJpaSIsImFpIiwib2kiLCJzaSIsInJ1bGVzIiwicHJldmlvdXMiLCJwYXJzZWRDc3NUZXh0IiwiYXRSdWxlIiwicGFyc2VkU2VsZWN0b3IiLCJrZXlmcmFtZXNOYW1lIiwibGkiLCJtaSIsIkVpIiwibGFzdEluZGV4T2YiLCJmaSIsIndpIiwiZGkiLCJwaSIsImhpIiwiX19DRV9pbnN0YWxsUG9seWZpbGwiLCJjaSIsInVpIiwidmkiLCJ5aSIsImdpIiwiYmkiLCJOaSIsIkNpIiwic2hpbWNzc3Byb3BlcnRpZXMiLCJDU1MiLCJzdXBwb3J0cyIsImNzc0J1aWxkIiwiU2kiLCJkaXNhYmxlUnVudGltZSIsIm5hdGl2ZUNzcyIsIlRpIiwiT2kiLCJ4aSIsIk1pIiwiRGkiLCJMaSIsIkFpIiwiUGkiLCJqaSIsIlJpIiwia2kiLCJfX2Nzc1J1bGVzIiwiRmkiLCJtYXRjaE1lZGlhIiwiVmkiLCJVaSIsIklpIiwiSGkiLCJET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkciLCJCaSIsInppIiwicWkiLCJXaSIsImV4dGVuZHMiLCJjYSIsIkdpIiwiWmkiLCJfX2Nzc0J1aWxkIiwiWWkiLCJYaSIsIkppIiwiX2NvbnRlbnQiLCJLaSIsIiRpIiwicHIiLCJRaSIsImVyIiwibnIiLCJvciIsImFyIiwiaXIiLCJyciIsImZyIiwid2EiLCJjciIsInNyIiwidXIiLCJsciIsImhyIiwiUWEiLCJyZWR1Y2UiLCJkciIsIl9yIiwidGEiLCJtciIsIl9fc3R5bGVJbmZvIiwidnIiLCJ5ciIsIl9nZXRTdHlsZVJ1bGVzIiwiZ3IiLCJiciIsIndyIiwiRXIiLCJOciIsIkNyIiwiU3IiLCJsYXN0SW5kZXgiLCJ4ciIsIk1yIiwiRHIiLCJMciIsIkFyIiwiUHIiLCJqciIsImtyIiwic3RvcmUiLCJzdHlsZUVsZW1lbnQiLCJGciIsIlJyIiwiVnIiLCJJciIsIkhyIiwiVXIiLCJCciIsIkhUTUxJbXBvcnRzIiwid2hlblJlYWR5IiwienIiLCJxciIsIldyIiwiX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uIiwiX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9uIiwiX2FwcGx5U2hpbU5leHRWZXJzaW9uIiwiR3IiLCJaciIsIllyIiwiWHIiLCJKciIsIl9zdHlsZUFzdCIsIktyIiwiQXBwbHlTaGltIiwiaW52YWxpZENhbGxiYWNrIiwiQ3VzdG9tU3R5bGVJbnRlcmZhY2UiLCJ0cmFuc2Zvcm1DYWxsYmFjayIsIkhhIiwidmFsaWRhdGVDYWxsYmFjayIsImVucXVldWVkIiwiZmx1c2hDdXN0b21TdHlsZXMiLCIkciIsInJlbW92ZVByb3BlcnR5IiwiX3N0eWxlIiwidHJhbnNmb3JtUnVsZXMiLCJfdmFsaWRhdGluZyIsIlFyIiwiWGEiLCJtYiIsIl9lbGVtZW50IiwiY2IiLCJWYSIsIlRyIiwiVGEiLCJoYiIsInByZXBhcmVUZW1wbGF0ZSIsInByZXBhcmVUZW1wbGF0ZURvbSIsInByZXBhcmVUZW1wbGF0ZVN0eWxlcyIsIl9wcmVwYXJlZCIsImFiIiwiX2RvbVByZXBhcmVkIiwicHJvY2Vzc1N0eWxlcyIsImdldFN0eWxlRm9yQ3VzdG9tU3R5bGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJzdHlsZURvY3VtZW50IiwiRGEiLCJrYSIsIk9yIiwiX3VzZUNvdW50Iiwic3R5bGVTdWJ0cmVlIiwidHJhbnNmb3JtUnVsZSIsImdldENvbXB1dGVkU3R5bGVWYWx1ZSIsImdiIiwiT2EiLCJmYiIsImliIiwiZWIiLCJSYSIsIl9zdHlsZUluZm9Gb3JOb2RlIiwidHJhbnNmb3JtQ3VzdG9tU3R5bGVGb3JEb2N1bWVudCIsImdldFN0eWxlQXN0Iiwic3R5bGVBc3RUb1N0cmluZyIsInNjb3BlRm9yTm9kZSIsInByZXBhcmVBZG9wdGVkQ3NzVGV4dCIsIm5hdGl2ZVNoYWRvdyIsInBhIiwiVVJMIiwicGF0aG5hbWUiLCJmdHAiLCJnb3BoZXIiLCJodHRwIiwiaHR0cHMiLCJ3cyIsIndzcyIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImJvb3RzdHJhcCIsInNldEltbWVkaWF0ZSIsIl9pZCIsIl9jbGVhckZuIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJuZXh0VGljayIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsIm9ubWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImZ1biIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJfbWluVmFsdWUiLCJfbWF4VmFsdWUiLCJfdmFsdWVGcm9tIiwiX3ZhbHVlVG8iLCJfc3RlcFNpemUiLCJfb25SYW5nZSIsIl9vblRvb2x0aXAiLCJfb25WZXJ0aWNhbCIsIl9vblNjYWxlIiwiX3NlcnZlclVSTCIsIl9vYnNlcnZlciIsImluaXRNb2RlbEZyb21FbGVtZW50IiwiRm9ybURhdGEiLCJpbml0TW9kZWxGcm9tU2VydmVyIiwiaW5pdE1vZGVsRnJvbU9iamVjdCIsInNlcnZlclVSTCIsImZldGNoIiwib25TY2FsZSIsInN0ZXBTaXplIiwiYWJzIiwiX21vZGVsIiwib2JzZXJ2ZXIiLCJoYW5kbGVWaWV3RXZlbnRzIiwic2V0UHJvcHMiLCJnZXRQcm9wcyIsImNhbGNGcm9tVG9WYWx1ZXMiLCJyb29tRGF0YSIsIiRmaWx0ZXIiLCIkZHJvcGRvd25RdWFudGl0eSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlC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ZCxPQUFpQixPQUNqQixXQUFvQixHQUVQa3NDLEVBQUk5dkIsRUFBU3BjLEdBSTFCdkQsRUFBT0QsUUFBVTRmLEVBQVFnd0IsUUFBVSxJIiwiZmlsZSI6InRlbXBsYXRlLjQyZjUzYWM1Zjg5YzZlNWQ5YTc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExOSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi9idXR0b24uc2Fzcyc7IiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDUtMDRUMjI6NDlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweFwiO1xuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9IHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCApID4gMztcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0XG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiYgalF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRvcCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMudG9wICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHByb3BzLmxlZnQgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIndXNlIHN0cmljdCdcblxuaW1wb3J0ICcuLi9idXR0b24vYnV0dG9uJztcbmltcG9ydCAnLi9kcm9wZG93bi1xdWFudGl0eS5zYXNzJztcblxuXG5jbGFzcyBEcm9wZG93blF1YW50aXR5IHtcbiAgIyRkcm9wZG93bjtcbiAgIyRoZWFkT3V0O1xuICAjJGhlYWRlcjtcbiAgIyRpdGVtSGVhZGVyO1xuICAjJHBpY2tlcjtcbiAgIyRtaW51cztcbiAgIyRwbHVzO1xuICAjJGFtb3VudDtcbiAgIyRjbGVhcjtcbiAgIyRzdWJtaXQ7XG4gICNzZXRWYWxpZFF1YW50aXR5O1xuICAjc2V0Q2FwdGlvbjtcbiAgI3F1YW50aXR5ID0ge1xuICAgIGZpcnN0SXRlbTogMCxcbiAgICBzZWNvbmRJdGVtOiAwLFxuICAgIHRoaXJkSXRlbTogMCxcbiAgICBpc0ZpcnN0SXRlbTogdW5kZWZpbmVkLFxuICAgIGlzU2Vjb25kSXRlbTogdW5kZWZpbmVkLFxuICAgIGlzVGhpcmRJdGVtOiB1bmRlZmluZWQsXG4gIH1cblxuICBjb25zdHJ1Y3RvcigkZHJvcGRvd24sIG1vZGUpIHtcbiAgICB0aGlzLiMkZHJvcGRvd24gPSAkZHJvcGRvd247XG4gICAgdGhpcy4jJGhlYWRlciA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX2hlYWQnKTtcbiAgICB0aGlzLiMkaXRlbUhlYWRlciA9ICRkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlci1pdGVtLWhlYWRlcicpXG4gICAgdGhpcy4jJGhlYWRPdXQgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19oZWFkLW91dCcpO1xuICAgIHRoaXMuIyRwaWNrZXIgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXInKTtcbiAgICB0aGlzLiMkbWludXMgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXItaXRlbS1xdWFudGl0eS1taW51cycpO1xuICAgIHRoaXMuIyRwbHVzID0gJGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bi1xdWFudGl0eV9fcGlja2VyLWl0ZW0tcXVhbnRpdHktcGx1cycpO1xuICAgIHRoaXMuIyRhbW91bnQgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXItaXRlbS1xdWFudGl0eS1hbW91bnQnKTtcbiAgICB0aGlzLiMkY2xlYXIgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXItaXRlbS1jbGVhcicpO1xuICAgIHRoaXMuIyRzdWJtaXQgPSAkZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLXF1YW50aXR5X19waWNrZXItaXRlbS1zdWJtaXQnKTtcblxuICAgIHRoaXMuIyRjbGVhci5vbignY2xpY2snLCB0aGlzLiNjbGVhclBpY2tlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiMkaGVhZGVyLm9uKCdjbGljaycsIHRoaXMudG9nZ2xlUGlja2VyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRzdWJtaXQub24oJ2NsaWNrJywgdGhpcy50b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy4jJG1pbnVzLmVxKDApLm9uKCdjbGljaycsIHRoaXMuI2ZpcnN0SXRlbURlbC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiMkbWludXMuZXEoMSkub24oJ2NsaWNrJywgdGhpcy4jc2Vjb25kSXRlbURlbC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiMkbWludXMuZXEoMikub24oJ2NsaWNrJywgdGhpcy4jdGhpcmRJdGVtRGVsLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRwbHVzLmVxKDApLm9uKCdjbGljaycsIHRoaXMuI2ZpcnN0SXRlbUFkZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiMkcGx1cy5lcSgxKS5vbignY2xpY2snLCB0aGlzLiNzZWNvbmRJdGVtQWRkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuIyRwbHVzLmVxKDIpLm9uKCdjbGljaycsIHRoaXMuI3RoaXJkSXRlbUFkZC5iaW5kKHRoaXMpKTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLiNwaWNrZXJIaWRkZW4uYmluZCh0aGlzKSk7XG5cbiAgICBpZiAobW9kZSA9PT0gJ3Jvb20nKSB0aGlzLiNpbml0Um9vbU1vZGUoKTtcbiAgICBlbHNlIHRoaXMuI2luaXRHdWVzdHNNb2RlKCk7XG4gICAgdGhpcy50b2dnbGVQaWNrZXIoKTtcbiAgfVxuXG4gIHRvZ2dsZVBpY2tlcigpIHtcbiAgICB0aGlzLiMkcGlja2VyLnRvZ2dsZUNsYXNzKCdkcm9wZG93bi1xdWFudGl0eV9fcGlja2VyX2hpZGRlbicpO1xuICB9XG5cbiAgI2luaXRSb29tTW9kZSgpIHtcbiAgICB0aGlzLiMkcGlja2VyLmZpbmQoJy5kcm9wZG93bi1xdWFudGl0eV9fcGlja2VyLWl0ZW06bGFzdC1vZi10eXBlJykuaGlkZSgpO1xuICAgIHRoaXMuIyRoZWFkT3V0LnRleHQoJ9Cj0LTQvtCx0YHRgtCy0LAg0L3QvtC80LXRgNCwJyk7XG4gICAgdGhpcy4jJGl0ZW1IZWFkZXIuZXEoMCkudGV4dCgn0KHQv9Cw0LvRjNC90LgnKTtcbiAgICB0aGlzLiMkaXRlbUhlYWRlci5lcSgxKS50ZXh0KCfQmtGA0L7QstCw0YLQuCcpO1xuICAgIHRoaXMuIyRpdGVtSGVhZGVyLmVxKDIpLnRleHQoJ9CS0LDQvdC90YvQtSDQutC+0LzQvdCw0YLRiycpO1xuICAgIHRoaXMuI3NldFZhbGlkUXVhbnRpdHkgPSB0aGlzLiNzZXRWYWxpZFJvb207XG4gICAgdGhpcy4jc2V0Q2FwdGlvbiA9IHRoaXMuI3NldENhcHRpb25Sb29tO1xuICB9XG5cbiAgI2luaXRHdWVzdHNNb2RlKCkge1xuICAgIHRoaXMuIyRoZWFkT3V0LnRleHQoJ9Ch0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuScpO1xuICAgIHRoaXMuIyRpdGVtSGVhZGVyLmVxKDApLnRleHQoJ9CS0LfRgNC+0YHQu9GL0LUnKTtcbiAgICB0aGlzLiMkaXRlbUhlYWRlci5lcSgxKS50ZXh0KCfQlNC10YLQuCcpO1xuICAgIHRoaXMuIyRpdGVtSGVhZGVyLmVxKDIpLnRleHQoJ9Cc0LvQsNC00LXQvdGG0YsnKTtcbiAgICB0aGlzLiNzZXRWYWxpZFF1YW50aXR5ID0gdGhpcy4jc2V0VmFsaWRHdWVzdHM7XG4gICAgdGhpcy4jc2V0Q2FwdGlvbiA9IHRoaXMuI3NldENhcHRpb25HdWVzdHM7XG4gIH1cblxuICAjc2V0VmFsaWRSb29tKCkge1xuICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuaXNGaXJzdEl0ZW0pIHtcbiAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSA8IDUpIHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSsrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgIGlmICh0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0gPiAwKSB0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0tLTtcbiAgICB9XG4gICAgaWYgKHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSA+IDApIHtcbiAgICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuaXNTZWNvbmRJdGVtKSB7XG4gICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSA8IDUpIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0rKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0gPiAwKSB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0gPSAwO1xuICAgICAgdGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtID0gMDtcbiAgICB9XG4gICAgaWYgKHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSA+IDAgJiYgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSA+IDApIHtcbiAgICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuaXNUaGlyZEl0ZW0pIHtcbiAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgIGlmICh0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0gPCA1KSB0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0rKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSAhPT0gMCkgdGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSA9IDA7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNGaXJzdEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNTZWNvbmRJdGVtID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuI3F1YW50aXR5LmlzVGhpcmRJdGVtID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgI3NldENhcHRpb25Sb29tKCkge1xuICAgIGxldCBzZWxlY3RlZENhcHRpb24gPSAnJztcbiAgICAkKHRoaXMuIyRhbW91bnRbMF0pLnRleHQodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtKTtcbiAgICAkKHRoaXMuIyRhbW91bnRbMV0pLnRleHQodGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSk7XG4gICAgJCh0aGlzLiMkYW1vdW50WzJdKS50ZXh0KHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSk7XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgdGhpcy4jJGNsZWFyLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gJ9Cj0LTQvtCx0YHRgtCy0LAg0L3QvtC80LXRgNCwJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHRoaXMuIyRjbGVhci5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBgJHt0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW19INGB0L/QsNC70YzQvdGPYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IGAke3RoaXMuI3F1YW50aXR5LmZpcnN0SXRlbX0g0YHQv9Cw0LvRjNC90LhgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gYCR7dGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtfSDRgdC/0LDQu9C10L1gO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0pIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gc2VsZWN0ZWRDYXB0aW9uICsgYCwgJHt0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtfSDQutGA0L7QstCw0YLRjGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgY2FzZSAzOlxuICAgICAgY2FzZSA0OlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBzZWxlY3RlZENhcHRpb24gKyBgLCAke3RoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW19INC60YDQvtCy0LDRgtC4YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHNlbGVjdGVkQ2FwdGlvbiA9IHNlbGVjdGVkQ2FwdGlvbiArIGAsICR7dGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbX0g0LrRgNC+0LLQsNGC0LXQuWA7XG4gICAgfVxuICAgIHRoaXMuIyRoZWFkT3V0LnRleHQoc2VsZWN0ZWRDYXB0aW9uKTtcbiAgfVxuXG4gICNzZXRWYWxpZEd1ZXN0cygpIHtcbiAgICBsZXQgYWR1bHRzQW5kQ2hpbGRyZW4gPSB0aGlzLiNxdWFudGl0eS5maXJzdEl0ZW0gKyB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtO1xuICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuaXNGaXJzdEl0ZW0pIHtcbiAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgaWYgKGFkdWx0c0FuZENoaWxkcmVuIDwgNSkgdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSA+IDApIHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbS0tO1xuICAgIH1cbiAgICBhZHVsdHNBbmRDaGlsZHJlbiA9IHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSArIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW07XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5pc1NlY29uZEl0ZW0pIHtcbiAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgaWYgKGFkdWx0c0FuZENoaWxkcmVuIDwgNSkgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSsrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgIGlmICh0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtID4gMCkgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbS0tO1xuICAgIH1cbiAgICBhZHVsdHNBbmRDaGlsZHJlbiA9IHRoaXMuI3F1YW50aXR5LmZpcnN0SXRlbSArIHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW07XG4gICAgaWYgKGFkdWx0c0FuZENoaWxkcmVuID4gMCkge1xuICAgICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS5pc1RoaXJkSXRlbSkge1xuICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgaWYgKHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSA8IDUpIHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICBpZiAodGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtICE9PSAwKSB0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0tLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgdGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtID0gMDtcbiAgICB0aGlzLiNxdWFudGl0eS5pc0ZpcnN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiNxdWFudGl0eS5pc1NlY29uZEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNUaGlyZEl0ZW0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICAjc2V0Q2FwdGlvbkd1ZXN0cygpIHtcbiAgICBsZXQgc2VsZWN0ZWRDYXB0aW9uID0gJyc7XG4gICAgbGV0IGFkdWx0c0FuZENoaWxkcmVuID0gdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtICsgdGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbTtcbiAgICAkKHRoaXMuIyRhbW91bnRbMF0pLnRleHQodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtKTtcbiAgICAkKHRoaXMuIyRhbW91bnRbMV0pLnRleHQodGhpcy4jcXVhbnRpdHkuc2Vjb25kSXRlbSk7XG4gICAgJCh0aGlzLiMkYW1vdW50WzJdKS50ZXh0KHRoaXMuI3F1YW50aXR5LnRoaXJkSXRlbSk7XG4gICAgc3dpdGNoIChhZHVsdHNBbmRDaGlsZHJlbikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB0aGlzLiMkY2xlYXIuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSAn0KHQutC+0LvRjNC60L4g0LPQvtGB0YLQtdC5JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHRoaXMuIyRjbGVhci5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBgJHthZHVsdHNBbmRDaGlsZHJlbn0g0LPQvtGB0YLRjGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgY2FzZSAzOlxuICAgICAgY2FzZSA0OlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBgJHthZHVsdHNBbmRDaGlsZHJlbn0g0LPQvtGB0YLRj2A7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBzZWxlY3RlZENhcHRpb24gPSBgJHthZHVsdHNBbmRDaGlsZHJlbn0g0LPQvtGB0YLQtdC5YDtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0pIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gc2VsZWN0ZWRDYXB0aW9uICsgYCwgJHt0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW19INC80LvQsNC00LXQvdC10YZgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgMzpcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gc2VsZWN0ZWRDYXB0aW9uICsgYCwgJHt0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW19INC80LvQsNC00LXQvdGG0LBgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgc2VsZWN0ZWRDYXB0aW9uID0gc2VsZWN0ZWRDYXB0aW9uICsgYCwgJHt0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW19INC80LvQsNC00LXQvdGG0LXQsmA7XG4gICAgfVxuICAgIHRoaXMuIyRoZWFkT3V0LnRleHQoc2VsZWN0ZWRDYXB0aW9uKTtcbiAgfVxuXG4gICNzZXREaXNhYmxlZE1pbnVzKCkge1xuICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgICQodGhpcy4jJG1pbnVzWzBdKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgJCh0aGlzLiMkbWludXNbMF0pLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMuI3F1YW50aXR5LnNlY29uZEl0ZW0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgJCh0aGlzLiMkbWludXNbMV0pLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICAkKHRoaXMuIyRtaW51c1sxXSkucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy4jcXVhbnRpdHkudGhpcmRJdGVtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgICQodGhpcy4jJG1pbnVzWzJdKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgJCh0aGlzLiMkbWludXNbMl0pLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gICNmaXJzdEl0ZW1BZGQoKSB7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNGaXJzdEl0ZW0gPSB0cnVlO1xuICAgIHRoaXMuI3NldFZhbGlkUXVhbnRpdHkoKTtcbiAgICB0aGlzLiNzZXRDYXB0aW9uKCk7XG4gICAgdGhpcy4jc2V0RGlzYWJsZWRNaW51cygpO1xuICB9XG5cbiAgI2ZpcnN0SXRlbURlbCgpIHtcbiAgICB0aGlzLiNxdWFudGl0eS5pc0ZpcnN0SXRlbSA9IGZhbHNlO1xuICAgIHRoaXMuI3NldFZhbGlkUXVhbnRpdHkoKTtcbiAgICB0aGlzLiNzZXRDYXB0aW9uKCk7XG4gICAgdGhpcy4jc2V0RGlzYWJsZWRNaW51cygpO1xuICB9XG5cbiAgI3NlY29uZEl0ZW1BZGQoKSB7XG4gICAgdGhpcy4jcXVhbnRpdHkuaXNTZWNvbmRJdGVtID0gdHJ1ZTtcbiAgICB0aGlzLiNzZXRWYWxpZFF1YW50aXR5KCk7XG4gICAgdGhpcy4jc2V0Q2FwdGlvbigpO1xuICAgIHRoaXMuI3NldERpc2FibGVkTWludXMoKTtcbiAgfVxuXG4gICNzZWNvbmRJdGVtRGVsKCkge1xuICAgIHRoaXMuI3F1YW50aXR5LmlzU2Vjb25kSXRlbSA9IGZhbHNlO1xuICAgIHRoaXMuI3NldFZhbGlkUXVhbnRpdHkoKTtcbiAgICB0aGlzLiNzZXRDYXB0aW9uKCk7XG4gICAgdGhpcy4jc2V0RGlzYWJsZWRNaW51cygpO1xuICB9XG5cbiAgI3RoaXJkSXRlbUFkZCgpIHtcbiAgICB0aGlzLiNxdWFudGl0eS5pc1RoaXJkSXRlbSA9IHRydWU7XG4gICAgdGhpcy4jc2V0VmFsaWRRdWFudGl0eSgpO1xuICAgIHRoaXMuI3NldENhcHRpb24oKTtcbiAgICB0aGlzLiNzZXREaXNhYmxlZE1pbnVzKCk7XG4gIH1cblxuICAjdGhpcmRJdGVtRGVsKCkge1xuICAgIHRoaXMuI3F1YW50aXR5LmlzVGhpcmRJdGVtID0gZmFsc2U7XG4gICAgdGhpcy4jc2V0VmFsaWRRdWFudGl0eSgpO1xuICAgIHRoaXMuI3NldENhcHRpb24oKTtcbiAgICB0aGlzLiNzZXREaXNhYmxlZE1pbnVzKCk7XG4gIH1cblxuICAjY2xlYXJQaWNrZXIoKSB7XG4gICAgdGhpcy4jcXVhbnRpdHkuZmlyc3RJdGVtID0gMDtcbiAgICB0aGlzLiNxdWFudGl0eS5zZWNvbmRJdGVtID0gMDtcbiAgICB0aGlzLiNxdWFudGl0eS50aGlyZEl0ZW0gPSAwO1xuICAgIHRoaXMuI3NldENhcHRpb24oKTtcbiAgICB0aGlzLiNzZXREaXNhYmxlZE1pbnVzKCk7XG4gIH1cblxuICAjcGlja2VySGlkZGVuKGV2dCkge1xuICAgIGlmICghZXZ0LnRhcmdldC5jbG9zZXN0KCcuZHJvcGRvd24tcXVhbnRpdHknKSkge1xuICAgICAgdGhpcy4jJHBpY2tlci5hZGRDbGFzcygnZHJvcGRvd24tcXVhbnRpdHlfX3BpY2tlcl9oaWRkZW4nKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25RdWFudGl0eTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi4vYnV0dG9uL2J1dHRvbic7XHJcbmltcG9ydCAnLi9kYXRlLXBpY2tlci5zYXNzJztcclxuXHJcblxyXG5jbGFzcyBEYXRlUGlja2VyIHtcclxuICAjJHBpY2tlcjtcclxuICAjJHRpdGxlO1xyXG4gICMkYm9keURhdGVzO1xyXG4gICMkYm9keVJhbmdlcztcclxuXHJcbiAgI2V2dENsZWFyID0gJ2RhdGUtcGlja2VyLWNsZWFyJztcclxuICAjZXZ0U3VibWl0ID0gJ2RhdGUtcGlja2VyLXN1Ym1pdCc7XHJcbiAgI2V2dFNlbGVjdEluID0gJ2RhdGUtcGlja2VyLXNlbGVjdC1pbic7XHJcbiAgI2V2dFNlbGVjdE91dCA9ICdkYXRlLXBpY2tlci1zZWxlY3Qtb3V0JztcclxuICAjcGlja2VyRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgI21vbnRoWWVhciA9IFsn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGAJywgJ9Ce0LrRgtGP0LHRgNGMJywgJ9Cd0L7Rj9Cx0YDRjCcsICfQlNC10LrQsNCx0YDRjCddO1xyXG4gICNkYXRlQ29tZUluQmVmb3JlO1xyXG4gICNkYXRlQ2hlY2tPdXRCZWZvcmU7XHJcbiAgI2N1cnJlbnREYXRlID0gdGhpcy4jcGlja2VyRGF0ZS5nZXRUaW1lKCk7XHJcbiAgZGF0ZUNvbWVJbiA9IHRoaXMuI2N1cnJlbnREYXRlLnRvU3RyaW5nKCk7XHJcbiAgZGF0ZUNoZWNrT3V0ID0gdGhpcy4jY3VycmVudERhdGUudG9TdHJpbmcoKTtcclxuICBjb3VudGVyID0gMDtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKCRwaWNrZXIpIHtcclxuICAgIHRoaXMuIyRwaWNrZXIgPSAkcGlja2VyO1xyXG4gICAgdGhpcy4jJHRpdGxlID0gJHBpY2tlci5maW5kKCcuZGF0ZS1waWNrZXJfX2hlYWQtdGl0bGUnKTtcclxuICAgIHRoaXMuIyRib2R5UmFuZ2VzID0gJHBpY2tlci5maW5kKCcuZGF0ZS1waWNrZXJfX2JvZHktcmFuZ2UnKTtcclxuXHJcbiAgICB0aGlzLiMkYm9keURhdGVzID0gJHBpY2tlci5maW5kKCcuZGF0ZS1waWNrZXJfX2JvZHktZGF0ZScpLm9uKCdjbGljaycsIHRoaXMuI3NlbGVjdERhdGUuYmluZCh0aGlzKSk7XHJcbiAgICAkcGlja2VyLmZpbmQoJy5kYXRlLXBpY2tlcl9faGVhZC1saXN0LWxlZnQnKS5vbignY2xpY2snLCB0aGlzLiNsaXN0TGVmdERhdGUuYmluZCh0aGlzKSk7XHJcbiAgICAkcGlja2VyLmZpbmQoJy5kYXRlLXBpY2tlcl9faGVhZC1saXN0LXJpZ2h0Jykub24oJ2NsaWNrJywgdGhpcy4jbGlzdFJpZ2h0RGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgICRwaWNrZXIuZmluZCgnLmRhdGUtcGlja2VyX19mb290ZXItY2xlYXInKS5vbignY2xpY2snLCB0aGlzLiNjbGVhci5iaW5kKHRoaXMpKTtcclxuICAgICRwaWNrZXIuZmluZCgnLmRhdGUtcGlja2VyX19mb290ZXItc3VibWl0Jykub24oJ2NsaWNrJywgdGhpcy4jc3VibWl0LmJpbmQodGhpcykpO1xyXG5cclxuICAgIHRoaXMuI3NldFBpY2tlckRhdGUoKTtcclxuICB9XHJcblxyXG4gICNzdWJtaXQoKSB7XHJcbiAgICB0aGlzLiMkcGlja2VyLnRyaWdnZXIodGhpcy4jZXZ0U3VibWl0KTtcclxuICB9XHJcblxyXG4gICNjbGVhcigpIHtcclxuICAgIHRoaXMuY291bnRlciA9IDA7XHJcbiAgICB0aGlzLiNwaWNrZXJEYXRlLnNldFRpbWUodGhpcy4jY3VycmVudERhdGUpO1xyXG4gICAgdGhpcy5kYXRlQ29tZUluID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5kYXRlQ2hlY2tPdXQgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLiNzZXRUaXRsZSgpO1xyXG4gICAgdGhpcy4jc2V0UGlja2VyRGF0ZSgpO1xyXG4gICAgdGhpcy4jc2V0UmFuZ2VEYXRlKCk7XHJcbiAgICB0aGlzLiMkcGlja2VyLnRyaWdnZXIodGhpcy4jZXZ0Q2xlYXIpO1xyXG4gIH1cclxuXHJcbiAgI3NldFRpdGxlKCkge1xyXG4gICAgdGhpcy4jJHRpdGxlLnRleHQoYCR7dGhpcy4jbW9udGhZZWFyW3RoaXMuI3BpY2tlckRhdGUuZ2V0TW9udGgoKV19ICR7dGhpcy4jcGlja2VyRGF0ZS5nZXRGdWxsWWVhcigpfWApO1xyXG4gIH1cclxuXHJcbiAgI2xpc3RMZWZ0RGF0ZSgpIHtcclxuICAgIHRoaXMuI3BpY2tlckRhdGUuc2V0TW9udGgodGhpcy4jcGlja2VyRGF0ZS5nZXRNb250aCgpIC0gMSk7XHJcbiAgICB0aGlzLiNzZXRQaWNrZXJEYXRlKCk7XHJcbiAgfVxyXG5cclxuICAjbGlzdFJpZ2h0RGF0ZSgpIHtcclxuICAgIHRoaXMuI3BpY2tlckRhdGUuc2V0TW9udGgodGhpcy4jcGlja2VyRGF0ZS5nZXRNb250aCgpICsgMSk7XHJcbiAgICB0aGlzLiNzZXRQaWNrZXJEYXRlKCk7XHJcbiAgfVxyXG5cclxuICAjc2VsZWN0RGF0ZShldnQpIHtcclxuICAgIHN3aXRjaCAodGhpcy5jb3VudGVyKSB7XHJcbiAgICAgIGNhc2UgMDpcclxuICAgICAgICB0aGlzLiNkYXRlQ29tZUluQmVmb3JlID0gdGhpcy5kYXRlQ29tZUluO1xyXG4gICAgICAgIHRoaXMuZGF0ZUNvbWVJbiA9IGV2dC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lc3RhbXAnKTtcclxuICAgICAgICB0aGlzLiNzZXRSYW5nZURhdGUoKTtcclxuICAgICAgICB0aGlzLmNvdW50ZXIrKztcclxuICAgICAgICB0aGlzLiMkcGlja2VyLnRyaWdnZXIodGhpcy4jZXZ0U2VsZWN0SW4pO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgdGhpcy4jZGF0ZUNoZWNrT3V0QmVmb3JlID0gdGhpcy5kYXRlQ2hlY2tPdXQ7XHJcbiAgICAgICAgdGhpcy5kYXRlQ2hlY2tPdXQgPSBldnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGltZXN0YW1wJyk7XHJcbiAgICAgICAgdGhpcy4jc2V0UmFuZ2VEYXRlKCk7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyLS07XHJcbiAgICAgICAgdGhpcy4jJHBpY2tlci50cmlnZ2VyKHRoaXMuI2V2dFNlbGVjdE91dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAjc2V0UmFuZ2VEYXRlKCkge1xyXG4gICAgdGhpcy4jJGJvZHlEYXRlcy5lYWNoKChpbmRleCwgZGF0ZSkgPT4ge1xyXG4gICAgICBjb25zdCB0aW1lU3RhbXAgPSBkYXRlLmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lc3RhbXAnKTtcclxuXHJcbiAgICAgIGNvbnN0IGlzUmFuZ2UgPSB0aW1lU3RhbXAgPj0gdGhpcy5kYXRlQ29tZUluICYmIHRpbWVTdGFtcCA8PSB0aGlzLmRhdGVDaGVja091dCAmJiB0aGlzLmRhdGVDb21lSW4gIT09IHRoaXMuZGF0ZUNoZWNrT3V0O1xyXG4gICAgICBpZiAoaXNSYW5nZSkge1xyXG4gICAgICAgIHRoaXMuIyRib2R5UmFuZ2VzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdkYXRlLXBpY2tlcl9fYm9keS1yYW5nZScpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuIyRib2R5UmFuZ2VzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdkYXRlLXBpY2tlcl9fYm9keS1yYW5nZScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gdGltZVN0YW1wID09PSB0aGlzLmRhdGVDb21lSW4gfHwgdGltZVN0YW1wID09PSB0aGlzLmRhdGVDaGVja091dDtcclxuICAgICAgaWYgKGlzU2VsZWN0ZWQpIHtcclxuICAgICAgICBkYXRlLmNsYXNzTGlzdC5hZGQoJ2RhdGUtcGlja2VyX19ib2R5LWRhdGVfc2VsZWN0ZWQnKTtcclxuICAgICAgICBpZiAodGltZVN0YW1wID09PSB0aGlzLmRhdGVDb21lSW4pIHtcclxuICAgICAgICAgIHRoaXMuIyRib2R5UmFuZ2VzW2luZGV4XS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcmFuZ2UnLCAnZmlyc3QnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy4jJGJvZHlSYW5nZXNbaW5kZXhdLnNldEF0dHJpYnV0ZSgnZGF0YS1yYW5nZScsICdsYXN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGUuY2xhc3NMaXN0LnJlbW92ZSgnZGF0ZS1waWNrZXJfX2JvZHktZGF0ZV9zZWxlY3RlZCcpO1xyXG4gICAgICAgIHRoaXMuIyRib2R5UmFuZ2VzW2luZGV4XS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcmFuZ2UnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRpbWVTdGFtcCA9PT0gU3RyaW5nKHRoaXMuI2N1cnJlbnREYXRlKSkge1xyXG4gICAgICAgIGRhdGUuY2xhc3NMaXN0LmFkZCgnZGF0ZS1waWNrZXJfX2JvZHktZGF0ZV9jdXJyZW50Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGF0ZS5jbGFzc0xpc3QucmVtb3ZlKCdkYXRlLXBpY2tlcl9fYm9keS1kYXRlX2N1cnJlbnQnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAjc2V0UGlja2VyRGF0ZSgpIHtcclxuICAgIGNvbnN0IGRhdGVDdXJyZW50ID0gbmV3IERhdGUodGhpcy4jcGlja2VyRGF0ZSk7XHJcbiAgICBjb25zdCBtb250aCA9IGRhdGVDdXJyZW50LmdldE1vbnRoKCk7XHJcbiAgICBkYXRlQ3VycmVudC5zZXREYXRlKDEpO1xyXG4gICAgbGV0IHdlZWtEYXkgPSBkYXRlQ3VycmVudC5nZXREYXkoKTtcclxuICAgIGlmICh3ZWVrRGF5ID09PSAwKSB3ZWVrRGF5ID0gNztcclxuICAgIGRhdGVDdXJyZW50LnNldERhdGUoLXdlZWtEYXkgKyAxKTtcclxuXHJcbiAgICB0aGlzLiMkYm9keURhdGVzLmVhY2goKGluZGV4LCBkYXRlKSA9PiB7XHJcbiAgICAgIGRhdGVDdXJyZW50LnNldERhdGUoZGF0ZUN1cnJlbnQuZ2V0RGF0ZSgpICsgMSk7XHJcbiAgICAgIGlmIChkYXRlQ3VycmVudC5nZXRNb250aCgpID09PSBtb250aCkge1xyXG4gICAgICAgIGRhdGUuY2xhc3NMaXN0LmFkZCgnZGF0ZS1waWNrZXJfX2JvZHktZGF0ZV9kYXktbW9udGgnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRlLmNsYXNzTGlzdC5yZW1vdmUoJ2RhdGUtcGlja2VyX19ib2R5LWRhdGVfZGF5LW1vbnRoJyk7XHJcbiAgICAgIH1cclxuICAgICAgZGF0ZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGltZXN0YW1wJywgZGF0ZUN1cnJlbnQuZ2V0VGltZSgpKTtcclxuICAgICAgZGF0ZS52YWx1ZSA9IGRhdGVDdXJyZW50LmdldERhdGUoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy4jc2V0VGl0bGUoKTtcclxuICAgIHRoaXMuI3NldFJhbmdlRGF0ZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0ZVBpY2tlcjsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9mb250cy5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi90ZW1wbGF0ZS1tYWluLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uLmljb1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uLTE2eDE2LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uLTMyeDMyLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhbmRyb2lkLWNocm9tZS0xOTJ4MTkyLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhbmRyb2lkLWNocm9tZS01MTJ4NTEyLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ0b3hpbi53ZWJtYW5pZmVzdFwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzYWZhcmktcGlubmVkLXRhYi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXBwbGUtdG91Y2gtaWNvbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwibXN0aWxlLTcweDcwLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtc3RpbGUtMTQ0eDE0NC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwibXN0aWxlLTE1MHgxNTAucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIm1zdGlsZS0zMTB4MTUwLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtc3RpbGUtMzEweDMxMC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYnJvd3NlcmNvbmZpZy54bWxcIjsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9idXR0b24uc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vc3Vic2NyaXB0aW9uLnNhc3MnOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL3N1YnNjcmlwdGlvbi5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi4vYnV0dG9uL2J1dHRvbic7XHJcbmltcG9ydCAnLi9oZWFkZXIuc2Fzcyc7XHJcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2hlYWRlci5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi4vc3Vic2NyaXB0aW9uL3N1YnNjcmlwdGlvbic7XHJcbmltcG9ydCAnLi9mb290ZXIuc2Fzcyc7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vZm9vdGVyLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuL2NvcHlyaWdodC5zYXNzJzsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9jb3B5cmlnaHQuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vZHJvcGRvd24tcXVhbnRpdHkuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vZGF0ZS1waWNrZXIuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vdGVtcGxhdGUtc2l0ZS5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL3RlbXBsYXRlLXNpdGUtbG9nby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS0zNTAtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS0zNTItNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS00NDQtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS00NTAtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS02NjYtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS02NzgtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS03NDAtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS04NDAtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS04NTYtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS04ODgtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS05ODAtNC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2NhcmQtcm9vbS05ODItNC5qcGdcIjsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi4vcmF0ZS1idXR0b24vcmF0ZS1idXR0b24nO1xyXG5pbXBvcnQgJy4vMzUwL2NhcmQtcm9vbS0zNTAtNC5qcGcnO1xyXG5pbXBvcnQgJy4vMzUyL2NhcmQtcm9vbS0zNTItNC5qcGcnO1xyXG5pbXBvcnQgJy4vNDQ0L2NhcmQtcm9vbS00NDQtNC5qcGcnO1xyXG5pbXBvcnQgJy4vNDUwL2NhcmQtcm9vbS00NTAtNC5qcGcnO1xyXG5pbXBvcnQgJy4vNjY2L2NhcmQtcm9vbS02NjYtNC5qcGcnO1xyXG5pbXBvcnQgJy4vNjc4L2NhcmQtcm9vbS02NzgtNC5qcGcnO1xyXG5pbXBvcnQgJy4vNzQwL2NhcmQtcm9vbS03NDAtNC5qcGcnO1xyXG5pbXBvcnQgJy4vODQwL2NhcmQtcm9vbS04NDAtNC5qcGcnO1xyXG5pbXBvcnQgJy4vODU2L2NhcmQtcm9vbS04NTYtNC5qcGcnO1xyXG5pbXBvcnQgJy4vODg4L2NhcmQtcm9vbS04ODgtNC5qcGcnO1xyXG5pbXBvcnQgJy4vOTgwL2NhcmQtcm9vbS05ODAtNC5qcGcnO1xyXG5pbXBvcnQgJy4vOTgyL2NhcmQtcm9vbS05ODItNC5qcGcnO1xyXG5pbXBvcnQgJy4vY2FyZC1yb29tLnNhc3MnO1xyXG5cclxuY2xhc3MgQ2FyZFJvb20ge1xyXG4gICMkcmFkaW87XHJcblxyXG4gIGNvbnN0cnVjdG9yKCRjYXJkLCByb29tKSB7XHJcbiAgICB0aGlzLiMkcmFkaW8gPSAkY2FyZC5maW5kKCcuY2FyZC1yb29tX19zbGlkZXItcmFkaW8nKTtcclxuICAgIGNvbnN0ICRpbWFnZXMgPSAkY2FyZC5maW5kKCcuY2FyZC1yb29tX19zbGlkZXItaW1nJyk7XHJcbiAgICBjb25zdCAkcmF0ZSA9ICRjYXJkLmZpbmQoJy5yYXRlLWJ1dHRvbl9fcmFkaW8nKTtcclxuXHJcbiAgICAkcmF0ZS5lcShyb29tLnJhdGUgLSAxKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcblxyXG4gICAgJGltYWdlcy5lcSgwKS5hdHRyKCdzcmMnLCByb29tLmltZzEpLmF0dHIoJ2FsdCcsIHJvb20uYWx0KTtcclxuICAgICRpbWFnZXMuZXEoMSkuYXR0cignc3JjJywgcm9vbS5pbWcyKS5hdHRyKCdhbHQnLCByb29tLmFsdCk7XHJcbiAgICAkaW1hZ2VzLmVxKDIpLmF0dHIoJ3NyYycsIHJvb20uaW1nMykuYXR0cignYWx0Jywgcm9vbS5hbHQpO1xyXG4gICAgJGltYWdlcy5lcSgzKS5hdHRyKCdzcmMnLCByb29tLmltZzQpLmF0dHIoJ2FsdCcsIHJvb20uYWx0KTtcclxuICAgICRjYXJkLmZpbmQoJy5jYXJkLXJvb21fX3ByaWNlLW51bWJlcicpLnRleHQocm9vbS5udW1iZXIpO1xyXG4gICAgJGNhcmQuZmluZCgnLmNhcmQtcm9vbV9fcHJpY2UtbGV2ZWwnKS50ZXh0KHJvb20ubGV2ZWwpO1xyXG4gICAgJGNhcmQuZmluZCgnLmNhcmQtcm9vbV9fcHJpY2UtcGF5LWFtb3VudCcpLnRleHQocm9vbS5hbW91bnQpO1xyXG4gICAgJGNhcmQuZmluZCgnLmNhcmQtcm9vbV9fcmV2aWV3LXF1YW50aXR5JykudGV4dChyb29tLnJldmlldyk7XHJcblxyXG4gICAgJGNhcmQuZmluZCgnLmNhcmQtcm9vbV9fc2xpZGVyLWNvbnRyb2wtcmlnaHQtYnV0dG9uJykub24oJ2NsaWNrJywgdGhpcy5saXN0UmlnaHQuYmluZCh0aGlzKSk7XHJcbiAgICAkY2FyZC5maW5kKCcuY2FyZC1yb29tX19zbGlkZXItY29udHJvbC1sZWZ0LWJ1dHRvbicpLm9uKCdjbGljaycsIHRoaXMubGlzdExlZnQuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBsaXN0UmlnaHQoKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IDU7IGkrKykge1xyXG4gICAgICBpZiAodGhpcy4jJHJhZGlvLmVxKGkpLnByb3AoJ2NoZWNrZWQnKSkge1xyXG4gICAgICAgIHRoaXMuIyRyYWRpby5lcShpIC0gMSkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuIyRyYWRpby5lcShpIC0gMSkuYXR0cignZGF0YS1kaXInLCAncicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGlzdExlZnQoKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICBpZiAodGhpcy4jJHJhZGlvLmVxKGkpLnByb3AoJ2NoZWNrZWQnKSkge1xyXG4gICAgICAgIHRoaXMuIyRyYWRpby5lcShpICsgMSkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuIyRyYWRpby5lcShpICsgMSkuYXR0cignZGF0YS1kaXInLCAnbCcpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FyZFJvb207IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vcmF0ZS1idXR0b24uc2Fzcyc7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vcmF0ZS1idXR0b24uc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vY2hlY2tib3guc2Fzcyc7IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vc2xpZGVyJztcclxuaW1wb3J0ICcuL3JhbmdlLXNsaWRlci5zYXNzJztcclxuXHJcblxyXG5jbGFzcyBSYW5nZVNsaWRlciB7XHJcbiAgJHNsaWRlcjtcclxuICAjJHJhbmdlO1xyXG4gICN2YWx1ZUZyb207XHJcbiAgI3ZhbHVlVG87XHJcblxyXG4gIGNvbnN0cnVjdG9yKCRyYW5nZVNsaWRlcikge1xyXG4gICAgdGhpcy4kc2xpZGVyID0gJHJhbmdlU2xpZGVyLmZpbmQoJy5yYW5nZS1zbGlkZXJfX3BsdWdpbicpLnNsaWRlcignaW5pdCcpO1xyXG4gICAgdGhpcy4jJHJhbmdlID0gJHJhbmdlU2xpZGVyLmZpbmQoJy5yYW5nZS1zbGlkZXJfX3RpdGxlLXJhbmdlJyk7XHJcbiAgICB0aGlzLiN2YWx1ZUZyb20gPSB0aGlzLiNnZXROdW1iZXJTdHIodGhpcy4kc2xpZGVyLnNsaWRlcigndmFsdWVGcm9tJykpO1xyXG4gICAgdGhpcy4jdmFsdWVUbyA9IHRoaXMuI2dldE51bWJlclN0cih0aGlzLiRzbGlkZXIuc2xpZGVyKCd2YWx1ZVRvJykpO1xyXG4gICAgdGhpcy4jJHJhbmdlLnRleHQoYCR7dGhpcy4jdmFsdWVGcm9tfVxcdTIwQkQgLSAke3RoaXMuI3ZhbHVlVG99XFx1MjBCRGApO1xyXG5cclxuICAgIHRoaXMuJHNsaWRlci5vbignc2xpZGVyLWRhdGEnLCB0aGlzLiNoYW5kbGVFdmVudFNsaWRlci5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gICNoYW5kbGVFdmVudFNsaWRlcihldnQpIHtcclxuICAgIGlmIChldnQuZGV0YWlsLm5hbWUgPT09ICd2YWx1ZUZyb20nKSB7XHJcbiAgICAgIHRoaXMuI3ZhbHVlRnJvbSA9IHRoaXMuI2dldE51bWJlclN0cih0aGlzLiRzbGlkZXIuc2xpZGVyKCd2YWx1ZUZyb20nKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZXZ0LmRldGFpbC5uYW1lID09PSAndmFsdWVUbycpIHtcclxuICAgICAgdGhpcy4jdmFsdWVUbyA9IHRoaXMuI2dldE51bWJlclN0cih0aGlzLiRzbGlkZXIuc2xpZGVyKCd2YWx1ZVRvJykpO1xyXG4gICAgfVxyXG4gICAgdGhpcy4jJHJhbmdlLnRleHQoYCR7dGhpcy4jdmFsdWVGcm9tfVxcdTIwMDlcXHUyMEJEIC0gJHt0aGlzLiN2YWx1ZVRvfVxcdTIwMDlcXHUyMEJEYCk7XHJcbiAgfVxyXG5cclxuICAjZ2V0TnVtYmVyU3RyKG51bSkge1xyXG4gICAgbGV0IG4gPSBudW0udG9TdHJpbmcoKTtcclxuICAgIHJldHVybiBuLnJlcGxhY2UoLyhcXGR7MSwzfSg/PSg/OlxcZFxcZFxcZCkrKD8hXFxkKSkpL2csIFwiJDFcIiArICcgJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSYW5nZVNsaWRlcjtcclxuXHJcblxyXG5cclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuLi9kYXRlLXBpY2tlci9kYXRlLXBpY2tlcic7XHJcbmltcG9ydCAnLi4vYnV0dG9uL2J1dHRvbic7XHJcbmltcG9ydCAnLi9kYXRlLWZpbHRlci5zYXNzJztcclxuXHJcblxyXG5jbGFzcyBEYXRlRmlsdGVyIGV4dGVuZHMgRGF0ZVBpY2tlciB7XHJcbiAgIyRkYXRlRmlsdGVyO1xyXG4gICMkZGF0ZVJhbmdlO1xyXG4gICMkZGF0ZVBpY2tlcjtcclxuICAjJGRhdGVIZWFkZXI7XHJcbiAgI21vbnRoID0gWyfRj9C90LInLCAn0YTQtdCyJywgJ9C80LDRgCcsICfQsNC/0YAnLCAn0LzQsNC5JywgJ9C40Y7QvScsICfQuNGO0LsnLCAn0LDQstCzJywgJ9GB0LXQvScsICfQvtC60YInLCAn0L3QvtGPJywgJ9C00LXQuiddO1xyXG4gICNkYXRlID0gbmV3IERhdGUoKTtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKCRkYXRlRmlsdGVyKSB7XHJcbiAgICBzdXBlcigkZGF0ZUZpbHRlci5maW5kKCcuZGF0ZS1waWNrZXInKSk7XHJcbiAgICB0aGlzLiMkZGF0ZUZpbHRlciA9ICRkYXRlRmlsdGVyO1xyXG4gICAgdGhpcy4jJGRhdGVIZWFkZXIgPSAkZGF0ZUZpbHRlci5maW5kKCcuZGF0ZS1maWx0ZXJfX2JvZHknKTtcclxuICAgIHRoaXMuIyRkYXRlUmFuZ2UgPSAkZGF0ZUZpbHRlci5maW5kKCcuZGF0ZS1maWx0ZXJfX2JvZHktcmFuZ2UnKTtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyID0gJGRhdGVGaWx0ZXIuZmluZCgnLmRhdGUtZmlsdGVyX19waWNrZXInKTtcclxuXHJcbiAgICB0aGlzLiMkZGF0ZUhlYWRlci5vbignY2xpY2snLCB0aGlzLiN0b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLiMkZGF0ZVBpY2tlci5vbignZGF0ZS1waWNrZXItc2VsZWN0LW91dCcsIHRoaXMuI3NldERhdGVSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyLm9uKCdkYXRlLXBpY2tlci1zdWJtaXQnLCB0aGlzLiN0b2dnbGVQaWNrZXIuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuI2hpZGRlblBpY2tlci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB0aGlzLiN0b2dnbGVQaWNrZXIoKTtcclxuICAgIHRoaXMuI3NldERhdGVSYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgI3NldERhdGVSYW5nZSgpIHtcclxuICAgIHRoaXMuI2RhdGUuc2V0VGltZShOdW1iZXIodGhpcy5kYXRlQ29tZUluKSk7XHJcbiAgICBsZXQgZnJvbURhdGUgPSBgJHt0aGlzLiNkYXRlLmdldERhdGUoKX0gJHt0aGlzLiNtb250aFt0aGlzLiNkYXRlLmdldE1vbnRoKCldfSBgO1xyXG4gICAgdGhpcy4jZGF0ZS5zZXRUaW1lKE51bWJlcih0aGlzLmRhdGVDaGVja091dCkpO1xyXG4gICAgbGV0IHRvRGF0ZSA9IGAke3RoaXMuI2RhdGUuZ2V0RGF0ZSgpfSAke3RoaXMuI21vbnRoW3RoaXMuI2RhdGUuZ2V0TW9udGgoKV19YDtcclxuICAgIHRoaXMuIyRkYXRlUmFuZ2UudGV4dChgJHtmcm9tRGF0ZX0gLSAke3RvRGF0ZX1gKTtcclxuICB9XHJcbiAgI3RvZ2dsZVBpY2tlcigpIHtcclxuICAgIHRoaXMuIyRkYXRlUGlja2VyLnRvZ2dsZUNsYXNzKCdkYXRlLWZpbHRlcl9fcGlja2VyX2hpZGRlbicpO1xyXG4gIH1cclxuXHJcbiAgI2hpZGRlblBpY2tlcihldnQpIHtcclxuICAgIGlmICghZXZ0LnRhcmdldC5jbG9zZXN0KCcuZGF0ZS1maWx0ZXInKSl7XHJcbiAgICAgIHRoaXMuIyRkYXRlUGlja2VyLmFkZENsYXNzKCdkYXRlLWZpbHRlcl9fcGlja2VyX2hpZGRlbicpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0ZUZpbHRlclxyXG4iLCIhZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIGk9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbb10uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31uLm09dCxuLmM9ZSxuLmQ9ZnVuY3Rpb24odCxlLG8pe24ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpvfSl9LG4ucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PW4odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIobyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciBpIGluIHQpbi5kKG8saSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLGkpKTtyZXR1cm4gb30sbi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBuLmQoZSxcImFcIixlKSxlfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4ucD1cIlwiLG4obi5zPTEwKX0oW2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDMpLGk9bi5uKG8pKCkoITEpO2kucHVzaChbdC5pLFwiLk8zMy1laTFSNzI3eVFBOUtiNVlHMXtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQ6I2ZmZjtoZWlnaHQ6NnB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwuMjUpO2JvcmRlci1yYWRpdXM6M3B4O2JveC1zaXppbmc6Ym9yZGVyLWJveDtjdXJzb3I6cG9pbnRlcn0uXzFkQ1dNblhTOHZibXlacUJTcll0Wnh7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOjZweDtoZWlnaHQ6MTAwJX0uXzNYQVV2THQwRW51MWpVc2ZhZlRJQWp7ZGlzcGxheTpmbGV4O3otaW5kZXg6MTA7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luLWxlZnQ6LThweDttYXJnaW4tdG9wOi02cHg7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNkZDRjk3IDAlLCAjNjZEMkVBIDEwMCUpO2JvcmRlcjoycHggc29saWQgI2ZmZjtib3JkZXItcmFkaXVzOjEwcHg7cGFkZGluZzo2cHh9Ll8yWVJhdXAzNWNsSmtJZTNtMzI5S3ZUe21hcmdpbi1sZWZ0Oi02cHg7bWFyZ2luLXRvcDotN3B4fS5fMnh4NXBNU0RjdzFRUnllSmhPcUVyTHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDozMHB4O2hlaWdodDoyMHB4O3RvcDotMzBweDtsZWZ0Oi0xMHB4O2JvcmRlcjoycHggc29saWQgIzY2ZDJlYTtiYWNrZ3JvdW5kLWNvbG9yOiM2ZmNmOTc7b3BhY2l0eTouNTtib3JkZXItcmFkaXVzOjVweH0uc1ZzNXM3MkhBdmw3NENzd1NIWlRke2xlZnQ6LTQwcHg7dG9wOi01cHh9Ll8zdzljbGgwbnlaaW9fNWdETEdsMURke3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZGQ0Y5NyAwJSwgIzY2RDJFQSAxMDAlKTtib3JkZXItcmFkaXVzOjNweDtoZWlnaHQ6MTAwJX0uXzJBLXh1ZmVEM3luTnNpZFlwTHJmUjB7d2lkdGg6MTAwJTtoZWlnaHQ6YXV0b30uXzNwUWhsa3Q0X3NfSHNaVXRsRU0yTzh7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjVweDtjdXJzb3I6cG9pbnRlcn0uXzJWOGxpUmhDZ2NBYk1rRmstNnpsS3N7ZGlzcGxheTpmbGV4O2hlaWdodDoxMDAlO21hcmdpbi1sZWZ0OjVweDttYXJnaW4tdG9wOjB9LnpnVTA2bzl5Wmd2UnpWNVlQeFJpaXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LlZJSEpfUXBEcldjZ1NOTWU4blJoVXtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Ll8yUnI5eTdBdUEyU2pIZTdTeS13cEFwe2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmZsZXgtZW5kO3dpZHRoOjEwMCU7aGVpZ2h0OjhweDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjNjZkMmVhO2JvcmRlci1yaWdodDoycHggc29saWQgIzY2ZDJlYTtwYWRkaW5nLWJvdHRvbToycHh9LmNhdHBlelpTcGxNaTZMa1pMME9kQXtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjNjZkMmVhO2JvcmRlci10b3A6MnB4IHNvbGlkICM2NmQyZWE7cGFkZGluZy1yaWdodDoycHg7d2lkdGg6OHB4O2hlaWdodDoxMDAlO2JvcmRlci1ib3R0b206bm9uZTtwYWRkaW5nLWJvdHRvbTowfS5fMlJyOXk3QXVBMlNqSGU3U3ktd3BBcDpmaXJzdC1jaGlsZHtib3JkZXItbGVmdDoycHggc29saWQgIzY2ZDJlYX0uY2F0cGV6WlNwbE1pNkxrWkwwT2RBOmxhc3QtY2hpbGR7Ym9yZGVyLWJvdHRvbToycHggc29saWQgIzY2ZDJlYX0uY2F0cGV6WlNwbE1pNkxrWkwwT2RBOmZpcnN0LWNoaWxke2JvcmRlci1sZWZ0Om5vbmV9Lkx5MmxNRGhUREFlWXlGMklQTVZIZnt3aWR0aDoxMDAlO2hlaWdodDo1cHh9Ll8xVnBaYk9MLTg4WjZoeXF5QkdodW9Oe3dpZHRoOjVweDtoZWlnaHQ6MTAwJX0uTHkybE1EaFREQWVZeUYySVBNVkhmOm5vdCg6Zmlyc3QtY2hpbGQpe2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjNjZkMmVhfS5fMVZwWmJPTC04OFo2aHlxeUJHaHVvTjpub3QoOmxhc3QtY2hpbGQpe2JvcmRlci1ib3R0b206MXB4IHNvbGlkICM2NmQyZWF9Ll8xVnBaYk9MLTg4WjZoeXF5QkdodW9OOm5vdCg6Zmlyc3QtY2hpbGQpe2JvcmRlci1sZWZ0Om5vbmV9LkFJZ0FpQ1NTZ0pYbF8xT0RTSk05SHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Ll8ySlk4ano1d1RENjh6X1F2QTk2cTI4e2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uXzFWZHV5UkkxTnlWT1J2RnVBNkNSYTR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MDtjb2xvcjojNmZjZjk3fS5fM0l3QktMV2gxaTZmVmlHWjlOYzFxZHthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjA7d2lkdGg6YXV0b31cIixcIlwiXSksaS5sb2NhbHM9e3JhaWw6XCJPMzMtZWkxUjcyN3lRQTlLYjVZRzFcIixyYWlsX3ZlcjpcIl8xZENXTW5YUzh2Ym15WnFCU3JZdFp4XCIsdGh1bWI6XCJfM1hBVXZMdDBFbnUxalVzZmFmVElBalwiLHRodW1iX3ZlcjpcIl8yWVJhdXAzNWNsSmtJZTNtMzI5S3ZUXCIsdGh1bWJfX3Rvb2x0aXA6XCJfMnh4NXBNU0RjdzFRUnllSmhPcUVyTFwiLHRodW1iX190b29sdGlwX3ZlcjpcInNWczVzNzJIQXZsNzRDc3dTSFpUZFwiLHByb2dyZXNzOlwiXzN3OWNsaDBueVppb181Z0RMR2wxRGRcIixwcm9ncmVzc192ZXI6XCJfMkEteHVmZUQzeW5Oc2lkWXBMcmZSMFwiLHNjYWxlOlwiXzNwUWhsa3Q0X3NfSHNaVXRsRU0yTzhcIixzY2FsZV92ZXI6XCJfMlY4bGlSaENnY0FiTWtGay02emxLc1wiLHNjYWxlX193cmFwcGVyOlwiemdVMDZvOXlaZ3ZSelY1WVB4UmlpXCIsc2NhbGVfX3dyYXBwZXJfdmVyOlwiVklISl9RcERyV2NnU05NZThuUmhVXCIsc2NhbGVfX2RpdmlzaW9uOlwiXzJScjl5N0F1QTJTakhlN1N5LXdwQXBcIixzY2FsZV9fZGl2aXNpb25fdmVyOlwiY2F0cGV6WlNwbE1pNkxrWkwwT2RBXCIsc2NhbGVfX3N1YmRpdmlzaW9uOlwiTHkybE1EaFREQWVZeUYySVBNVkhmXCIsc2NhbGVfX3N1YmRpdmlzaW9uX3ZlcjpcIl8xVnBaYk9MLTg4WjZoeXF5QkdodW9OXCIsc2NhbGVfX3ZhbHVlczpcIkFJZ0FpQ1NTZ0pYbF8xT0RTSk05SFwiLHNjYWxlX192YWx1ZXNfdmVyOlwiXzJKWThqejV3VEQ2OHpfUXZBOTZxMjhcIixzY2FsZV9fdmFsdWVzSXRlbTpcIl8xVmR1eVJJMU55Vk9SdkZ1QTZDUmE0XCIsc2NhbGVfX3ZhbHVlc0l0ZW1fdmVyOlwiXzNJd0JLTFdoMWk2ZlZpR1o5TmMxcWRcIn0sZS5hPWl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWpRdWVyeX0sZnVuY3Rpb24odCxlKXt2YXIgbjtuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e249bnx8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaCh0KXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfXQuZXhwb3J0cz1ufSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbihlKXt2YXIgbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRbMV18fFwiXCIsbz10WzNdO2lmKCFvKXJldHVybiBuO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBpPShhPW8scz1idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKSxsPVwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KHMpLFwiLyojIFwiLmNvbmNhdChsLFwiICovXCIpKSxyPW8uc291cmNlcy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoby5zb3VyY2VSb290fHxcIlwiKS5jb25jYXQodCxcIiAqL1wiKX0pKTtyZXR1cm5bbl0uY29uY2F0KHIpLmNvbmNhdChbaV0pLmpvaW4oXCJcXG5cIil9dmFyIGEscyxsO3JldHVybltuXS5qb2luKFwiXFxuXCIpfShlLHQpO3JldHVybiBlWzJdP1wiQG1lZGlhIFwiLmNvbmNhdChlWzJdLFwiIHtcIikuY29uY2F0KG4sXCJ9XCIpOm59KSkuam9pbihcIlwiKX0sZS5pPWZ1bmN0aW9uKHQsbixvKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTt2YXIgaT17fTtpZihvKWZvcih2YXIgcj0wO3I8dGhpcy5sZW5ndGg7cisrKXt2YXIgYT10aGlzW3JdWzBdO251bGwhPWEmJihpW2FdPSEwKX1mb3IodmFyIHM9MDtzPHQubGVuZ3RoO3MrKyl7dmFyIGw9W10uY29uY2F0KHRbc10pO28mJmlbbFswXV18fChuJiYobFsyXT9sWzJdPVwiXCIuY29uY2F0KG4sXCIgYW5kIFwiKS5jb25jYXQobFsyXSk6bFsyXT1uKSxlLnB1c2gobCkpfX0sZX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24odCl7big1KSxuKDYpO3ZhciBlLG89bigwKSxpPShlPWZ1bmN0aW9uKHQsbil7cmV0dXJuKGU9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSkodCxuKX0sZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBvKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWUodCxuKSx0LnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihvLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgbyl9KSxyPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4odCl7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLnJhaWw9bmV3IGEsbi5zY2FsZT1uZXcgYyxuLnN0eWxlcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbi5wcmVzZW50ZXI9dCxuLnN0eWxlcy5pbm5lckhUTUw9by5hLG4uYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSksbi5zaGFkb3dSb290JiYobi5zaGFkb3dSb290LmFwcGVuZENoaWxkKG4uc3R5bGVzKSxuLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQobi5yYWlsKSxuLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQobi5zY2FsZSkpLG59cmV0dXJuIGkobixlKSxuLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbigpe3RoaXMuc3R5bGUuZGlzcGxheT1cImZsZXhcIix0aGlzLnN0eWxlLmp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJ9LG4ucHJvdG90eXBlLnNldE1vZGVsRGF0YT1mdW5jdGlvbihlLG4pe3N3aXRjaChlKXtjYXNlXCJtaW5WYWx1ZVwiOnRoaXMucmFpbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1pbi12YWx1ZVwiLG4udG9TdHJpbmcoKSksdGhpcy5zY2FsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1pbi12YWx1ZVwiLG4udG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwibWF4VmFsdWVcIjp0aGlzLnJhaWwuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXgtdmFsdWVcIixuLnRvU3RyaW5nKCkpLHRoaXMuc2NhbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXgtdmFsdWVcIixuLnRvU3RyaW5nKCkpO2JyZWFrO2Nhc2VcInZhbHVlRnJvbVwiOnRoaXMucmFpbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlLWZyb21cIixuLnRvU3RyaW5nKCkpO2JyZWFrO2Nhc2VcInZhbHVlVG9cIjp0aGlzLnJhaWwuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZS10b1wiLG4udG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwib25TY2FsZVwiOm4/dCh0aGlzLnNjYWxlKS5zaG93KCk6dCh0aGlzLnNjYWxlKS5oaWRlKCk7YnJlYWs7Y2FzZVwib25Ub29sdGlwXCI6dGhpcy5yYWlsLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdG9vbHRpcFwiLG4udG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwib25SYW5nZVwiOnRoaXMucmFpbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9uLXJhbmdlXCIsbi50b1N0cmluZygpKSx0aGlzLnNjYWxlLnNldEF0dHJpYnV0ZShcImRhdGEtb24tcmFuZ2VcIixuLnRvU3RyaW5nKCkpO2JyZWFrO2Nhc2VcIm9uVmVydGljYWxcIjp0aGlzLnN0eWxlLmZsZXhEaXJlY3Rpb249bj9cInJvd1wiOlwiY29sdW1uXCIsdGhpcy5yYWlsLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdmVydGljYWxcIixuLnRvU3RyaW5nKCkpLHRoaXMuc2NhbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1vbi12ZXJ0aWNhbFwiLG4udG9TdHJpbmcoKSl9fSxufShIVE1MRWxlbWVudCksYT1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiB0Ll90aHVtYkZyb209bmV3IGwoXCJ2YWx1ZUZyb21cIiksdC5fdGh1bWJUbz1uZXcgbChcInZhbHVlVG9cIiksdC5fcHJvZ3Jlc3M9bmV3IHMsdC5jbGFzc05hbWU9by5hLmxvY2Fscy5yYWlsLHQuYXBwZW5kQ2hpbGQodC5fdGh1bWJGcm9tKSx0LmFwcGVuZENoaWxkKHQuX3RodW1iVG8pLHQuYXBwZW5kQ2hpbGQodC5fcHJvZ3Jlc3MpLHR9cmV0dXJuIGkobixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIm9ic2VydmVkQXR0cmlidXRlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bXCJkYXRhLW1pbi12YWx1ZVwiLFwiZGF0YS1tYXgtdmFsdWVcIixcImRhdGEtdmFsdWUtZnJvbVwiLFwiZGF0YS12YWx1ZS10b1wiLFwiZGF0YS1vbi10b29sdGlwXCIsXCJkYXRhLW9uLXJhbmdlXCIsXCJkYXRhLW9uLXZlcnRpY2FsXCJdfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLG4ucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaz1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiZGF0YS1taW4tdmFsdWVcIjpjYXNlXCJkYXRhLW1heC12YWx1ZVwiOnRoaXMuX3RodW1iRnJvbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcImZyb21cIikudG9TdHJpbmcoKSksdGhpcy5fcHJvZ3Jlc3Muc2V0QXR0cmlidXRlKFwiZGF0YS1wb3NpdGlvbi1mcm9tXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcImZyb21cIikudG9TdHJpbmcoKSksdGhpcy5fdGh1bWJUby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcInRvXCIpLnRvU3RyaW5nKCkpLHRoaXMuX3Byb2dyZXNzLnNldEF0dHJpYnV0ZShcImRhdGEtcG9zaXRpb24tdG9cIix0aGlzLmNhbGNUaHVtYlBvc2l0aW9uKFwidG9cIikudG9TdHJpbmcoKSk7YnJlYWs7Y2FzZVwiZGF0YS1vbi10b29sdGlwXCI6dGhpcy5fdGh1bWJGcm9tLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdG9vbHRpcFwiLHRoaXMuZGF0YXNldC5vblRvb2x0aXApLHRoaXMuX3RodW1iVG8uc2V0QXR0cmlidXRlKFwiZGF0YS1vbi10b29sdGlwXCIsdGhpcy5kYXRhc2V0Lm9uVG9vbHRpcCk7YnJlYWs7Y2FzZVwiZGF0YS1vbi1yYW5nZVwiOnRoaXMuX3Byb2dyZXNzLnNldEF0dHJpYnV0ZShcImRhdGEtb24tcmFuZ2VcIix0aGlzLmRhdGFzZXQub25SYW5nZSksXCJmYWxzZVwiPT09dGhpcy5kYXRhc2V0Lm9uUmFuZ2U/dCh0aGlzLl90aHVtYlRvKS5oaWRlKCk6dCh0aGlzLl90aHVtYlRvKS5zaG93KCk7YnJlYWs7Y2FzZVwiZGF0YS1vbi12ZXJ0aWNhbFwiOnRoaXMuX3RodW1iRnJvbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9uLXZlcnRpY2FsXCIsdGhpcy5kYXRhc2V0Lm9uVmVydGljYWwpLHRoaXMuX3Byb2dyZXNzLnNldEF0dHJpYnV0ZShcImRhdGEtb24tdmVydGljYWxcIix0aGlzLmRhdGFzZXQub25WZXJ0aWNhbCksdGhpcy5fdGh1bWJUby5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9uLXZlcnRpY2FsXCIsdGhpcy5kYXRhc2V0Lm9uVmVydGljYWwpLFwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uVmVydGljYWw/dCh0aGlzKS5hZGRDbGFzcyhvLmEubG9jYWxzLnJhaWxfdmVyKTp0KHRoaXMpLnJlbW92ZUNsYXNzKG8uYS5sb2NhbHMucmFpbF92ZXIpO2JyZWFrO2Nhc2VcImRhdGEtdmFsdWUtZnJvbVwiOnRoaXMuX3RodW1iRnJvbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcImZyb21cIikudG9TdHJpbmcoKSksdGhpcy5fdGh1bWJGcm9tLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIixOdW1iZXIodGhpcy5kYXRhc2V0LnZhbHVlRnJvbSkudG9GaXhlZCgpKSx0aGlzLl9wcm9ncmVzcy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uLWZyb21cIix0aGlzLmNhbGNUaHVtYlBvc2l0aW9uKFwiZnJvbVwiKS50b1N0cmluZygpKTticmVhaztjYXNlXCJkYXRhLXZhbHVlLXRvXCI6dGhpcy5fdGh1bWJUby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcInRvXCIpLnRvU3RyaW5nKCkpLHRoaXMuX3RodW1iVG8uc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLE51bWJlcih0aGlzLmRhdGFzZXQudmFsdWVUbykudG9GaXhlZCgpKSx0aGlzLl9wcm9ncmVzcy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uLXRvXCIsdGhpcy5jYWxjVGh1bWJQb3NpdGlvbihcInRvXCIpLnRvU3RyaW5nKCkpfX0sbi5wcm90b3R5cGUuY2FsY1RodW1iUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGU9TnVtYmVyKHRoaXMuZGF0YXNldC5taW5WYWx1ZSksbj1OdW1iZXIodGhpcy5kYXRhc2V0Lm1heFZhbHVlKTtyZXR1cm4oTnVtYmVyKFwiZnJvbVwiPT09dD90aGlzLmRhdGFzZXQudmFsdWVGcm9tOnRoaXMuZGF0YXNldC52YWx1ZVRvKS1lKS8oKG4tZSkvMTAwKX0sbn0oSFRNTEVsZW1lbnQpLHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3ZhciB0PWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gdC5fbGVmdE9yVG9wPVwibGVmdFwiLHQuX3JpZ2h0T3JCb3R0b209XCJyaWdodFwiLHQuY2xhc3NOYW1lPW8uYS5sb2NhbHMucHJvZ3Jlc3MsdH1yZXR1cm4gaShuLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybltcImRhdGEtcG9zaXRpb24tZnJvbVwiLFwiZGF0YS1wb3NpdGlvbi10b1wiLFwiZGF0YS1vbi1yYW5nZVwiLFwiZGF0YS1vbi12ZXJ0aWNhbFwiXX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxuLnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImRhdGEtcG9zaXRpb24tZnJvbVwiOnRoaXMuc2V0UG9zRnJvbSgpO2JyZWFrO2Nhc2VcImRhdGEtcG9zaXRpb24tdG9cIjpjYXNlXCJkYXRhLW9uLXJhbmdlXCI6dGhpcy5zZXRQb3NUbygpO2JyZWFrO2Nhc2VcImRhdGEtb24tdmVydGljYWxcIjpcInRydWVcIj09PXRoaXMuZGF0YXNldC5vblZlcnRpY2FsP3QodGhpcykuYWRkQ2xhc3Moby5hLmxvY2Fscy5wcm9ncmVzc192ZXIpOnQodGhpcykucmVtb3ZlQ2xhc3Moby5hLmxvY2Fscy5wcm9ncmVzc192ZXIpLHRoaXMuc2V0RGlyZWN0aW9uKCksdGhpcy5zZXRQb3NGcm9tKCksdGhpcy5zZXRQb3NUbygpfX0sbi5wcm90b3R5cGUuc2V0UG9zRnJvbT1mdW5jdGlvbigpe3QodGhpcykuY3NzKFwiXCIrdGhpcy5fbGVmdE9yVG9wLHRoaXMuZGF0YXNldC5wb3NpdGlvbkZyb20rXCIlXCIpfSxuLnByb3RvdHlwZS5zZXRQb3NUbz1mdW5jdGlvbigpe1widHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uUmFuZ2U/dCh0aGlzKS5jc3MoXCJcIit0aGlzLl9yaWdodE9yQm90dG9tLDEwMC1OdW1iZXIodGhpcy5kYXRhc2V0LnBvc2l0aW9uVG8pK1wiJVwiKTp0KHRoaXMpLmNzcyhcIlwiK3RoaXMuX3JpZ2h0T3JCb3R0b20sXCIwXCIpfSxuLnByb3RvdHlwZS5zZXREaXJlY3Rpb249ZnVuY3Rpb24oKXtcInRydWVcIj09PXRoaXMuZGF0YXNldC5vblZlcnRpY2FsPyh0aGlzLl9sZWZ0T3JUb3A9XCJ0b3BcIix0aGlzLl9yaWdodE9yQm90dG9tPVwiYm90dG9tXCIsdGhpcy5zdHlsZS5sZWZ0PVwiMFwiKToodGhpcy5fbGVmdE9yVG9wPVwibGVmdFwiLHRoaXMuX3JpZ2h0T3JCb3R0b209XCJyaWdodFwiLHRoaXMuc3R5bGUudG9wPVwiMFwiKX0sbn0oSFRNTEVsZW1lbnQpLGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbih0KXt2YXIgbj1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4uX3Bvc2l0aW9uPTAsbi5fY2xpZW50WG9yWT1cImNsaWVudFhcIixuLl9vZmZzZXRYb3JZPTAsbi5fd2lkdGhPckhlaWdodD0wLG4uX2RpcmVjdGlvbj1cImxlZnRcIixuLl90b29sdGlwPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbi5fbW91c2VNb3ZlPW4ub25Nb3VzZU1vdmUuYmluZChuKSxuLl9tb3VzZVVwPW4ub25Nb3VzZVVwLmJpbmQobiksbi5fbmFtZT10LG4uY2xhc3NOYW1lPW8uYS5sb2NhbHMudGh1bWIsbi5fdG9vbHRpcC5jbGFzc05hbWU9by5hLmxvY2Fscy50aHVtYl9fdG9vbHRpcCxuLmFwcGVuZENoaWxkKG4uX3Rvb2x0aXApLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLG4ub25Nb3VzZURvd24uYmluZChuKSksbn1yZXR1cm4gaShuLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybltcImRhdGEtdmFsdWVcIixcImRhdGEtcG9zaXRpb25cIixcImRhdGEtb24tdmVydGljYWxcIixcImRhdGEtb24tdG9vbHRpcFwiXX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxuLnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImRhdGEtdmFsdWVcIjp0aGlzLl90b29sdGlwLnRleHRDb250ZW50PXRoaXMuZGF0YXNldC52YWx1ZTticmVhaztjYXNlXCJkYXRhLXBvc2l0aW9uXCI6dGhpcy5fcG9zaXRpb249TnVtYmVyKHRoaXMuZGF0YXNldC5wb3NpdGlvbiksdGhpcy5tb3ZlVG9Qb3NpdGlvbih0aGlzLl9wb3NpdGlvbik7YnJlYWs7Y2FzZVwiZGF0YS1vbi12ZXJ0aWNhbFwiOlwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uVmVydGljYWw/KHQodGhpcykuYWRkQ2xhc3Moby5hLmxvY2Fscy50aHVtYl92ZXIpLHQodGhpcy5fdG9vbHRpcCkuYWRkQ2xhc3Moby5hLmxvY2Fscy50aHVtYl9fdG9vbHRpcF92ZXIpKToodCh0aGlzKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnRodW1iX3ZlciksdCh0aGlzLl90b29sdGlwKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnRodW1iX190b29sdGlwX3ZlcikpLHRoaXMuc2V0UG9zaXRpb24oKSx0aGlzLm1vdmVUb1Bvc2l0aW9uKHRoaXMuX3Bvc2l0aW9uKTticmVhaztjYXNlXCJkYXRhLW9uLXRvb2x0aXBcIjpcImZhbHNlXCI9PT10aGlzLmRhdGFzZXQub25Ub29sdGlwP3QodGhpcy5fdG9vbHRpcCkuaGlkZSgpOnQodGhpcy5fdG9vbHRpcCkuc2hvdygpfX0sbi5wcm90b3R5cGUubW92ZVRvUG9zaXRpb249ZnVuY3Rpb24oZSl7dCh0aGlzKS5jc3MoXCJcIit0aGlzLl9kaXJlY3Rpb24sZStcIiVcIil9LG4ucHJvdG90eXBlLnNldFBvc2l0aW9uPWZ1bmN0aW9uKCl7aWYodGhpcy5wYXJlbnRFbGVtZW50KXt2YXIgdD10aGlzLnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XCJ0cnVlXCI9PT10aGlzLmRhdGFzZXQub25WZXJ0aWNhbD8odGhpcy5fY2xpZW50WG9yWT1cImNsaWVudFlcIix0aGlzLl9kaXJlY3Rpb249XCJ0b3BcIix0aGlzLl9vZmZzZXRYb3JZPXQudG9wLHRoaXMuX3dpZHRoT3JIZWlnaHQ9dC5oZWlnaHQsdGhpcy5zdHlsZS5sZWZ0PVwiMFwiKToodGhpcy5fY2xpZW50WG9yWT1cImNsaWVudFhcIix0aGlzLl9kaXJlY3Rpb249XCJsZWZ0XCIsdGhpcy5fb2Zmc2V0WG9yWT10LmxlZnQsdGhpcy5fd2lkdGhPckhlaWdodD10LndpZHRoLHRoaXMuc3R5bGUudG9wPVwiMFwiKX19LG4ucHJvdG90eXBlLm9uTW91c2VEb3duPWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0aGlzLnNldFBvc2l0aW9uKCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuX21vdXNlTW92ZSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLl9tb3VzZVVwKX0sbi5wcm90b3R5cGUub25Nb3VzZU1vdmU9ZnVuY3Rpb24odCl7dGhpcy5fcG9zaXRpb249KHRbdGhpcy5fY2xpZW50WG9yWV0tdGhpcy5fb2Zmc2V0WG9yWSkvKHRoaXMuX3dpZHRoT3JIZWlnaHQvMTAwKSx0aGlzLl9wb3NpdGlvbjwwJiYodGhpcy5fcG9zaXRpb249MCksdGhpcy5fcG9zaXRpb24+MTAwJiYodGhpcy5fcG9zaXRpb249MTAwKSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwic2xpZGVyLXZpZXdcIix7YnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNvbXBvc2VkOiEwLGRldGFpbDp7bmFtZTp0aGlzLl9uYW1lLHZhbHVlOnRoaXMuX3Bvc2l0aW9ufX0pKX0sbi5wcm90b3R5cGUub25Nb3VzZVVwPWZ1bmN0aW9uKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuX21vdXNlTW92ZSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLl9tb3VzZVVwKX0sbn0oSFRNTEVsZW1lbnQpLGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3ZhciB0PWUuY2FsbCh0aGlzKXx8dGhpczt0Ll9zY2FsZVZhbHVlSXRlbXM9W10sdC5fbmFtZT1cInZhbHVlVG9cIix0LmNsYXNzTmFtZT1vLmEubG9jYWxzLnNjYWxlO2Zvcih2YXIgbj0wO248NDtuKyspdC5fc2NhbGVWYWx1ZUl0ZW1zW25dPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHQuX3NjYWxlVmFsdWVJdGVtc1tuXS5jbGFzc05hbWU9by5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzSXRlbTt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuY2xhc3NOYW1lPW8uYS5sb2NhbHMuc2NhbGVfX3ZhbHVlcztmb3IodmFyIHI9MCxhPXQuX3NjYWxlVmFsdWVJdGVtcztyPGEubGVuZ3RoO3IrKyl7dmFyIHM9YVtyXTtpLmFwcGVuZENoaWxkKHMpfXJldHVybiB0LmlubmVySFRNTD0nICAgICAgXFxuICAgICAgPGRpdiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fd3JhcHBlcisnXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19kaXZpc2lvbisnXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fZGl2aXNpb24rJ1wiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX2RpdmlzaW9uKydcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIicrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24rJ1wiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCInK28uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uKydcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJytvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbisnXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+Jyx0LmFwcGVuZENoaWxkKGkpLHQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHQuaGFuZGxlTW91c2VEb3duLmJpbmQodCkpLHR9cmV0dXJuIGkobixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIm9ic2VydmVkQXR0cmlidXRlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bXCJkYXRhLW1pbi12YWx1ZVwiLFwiZGF0YS1tYXgtdmFsdWVcIixcImRhdGEtb24tdmVydGljYWxcIl19LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksbi5wcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrPWZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJkYXRhLW1pbi12YWx1ZVwiOmNhc2VcImRhdGEtbWF4LXZhbHVlXCI6dGhpcy5yZW5kZXIoKTticmVhaztjYXNlXCJkYXRhLW9uLXZlcnRpY2FsXCI6XCJ0cnVlXCI9PT10aGlzLmRhdGFzZXQub25WZXJ0aWNhbD8odCh0aGlzKS5hZGRDbGFzcyhvLmEubG9jYWxzLnNjYWxlX3ZlciksdCh0aGlzKS5maW5kKFwiLlwiK28uYS5sb2NhbHMuc2NhbGVfX3dyYXBwZXIpLmFkZENsYXNzKG8uYS5sb2NhbHMuc2NhbGVfX3dyYXBwZXJfdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzKS5hZGRDbGFzcyhvLmEubG9jYWxzLnNjYWxlX192YWx1ZXNfdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzSXRlbSkuYWRkQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fdmFsdWVzSXRlbV92ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX19kaXZpc2lvbikuYWRkQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fZGl2aXNpb25fdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb24pLmFkZENsYXNzKG8uYS5sb2NhbHMuc2NhbGVfX3N1YmRpdmlzaW9uX3ZlcikpOih0KHRoaXMpLnJlbW92ZUNsYXNzKG8uYS5sb2NhbHMuc2NhbGVfdmVyKSx0KHRoaXMpLmZpbmQoXCIuXCIrby5hLmxvY2Fscy5zY2FsZV9fd3JhcHBlcikucmVtb3ZlQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fd3JhcHBlcl92ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX192YWx1ZXMpLnJlbW92ZUNsYXNzKG8uYS5sb2NhbHMuc2NhbGVfX3ZhbHVlc192ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX192YWx1ZXNJdGVtKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnNjYWxlX192YWx1ZXNJdGVtX3ZlciksdCh0aGlzKS5maW5kKFwiLlwiK28uYS5sb2NhbHMuc2NhbGVfX2RpdmlzaW9uKS5yZW1vdmVDbGFzcyhvLmEubG9jYWxzLnNjYWxlX19kaXZpc2lvbl92ZXIpLHQodGhpcykuZmluZChcIi5cIitvLmEubG9jYWxzLnNjYWxlX19zdWJkaXZpc2lvbikucmVtb3ZlQ2xhc3Moby5hLmxvY2Fscy5zY2FsZV9fc3ViZGl2aXNpb25fdmVyKSl9fSxuLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgdD1OdW1iZXIodGhpcy5kYXRhc2V0Lm1pblZhbHVlKSxlPU51bWJlcih0aGlzLmRhdGFzZXQubWF4VmFsdWUpLG49KGUtdCkvMzt0aGlzLl9zY2FsZVZhbHVlSXRlbXNbMF0udGV4dENvbnRlbnQ9dC50b0ZpeGVkKCksdGhpcy5fc2NhbGVWYWx1ZUl0ZW1zWzFdLnRleHRDb250ZW50PSh0K24pLnRvRml4ZWQoKSx0aGlzLl9zY2FsZVZhbHVlSXRlbXNbMl0udGV4dENvbnRlbnQ9KHQrbituKS50b0ZpeGVkKCksdGhpcy5fc2NhbGVWYWx1ZUl0ZW1zWzNdLnRleHRDb250ZW50PWUudG9GaXhlZCgpfSxuLnByb3RvdHlwZS5oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPTA7dC5jbGllbnRYJiZ0LmNsaWVudFkmJihuPVwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uVmVydGljYWw/KHQuY2xpZW50WS1lLnRvcCkvKGUuaGVpZ2h0LzEwMCk6KHQuY2xpZW50WC1lLmxlZnQpLyhlLndpZHRoLzEwMCkpLFwidHJ1ZVwiPT09dGhpcy5kYXRhc2V0Lm9uUmFuZ2UmJlwidmFsdWVGcm9tXCI9PT10aGlzLl9uYW1lP3RoaXMuX25hbWU9XCJ2YWx1ZVRvXCI6dGhpcy5fbmFtZT1cInZhbHVlRnJvbVwiLHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJzbGlkZXItdmlld1wiLHtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY29tcG9zZWQ6ITAsZGV0YWlsOntuYW1lOnRoaXMuX25hbWUsdmFsdWU6bn19KSl9LG59KEhUTUxFbGVtZW50KTtjdXN0b21FbGVtZW50cy5nZXQoXCJpbnB1dC1zbGlkZXJcIil8fChjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1zbGlkZXJcIixyKSxjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1zbGlkZXItdmlldy10aHVtYlwiLGwpLGN1c3RvbUVsZW1lbnRzLmRlZmluZShcImlucHV0LXNsaWRlci12aWV3LXJhaWxcIixhKSxjdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1zbGlkZXItdmlldy1zY2FsZVwiLGMpLGN1c3RvbUVsZW1lbnRzLmRlZmluZShcImlucHV0LXNsaWRlci12aWV3LXByb2dyZXNzXCIscykpfSkuY2FsbCh0aGlzLG4oMSkpfSxmdW5jdGlvbih0LGUpe1xuLyoqXG5AbGljZW5zZSBAbm9jb21waWxlXG5Db3B5cmlnaHQgKGMpIDIwMTggVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7IWZ1bmN0aW9uKCl7aWYodm9pZCAwPT09d2luZG93LlJlZmxlY3R8fHZvaWQgMD09PXdpbmRvdy5jdXN0b21FbGVtZW50c3x8d2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2spcmV0dXJuO2NvbnN0IHQ9SFRNTEVsZW1lbnQ7d2luZG93LkhUTUxFbGVtZW50PXtIVE1MRWxlbWVudDpmdW5jdGlvbigpe3JldHVybiBSZWZsZWN0LmNvbnN0cnVjdCh0LFtdLHRoaXMuY29uc3RydWN0b3IpfX0uSFRNTEVsZW1lbnQsSFRNTEVsZW1lbnQucHJvdG90eXBlPXQucHJvdG90eXBlLEhUTUxFbGVtZW50LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1IVE1MRWxlbWVudCxPYmplY3Quc2V0UHJvdG90eXBlT2YoSFRNTEVsZW1lbnQsdCl9KCl9KCl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24odCxlKXtcbi8qKlxuQGxpY2Vuc2UgQG5vY29tcGlsZVxuQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBuO2Z1bmN0aW9uIG8odCl7dmFyIGU9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZTx0Lmxlbmd0aD97ZG9uZTohMSx2YWx1ZTp0W2UrK119Ontkb25lOiEwfX19dmFyIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXM/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSxuKXt0IT1BcnJheS5wcm90b3R5cGUmJnQhPU9iamVjdC5wcm90b3R5cGUmJih0W2VdPW4udmFsdWUpfSxyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdz09PXRoaXM/dGhpczp2b2lkIDAhPT10JiZudWxsIT10P3Q6dGhpcztmdW5jdGlvbiBhKCl7YT1mdW5jdGlvbigpe30sci5TeW1ib2x8fChyLlN5bWJvbD11KX1mdW5jdGlvbiBzKHQsZSl7dGhpcy5hPXQsaSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX1zLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O3ZhciBsLGMsdT0obD0wLGZ1bmN0aW9uIHQoZSl7aWYodGhpcyBpbnN0YW5jZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTtyZXR1cm4gbmV3IHMoXCJqc2NvbXBfc3ltYm9sX1wiKyhlfHxcIlwiKStcIl9cIitsKyssZSl9KTtmdW5jdGlvbiBoKCl7YSgpO3ZhciB0PXIuU3ltYm9sLml0ZXJhdG9yO3R8fCh0PXIuU3ltYm9sLml0ZXJhdG9yPXIuU3ltYm9sKFwiU3ltYm9sLml0ZXJhdG9yXCIpKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBBcnJheS5wcm90b3R5cGVbdF0mJmkoQXJyYXkucHJvdG90eXBlLHQse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gaCgpLCh0PXtuZXh0OnR9KVtyLlN5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sdH0obyh0aGlzKSl9fSksaD1mdW5jdGlvbigpe319ZnVuY3Rpb24gZCh0KXt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJnRbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gZT9lLmNhbGwodCk6e25leHQ6byh0KX19ZnVuY3Rpb24gZih0KXtmb3IodmFyIGUsbj1bXTshKGU9dC5uZXh0KCkpLmRvbmU7KW4ucHVzaChlLnZhbHVlKTtyZXR1cm4gbn1pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YpYz1PYmplY3Quc2V0UHJvdG90eXBlT2Y7ZWxzZXt2YXIgcDt0Ont2YXIgXz17fTt0cnl7Xy5fX3Byb3RvX189e1BhOiEwfSxwPV8uUGE7YnJlYWsgdH1jYXRjaChlZSl7fXA9ITF9Yz1wP2Z1bmN0aW9uKHQsZSl7aWYodC5fX3Byb3RvX189ZSx0Ll9fcHJvdG9fXyE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBleHRlbnNpYmxlXCIpO3JldHVybiB0fTpudWxsfXZhciBtPWM7ZnVuY3Rpb24gdigpe3RoaXMubD0hMSx0aGlzLmI9bnVsbCx0aGlzLkVhPXZvaWQgMCx0aGlzLmE9MSx0aGlzLlk9MCx0aGlzLmM9bnVsbH1mdW5jdGlvbiB5KHQpe2lmKHQubCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTt0Lmw9ITB9ZnVuY3Rpb24gZyh0LGUpe3QuYz17U2E6ZSxXYTohMH0sdC5hPXQuWX1mdW5jdGlvbiBiKHQsZSl7cmV0dXJuIHQuYT0zLHt2YWx1ZTplfX1mdW5jdGlvbiB3KHQpe3RoaXMuYT1uZXcgdix0aGlzLmI9dH1mdW5jdGlvbiBFKHQsZSxuLG8pe3RyeXt2YXIgaT1lLmNhbGwodC5hLmIsbik7aWYoIShpIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSXRlcmF0b3IgcmVzdWx0IFwiK2krXCIgaXMgbm90IGFuIG9iamVjdFwiKTtpZighaS5kb25lKXJldHVybiB0LmEubD0hMSxpO3ZhciByPWkudmFsdWV9Y2F0Y2goZSl7cmV0dXJuIHQuYS5iPW51bGwsZyh0LmEsZSksTih0KX1yZXR1cm4gdC5hLmI9bnVsbCxvLmNhbGwodC5hLHIpLE4odCl9ZnVuY3Rpb24gTih0KXtmb3IoO3QuYS5hOyl0cnl7dmFyIGU9dC5iKHQuYSk7aWYoZSlyZXR1cm4gdC5hLmw9ITEse3ZhbHVlOmUudmFsdWUsZG9uZTohMX19Y2F0Y2goZSl7dC5hLkVhPXZvaWQgMCxnKHQuYSxlKX1pZih0LmEubD0hMSx0LmEuYyl7aWYoZT10LmEuYyx0LmEuYz1udWxsLGUuV2EpdGhyb3cgZS5TYTtyZXR1cm57dmFsdWU6ZS5yZXR1cm4sZG9uZTohMH19cmV0dXJue3ZhbHVlOnZvaWQgMCxkb25lOiEwfX1mdW5jdGlvbiBDKHQpe3RoaXMubmV4dD1mdW5jdGlvbihlKXtyZXR1cm4geSh0LmEpLHQuYS5iP2U9RSh0LHQuYS5iLm5leHQsZSx0LmEuSik6KHQuYS5KKGUpLGU9Tih0KSksZX0sdGhpcy50aHJvdz1mdW5jdGlvbihlKXtyZXR1cm4geSh0LmEpLHQuYS5iP2U9RSh0LHQuYS5iLnRocm93LGUsdC5hLkopOihnKHQuYSxlKSxlPU4odCkpLGV9LHRoaXMucmV0dXJuPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LGUpe3kodC5hKTt2YXIgbj10LmEuYjtyZXR1cm4gbj9FKHQsXCJyZXR1cm5cImluIG4/bi5yZXR1cm46ZnVuY3Rpb24odCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohMH19LGUsdC5hLnJldHVybik6KHQuYS5yZXR1cm4oZSksTih0KSl9KHQsZSl9LGgoKSx0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319ZnVuY3Rpb24gUyh0LGUpe3JldHVybiBlPW5ldyBDKG5ldyB3KGUpKSxtJiZtKGUsdC5wcm90b3R5cGUpLGV9di5wcm90b3R5cGUuSj1mdW5jdGlvbih0KXt0aGlzLkVhPXR9LHYucHJvdG90eXBlLnJldHVybj1mdW5jdGlvbih0KXt0aGlzLmM9e3JldHVybjp0fSx0aGlzLmE9dGhpcy5ZfSxBcnJheS5mcm9tfHwoQXJyYXkuZnJvbT1mdW5jdGlvbih0KXtyZXR1cm5bXS5zbGljZS5jYWxsKHQpfSksT2JqZWN0LmFzc2lnbnx8KE9iamVjdC5hc3NpZ249ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksbz0wO288bi5sZW5ndGg7bysrKWlmKGU9bltvXSlmb3IodmFyIGk9dCxyPU9iamVjdC5rZXlzKGUpLGE9MDthPHIubGVuZ3RoO2ErKyl7dmFyIHM9clthXTtpW3NdPWVbc119cmV0dXJuIHR9KTt2YXIgVD1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO2lmKFQuaW5pdEV2ZW50KFwiZm9vXCIsITAsITApLFQucHJldmVudERlZmF1bHQoKSwhVC5kZWZhdWx0UHJldmVudGVkKXt2YXIgTz1FdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQ7RXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5jYW5jZWxhYmxlJiYoTy5jYWxsKHRoaXMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZGVmYXVsdFByZXZlbnRlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sY29uZmlndXJhYmxlOiEwfSkpfX12YXIgeD0vVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZighd2luZG93LkV2ZW50fHx4JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB3aW5kb3cuRXZlbnQpe3ZhciBNPXdpbmRvdy5FdmVudDtpZih3aW5kb3cuRXZlbnQ9ZnVuY3Rpb24odCxlKXtlPWV8fHt9O3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7cmV0dXJuIG4uaW5pdEV2ZW50KHQsISFlLmJ1YmJsZXMsISFlLmNhbmNlbGFibGUpLG59LE0pe2Zvcih2YXIgRCBpbiBNKXdpbmRvdy5FdmVudFtEXT1NW0RdO3dpbmRvdy5FdmVudC5wcm90b3R5cGU9TS5wcm90b3R5cGV9fWlmKCghd2luZG93LkN1c3RvbUV2ZW50fHx4JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQpJiYod2luZG93LkN1c3RvbUV2ZW50PWZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO3JldHVybiBuLmluaXRDdXN0b21FdmVudCh0LCEhZS5idWJibGVzLCEhZS5jYW5jZWxhYmxlLGUuZGV0YWlsKSxufSx3aW5kb3cuQ3VzdG9tRXZlbnQucHJvdG90eXBlPXdpbmRvdy5FdmVudC5wcm90b3R5cGUpLCF3aW5kb3cuTW91c2VFdmVudHx8eCYmXCJmdW5jdGlvblwiIT10eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQpe3ZhciBMPXdpbmRvdy5Nb3VzZUV2ZW50O2lmKHdpbmRvdy5Nb3VzZUV2ZW50PWZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRcIik7cmV0dXJuIG4uaW5pdE1vdXNlRXZlbnQodCwhIWUuYnViYmxlcywhIWUuY2FuY2VsYWJsZSxlLnZpZXd8fHdpbmRvdyxlLmRldGFpbCxlLnNjcmVlblgsZS5zY3JlZW5ZLGUuY2xpZW50WCxlLmNsaWVudFksZS5jdHJsS2V5LGUuYWx0S2V5LGUuc2hpZnRLZXksZS5tZXRhS2V5LGUuYnV0dG9uLGUucmVsYXRlZFRhcmdldCksbn0sTClmb3IodmFyIEEgaW4gTCl3aW5kb3cuTW91c2VFdmVudFtBXT1MW0FdO3dpbmRvdy5Nb3VzZUV2ZW50LnByb3RvdHlwZT1MLnByb3RvdHlwZX0hZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fWZ1bmN0aW9uIGUodCxlKXtpZighdC5jaGlsZE5vZGVzLmxlbmd0aClyZXR1cm5bXTtzd2l0Y2godC5ub2RlVHlwZSl7Y2FzZSBOb2RlLkRPQ1VNRU5UX05PREU6cmV0dXJuIF8uY2FsbCh0LGUpO2Nhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOnJldHVybiBtLmNhbGwodCxlKTtkZWZhdWx0OnJldHVybiBwLmNhbGwodCxlKX19dmFyIG49XCJ1bmRlZmluZWRcIj09dHlwZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQsbz0hKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5jbG9uZU5vZGUoKWluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCksaT0hMTsvVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7aWYodCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKHZhciBvO289dC5maXJzdENoaWxkOyluLmNhbGwodGhpcyxvLGUpO2Vsc2Ugbi5jYWxsKHRoaXMsdCxlKTtyZXR1cm4gdH1pPSEwO3ZhciBlPU5vZGUucHJvdG90eXBlLmNsb25lTm9kZTtOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9ZS5jYWxsKHRoaXMsdCksdGhpcyBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQmJih0Ll9fcHJvdG9fXz1Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSksdH0sRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbD1IVE1MRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCxEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yPUhUTUxFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtub2RlVHlwZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERX0sY29uZmlndXJhYmxlOiEwfSxsb2NhbE5hbWU6e2dldDpmdW5jdGlvbigpe30sY29uZmlndXJhYmxlOiEwfSxub2RlTmFtZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCIjZG9jdW1lbnQtZnJhZ21lbnRcIn0sY29uZmlndXJhYmxlOiEwfX0pO3ZhciBuPU5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZTtOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmU9dDt2YXIgbz1Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZDtOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ/dC5jYWxsKHRoaXMsZSxudWxsKTpvLmNhbGwodGhpcyxlKSxlfTt2YXIgcj1Ob2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCxhPU5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZDtOb2RlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ/KHQuY2FsbCh0aGlzLGUsbiksci5jYWxsKHRoaXMsbikpOmEuY2FsbCh0aGlzLGUsbiksbn0sRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNyZWF0ZUVsZW1lbnQoXCJkZlwiKTtyZXR1cm4gdC5fX3Byb3RvX189RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsdH07dmFyIHM9RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGU7RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT1zLmNhbGwodGhpcyx0LGV8fCExKSx0IGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCYmKGUuX19wcm90b19fPURvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlKSxlfX0oKTt2YXIgcj1Ob2RlLnByb3RvdHlwZS5jbG9uZU5vZGUsYT1Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCxzPURvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlLGw9Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsYz1Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCx1PU5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCxoPURPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nLGQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpfHx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5uZXJIVE1MfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5pbm5lckhUTUw9dH19LGY9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuTm9kZS5wcm90b3R5cGUsXCJjaGlsZE5vZGVzXCIpfHx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hpbGROb2Rlc319LHA9RWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCxfPURvY3VtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLG09RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCx2PWZ1bmN0aW9uKCl7aWYoIW4pe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtyZXR1cm4gZS5jb250ZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLHQuY29udGVudC5hcHBlbmRDaGlsZChlKSwwPT09KHQ9dC5jbG9uZU5vZGUoITApKS5jb250ZW50LmNoaWxkTm9kZXMubGVuZ3RofHwwPT09dC5jb250ZW50LmZpcnN0Q2hpbGQuY29udGVudC5jaGlsZE5vZGVzLmxlbmd0aHx8b319KCk7aWYobil7dmFyIHk9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwidGVtcGxhdGVcIiksZz0hMCxiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtiLnRleHRDb250ZW50PVwidGVtcGxhdGV7ZGlzcGxheTpub25lO31cIjt2YXIgdz1kb2N1bWVudC5oZWFkO3cuaW5zZXJ0QmVmb3JlKGIsdy5maXJzdEVsZW1lbnRDaGlsZCksdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShIVE1MRWxlbWVudC5wcm90b3R5cGUpO3ZhciBFPSFkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmhhc093blByb3BlcnR5KFwiaW5uZXJIVE1MXCIpO3QuVT1mdW5jdGlvbihlKXtpZighZS5jb250ZW50JiZlLm5hbWVzcGFjZVVSST09PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkpe2UuY29udGVudD15LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtmb3IodmFyIG47bj1lLmZpcnN0Q2hpbGQ7KWMuY2FsbChlLmNvbnRlbnQsbik7aWYoRSllLl9fcHJvdG9fXz10LnByb3RvdHlwZTtlbHNlIGlmKGUuY2xvbmVOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiB0LmIodGhpcyxlKX0sZyl0cnl7QyhlKSxTKGUpfWNhdGNoKHQpe2c9ITF9dC5hKGUuY29udGVudCl9fTt2YXIgTj17b3B0aW9uOltcInNlbGVjdFwiXSx0aGVhZDpbXCJ0YWJsZVwiXSxjb2w6W1wiY29sZ3JvdXBcIixcInRhYmxlXCJdLHRyOltcInRib2R5XCIsXCJ0YWJsZVwiXSx0aDpbXCJ0clwiLFwidGJvZHlcIixcInRhYmxlXCJdLHRkOltcInRyXCIsXCJ0Ym9keVwiLFwidGFibGVcIl19LEM9ZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpbm5lckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEwodGhpcyl9LHNldDpmdW5jdGlvbihlKXt2YXIgbj1OWygvPChbYS16XVteL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pLmV4ZWMoZSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXTtpZihuKWZvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKWU9XCI8XCIrbltvXStcIj5cIitlK1wiPC9cIituW29dK1wiPlwiO2Zvcih5LmJvZHkuaW5uZXJIVE1MPWUsdC5hKHkpO3RoaXMuY29udGVudC5maXJzdENoaWxkOylsLmNhbGwodGhpcy5jb250ZW50LHRoaXMuY29udGVudC5maXJzdENoaWxkKTtpZihlPXkuYm9keSxuKWZvcihvPTA7bzxuLmxlbmd0aDtvKyspZT1lLmxhc3RDaGlsZDtmb3IoO2UuZmlyc3RDaGlsZDspYy5jYWxsKHRoaXMuY29udGVudCxlLmZpcnN0Q2hpbGQpfSxjb25maWd1cmFibGU6ITB9KX0sUz1mdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIm91dGVySFRNTFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjx0ZW1wbGF0ZT5cIit0aGlzLmlubmVySFRNTCtcIjwvdGVtcGxhdGU+XCJ9LHNldDpmdW5jdGlvbih0KXtpZighdGhpcy5wYXJlbnROb2RlKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIHNldCB0aGUgJ291dGVySFRNTCcgcHJvcGVydHkgb24gJ0VsZW1lbnQnOiBUaGlzIGVsZW1lbnQgaGFzIG5vIHBhcmVudCBub2RlLlwiKTtmb3IoeS5ib2R5LmlubmVySFRNTD10LHQ9dGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTt5LmJvZHkuZmlyc3RDaGlsZDspYy5jYWxsKHQseS5ib2R5LmZpcnN0Q2hpbGQpO3UuY2FsbCh0aGlzLnBhcmVudE5vZGUsdCx0aGlzKX0sY29uZmlndXJhYmxlOiEwfSl9O0ModC5wcm90b3R5cGUpLFModC5wcm90b3R5cGUpLHQuYT1mdW5jdGlvbihuKXtmb3IodmFyIG8saT0wLHI9KG49ZShuLFwidGVtcGxhdGVcIikpLmxlbmd0aDtpPHImJihvPW5baV0pO2krKyl0LlUobyl9LGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsKGZ1bmN0aW9uKCl7dC5hKGRvY3VtZW50KX0pKSxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudD1mdW5jdGlvbigpe3ZhciBlPWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVyblwidGVtcGxhdGVcIj09PWUubG9jYWxOYW1lJiZ0LlUoZSksZX0sRE9NUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZyb21TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZT1oLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gdC5hKGUpLGV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEwodGhpcyl9LHNldDpmdW5jdGlvbihlKXtkLnNldC5jYWxsKHRoaXMsZSksdC5hKHRoaXMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH0pO3ZhciBUPS9bJlxcdTAwQTBcIl0vZyxPPS9bJlxcdTAwQTA8Pl0vZyx4PWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCImXCI6cmV0dXJuXCImYW1wO1wiO2Nhc2VcIjxcIjpyZXR1cm5cIiZsdDtcIjtjYXNlXCI+XCI6cmV0dXJuXCImZ3Q7XCI7Y2FzZSdcIic6cmV0dXJuXCImcXVvdDtcIjtjYXNlXCLCoFwiOnJldHVyblwiJm5ic3A7XCJ9fSxNPShiPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT17fSxuPTA7bjx0Lmxlbmd0aDtuKyspZVt0W25dXT0hMDtyZXR1cm4gZX0pKFwiYXJlYSBiYXNlIGJyIGNvbCBjb21tYW5kIGVtYmVkIGhyIGltZyBpbnB1dCBrZXlnZW4gbGluayBtZXRhIHBhcmFtIHNvdXJjZSB0cmFjayB3YnJcIi5zcGxpdChcIiBcIikpLEQ9YihcInN0eWxlIHNjcmlwdCB4bXAgaWZyYW1lIG5vZW1iZWQgbm9mcmFtZXMgcGxhaW50ZXh0IG5vc2NyaXB0XCIuc3BsaXQoXCIgXCIpKSxMPWZ1bmN0aW9uKHQsZSl7XCJ0ZW1wbGF0ZVwiPT09dC5sb2NhbE5hbWUmJih0PXQuY29udGVudCk7Zm9yKHZhciBuLG89XCJcIixpPWU/ZSh0KTpmLmdldC5jYWxsKHQpLHI9MCxhPWkubGVuZ3RoO3I8YSYmKG49aVtyXSk7cisrKXt0Ont2YXIgcz1uLGw9dCxjPWU7c3dpdGNoKHMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Zm9yKHZhciB1PXMubG9jYWxOYW1lLGg9XCI8XCIrdSxkPXMuYXR0cmlidXRlcyxwPTA7bD1kW3BdO3ArKyloKz1cIiBcIitsLm5hbWUrJz1cIicrbC52YWx1ZS5yZXBsYWNlKFQseCkrJ1wiJztoKz1cIj5cIixzPU1bdV0/aDpoK0wocyxjKStcIjwvXCIrdStcIj5cIjticmVhayB0O2Nhc2UgTm9kZS5URVhUX05PREU6cz1zLmRhdGEscz1sJiZEW2wubG9jYWxOYW1lXT9zOnMucmVwbGFjZShPLHgpO2JyZWFrIHQ7Y2FzZSBOb2RlLkNPTU1FTlRfTk9ERTpzPVwiXFx4M2MhLS1cIitzLmRhdGErXCItLVxceDNlXCI7YnJlYWsgdDtkZWZhdWx0OnRocm93IHdpbmRvdy5jb25zb2xlLmVycm9yKHMpLEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpfX1vKz1zfXJldHVybiBvfX1pZihufHx2KXt0LmI9ZnVuY3Rpb24odCxlKXt2YXIgbj1yLmNhbGwodCwhMSk7cmV0dXJuIHRoaXMuVSYmdGhpcy5VKG4pLGUmJihjLmNhbGwobi5jb250ZW50LHIuY2FsbCh0LmNvbnRlbnQsITApKSxBKG4uY29udGVudCx0LmNvbnRlbnQpKSxufTt2YXIgQT1mdW5jdGlvbihuLG8pe2lmKG8ucXVlcnlTZWxlY3RvckFsbCYmMCE9PShvPWUobyxcInRlbXBsYXRlXCIpKS5sZW5ndGgpZm9yKHZhciBpLHIsYT0wLHM9KG49ZShuLFwidGVtcGxhdGVcIikpLmxlbmd0aDthPHM7YSsrKXI9b1thXSxpPW5bYV0sdCYmdC5VJiZ0LlUociksdS5jYWxsKGkucGFyZW50Tm9kZSxQLmNhbGwociwhMCksaSl9LFA9Tm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlPWZ1bmN0aW9uKGUpe2lmKCFpJiZvJiZ0aGlzIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7aWYoIWUpcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7dmFyIG49ai5jYWxsKHRoaXMub3duZXJEb2N1bWVudCx0aGlzLCEwKX1lbHNlIG49dGhpcy5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZcInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZSYmdGhpcy5uYW1lc3BhY2VVUkk9PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkk/dC5iKHRoaXMsZSk6ci5jYWxsKHRoaXMsZSk7cmV0dXJuIGUmJkEobix0aGlzKSxufSxqPURvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlPWZ1bmN0aW9uKG4sbyl7aWYobz1vfHwhMSxcInRlbXBsYXRlXCI9PT1uLmxvY2FsTmFtZSlyZXR1cm4gdC5iKG4sbyk7dmFyIGk9cy5jYWxsKHRoaXMsbixvKTtpZihvKXtBKGksbiksbj1lKGksJ3NjcmlwdDpub3QoW3R5cGVdKSxzY3JpcHRbdHlwZT1cImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIl0sc2NyaXB0W3R5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIl0nKTtmb3IodmFyIHIsbD0wO2w8bi5sZW5ndGg7bCsrKXtyPW5bbF0sKG89YS5jYWxsKGRvY3VtZW50LFwic2NyaXB0XCIpKS50ZXh0Q29udGVudD1yLnRleHRDb250ZW50O2Zvcih2YXIgYyxoPXIuYXR0cmlidXRlcyxkPTA7ZDxoLmxlbmd0aDtkKyspYz1oW2RdLG8uc2V0QXR0cmlidXRlKGMubmFtZSxjLnZhbHVlKTt1LmNhbGwoci5wYXJlbnROb2RlLG8scil9fXJldHVybiBpfX1uJiYod2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQ9dCl9KCk7dmFyIFA9c2V0VGltZW91dDtmdW5jdGlvbiBqKCl7fWZ1bmN0aW9uIGsodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgaykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ld1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJub3QgYSBmdW5jdGlvblwiKTt0aGlzLkk9MCx0aGlzLnphPSExLHRoaXMuQz12b2lkIDAsdGhpcy5XPVtdLFUodCx0aGlzKX1mdW5jdGlvbiBGKHQsZSl7Zm9yKDszPT09dC5JOyl0PXQuQzswPT09dC5JP3QuVy5wdXNoKGUpOih0LnphPSEwLHooKGZ1bmN0aW9uKCl7dmFyIG49MT09PXQuST9lLllhOmUuWmE7aWYobnVsbD09PW4pKDE9PT10Lkk/UjpWKShlLnZhLHQuQyk7ZWxzZXt0cnl7dmFyIG89bih0LkMpfWNhdGNoKHQpe3JldHVybiB2b2lkIFYoZS52YSx0KX1SKGUudmEsbyl9fSkpKX1mdW5jdGlvbiBSKHQsZSl7dHJ5e2lmKGU9PT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLlwiKTtpZihlJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXt2YXIgbj1lLnRoZW47aWYoZSBpbnN0YW5jZW9mIGspcmV0dXJuIHQuST0zLHQuQz1lLHZvaWQgSSh0KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiB2b2lkIFUoZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXt0LmFwcGx5KGUsYXJndW1lbnRzKX19KG4sZSksdCl9dC5JPTEsdC5DPWUsSSh0KX1jYXRjaChlKXtWKHQsZSl9fWZ1bmN0aW9uIFYodCxlKXt0Lkk9Mix0LkM9ZSxJKHQpfWZ1bmN0aW9uIEkodCl7Mj09PXQuSSYmMD09PXQuVy5sZW5ndGgmJnooKGZ1bmN0aW9uKCl7dC56YXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUmJmNvbnNvbGUud2FybihcIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjpcIix0LkMpfSkpO2Zvcih2YXIgZT0wLG49dC5XLmxlbmd0aDtlPG47ZSsrKUYodCx0LldbZV0pO3QuVz1udWxsfWZ1bmN0aW9uIEgodCxlLG4pe3RoaXMuWWE9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90Om51bGwsdGhpcy5aYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2U6bnVsbCx0aGlzLnZhPW59ZnVuY3Rpb24gVSh0LGUpe3ZhciBuPSExO3RyeXt0KChmdW5jdGlvbih0KXtufHwobj0hMCxSKGUsdCkpfSksKGZ1bmN0aW9uKHQpe258fChuPSEwLFYoZSx0KSl9KSl9Y2F0Y2godCl7bnx8KG49ITAsVihlLHQpKX19ZnVuY3Rpb24gQih0KXtyZXR1cm4gdCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQuY29uc3RydWN0b3I9PT1rP3Q6bmV3IGsoKGZ1bmN0aW9uKGUpe2UodCl9KSl9ay5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihudWxsLHQpfSxrLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IHRoaXMuY29uc3RydWN0b3Ioaik7cmV0dXJuIEYodGhpcyxuZXcgSCh0LGUsbikpLG59LGsucHJvdG90eXBlLmZpbmFsbHk9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb25zdHJ1Y3RvcjtyZXR1cm4gdGhpcy50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gZS5yZXNvbHZlKHQoKSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gbn0pKX0pLChmdW5jdGlvbihuKXtyZXR1cm4gZS5yZXNvbHZlKHQoKSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gZS5yZWplY3Qobil9KSl9KSl9O3ZhciB6PVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmZ1bmN0aW9uKHQpe2UodCl9fHxmdW5jdGlvbih0KXtQKHQsMCl9O2lmKCF3aW5kb3cuUHJvbWlzZSl7d2luZG93LlByb21pc2U9ayxrLnByb3RvdHlwZS50aGVuPWsucHJvdG90eXBlLnRoZW4say5hbGw9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBrKChmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIG8odCxhKXt0cnl7aWYoYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSl7dmFyIHM9YS50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHMpcmV0dXJuIHZvaWQgcy5jYWxsKGEsKGZ1bmN0aW9uKGUpe28odCxlKX0pLG4pfWlbdF09YSwwPT0tLXImJmUoaSl9Y2F0Y2godCl7bih0KX19aWYoIXR8fHZvaWQgMD09PXQubGVuZ3RoKXJldHVybiBuKG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5XCIpKTt2YXIgaT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KTtpZigwPT09aS5sZW5ndGgpcmV0dXJuIGUoW10pO2Zvcih2YXIgcj1pLmxlbmd0aCxhPTA7YTxpLmxlbmd0aDthKyspbyhhLGlbYV0pfSkpfSxrLnJhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBrKChmdW5jdGlvbihlLG4pe2lmKCF0fHx2b2lkIDA9PT10Lmxlbmd0aClyZXR1cm4gbihuZXcgVHlwZUVycm9yKFwiUHJvbWlzZS5yYWNlIGFjY2VwdHMgYW4gYXJyYXlcIikpO2Zvcih2YXIgbz0wLGk9dC5sZW5ndGg7bzxpO28rKylCKHRbb10pLnRoZW4oZSxuKX0pKX0say5yZXNvbHZlPUIsay5yZWplY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBrKChmdW5jdGlvbihlLG4pe24odCl9KSl9O3ZhciBxPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLFc9W107bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PVcubGVuZ3RoLGU9MDtlPHQ7ZSsrKVdbZV0oKTtXLnNwbGljZSgwLHQpfSkpLm9ic2VydmUocSx7Y2hhcmFjdGVyRGF0YTohMH0pLHo9ZnVuY3Rpb24odCl7Vy5wdXNoKHQpLHEudGV4dENvbnRlbnQ9MDxxLnRleHRDb250ZW50Lmxlbmd0aD9cIlwiOlwiYVwifX0hZnVuY3Rpb24oZSxuKXtpZighKG4gaW4gZSkpe3ZhciBvPXR5cGVvZiB0PT10eXBlb2Ygbz93aW5kb3c6dCxpPTAscj1cIlwiK01hdGgucmFuZG9tKCksYT1cIl9fXHUwMDAxc3ltYm9sQEBcIityLHM9ZS5nZXRPd25Qcm9wZXJ0eU5hbWVzLGw9ZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsYz1lLmNyZWF0ZSx1PWUua2V5cyxoPWUuZnJlZXplfHxlLGQ9ZS5kZWZpbmVQcm9wZXJ0eSxmPWUuZGVmaW5lUHJvcGVydGllcyxwPWwoZSxcImdldE93blByb3BlcnR5TmFtZXNcIiksXz1lLnByb3RvdHlwZSxtPV8uaGFzT3duUHJvcGVydHksdj1fLnByb3BlcnR5SXNFbnVtZXJhYmxlLHk9Xy50b1N0cmluZyxnPWZ1bmN0aW9uKHQsZSxuKXttLmNhbGwodCxhKXx8ZCh0LGEse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLHdyaXRhYmxlOiExLHZhbHVlOnt9fSksdFthXVtcIkBAXCIrZV09bn0sYj1mdW5jdGlvbih0LGUpe3ZhciBuPWModCk7cmV0dXJuIHMoZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7Qy5jYWxsKGUsdCkmJkQobix0LGVbdF0pfSkpLG59LHc9ZnVuY3Rpb24oKXt9LEU9ZnVuY3Rpb24odCl7cmV0dXJuIHQhPWEmJiFtLmNhbGwoTyx0KX0sTj1mdW5jdGlvbih0KXtyZXR1cm4gdCE9YSYmbS5jYWxsKE8sdCl9LEM9ZnVuY3Rpb24odCl7dmFyIGU9XCJcIit0O3JldHVybiBOKGUpP20uY2FsbCh0aGlzLGUpJiZ0aGlzW2FdW1wiQEBcIitlXTp2LmNhbGwodGhpcyx0KX0sUz1mdW5jdGlvbih0KXtyZXR1cm4gZChfLHQse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwLGdldDp3LHNldDpmdW5jdGlvbihlKXtBKHRoaXMsdCx7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZX0pLGcodGhpcyx0LCEwKX19KSxoKE9bdF09ZChlKHQpLFwiY29uc3RydWN0b3JcIix4KSl9LFQ9ZnVuY3Rpb24gdChlKXtpZih0aGlzIGluc3RhbmNlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yXCIpO3JldHVybiBTKFwiX19cdTAwMDFzeW1ib2w6XCIuY29uY2F0KGV8fFwiXCIsciwrK2kpKX0sTz1jKG51bGwpLHg9e3ZhbHVlOlR9LE09ZnVuY3Rpb24odCl7cmV0dXJuIE9bdF19LEQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBvPVwiXCIrZTtpZihOKG8pKXtpZihlPUEsbi5lbnVtZXJhYmxlKXt2YXIgaT1jKG4pO2kuZW51bWVyYWJsZT0hMX1lbHNlIGk9bjtlKHQsbyxpKSxnKHQsbywhIW4uZW51bWVyYWJsZSl9ZWxzZSBkKHQsZSxuKTtyZXR1cm4gdH0sTD1mdW5jdGlvbih0KXtyZXR1cm4gcyh0KS5maWx0ZXIoTikubWFwKE0pfTtwLnZhbHVlPUQsZChlLFwiZGVmaW5lUHJvcGVydHlcIixwKSxwLnZhbHVlPUwsZChlLG4scCkscC52YWx1ZT1mdW5jdGlvbih0KXtyZXR1cm4gcyh0KS5maWx0ZXIoRSl9LGQoZSxcImdldE93blByb3BlcnR5TmFtZXNcIixwKSxwLnZhbHVlPWZ1bmN0aW9uKHQsZSl7dmFyIG49TChlKTtyZXR1cm4gbi5sZW5ndGg/dShlKS5jb25jYXQobikuZm9yRWFjaCgoZnVuY3Rpb24obil7Qy5jYWxsKGUsbikmJkQodCxuLGVbbl0pfSkpOmYodCxlKSx0fSxkKGUsXCJkZWZpbmVQcm9wZXJ0aWVzXCIscCkscC52YWx1ZT1DLGQoXyxcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIscCkscC52YWx1ZT1ULGQobyxcIlN5bWJvbFwiLHApLHAudmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuKHQ9XCJfX1x1MDAwMXN5bWJvbDpcIi5jb25jYXQoXCJfX1x1MDAwMXN5bWJvbDpcIix0LHIpKWluIF8/T1t0XTpTKHQpfSxkKFQsXCJmb3JcIixwKSxwLnZhbHVlPWZ1bmN0aW9uKHQpe2lmKEUodCkpdGhyb3cgbmV3IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhIHN5bWJvbFwiKTtpZihtLmNhbGwoTyx0KSYmKFwiX19cdTAwMDFzeW1ib2w6XCI9PT0odD10LnNsaWNlKDEwKSkuc2xpY2UoMCwxMCkmJih0PXQuc2xpY2UoMTApKSE9PXIpKXJldHVybiAwPCh0PXQuc2xpY2UoMCx0Lmxlbmd0aC1yLmxlbmd0aCkpLmxlbmd0aD90OnZvaWQgMH0sZChULFwia2V5Rm9yXCIscCkscC52YWx1ZT1mdW5jdGlvbih0LGUpe3ZhciBuPWwodCxlKTtyZXR1cm4gbiYmTihlKSYmKG4uZW51bWVyYWJsZT1DLmNhbGwodCxlKSksbn0sZChlLFwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXCIscCkscC52YWx1ZT1mdW5jdGlvbih0LGUpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aHx8dm9pZCAwPT09ZT9jKHQpOmIodCxlKX0sZChlLFwiY3JlYXRlXCIscCkscC52YWx1ZT1mdW5jdGlvbigpe3ZhciB0PXkuY2FsbCh0aGlzKTtyZXR1cm5cIltvYmplY3QgU3RyaW5nXVwiPT09dCYmTih0aGlzKT9cIltvYmplY3QgU3ltYm9sXVwiOnR9LGQoXyxcInRvU3RyaW5nXCIscCk7dHJ5e2lmKCEwIT09YyhkKHt9LFwiX19cdTAwMDFzeW1ib2w6XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBkKHRoaXMsXCJfX1x1MDAwMXN5bWJvbDpcIix7dmFsdWU6ITB9KVtcIl9fXHUwMDAxc3ltYm9sOlwiXX19KSlbXCJfX1x1MDAwMXN5bWJvbDpcIl0pdGhyb3dcIklFMTFcIjt2YXIgQT1kfWNhdGNoKHQpe0E9ZnVuY3Rpb24odCxlLG4pe3ZhciBvPWwoXyxlKTtkZWxldGUgX1tlXSxkKHQsZSxuKSxkKF8sZSxvKX19fX0oT2JqZWN0LFwiZ2V0T3duUHJvcGVydHlTeW1ib2xzXCIpLGZ1bmN0aW9uKHQsZSl7dmFyIG4sbz10LmRlZmluZVByb3BlcnR5LGk9dC5wcm90b3R5cGUscj1pLnRvU3RyaW5nO1wiaXRlcmF0b3IgbWF0Y2ggcmVwbGFjZSBzZWFyY2ggc3BsaXQgaGFzSW5zdGFuY2UgaXNDb25jYXRTcHJlYWRhYmxlIHVuc2NvcGFibGVzIHNwZWNpZXMgdG9QcmltaXRpdmUgdG9TdHJpbmdUYWdcIi5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24oYSl7aWYoIShhIGluIGUpKXN3aXRjaChvKGUsYSx7dmFsdWU6ZShhKX0pLGEpe2Nhc2VcInRvU3RyaW5nVGFnXCI6KG49dC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaSxcInRvU3RyaW5nXCIpKS52YWx1ZT1mdW5jdGlvbigpe3ZhciB0PXIuY2FsbCh0aGlzKSxuPW51bGwhPXRoaXM/dGhpc1tlLnRvU3RyaW5nVGFnXTp0aGlzO3JldHVybiBudWxsPT1uP3Q6XCJbb2JqZWN0IFwiK24rXCJdXCJ9LG8oaSxcInRvU3RyaW5nXCIsbil9fSkpfShPYmplY3QsU3ltYm9sKSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gbygpe3JldHVybiB0aGlzfWVbdF18fChlW3RdPWZ1bmN0aW9uKCl7dmFyIGU9MCxuPXRoaXMsaT17bmV4dDpmdW5jdGlvbigpe3ZhciB0PW4ubGVuZ3RoPD1lO3JldHVybiB0P3tkb25lOnR9Ontkb25lOnQsdmFsdWU6bltlKytdfX19O3JldHVybiBpW3RdPW8saX0pLG5bdF18fChuW3RdPWZ1bmN0aW9uKCl7dmFyIGU9U3RyaW5nLmZyb21Db2RlUG9pbnQsbj10aGlzLGk9MCxyPW4ubGVuZ3RoLGE9e25leHQ6ZnVuY3Rpb24oKXt2YXIgdD1yPD1pLG89dD9cIlwiOmUobi5jb2RlUG9pbnRBdChpKSk7cmV0dXJuIGkrPW8ubGVuZ3RoLHQ/e2RvbmU6dH06e2RvbmU6dCx2YWx1ZTpvfX19O3JldHVybiBhW3RdPW8sYX0pfShTeW1ib2wuaXRlcmF0b3IsQXJyYXkucHJvdG90eXBlLFN0cmluZy5wcm90b3R5cGUpO3ZhciBHPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzP1wiW29iamVjdCBVbmRlZmluZWRdXCI6bnVsbD09PXRoaXM/XCJbb2JqZWN0IE51bGxdXCI6Ry5jYWxsKHRoaXMpfSxPYmplY3Qua2V5cz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4oZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkpJiZlLmVudW1lcmFibGV9KSl9LGEoKSxoKCksU3RyaW5nLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdJiZTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0fHwoYSgpLGgoKSxTdHJpbmcucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24gdCgpe3ZhciBlLG49dGhpcztyZXR1cm4gUyh0LChmdW5jdGlvbih0KXtpZigxPT10LmEmJihlPTApLDMhPXQuYSlyZXR1cm4gZTxuLmxlbmd0aD90PWIodCxuW2VdKToodC5hPTAsdD12b2lkIDApLHQ7ZSsrLHQuYT0yfSkpfSksYSgpLGgoKSxTZXQucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl18fChhKCksaCgpLFNldC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbiB0KCl7dmFyIGUsbixvPXRoaXM7cmV0dXJuIFModCwoZnVuY3Rpb24odCl7aWYoMT09dC5hJiYoZT1bXSxvLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UucHVzaCh0KX0pKSxuPTApLDMhPXQuYSlyZXR1cm4gbjxlLmxlbmd0aD90PWIodCxlW25dKToodC5hPTAsdD12b2lkIDApLHQ7bisrLHQuYT0yfSkpfSksYSgpLGgoKSxNYXAucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl18fChhKCksaCgpLE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbiB0KCl7dmFyIGUsbixvPXRoaXM7cmV0dXJuIFModCwoZnVuY3Rpb24odCl7aWYoMT09dC5hJiYoZT1bXSxvLmZvckVhY2goKGZ1bmN0aW9uKHQsbil7ZS5wdXNoKFtuLHRdKX0pKSxuPTApLDMhPXQuYSlyZXR1cm4gbjxlLmxlbmd0aD90PWIodCxlW25dKToodC5hPTAsdD12b2lkIDApLHQ7bisrLHQuYT0yfSkpfSk7dmFyIFo9d2luZG93O1ouV2ViQ29tcG9uZW50cz1aLldlYkNvbXBvbmVudHN8fHtmbGFnczp7fX07dmFyIFk9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyYyo9XCJ3ZWJjb21wb25lbnRzLWJ1bmRsZVwiXScpLFg9L3djLSguKykvLEo9e307aWYoIUoubm9PcHRzKXtpZihsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkuc3BsaXQoXCImXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlOyh0PXQuc3BsaXQoXCI9XCIpKVswXSYmKGU9dFswXS5tYXRjaChYKSkmJihKW2VbMV1dPXRbMV18fCEwKX0pKSxZKWZvcih2YXIgSz0wLCQ9dm9pZCAwOyQ9WS5hdHRyaWJ1dGVzW0tdO0srKylcInNyY1wiIT09JC5uYW1lJiYoSlskLm5hbWVdPSQudmFsdWV8fCEwKTt2YXIgUT17fTtKLmxvZyYmSi5sb2cuc3BsaXQmJkoubG9nLnNwbGl0KFwiLFwiKS5mb3JFYWNoKChmdW5jdGlvbih0KXtRW3RdPSEwfSkpLEoubG9nPVF9Wi5XZWJDb21wb25lbnRzLmZsYWdzPUo7dmFyIHR0PUouc2hhZHlkb207aWYodHQpe1ouU2hhZHlET009Wi5TaGFkeURPTXx8e30sWi5TaGFkeURPTS5mb3JjZT10dDt2YXIgZXQ9Si5ub1BhdGNoO1ouU2hhZHlET00ubm9QYXRjaD1cInRydWVcIj09PWV0fHxldH12YXIgbnQ9Si5yZWdpc3Rlcnx8Si5jZTtmdW5jdGlvbiBvdCgpe31mdW5jdGlvbiBpdCh0KXtyZXR1cm4gdC5fX3NoYWR5fHwodC5fX3NoYWR5PW5ldyBvdCksdC5fX3NoYWR5fWZ1bmN0aW9uIHJ0KHQpe3JldHVybiB0JiZ0Ll9fc2hhZHl9bnQmJndpbmRvdy5jdXN0b21FbGVtZW50cyYmKFouY3VzdG9tRWxlbWVudHMuZm9yY2VQb2x5ZmlsbD1udCksb3QucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt9fTt2YXIgYXQ9d2luZG93LlNoYWR5RE9NfHx7fTthdC5VYT0hKCFFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3d8fCFOb2RlLnByb3RvdHlwZS5nZXRSb290Tm9kZSk7dmFyIHN0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsXCJmaXJzdENoaWxkXCIpO2Z1bmN0aW9uIGx0KHQpe3JldHVybih0PXJ0KHQpKSYmdm9pZCAwIT09dC5maXJzdENoaWxkfWZ1bmN0aW9uIGN0KHQpe3JldHVybiB0IGluc3RhbmNlb2YgU2hhZG93Um9vdH1mdW5jdGlvbiB1dCh0KXtyZXR1cm4odD0odD1ydCh0KSkmJnQucm9vdCkmJlVuKHQpfWF0LkI9ISEoc3QmJnN0LmNvbmZpZ3VyYWJsZSYmc3QuZ2V0KSxhdC5zYT1hdC5mb3JjZXx8IWF0LlVhLGF0LkQ9YXQubm9QYXRjaHx8ITEsYXQuYWE9YXQucHJlZmVyUGVyZm9ybWFuY2UsYXQudWE9XCJvbi1kZW1hbmRcIj09PWF0LkQsYXQuSWE9bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChcIlRyaWRlbnRcIik7dmFyIGh0PUVsZW1lbnQucHJvdG90eXBlLGR0PWh0Lm1hdGNoZXN8fGh0Lm1hdGNoZXNTZWxlY3Rvcnx8aHQubW96TWF0Y2hlc1NlbGVjdG9yfHxodC5tc01hdGNoZXNTZWxlY3Rvcnx8aHQub01hdGNoZXNTZWxlY3Rvcnx8aHQud2Via2l0TWF0Y2hlc1NlbGVjdG9yLGZ0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLHB0PTAsX3Q9W107ZnVuY3Rpb24gbXQodCl7X3QucHVzaCh0KSxmdC50ZXh0Q29udGVudD1wdCsrfW5ldyBNdXRhdGlvbk9ic2VydmVyKChmdW5jdGlvbigpe2Zvcig7X3QubGVuZ3RoOyl0cnl7X3Quc2hpZnQoKSgpfWNhdGNoKHQpe3Rocm93IGZ0LnRleHRDb250ZW50PXB0KyssdH19KSkub2JzZXJ2ZShmdCx7Y2hhcmFjdGVyRGF0YTohMH0pO3ZhciB2dD1kb2N1bWVudC5jb250YWlucz9mdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fc2hhZHlfbmF0aXZlX2NvbnRhaW5zKGUpfTpmdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZXx8dC5kb2N1bWVudEVsZW1lbnQmJnQuZG9jdW1lbnRFbGVtZW50Ll9fc2hhZHlfbmF0aXZlX2NvbnRhaW5zKGUpfTtmdW5jdGlvbiB5dCh0LGUpe2Zvcig7ZTspe2lmKGU9PXQpcmV0dXJuITA7ZT1lLl9fc2hhZHlfcGFyZW50Tm9kZX1yZXR1cm4hMX1mdW5jdGlvbiBndCh0KXtmb3IodmFyIGU9dC5sZW5ndGgtMTswPD1lO2UtLSl7dmFyIG49dFtlXSxvPW4uZ2V0QXR0cmlidXRlKFwiaWRcIil8fG4uZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtvJiZcImxlbmd0aFwiIT09byYmaXNOYU4obykmJih0W29dPW4pfXJldHVybiB0Lml0ZW09ZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LHQubmFtZWRJdGVtPWZ1bmN0aW9uKGUpe2lmKFwibGVuZ3RoXCIhPT1lJiZpc05hTihlKSYmdFtlXSlyZXR1cm4gdFtlXTtmb3IodmFyIG49ZCh0KSxvPW4ubmV4dCgpOyFvLmRvbmU7bz1uLm5leHQoKSlpZigoKG89by52YWx1ZSkuZ2V0QXR0cmlidXRlKFwiaWRcIil8fG8uZ2V0QXR0cmlidXRlKFwibmFtZVwiKSk9PWUpcmV0dXJuIG87cmV0dXJuIG51bGx9LHR9ZnVuY3Rpb24gYnQodCl7dmFyIGU9W107Zm9yKHQ9dC5fX3NoYWR5X25hdGl2ZV9maXJzdENoaWxkO3Q7dD10Ll9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nKWUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiB3dCh0KXt2YXIgZT1bXTtmb3IodD10Ll9fc2hhZHlfZmlyc3RDaGlsZDt0O3Q9dC5fX3NoYWR5X25leHRTaWJsaW5nKWUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiBFdCh0LGUsbil7aWYobi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSl0W2VdPW4udmFsdWU7ZWxzZSB0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxuKX1jYXRjaCh0KXt9fWZ1bmN0aW9uIE50KHQsZSxuLG8pe2Zvcih2YXIgaSBpbiBuPXZvaWQgMD09PW4/XCJcIjpuLGUpbyYmMDw9by5pbmRleE9mKGkpfHxFdCh0LG4raSxlW2ldKX1mdW5jdGlvbiBDdCh0LGUpe2Zvcih2YXIgbiBpbiBlKW4gaW4gdCYmRXQodCxuLGVbbl0pfWZ1bmN0aW9uIFN0KHQpe3ZhciBlPXt9O3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtlW25dPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxuKX0pKSxlfWZ1bmN0aW9uIFR0KHQsZSl7Zm9yKHZhciBuLG89T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSksaT0wO2k8by5sZW5ndGg7aSsrKXRbbj1vW2ldXT1lW25dfXZhciBPdCx4dD1bXTtmdW5jdGlvbiBNdCh0KXtPdHx8KE90PSEwLG10KER0KSkseHQucHVzaCh0KX1mdW5jdGlvbiBEdCgpe090PSExO2Zvcih2YXIgdD0hIXh0Lmxlbmd0aDt4dC5sZW5ndGg7KXh0LnNoaWZ0KCkoKTtyZXR1cm4gdH1mdW5jdGlvbiBMdCgpe3RoaXMuYT0hMSx0aGlzLmFkZGVkTm9kZXM9W10sdGhpcy5yZW1vdmVkTm9kZXM9W10sdGhpcy5qYT1uZXcgU2V0fUR0Lmxpc3Q9eHQsTHQucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7aWYodGhpcy5hKXt0aGlzLmE9ITE7dmFyIHQ9dGhpcy50YWtlUmVjb3JkcygpO3QubGVuZ3RoJiZ0aGlzLmphLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UodCl9KSl9fSxMdC5wcm90b3R5cGUudGFrZVJlY29yZHM9ZnVuY3Rpb24oKXtpZih0aGlzLmFkZGVkTm9kZXMubGVuZ3RofHx0aGlzLnJlbW92ZWROb2Rlcy5sZW5ndGgpe3ZhciB0PVt7YWRkZWROb2Rlczp0aGlzLmFkZGVkTm9kZXMscmVtb3ZlZE5vZGVzOnRoaXMucmVtb3ZlZE5vZGVzfV07cmV0dXJuIHRoaXMuYWRkZWROb2Rlcz1bXSx0aGlzLnJlbW92ZWROb2Rlcz1bXSx0fXJldHVybltdfTt2YXIgQXQ9L1smXFx1MDBBMFwiXS9nLFB0PS9bJlxcdTAwQTA8Pl0vZztmdW5jdGlvbiBqdCh0KXtzd2l0Y2godCl7Y2FzZVwiJlwiOnJldHVyblwiJmFtcDtcIjtjYXNlXCI8XCI6cmV0dXJuXCImbHQ7XCI7Y2FzZVwiPlwiOnJldHVyblwiJmd0O1wiO2Nhc2UnXCInOnJldHVyblwiJnF1b3Q7XCI7Y2FzZVwiwqBcIjpyZXR1cm5cIiZuYnNwO1wifX1mdW5jdGlvbiBrdCh0KXtmb3IodmFyIGU9e30sbj0wO248dC5sZW5ndGg7bisrKWVbdFtuXV09ITA7cmV0dXJuIGV9dmFyIEZ0PWt0KFwiYXJlYSBiYXNlIGJyIGNvbCBjb21tYW5kIGVtYmVkIGhyIGltZyBpbnB1dCBrZXlnZW4gbGluayBtZXRhIHBhcmFtIHNvdXJjZSB0cmFjayB3YnJcIi5zcGxpdChcIiBcIikpLFJ0PWt0KFwic3R5bGUgc2NyaXB0IHhtcCBpZnJhbWUgbm9lbWJlZCBub2ZyYW1lcyBwbGFpbnRleHQgbm9zY3JpcHRcIi5zcGxpdChcIiBcIikpO2Z1bmN0aW9uIFZ0KHQsZSl7XCJ0ZW1wbGF0ZVwiPT09dC5sb2NhbE5hbWUmJih0PXQuY29udGVudCk7Zm9yKHZhciBuPVwiXCIsbz1lP2UodCk6dC5jaGlsZE5vZGVzLGk9MCxyPW8ubGVuZ3RoLGE9dm9pZCAwO2k8ciYmKGE9b1tpXSk7aSsrKXt0Ont2YXIgcz1hLGw9dCxjPWU7c3dpdGNoKHMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Zm9yKHZhciB1LGg9XCI8XCIrKGw9cy5sb2NhbE5hbWUpLGQ9cy5hdHRyaWJ1dGVzLGY9MDt1PWRbZl07ZisrKWgrPVwiIFwiK3UubmFtZSsnPVwiJyt1LnZhbHVlLnJlcGxhY2UoQXQsanQpKydcIic7aCs9XCI+XCIscz1GdFtsXT9oOmgrVnQocyxjKStcIjwvXCIrbCtcIj5cIjticmVhayB0O2Nhc2UgTm9kZS5URVhUX05PREU6cz1zLmRhdGEscz1sJiZSdFtsLmxvY2FsTmFtZV0/czpzLnJlcGxhY2UoUHQsanQpO2JyZWFrIHQ7Y2FzZSBOb2RlLkNPTU1FTlRfTk9ERTpzPVwiXFx4M2MhLS1cIitzLmRhdGErXCItLVxceDNlXCI7YnJlYWsgdDtkZWZhdWx0OnRocm93IHdpbmRvdy5jb25zb2xlLmVycm9yKHMpLEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpfX1uKz1zfXJldHVybiBufXZhciBJdD1hdC5CLEh0PXtxdWVyeVNlbGVjdG9yOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9fc2hhZHlfbmF0aXZlX3F1ZXJ5U2VsZWN0b3IodCl9LHF1ZXJ5U2VsZWN0b3JBbGw6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfcXVlcnlTZWxlY3RvckFsbCh0KX19LFV0PXt9O2Z1bmN0aW9uIEJ0KHQpe1V0W3RdPWZ1bmN0aW9uKGUpe3JldHVybiBlW1wiX19zaGFkeV9uYXRpdmVfXCIrdF19fWZ1bmN0aW9uIHp0KHQsZSl7Zm9yKHZhciBuIGluIE50KHQsZSxcIl9fc2hhZHlfbmF0aXZlX1wiKSxlKUJ0KG4pfWZ1bmN0aW9uIHF0KHQsZSl7ZT12b2lkIDA9PT1lP1tdOmU7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl0saT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyk7aSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19zaGFkeV9uYXRpdmVfXCIrbyxpKSxpLnZhbHVlP0h0W29dfHwoSHRbb109aS52YWx1ZSk6QnQobykpfX12YXIgV3Q9ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihkb2N1bWVudCxOb2RlRmlsdGVyLlNIT1dfQUxMLG51bGwsITEpLEd0PWRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZG9jdW1lbnQsTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsbnVsbCwhMSksWnQ9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiaW5lcnRcIik7ZnVuY3Rpb24gWXQodCl7Zm9yKHZhciBlO2U9dC5fX3NoYWR5X25hdGl2ZV9maXJzdENoaWxkOyl0Ll9fc2hhZHlfbmF0aXZlX3JlbW92ZUNoaWxkKGUpfXZhciBYdD1bXCJmaXJzdEVsZW1lbnRDaGlsZFwiLFwibGFzdEVsZW1lbnRDaGlsZFwiLFwiY2hpbGRyZW5cIixcImNoaWxkRWxlbWVudENvdW50XCJdLEp0PVtcInF1ZXJ5U2VsZWN0b3JcIixcInF1ZXJ5U2VsZWN0b3JBbGxcIl07dmFyIEt0PVN0KHtnZXQgY2hpbGROb2Rlcygpe3JldHVybiB0aGlzLl9fc2hhZHlfY2hpbGROb2Rlc30sZ2V0IGZpcnN0Q2hpbGQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2ZpcnN0Q2hpbGR9LGdldCBsYXN0Q2hpbGQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2xhc3RDaGlsZH0sZ2V0IGNoaWxkRWxlbWVudENvdW50KCl7cmV0dXJuIHRoaXMuX19zaGFkeV9jaGlsZEVsZW1lbnRDb3VudH0sZ2V0IGNoaWxkcmVuKCl7cmV0dXJuIHRoaXMuX19zaGFkeV9jaGlsZHJlbn0sZ2V0IGZpcnN0RWxlbWVudENoaWxkKCl7cmV0dXJuIHRoaXMuX19zaGFkeV9maXJzdEVsZW1lbnRDaGlsZH0sZ2V0IGxhc3RFbGVtZW50Q2hpbGQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2xhc3RFbGVtZW50Q2hpbGR9LGdldCBzaGFkb3dSb290KCl7cmV0dXJuIHRoaXMuX19zaGFkeV9zaGFkb3dSb290fX0pLCR0PVN0KHtnZXQgdGV4dENvbnRlbnQoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X3RleHRDb250ZW50fSxzZXQgdGV4dENvbnRlbnQodCl7dGhpcy5fX3NoYWR5X3RleHRDb250ZW50PXR9LGdldCBpbm5lckhUTUwoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X2lubmVySFRNTH0sc2V0IGlubmVySFRNTCh0KXtyZXR1cm4gdGhpcy5fX3NoYWR5X2lubmVySFRNTD10fX0pLFF0PVN0KHtnZXQgcGFyZW50RWxlbWVudCgpe3JldHVybiB0aGlzLl9fc2hhZHlfcGFyZW50RWxlbWVudH0sZ2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X3BhcmVudE5vZGV9LGdldCBuZXh0U2libGluZygpe3JldHVybiB0aGlzLl9fc2hhZHlfbmV4dFNpYmxpbmd9LGdldCBwcmV2aW91c1NpYmxpbmcoKXtyZXR1cm4gdGhpcy5fX3NoYWR5X3ByZXZpb3VzU2libGluZ30sZ2V0IG5leHRFbGVtZW50U2libGluZygpe3JldHVybiB0aGlzLl9fc2hhZHlfbmV4dEVsZW1lbnRTaWJsaW5nfSxnZXQgcHJldmlvdXNFbGVtZW50U2libGluZygpe3JldHVybiB0aGlzLl9fc2hhZHlfcHJldmlvdXNFbGVtZW50U2libGluZ30sZ2V0IGNsYXNzTmFtZSgpe3JldHVybiB0aGlzLl9fc2hhZHlfY2xhc3NOYW1lfSxzZXQgY2xhc3NOYW1lKHQpe3JldHVybiB0aGlzLl9fc2hhZHlfY2xhc3NOYW1lPXR9fSk7ZnVuY3Rpb24gdGUodCl7Zm9yKHZhciBlIGluIHQpe3ZhciBuPXRbZV07biYmKG4uZW51bWVyYWJsZT0hMSl9fXRlKEt0KSx0ZSgkdCksdGUoUXQpO3ZhciBlZSxuZT1hdC5CfHwhMD09PWF0LkQsb2U9bmU/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKHQpe3ZhciBlPWl0KHQpO2UuS2F8fChlLkthPSEwLEN0KHQsUXQpKX0saWU9bmU/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKHQpe3ZhciBlPWl0KHQpO2UuSmF8fChlLkphPSEwLEN0KHQsS3QpLHdpbmRvdy5jdXN0b21FbGVtZW50cyYmd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2smJiFhdC5EfHxDdCh0LCR0KSl9LHJlPVwiX19ldmVudFdyYXBwZXJzXCIrRGF0ZS5ub3coKSxhZT0oZWU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFdmVudC5wcm90b3R5cGUsXCJjb21wb3NlZFwiKSk/ZnVuY3Rpb24odCl7cmV0dXJuIGVlLmdldC5jYWxsKHQpfTpudWxsLHNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe312YXIgZT0hMSxuPXtnZXQgY2FwdHVyZSgpe3JldHVybiBlPSEwLCExfX07cmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLHQsbiksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsdCxuKSxlfSgpO2Z1bmN0aW9uIGxlKHQpe2lmKHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0KXZhciBlPSEhdC5jYXB0dXJlLG49ISF0Lm9uY2Usbz0hIXQucGFzc2l2ZSxpPXQuTztlbHNlIGU9ISF0LG89bj0hMTtyZXR1cm57R2E6aSxjYXB0dXJlOmUsb25jZTpuLHBhc3NpdmU6byxGYTpzZT90OmV9fXZhciBjZT17Ymx1cjohMCxmb2N1czohMCxmb2N1c2luOiEwLGZvY3Vzb3V0OiEwLGNsaWNrOiEwLGRibGNsaWNrOiEwLG1vdXNlZG93bjohMCxtb3VzZWVudGVyOiEwLG1vdXNlbGVhdmU6ITAsbW91c2Vtb3ZlOiEwLG1vdXNlb3V0OiEwLG1vdXNlb3ZlcjohMCxtb3VzZXVwOiEwLHdoZWVsOiEwLGJlZm9yZWlucHV0OiEwLGlucHV0OiEwLGtleWRvd246ITAsa2V5dXA6ITAsY29tcG9zaXRpb25zdGFydDohMCxjb21wb3NpdGlvbnVwZGF0ZTohMCxjb21wb3NpdGlvbmVuZDohMCx0b3VjaHN0YXJ0OiEwLHRvdWNoZW5kOiEwLHRvdWNobW92ZTohMCx0b3VjaGNhbmNlbDohMCxwb2ludGVyb3ZlcjohMCxwb2ludGVyZW50ZXI6ITAscG9pbnRlcmRvd246ITAscG9pbnRlcm1vdmU6ITAscG9pbnRlcnVwOiEwLHBvaW50ZXJjYW5jZWw6ITAscG9pbnRlcm91dDohMCxwb2ludGVybGVhdmU6ITAsZ290cG9pbnRlcmNhcHR1cmU6ITAsbG9zdHBvaW50ZXJjYXB0dXJlOiEwLGRyYWdzdGFydDohMCxkcmFnOiEwLGRyYWdlbnRlcjohMCxkcmFnbGVhdmU6ITAsZHJhZ292ZXI6ITAsZHJvcDohMCxkcmFnZW5kOiEwLERPTUFjdGl2YXRlOiEwLERPTUZvY3VzSW46ITAsRE9NRm9jdXNPdXQ6ITAsa2V5cHJlc3M6ITB9LHVlPXtET01BdHRyTW9kaWZpZWQ6ITAsRE9NQXR0cmlidXRlTmFtZUNoYW5nZWQ6ITAsRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkOiEwLERPTUVsZW1lbnROYW1lQ2hhbmdlZDohMCxET01Ob2RlSW5zZXJ0ZWQ6ITAsRE9NTm9kZUluc2VydGVkSW50b0RvY3VtZW50OiEwLERPTU5vZGVSZW1vdmVkOiEwLERPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50OiEwLERPTVN1YnRyZWVNb2RpZmllZDohMH07ZnVuY3Rpb24gaGUodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBOb2RlP3QuX19zaGFkeV9nZXRSb290Tm9kZSgpOnR9ZnVuY3Rpb24gZGUodCxlKXt2YXIgbj1bXSxvPXQ7Zm9yKHQ9aGUodCk7bzspbi5wdXNoKG8pLG89by5fX3NoYWR5X2Fzc2lnbmVkU2xvdD9vLl9fc2hhZHlfYXNzaWduZWRTbG90Om8ubm9kZVR5cGU9PT1Ob2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUmJm8uaG9zdCYmKGV8fG8hPT10KT9vLmhvc3Q6by5fX3NoYWR5X3BhcmVudE5vZGU7cmV0dXJuIG5bbi5sZW5ndGgtMV09PT1kb2N1bWVudCYmbi5wdXNoKHdpbmRvdyksbn1mdW5jdGlvbiBmZSh0LGUpe2lmKCFjdClyZXR1cm4gdDt0PWRlKHQsITApO2Zvcih2YXIgbixvLGk9MCxyPXZvaWQgMCxhPXZvaWQgMDtpPGUubGVuZ3RoO2krKylpZigobz1oZShuPWVbaV0pKSE9PXImJihhPXQuaW5kZXhPZihvKSxyPW8pLCFjdChvKXx8LTE8YSlyZXR1cm4gbn1mdW5jdGlvbiBwZSh0KXtmdW5jdGlvbiBlKGUsbil7cmV0dXJuKGU9bmV3IHQoZSxuKSkuX19jb21wb3NlZD1uJiYhIW4uY29tcG9zZWQsZX1yZXR1cm4gZS5fX3Byb3RvX189dCxlLnByb3RvdHlwZT10LnByb3RvdHlwZSxlfXZhciBfZT17Zm9jdXM6ITAsYmx1cjohMH07ZnVuY3Rpb24gbWUodCl7cmV0dXJuIHQuX190YXJnZXQhPT10LnRhcmdldHx8dC5fX3JlbGF0ZWRUYXJnZXQhPT10LnJlbGF0ZWRUYXJnZXR9ZnVuY3Rpb24gdmUodCxlLG4pe2lmKG49ZS5fX2hhbmRsZXJzJiZlLl9faGFuZGxlcnNbdC50eXBlXSYmZS5fX2hhbmRsZXJzW3QudHlwZV1bbl0pZm9yKHZhciBvLGk9MDsobz1uW2ldKSYmKCFtZSh0KXx8dC50YXJnZXQhPT10LnJlbGF0ZWRUYXJnZXQpJiYoby5jYWxsKGUsdCksIXQuX19pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpO2krKyk7fWZ1bmN0aW9uIHllKHQpe3ZhciBlPXQuY29tcG9zZWRQYXRoKCksbj1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGZlKHQsZSl9KSksbz10LmJ1YmJsZXM7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJjdXJyZW50VGFyZ2V0XCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfX0pO3ZhciBpPUV2ZW50LkNBUFRVUklOR19QSEFTRTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImV2ZW50UGhhc2VcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9fSk7Zm9yKHZhciByPWUubGVuZ3RoLTE7MDw9cjtyLS0pe3ZhciBhPWVbcl07aWYoaT1hPT09bltyXT9FdmVudC5BVF9UQVJHRVQ6RXZlbnQuQ0FQVFVSSU5HX1BIQVNFLHZlKHQsYSxcImNhcHR1cmVcIiksdC5tYSlyZXR1cm59Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIHM9KGE9ZVtyXSk9PT1uW3JdO2lmKChzfHxvKSYmKGk9cz9FdmVudC5BVF9UQVJHRVQ6RXZlbnQuQlVCQkxJTkdfUEhBU0UsdmUodCxhLFwiYnViYmxlXCIpLHQubWEpKXJldHVybn1pPTAsYT1udWxsfWZ1bmN0aW9uIGdlKHQsZSxuLG8saSxyKXtmb3IodmFyIGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIHM9dFthXSxsPXMudHlwZSxjPXMuY2FwdHVyZSx1PXMub25jZSxoPXMucGFzc2l2ZTtpZihlPT09cy5ub2RlJiZuPT09bCYmbz09PWMmJmk9PT11JiZyPT09aClyZXR1cm4gYX1yZXR1cm4tMX1mdW5jdGlvbiBiZSh0KXtyZXR1cm4gRHQoKSwhYXQuYWEmJnRoaXMgaW5zdGFuY2VvZiBOb2RlJiYhdnQoZG9jdW1lbnQsdGhpcyk/KHQuX190YXJnZXR8fENlKHQsdGhpcykseWUodCkpOnRoaXMuX19zaGFkeV9uYXRpdmVfZGlzcGF0Y2hFdmVudCh0KX1mdW5jdGlvbiB3ZSh0LGUsbil7dmFyIG89bGUobiksaT1vLmNhcHR1cmUscj1vLm9uY2UsYT1vLnBhc3NpdmUscz1vLkdhO2lmKG89by5GYSxlKXt2YXIgbD10eXBlb2YgZTtpZigoXCJmdW5jdGlvblwiPT09bHx8XCJvYmplY3RcIj09PWwpJiYoXCJvYmplY3RcIiE9PWx8fGUuaGFuZGxlRXZlbnQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuaGFuZGxlRXZlbnQpKXtpZih1ZVt0XSlyZXR1cm4gdGhpcy5fX3NoYWR5X25hdGl2ZV9hZGRFdmVudExpc3RlbmVyKHQsZSxvKTt2YXIgYz1zfHx0aGlzO2lmKHM9ZVtyZV0pe2lmKC0xPGdlKHMsYyx0LGkscixhKSlyZXR1cm59ZWxzZSBlW3JlXT1bXTtzPWZ1bmN0aW9uKG8pe2lmKHImJnRoaXMuX19zaGFkeV9yZW1vdmVFdmVudExpc3RlbmVyKHQsZSxuKSxvLl9fdGFyZ2V0fHxDZShvKSxjIT09dGhpcyl7dmFyIGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLFwiY3VycmVudFRhcmdldFwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImN1cnJlbnRUYXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGNvbmZpZ3VyYWJsZTohMH0pO3ZhciBzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxcImV2ZW50UGhhc2VcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJldmVudFBoYXNlXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpP0V2ZW50LkNBUFRVUklOR19QSEFTRTpFdmVudC5CVUJCTElOR19QSEFTRX19KX1pZihvLl9fcHJldmlvdXNDdXJyZW50VGFyZ2V0PW8uY3VycmVudFRhcmdldCwoIWN0KGMpJiZcInNsb3RcIiE9PWMubG9jYWxOYW1lfHwtMSE9by5jb21wb3NlZFBhdGgoKS5pbmRleE9mKGMpKSYmKG8uY29tcG9zZWR8fC0xPG8uY29tcG9zZWRQYXRoKCkuaW5kZXhPZihjKSkpaWYobWUobykmJm8udGFyZ2V0PT09by5yZWxhdGVkVGFyZ2V0KW8uZXZlbnRQaGFzZT09PUV2ZW50LkJVQkJMSU5HX1BIQVNFJiZvLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO2Vsc2UgaWYoby5ldmVudFBoYXNlPT09RXZlbnQuQ0FQVFVSSU5HX1BIQVNFfHxvLmJ1YmJsZXN8fG8udGFyZ2V0PT09Y3x8YyBpbnN0YW5jZW9mIFdpbmRvdyl7dmFyIHU9XCJmdW5jdGlvblwiPT09bD9lLmNhbGwoYyxvKTplLmhhbmRsZUV2ZW50JiZlLmhhbmRsZUV2ZW50KG8pO3JldHVybiBjIT09dGhpcyYmKGE/KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiY3VycmVudFRhcmdldFwiLGEpLGE9bnVsbCk6ZGVsZXRlIG8uY3VycmVudFRhcmdldCxzPyhPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImV2ZW50UGhhc2VcIixzKSxzPW51bGwpOmRlbGV0ZSBvLmV2ZW50UGhhc2UpLHV9fSxlW3JlXS5wdXNoKHtub2RlOmMsdHlwZTp0LGNhcHR1cmU6aSxvbmNlOnIscGFzc2l2ZTphLGxiOnN9KSx0aGlzLl9faGFuZGxlcnM9dGhpcy5fX2hhbmRsZXJzfHx7fSx0aGlzLl9faGFuZGxlcnNbdF09dGhpcy5fX2hhbmRsZXJzW3RdfHx7Y2FwdHVyZTpbXSxidWJibGU6W119LHRoaXMuX19oYW5kbGVyc1t0XVtpP1wiY2FwdHVyZVwiOlwiYnViYmxlXCJdLnB1c2gocyksX2VbdF18fHRoaXMuX19zaGFkeV9uYXRpdmVfYWRkRXZlbnRMaXN0ZW5lcih0LHMsbyl9fX1mdW5jdGlvbiBFZSh0LGUsbil7aWYoZSl7dmFyIG89bGUobik7bj1vLmNhcHR1cmU7dmFyIGk9by5vbmNlLHI9by5wYXNzaXZlLGE9by5HYTtpZihvPW8uRmEsdWVbdF0pcmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfcmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGUsbyk7dmFyIHM9YXx8dGhpczthPXZvaWQgMDt2YXIgbD1udWxsO3RyeXtsPWVbcmVdfWNhdGNoKHQpe31sJiYoLTE8KGk9Z2UobCxzLHQsbixpLHIpKSYmKGE9bC5zcGxpY2UoaSwxKVswXS5sYixsLmxlbmd0aHx8KGVbcmVdPXZvaWQgMCkpKSx0aGlzLl9fc2hhZHlfbmF0aXZlX3JlbW92ZUV2ZW50TGlzdGVuZXIodCxhfHxlLG8pLGEmJnRoaXMuX19oYW5kbGVycyYmdGhpcy5fX2hhbmRsZXJzW3RdJiYoLTE8KGU9KHQ9dGhpcy5fX2hhbmRsZXJzW3RdW24/XCJjYXB0dXJlXCI6XCJidWJibGVcIl0pLmluZGV4T2YoYSkpJiZ0LnNwbGljZShlLDEpKX19dmFyIE5lPVN0KHtnZXQgY29tcG9zZWQoKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fX2NvbXBvc2VkJiYoYWU/dGhpcy5fX2NvbXBvc2VkPVwiZm9jdXNpblwiPT09dGhpcy50eXBlfHxcImZvY3Vzb3V0XCI9PT10aGlzLnR5cGV8fGFlKHRoaXMpOiExIT09dGhpcy5pc1RydXN0ZWQmJih0aGlzLl9fY29tcG9zZWQ9Y2VbdGhpcy50eXBlXSkpLHRoaXMuX19jb21wb3NlZHx8ITF9LGNvbXBvc2VkUGF0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fY29tcG9zZWRQYXRofHwodGhpcy5fX2NvbXBvc2VkUGF0aD1kZSh0aGlzLl9fdGFyZ2V0LHRoaXMuY29tcG9zZWQpKSx0aGlzLl9fY29tcG9zZWRQYXRofSxnZXQgdGFyZ2V0KCl7cmV0dXJuIGZlKHRoaXMuY3VycmVudFRhcmdldHx8dGhpcy5fX3ByZXZpb3VzQ3VycmVudFRhcmdldCx0aGlzLmNvbXBvc2VkUGF0aCgpKX0sZ2V0IHJlbGF0ZWRUYXJnZXQoKXtyZXR1cm4gdGhpcy5fX3JlbGF0ZWRUYXJnZXQ/KHRoaXMuX19yZWxhdGVkVGFyZ2V0Q29tcG9zZWRQYXRofHwodGhpcy5fX3JlbGF0ZWRUYXJnZXRDb21wb3NlZFBhdGg9ZGUodGhpcy5fX3JlbGF0ZWRUYXJnZXQsITApKSxmZSh0aGlzLmN1cnJlbnRUYXJnZXR8fHRoaXMuX19wcmV2aW91c0N1cnJlbnRUYXJnZXQsdGhpcy5fX3JlbGF0ZWRUYXJnZXRDb21wb3NlZFBhdGgpKTpudWxsfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXtFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyksdGhpcy5tYT0hMH0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7RXZlbnQucHJvdG90eXBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKHRoaXMpLHRoaXMubWE9dGhpcy5fX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMH19KTtmdW5jdGlvbiBDZSh0LGUpe2lmKGU9dm9pZCAwPT09ZT90LnRhcmdldDplLHQuX190YXJnZXQ9ZSx0Ll9fcmVsYXRlZFRhcmdldD10LnJlbGF0ZWRUYXJnZXQsYXQuQil7aWYoIShlPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuaGFzT3duUHJvcGVydHkoXCJfX3NoYWR5X3BhdGNoZWRQcm90b1wiKSl7dmFyIG49T2JqZWN0LmNyZWF0ZShlKTtuLl9fc2hhZHlfc291cmNlUHJvdG89ZSxOdChuLE5lKSxlLl9fc2hhZHlfcGF0Y2hlZFByb3RvPW59dC5fX3Byb3RvX189ZS5fX3NoYWR5X3BhdGNoZWRQcm90b31lbHNlIE50KHQsTmUpfXZhciBTZT1wZShFdmVudCksVGU9cGUoQ3VzdG9tRXZlbnQpLE9lPXBlKE1vdXNlRXZlbnQpO3ZhciB4ZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhFbGVtZW50LnByb3RvdHlwZSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cIm9uXCI9PT10LnN1YnN0cmluZygwLDIpfSkpLE1lPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEhUTUxFbGVtZW50LnByb3RvdHlwZSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cIm9uXCI9PT10LnN1YnN0cmluZygwLDIpfSkpO2Z1bmN0aW9uIERlKHQpe3JldHVybntzZXQ6ZnVuY3Rpb24oZSl7dmFyIG49aXQodGhpcyksbz10LnN1YnN0cmluZygyKTtuLk58fChuLk49e30pLG4uTlt0XSYmdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8sbi5OW3RdKSx0aGlzLl9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lcihvLGUpLG4uTlt0XT1lfSxnZXQ6ZnVuY3Rpb24oKXt2YXIgZT1ydCh0aGlzKTtyZXR1cm4gZSYmZS5OJiZlLk5bdF19LGNvbmZpZ3VyYWJsZTohMH19ZnVuY3Rpb24gTGUodCxlKXtyZXR1cm57aW5kZXg6dCxiYTpbXSxpYTplfX1mdW5jdGlvbiBBZSh0LGUsbixvKXt2YXIgaT0wLHI9MCxhPTAscz0wLGw9TWF0aC5taW4oZS1pLG8tcik7aWYoMD09aSYmMD09cil0Ontmb3IoYT0wO2E8bDthKyspaWYodFthXSE9PW5bYV0pYnJlYWsgdDthPWx9aWYoZT09dC5sZW5ndGgmJm89PW4ubGVuZ3RoKXtzPXQubGVuZ3RoO2Zvcih2YXIgYz1uLmxlbmd0aCx1PTA7dTxsLWEmJlBlKHRbLS1zXSxuWy0tY10pOyl1Kys7cz11fWlmKHIrPWEsby09cywwPT0oZS09cyktKGkrPWEpJiYwPT1vLXIpcmV0dXJuW107aWYoaT09ZSl7Zm9yKGU9TGUoaSwwKTtyPG87KWUuYmEucHVzaChuW3IrK10pO3JldHVybltlXX1pZihyPT1vKXJldHVybltMZShpLGUtaSldO2ZvcihvPW8tKGE9cikrMSxzPWUtKGw9aSkrMSxlPUFycmF5KG8pLGM9MDtjPG87YysrKWVbY109QXJyYXkocyksZVtjXVswXT1jO2ZvcihjPTA7YzxzO2MrKyllWzBdW2NdPWM7Zm9yKGM9MTtjPG87YysrKWZvcih1PTE7dTxzO3UrKylpZih0W2wrdS0xXT09PW5bYStjLTFdKWVbY11bdV09ZVtjLTFdW3UtMV07ZWxzZXt2YXIgaD1lW2MtMV1bdV0rMSxkPWVbY11bdS0xXSsxO2VbY11bdV09aDxkP2g6ZH1mb3IobD1lLmxlbmd0aC0xLGE9ZVswXS5sZW5ndGgtMSxvPWVbbF1bYV0sdD1bXTswPGx8fDA8YTspMD09bD8odC5wdXNoKDIpLGEtLSk6MD09YT8odC5wdXNoKDMpLGwtLSk6KHM9ZVtsLTFdW2EtMV0sKGg9KGM9ZVtsLTFdW2FdKTwodT1lW2xdW2EtMV0pP2M8cz9jOnM6dTxzP3U6cyk9PXM/KHM9PW8/dC5wdXNoKDApOih0LnB1c2goMSksbz1zKSxsLS0sYS0tKTpoPT1jPyh0LnB1c2goMyksbC0tLG89Yyk6KHQucHVzaCgyKSxhLS0sbz11KSk7Zm9yKHQucmV2ZXJzZSgpLGU9dm9pZCAwLGw9W10sYT0wO2E8dC5sZW5ndGg7YSsrKXN3aXRjaCh0W2FdKXtjYXNlIDA6ZSYmKGwucHVzaChlKSxlPXZvaWQgMCksaSsrLHIrKzticmVhaztjYXNlIDE6ZXx8KGU9TGUoaSwwKSksZS5pYSsrLGkrKyxlLmJhLnB1c2gobltyXSkscisrO2JyZWFrO2Nhc2UgMjplfHwoZT1MZShpLDApKSxlLmlhKyssaSsrO2JyZWFrO2Nhc2UgMzplfHwoZT1MZShpLDApKSxlLmJhLnB1c2gobltyXSkscisrfXJldHVybiBlJiZsLnB1c2goZSksbH1mdW5jdGlvbiBQZSh0LGUpe3JldHVybiB0PT09ZX12YXIgamU9U3Qoe2Rpc3BhdGNoRXZlbnQ6YmUsYWRkRXZlbnRMaXN0ZW5lcjp3ZSxyZW1vdmVFdmVudExpc3RlbmVyOkVlfSksa2U9bnVsbDtmdW5jdGlvbiBGZSgpe3JldHVybiBrZXx8KGtlPXdpbmRvdy5TaGFkeUNTUyYmd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltKSxrZXx8bnVsbH1mdW5jdGlvbiBSZSh0LGUsbil7dmFyIG89RmUoKTtyZXR1cm4hKCFvfHxcImNsYXNzXCIhPT1lKSYmKG8uc2V0RWxlbWVudENsYXNzKHQsbiksITApfWZ1bmN0aW9uIFZlKHQsZSl7dmFyIG49RmUoKTtuJiZuLnVuc2NvcGVOb2RlKHQsZSl9ZnVuY3Rpb24gSWUodCl7aWYodC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFKXJldHVyblwiXCI7dmFyIGU9RmUoKTtyZXR1cm4gZT9lLmN1cnJlbnRTY29wZUZvck5vZGUodCk6XCJcIn1mdW5jdGlvbiBIZSh0LGUpe2lmKHQpZm9yKHQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmZSh0KSx0PXQuX19zaGFkeV9maXJzdENoaWxkO3Q7dD10Ll9fc2hhZHlfbmV4dFNpYmxpbmcpdC5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZIZSh0LGUpfXZhciBVZT13aW5kb3cuZG9jdW1lbnQsQmU9YXQuYWEsemU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSxcImlzQ29ubmVjdGVkXCIpLHFlPXplJiZ6ZS5nZXQ7ZnVuY3Rpb24gV2UodCl7Zm9yKHZhciBlO2U9dC5fX3NoYWR5X2ZpcnN0Q2hpbGQ7KXQuX19zaGFkeV9yZW1vdmVDaGlsZChlKX1mdW5jdGlvbiBHZSh0LGUsbil7aWYodD0odD1ydCh0KSkmJnQuWil7aWYoZSlpZihlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKWZvcih2YXIgbz0wLGk9ZS5jaGlsZE5vZGVzLmxlbmd0aDtvPGk7bysrKXQuYWRkZWROb2Rlcy5wdXNoKGUuY2hpbGROb2Rlc1tvXSk7ZWxzZSB0LmFkZGVkTm9kZXMucHVzaChlKTtuJiZ0LnJlbW92ZWROb2Rlcy5wdXNoKG4pLGZ1bmN0aW9uKHQpe3QuYXx8KHQuYT0hMCxtdCgoZnVuY3Rpb24oKXt0LmZsdXNoKCl9KSkpfSh0KX19dmFyIFplPVN0KHtnZXQgcGFyZW50Tm9kZSgpe3ZhciB0PXJ0KHRoaXMpO3JldHVybiB2b2lkIDAhPT0odD10JiZ0LnBhcmVudE5vZGUpP3Q6dGhpcy5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlfSxnZXQgZmlyc3RDaGlsZCgpe3ZhciB0PXJ0KHRoaXMpO3JldHVybiB2b2lkIDAhPT0odD10JiZ0LmZpcnN0Q2hpbGQpP3Q6dGhpcy5fX3NoYWR5X25hdGl2ZV9maXJzdENoaWxkfSxnZXQgbGFzdENoaWxkKCl7dmFyIHQ9cnQodGhpcyk7cmV0dXJuIHZvaWQgMCE9PSh0PXQmJnQubGFzdENoaWxkKT90OnRoaXMuX19zaGFkeV9uYXRpdmVfbGFzdENoaWxkfSxnZXQgbmV4dFNpYmxpbmcoKXt2YXIgdD1ydCh0aGlzKTtyZXR1cm4gdm9pZCAwIT09KHQ9dCYmdC5uZXh0U2libGluZyk/dDp0aGlzLl9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nfSxnZXQgcHJldmlvdXNTaWJsaW5nKCl7dmFyIHQ9cnQodGhpcyk7cmV0dXJuIHZvaWQgMCE9PSh0PXQmJnQucHJldmlvdXNTaWJsaW5nKT90OnRoaXMuX19zaGFkeV9uYXRpdmVfcHJldmlvdXNTaWJsaW5nfSxnZXQgY2hpbGROb2Rlcygpe2lmKGx0KHRoaXMpKXt2YXIgdD1ydCh0aGlzKTtpZighdC5jaGlsZE5vZGVzKXt0LmNoaWxkTm9kZXM9W107Zm9yKHZhciBlPXRoaXMuX19zaGFkeV9maXJzdENoaWxkO2U7ZT1lLl9fc2hhZHlfbmV4dFNpYmxpbmcpdC5jaGlsZE5vZGVzLnB1c2goZSl9dmFyIG49dC5jaGlsZE5vZGVzfWVsc2Ugbj10aGlzLl9fc2hhZHlfbmF0aXZlX2NoaWxkTm9kZXM7cmV0dXJuIG4uaXRlbT1mdW5jdGlvbih0KXtyZXR1cm4gblt0XX0sbn0sZ2V0IHBhcmVudEVsZW1lbnQoKXt2YXIgdD1ydCh0aGlzKTtyZXR1cm4odD10JiZ0LnBhcmVudE5vZGUpJiZ0Lm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREUmJih0PW51bGwpLHZvaWQgMCE9PXQ/dDp0aGlzLl9fc2hhZHlfbmF0aXZlX3BhcmVudEVsZW1lbnR9LGdldCBpc0Nvbm5lY3RlZCgpe2lmKHFlJiZxZS5jYWxsKHRoaXMpKXJldHVybiEwO2lmKHRoaXMubm9kZVR5cGU9PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSlyZXR1cm4hMTt2YXIgdD10aGlzLm93bmVyRG9jdW1lbnQ7aWYobnVsbD09PXR8fHZ0KHQsdGhpcykpcmV0dXJuITA7Zm9yKHQ9dGhpczt0JiYhKHQgaW5zdGFuY2VvZiBEb2N1bWVudCk7KXQ9dC5fX3NoYWR5X3BhcmVudE5vZGV8fChjdCh0KT90Lmhvc3Q6dm9pZCAwKTtyZXR1cm4hISh0JiZ0IGluc3RhbmNlb2YgRG9jdW1lbnQpfSxnZXQgdGV4dENvbnRlbnQoKXtpZihsdCh0aGlzKSl7Zm9yKHZhciB0PVtdLGU9dGhpcy5fX3NoYWR5X2ZpcnN0Q2hpbGQ7ZTtlPWUuX19zaGFkeV9uZXh0U2libGluZyllLm5vZGVUeXBlIT09Tm9kZS5DT01NRU5UX05PREUmJnQucHVzaChlLl9fc2hhZHlfdGV4dENvbnRlbnQpO3JldHVybiB0LmpvaW4oXCJcIil9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfdGV4dENvbnRlbnR9LHNldCB0ZXh0Q29udGVudCh0KXtzd2l0Y2gobnVsbD09dCYmKHQ9XCJcIiksdGhpcy5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTppZighbHQodGhpcykmJmF0LkIpe3ZhciBlPXRoaXMuX19zaGFkeV9maXJzdENoaWxkOyhlIT10aGlzLl9fc2hhZHlfbGFzdENoaWxkfHxlJiZlLm5vZGVUeXBlIT1Ob2RlLlRFWFRfTk9ERSkmJldlKHRoaXMpLHRoaXMuX19zaGFkeV9uYXRpdmVfdGV4dENvbnRlbnQ9dH1lbHNlIFdlKHRoaXMpLCgwPHQubGVuZ3RofHx0aGlzLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpJiZ0aGlzLl9fc2hhZHlfaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpKTticmVhaztkZWZhdWx0OnRoaXMubm9kZVZhbHVlPXR9fSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24odCxlKXtpZih0aGlzLm93bmVyRG9jdW1lbnQhPT1VZSYmdC5vd25lckRvY3VtZW50IT09VWUpcmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlKHQsZSksdDtpZih0PT09dGhpcyl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdhcHBlbmRDaGlsZCcgb24gJ05vZGUnOiBUaGUgbmV3IGNoaWxkIGVsZW1lbnQgY29udGFpbnMgdGhlIHBhcmVudC5cIik7aWYoZSl7dmFyIG49cnQoZSk7aWYodm9pZCAwIT09KG49biYmbi5wYXJlbnROb2RlKSYmbiE9PXRoaXN8fHZvaWQgMD09PW4mJmUuX19zaGFkeV9uYXRpdmVfcGFyZW50Tm9kZSE9PXRoaXMpdGhyb3cgRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnaW5zZXJ0QmVmb3JlJyBvbiAnTm9kZSc6IFRoZSBub2RlIGJlZm9yZSB3aGljaCB0aGUgbmV3IG5vZGUgaXMgdG8gYmUgaW5zZXJ0ZWQgaXMgbm90IGEgY2hpbGQgb2YgdGhpcyBub2RlLlwiKX1pZihlPT09dClyZXR1cm4gdDtHZSh0aGlzLHQpO3ZhciBvPVtdLGk9KG49V24odGhpcykpP24uaG9zdC5sb2NhbE5hbWU6SWUodGhpcykscj10Ll9fc2hhZHlfcGFyZW50Tm9kZTtpZihyKXt2YXIgYT1JZSh0KSxzPSEhbnx8IVduKHQpfHxCZSYmdm9pZCAwIT09dGhpcy5fX25vSW5zZXJ0aW9uUG9pbnQ7ci5fX3NoYWR5X3JlbW92ZUNoaWxkKHQscyl9cj0hMDt2YXIgbD0oIUJlfHx2b2lkIDA9PT10Ll9fbm9JbnNlcnRpb25Qb2ludCYmdm9pZCAwPT09dGhpcy5fX25vSW5zZXJ0aW9uUG9pbnQpJiYhZnVuY3Rpb24gdChlLG4pe3ZhciBvPUZlKCk7aWYoIW8pcmV0dXJuITA7aWYoZS5ub2RlVHlwZT09PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7Zm9yKG89ITAsZT1lLl9fc2hhZHlfZmlyc3RDaGlsZDtlO2U9ZS5fX3NoYWR5X25leHRTaWJsaW5nKW89byYmdChlLG4pO3JldHVybiBvfXJldHVybiBlLm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREV8fG8uY3VycmVudFNjb3BlRm9yTm9kZShlKT09PW59KHQsaSksYz1uJiYhdC5fX25vSW5zZXJ0aW9uUG9pbnQmJighQmV8fHQubm9kZVR5cGU9PT1Ob2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpO3JldHVybihjfHxsKSYmKGwmJihhPWF8fEllKHQpKSxIZSh0LChmdW5jdGlvbih0KXtpZihjJiZcInNsb3RcIj09PXQubG9jYWxOYW1lJiZvLnB1c2godCksbCl7dmFyIGU9YTtGZSgpJiYoZSYmVmUodCxlKSwoZT1GZSgpKSYmZS5zY29wZU5vZGUodCxpKSl9fSkpKSxvLmxlbmd0aCYmKFJuKG4pLG4uYy5wdXNoLmFwcGx5KG4uYyxvIGluc3RhbmNlb2YgQXJyYXk/bzpmKGQobykpKSxBbihuKSksbHQodGhpcykmJihmdW5jdGlvbih0LGUsbil7d24oZSwyKTt2YXIgbz1pdChlKTtpZih2b2lkIDAhPT1vLmZpcnN0Q2hpbGQmJihvLmNoaWxkTm9kZXM9bnVsbCksdC5ub2RlVHlwZT09PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSlmb3IodD10Ll9fc2hhZHlfbmF0aXZlX2ZpcnN0Q2hpbGQ7dDt0PXQuX19zaGFkeV9uYXRpdmVfbmV4dFNpYmxpbmcpRW4odCxlLG8sbik7ZWxzZSBFbih0LGUsbyxuKX0odCx0aGlzLGUpLChzPXJ0KHRoaXMpKS5yb290PyhyPSExLHV0KHRoaXMpJiZBbihzLnJvb3QpKTpuJiZcInNsb3RcIj09PXRoaXMubG9jYWxOYW1lJiYocj0hMSxBbihuKSkpLHI/KG49Y3QodGhpcyk/dGhpcy5ob3N0OnRoaXMsZT8oZT1mdW5jdGlvbiB0KGUpe3ZhciBuPWU7aWYoZSYmXCJzbG90XCI9PT1lLmxvY2FsTmFtZSl7dmFyIG89cnQoZSk7KG89byYmby5WKSYmKG49by5sZW5ndGg/b1swXTp0KGUuX19zaGFkeV9uZXh0U2libGluZykpfXJldHVybiBufShlKSxuLl9fc2hhZHlfbmF0aXZlX2luc2VydEJlZm9yZSh0LGUpKTpuLl9fc2hhZHlfbmF0aXZlX2FwcGVuZENoaWxkKHQpKTp0Lm93bmVyRG9jdW1lbnQhPT10aGlzLm93bmVyRG9jdW1lbnQmJnRoaXMub3duZXJEb2N1bWVudC5hZG9wdE5vZGUodCksdH0sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24odCl7aWYodGhpcyE9dHx8IWN0KHQpKXJldHVybiB0aGlzLl9fc2hhZHlfaW5zZXJ0QmVmb3JlKHQpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbih0LGUpe2lmKGU9dm9pZCAwIT09ZSYmZSx0aGlzLm93bmVyRG9jdW1lbnQhPT1VZSlyZXR1cm4gdGhpcy5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZCh0KTtpZih0Ll9fc2hhZHlfcGFyZW50Tm9kZSE9PXRoaXMpdGhyb3cgRXJyb3IoXCJUaGUgbm9kZSB0byBiZSByZW1vdmVkIGlzIG5vdCBhIGNoaWxkIG9mIHRoaXMgbm9kZTogXCIrdCk7R2UodGhpcyxudWxsLHQpO3ZhciBuPVduKHQpLG89biYmZnVuY3Rpb24odCxlKXtpZih0LmEpe1ZuKHQpO3ZhciBuLG89dC5iO2ZvcihuIGluIG8pZm9yKHZhciBpPW9bbl0scj0wO3I8aS5sZW5ndGg7cisrKXt2YXIgYT1pW3JdO2lmKHl0KGUsYSkpe2kuc3BsaWNlKHIsMSk7dmFyIHM9dC5hLmluZGV4T2YoYSk7aWYoMDw9cyYmKHQuYS5zcGxpY2UocywxKSwocz1ydChhLl9fc2hhZHlfcGFyZW50Tm9kZSkpJiZzLmRhJiZzLmRhLS0pLHItLSxhPXJ0KGEpLHM9YS5WKWZvcih2YXIgbD0wO2w8cy5sZW5ndGg7bCsrKXt2YXIgYz1zW2xdLHU9Yy5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlO3UmJnUuX19zaGFkeV9uYXRpdmVfcmVtb3ZlQ2hpbGQoYyl9YS5WPVtdLGEuYXNzaWduZWROb2Rlcz1bXSxzPSEwfX1yZXR1cm4gc319KG4sdCksaT1ydCh0aGlzKTtpZihsdCh0aGlzKSYmKGZ1bmN0aW9uKHQsZSl7dmFyIG49aXQodCk7ZT1pdChlKSx0PT09ZS5maXJzdENoaWxkJiYoZS5maXJzdENoaWxkPW4ubmV4dFNpYmxpbmcpLHQ9PT1lLmxhc3RDaGlsZCYmKGUubGFzdENoaWxkPW4ucHJldmlvdXNTaWJsaW5nKSx0PW4ucHJldmlvdXNTaWJsaW5nO3ZhciBvPW4ubmV4dFNpYmxpbmc7dCYmKGl0KHQpLm5leHRTaWJsaW5nPW8pLG8mJihpdChvKS5wcmV2aW91c1NpYmxpbmc9dCksbi5wYXJlbnROb2RlPW4ucHJldmlvdXNTaWJsaW5nPW4ubmV4dFNpYmxpbmc9dm9pZCAwLHZvaWQgMCE9PWUuY2hpbGROb2RlcyYmKGUuY2hpbGROb2Rlcz1udWxsKX0odCx0aGlzKSx1dCh0aGlzKSkpe0FuKGkucm9vdCk7dmFyIHI9ITB9aWYoRmUoKSYmIWUmJm4mJnQubm9kZVR5cGUhPT1Ob2RlLlRFWFRfTk9ERSl7dmFyIGE9SWUodCk7SGUodCwoZnVuY3Rpb24odCl7VmUodCxhKX0pKX1yZXR1cm4gZnVuY3Rpb24gdChlKXt2YXIgbj1ydChlKTtpZihuJiZ2b2lkIDAhPT1uLmxhKWZvcihuPWUuX19zaGFkeV9maXJzdENoaWxkO247bj1uLl9fc2hhZHlfbmV4dFNpYmxpbmcpdChuKTsoZT1ydChlKSkmJihlLmxhPXZvaWQgMCl9KHQpLG4mJigoZT1cInNsb3RcIj09PXRoaXMubG9jYWxOYW1lKSYmKHI9ITApLChvfHxlKSYmQW4obikpLHJ8fChyPWN0KHRoaXMpP3RoaXMuaG9zdDp0aGlzLCghaS5yb290JiZcInNsb3RcIiE9PXQubG9jYWxOYW1lfHxyPT09dC5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlKSYmci5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZCh0KSksdH0scmVwbGFjZUNoaWxkOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX19zaGFkeV9pbnNlcnRCZWZvcmUodCxlKSx0aGlzLl9fc2hhZHlfcmVtb3ZlQ2hpbGQoZSksdH0sY2xvbmVOb2RlOmZ1bmN0aW9uKHQpe2lmKFwidGVtcGxhdGVcIj09dGhpcy5sb2NhbE5hbWUpcmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfY2xvbmVOb2RlKHQpO3ZhciBlPXRoaXMuX19zaGFkeV9uYXRpdmVfY2xvbmVOb2RlKCExKTtpZih0JiZlLm5vZGVUeXBlIT09Tm9kZS5BVFRSSUJVVEVfTk9ERSl7dD10aGlzLl9fc2hhZHlfZmlyc3RDaGlsZDtmb3IodmFyIG47dDt0PXQuX19zaGFkeV9uZXh0U2libGluZyluPXQuX19zaGFkeV9jbG9uZU5vZGUoITApLGUuX19zaGFkeV9hcHBlbmRDaGlsZChuKX1yZXR1cm4gZX0sZ2V0Um9vdE5vZGU6ZnVuY3Rpb24odCl7aWYodGhpcyYmdGhpcy5ub2RlVHlwZSl7dmFyIGU9aXQodGhpcyksbj1lLmxhO3JldHVybiB2b2lkIDA9PT1uJiYoY3QodGhpcyk/KG49dGhpcyxlLmxhPW4pOihuPShuPXRoaXMuX19zaGFkeV9wYXJlbnROb2RlKT9uLl9fc2hhZHlfZ2V0Um9vdE5vZGUodCk6dGhpcyxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuX19zaGFkeV9uYXRpdmVfY29udGFpbnModGhpcykmJihlLmxhPW4pKSksbn19LGNvbnRhaW5zOmZ1bmN0aW9uKHQpe3JldHVybiB5dCh0aGlzLHQpfX0pLFllPVN0KHtnZXQgYXNzaWduZWRTbG90KCl7dmFyIHQ9dGhpcy5fX3NoYWR5X3BhcmVudE5vZGU7cmV0dXJuKHQ9dCYmdC5fX3NoYWR5X3NoYWRvd1Jvb3QpJiZQbih0KSwodD1ydCh0aGlzKSkmJnQuYXNzaWduZWRTbG90fHxudWxsfX0pO2Z1bmN0aW9uIFhlKHQsZSxuKXt2YXIgbz1bXTtyZXR1cm4gZnVuY3Rpb24gdChlLG4sbyxpKXtmb3IoZT1lLl9fc2hhZHlfZmlyc3RDaGlsZDtlO2U9ZS5fX3NoYWR5X25leHRTaWJsaW5nKXt2YXIgcjtpZihyPWUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSl7dmFyIGE9bixzPW8sbD1pLGM9YShyPWUpO2MmJmwucHVzaChyKSxzJiZzKGMpP3I9YzoodChyLGEscyxsKSxyPXZvaWQgMCl9aWYocilicmVha319KHQsZSxuLG8pLG99dmFyIEplPVN0KHtnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKXt2YXIgdD1ydCh0aGlzKTtpZih0JiZ2b2lkIDAhPT10LmZpcnN0Q2hpbGQpe2Zvcih0PXRoaXMuX19zaGFkeV9maXJzdENoaWxkO3QmJnQubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERTspdD10Ll9fc2hhZHlfbmV4dFNpYmxpbmc7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfZmlyc3RFbGVtZW50Q2hpbGR9LGdldCBsYXN0RWxlbWVudENoaWxkKCl7dmFyIHQ9cnQodGhpcyk7aWYodCYmdm9pZCAwIT09dC5sYXN0Q2hpbGQpe2Zvcih0PXRoaXMuX19zaGFkeV9sYXN0Q2hpbGQ7dCYmdC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFOyl0PXQuX19zaGFkeV9wcmV2aW91c1NpYmxpbmc7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfbGFzdEVsZW1lbnRDaGlsZH0sZ2V0IGNoaWxkcmVuKCl7cmV0dXJuIGx0KHRoaXMpP2d0KEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh3dCh0aGlzKSwoZnVuY3Rpb24odCl7cmV0dXJuIHQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERX0pKSk6dGhpcy5fX3NoYWR5X25hdGl2ZV9jaGlsZHJlbn0sZ2V0IGNoaWxkRWxlbWVudENvdW50KCl7dmFyIHQ9dGhpcy5fX3NoYWR5X2NoaWxkcmVuO3JldHVybiB0P3QubGVuZ3RoOjB9fSksS2U9U3Qoe3F1ZXJ5U2VsZWN0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIFhlKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVybiBkdC5jYWxsKGUsdCl9KSwoZnVuY3Rpb24odCl7cmV0dXJuISF0fSkpWzBdfHxudWxsfSxxdWVyeVNlbGVjdG9yQWxsOmZ1bmN0aW9uKHQsZSl7aWYoZSl7ZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9fc2hhZHlfbmF0aXZlX3F1ZXJ5U2VsZWN0b3JBbGwodCkpO3ZhciBuPXRoaXMuX19zaGFkeV9nZXRSb290Tm9kZSgpO3JldHVybiBndChlLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuX19zaGFkeV9nZXRSb290Tm9kZSgpPT1ufSkpKX1yZXR1cm4gZ3QoWGUodGhpcywoZnVuY3Rpb24oZSl7cmV0dXJuIGR0LmNhbGwoZSx0KX0pKSl9fSksJGU9YXQuYWEmJiFhdC5EP1R0KHt9LEplKTpKZTtUdChKZSxLZSk7dmFyIFFlPXdpbmRvdy5kb2N1bWVudDtmdW5jdGlvbiB0bih0LGUpe2lmKFwic2xvdFwiPT09ZSl1dCh0PXQuX19zaGFkeV9wYXJlbnROb2RlKSYmQW4ocnQodCkucm9vdCk7ZWxzZSBpZihcInNsb3RcIj09PXQubG9jYWxOYW1lJiZcIm5hbWVcIj09PWUmJihlPVduKHQpKSl7aWYoZS5hKXtWbihlKTt2YXIgbj10LkxhLG89SW4odCk7aWYobyE9PW4pe3ZhciBpPShuPWUuYltuXSkuaW5kZXhPZih0KTswPD1pJiZuLnNwbGljZShpLDEpLChuPWUuYltvXXx8KGUuYltvXT1bXSkpLnB1c2godCksMTxuLmxlbmd0aCYmKGUuYltvXT1IbihuKSl9fUFuKGUpfX12YXIgZW49U3Qoe2dldCBwcmV2aW91c0VsZW1lbnRTaWJsaW5nKCl7dmFyIHQ9cnQodGhpcyk7aWYodCYmdm9pZCAwIT09dC5wcmV2aW91c1NpYmxpbmcpe2Zvcih0PXRoaXMuX19zaGFkeV9wcmV2aW91c1NpYmxpbmc7dCYmdC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFOyl0PXQuX19zaGFkeV9wcmV2aW91c1NpYmxpbmc7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX19zaGFkeV9uYXRpdmVfcHJldmlvdXNFbGVtZW50U2libGluZ30sZ2V0IG5leHRFbGVtZW50U2libGluZygpe3ZhciB0PXJ0KHRoaXMpO2lmKHQmJnZvaWQgMCE9PXQubmV4dFNpYmxpbmcpe2Zvcih0PXRoaXMuX19zaGFkeV9uZXh0U2libGluZzt0JiZ0Lm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREU7KXQ9dC5fX3NoYWR5X25leHRTaWJsaW5nO3JldHVybiB0fXJldHVybiB0aGlzLl9fc2hhZHlfbmF0aXZlX25leHRFbGVtZW50U2libGluZ30sZ2V0IHNsb3QoKXtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoXCJzbG90XCIpfSxzZXQgc2xvdCh0KXt0aGlzLl9fc2hhZHlfc2V0QXR0cmlidXRlKFwic2xvdFwiLHQpfSxnZXQgY2xhc3NOYW1lKCl7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCJ9LHNldCBjbGFzc05hbWUodCl7dGhpcy5fX3NoYWR5X3NldEF0dHJpYnV0ZShcImNsYXNzXCIsdCl9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbih0LGUpe3RoaXMub3duZXJEb2N1bWVudCE9PVFlP3RoaXMuX19zaGFkeV9uYXRpdmVfc2V0QXR0cmlidXRlKHQsZSk6UmUodGhpcyx0LGUpfHwodGhpcy5fX3NoYWR5X25hdGl2ZV9zZXRBdHRyaWJ1dGUodCxlKSx0bih0aGlzLHQpKX0scmVtb3ZlQXR0cmlidXRlOmZ1bmN0aW9uKHQpe3RoaXMub3duZXJEb2N1bWVudCE9PVFlP3RoaXMuX19zaGFkeV9uYXRpdmVfcmVtb3ZlQXR0cmlidXRlKHQpOlJlKHRoaXMsdCxcIlwiKT9cIlwiPT09dGhpcy5nZXRBdHRyaWJ1dGUodCkmJnRoaXMuX19zaGFkeV9uYXRpdmVfcmVtb3ZlQXR0cmlidXRlKHQpOih0aGlzLl9fc2hhZHlfbmF0aXZlX3JlbW92ZUF0dHJpYnV0ZSh0KSx0bih0aGlzLHQpKX19KTthdC5hYXx8eGUuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZW5bdF09RGUodCl9KSk7dmFyIG5uPVN0KHthdHRhY2hTaGFkb3c6ZnVuY3Rpb24odCl7aWYoIXRoaXMpdGhyb3cgRXJyb3IoXCJNdXN0IHByb3ZpZGUgYSBob3N0LlwiKTtpZighdCl0aHJvdyBFcnJvcihcIk5vdCBlbm91Z2ggYXJndW1lbnRzLlwiKTtpZih0LnNoYWR5VXBncmFkZUZyYWdtZW50JiYhYXQuSWEpe3ZhciBlPXQuc2hhZHlVcGdyYWRlRnJhZ21lbnQ7aWYoZS5fX3Byb3RvX189U2hhZG93Um9vdC5wcm90b3R5cGUsTG4oZSx0aGlzLHQpLE5uKGUsZSksdD1lLl9fbm9JbnNlcnRpb25Qb2ludD9udWxsOmUucXVlcnlTZWxlY3RvckFsbChcInNsb3RcIiksZS5fX25vSW5zZXJ0aW9uUG9pbnQ9dm9pZCAwLHQmJnQubGVuZ3RoKXt2YXIgbj1lO1JuKG4pLG4uYy5wdXNoLmFwcGx5KG4uYyx0IGluc3RhbmNlb2YgQXJyYXk/dDpmKGQodCkpKSxBbihlKX1lLmhvc3QuX19zaGFkeV9uYXRpdmVfYXBwZW5kQ2hpbGQoZSl9ZWxzZSBlPW5ldyBEbihPbix0aGlzLHQpO3JldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1lfSxnZXQgc2hhZG93Um9vdCgpe3ZhciB0PXJ0KHRoaXMpO3JldHVybiB0JiZ0LmJifHxudWxsfX0pO1R0KGVuLG5uKTt2YXIgb249ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiaW5lcnRcIikscm49U3Qoe2dldCBpbm5lckhUTUwoKXtyZXR1cm4gbHQodGhpcyk/VnQoXCJ0ZW1wbGF0ZVwiPT09dGhpcy5sb2NhbE5hbWU/dGhpcy5jb250ZW50OnRoaXMsd3QpOnRoaXMuX19zaGFkeV9uYXRpdmVfaW5uZXJIVE1MfSxzZXQgaW5uZXJIVE1MKHQpe2lmKFwidGVtcGxhdGVcIj09PXRoaXMubG9jYWxOYW1lKXRoaXMuX19zaGFkeV9uYXRpdmVfaW5uZXJIVE1MPXQ7ZWxzZXtXZSh0aGlzKTt2YXIgZT10aGlzLmxvY2FsTmFtZXx8XCJkaXZcIjtmb3IoZT10aGlzLm5hbWVzcGFjZVVSSSYmdGhpcy5uYW1lc3BhY2VVUkkhPT1vbi5uYW1lc3BhY2VVUkk/b24uY3JlYXRlRWxlbWVudE5TKHRoaXMubmFtZXNwYWNlVVJJLGUpOm9uLmNyZWF0ZUVsZW1lbnQoZSksYXQuQj9lLl9fc2hhZHlfbmF0aXZlX2lubmVySFRNTD10OmUuaW5uZXJIVE1MPXQ7dD1lLl9fc2hhZHlfZmlyc3RDaGlsZDspdGhpcy5fX3NoYWR5X2luc2VydEJlZm9yZSh0KX19fSksYW49U3Qoe2JsdXI6ZnVuY3Rpb24oKXt2YXIgdD1ydCh0aGlzKTsodD0odD10JiZ0LnJvb3QpJiZ0LmFjdGl2ZUVsZW1lbnQpP3QuX19zaGFkeV9ibHVyKCk6dGhpcy5fX3NoYWR5X25hdGl2ZV9ibHVyKCl9fSk7YXQuYWF8fE1lLmZvckVhY2goKGZ1bmN0aW9uKHQpe2FuW3RdPURlKHQpfSkpO3ZhciBzbj1TdCh7YXNzaWduZWROb2RlczpmdW5jdGlvbih0KXtpZihcInNsb3RcIj09PXRoaXMubG9jYWxOYW1lKXt2YXIgZT10aGlzLl9fc2hhZHlfZ2V0Um9vdE5vZGUoKTtyZXR1cm4gZSYmY3QoZSkmJlBuKGUpLChlPXJ0KHRoaXMpKSYmKHQmJnQuZmxhdHRlbj9lLlY6ZS5hc3NpZ25lZE5vZGVzKXx8W119fSxhZGRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHQsZSxuKXtpZihcInNsb3RcIiE9PXRoaXMubG9jYWxOYW1lfHxcInNsb3RjaGFuZ2VcIj09PXQpd2UuY2FsbCh0aGlzLHQsZSxuKTtlbHNle1wib2JqZWN0XCIhPXR5cGVvZiBuJiYobj17Y2FwdHVyZTohIW59KTt2YXIgbz10aGlzLl9fc2hhZHlfcGFyZW50Tm9kZTtpZighbyl0aHJvdyBFcnJvcihcIlNoYWR5RE9NIGNhbm5vdCBhdHRhY2ggZXZlbnQgdG8gc2xvdCB1bmxlc3MgaXQgaGFzIGEgYHBhcmVudE5vZGVgXCIpO24uTz10aGlzLG8uX19zaGFkeV9hZGRFdmVudExpc3RlbmVyKHQsZSxuKX19LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24odCxlLG4pe2lmKFwic2xvdFwiIT09dGhpcy5sb2NhbE5hbWV8fFwic2xvdGNoYW5nZVwiPT09dClFZS5jYWxsKHRoaXMsdCxlLG4pO2Vsc2V7XCJvYmplY3RcIiE9dHlwZW9mIG4mJihuPXtjYXB0dXJlOiEhbn0pO3ZhciBvPXRoaXMuX19zaGFkeV9wYXJlbnROb2RlO2lmKCFvKXRocm93IEVycm9yKFwiU2hhZHlET00gY2Fubm90IGF0dGFjaCBldmVudCB0byBzbG90IHVubGVzcyBpdCBoYXMgYSBgcGFyZW50Tm9kZWBcIik7bi5PPXRoaXMsby5fX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIodCxlLG4pfX19KSxsbj1TdCh7Z2V0RWxlbWVudEJ5SWQ6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIj09PXQ/bnVsbDpYZSh0aGlzLChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD09dH0pLChmdW5jdGlvbih0KXtyZXR1cm4hIXR9KSlbMF18fG51bGx9fSksY249U3Qoe2dldCBhY3RpdmVFbGVtZW50KCl7dmFyIHQ9YXQuQj9kb2N1bWVudC5fX3NoYWR5X25hdGl2ZV9hY3RpdmVFbGVtZW50OmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7aWYoIXR8fCF0Lm5vZGVUeXBlKXJldHVybiBudWxsO3ZhciBlPSEhY3QodGhpcyk7aWYoISh0aGlzPT09ZG9jdW1lbnR8fGUmJnRoaXMuaG9zdCE9PXQmJnRoaXMuaG9zdC5fX3NoYWR5X25hdGl2ZV9jb250YWlucyh0KSkpcmV0dXJuIG51bGw7Zm9yKGU9V24odCk7ZSYmZSE9PXRoaXM7KWU9V24odD1lLmhvc3QpO3JldHVybiB0aGlzPT09ZG9jdW1lbnQ/ZT9udWxsOnQ6ZT09PXRoaXM/dDpudWxsfX0pLHVuPXdpbmRvdy5kb2N1bWVudCxobj1TdCh7aW1wb3J0Tm9kZTpmdW5jdGlvbih0LGUpe2lmKHQub3duZXJEb2N1bWVudCE9PXVufHxcInRlbXBsYXRlXCI9PT10LmxvY2FsTmFtZSlyZXR1cm4gdGhpcy5fX3NoYWR5X25hdGl2ZV9pbXBvcnROb2RlKHQsZSk7dmFyIG49dGhpcy5fX3NoYWR5X25hdGl2ZV9pbXBvcnROb2RlKHQsITEpO2lmKGUpZm9yKHQ9dC5fX3NoYWR5X2ZpcnN0Q2hpbGQ7dDt0PXQuX19zaGFkeV9uZXh0U2libGluZyllPXRoaXMuX19zaGFkeV9pbXBvcnROb2RlKHQsITApLG4uX19zaGFkeV9hcHBlbmRDaGlsZChlKTtyZXR1cm4gbn19KSxkbj1TdCh7ZGlzcGF0Y2hFdmVudDpiZSxhZGRFdmVudExpc3RlbmVyOndlLmJpbmQod2luZG93KSxyZW1vdmVFdmVudExpc3RlbmVyOkVlLmJpbmQod2luZG93KX0pLGZuPXt9O09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwicGFyZW50RWxlbWVudFwiKSYmKGZuLnBhcmVudEVsZW1lbnQ9WmUucGFyZW50RWxlbWVudCksT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudC5wcm90b3R5cGUsXCJjb250YWluc1wiKSYmKGZuLmNvbnRhaW5zPVplLmNvbnRhaW5zKSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxFbGVtZW50LnByb3RvdHlwZSxcImNoaWxkcmVuXCIpJiYoZm4uY2hpbGRyZW49SmUuY2hpbGRyZW4pLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpJiYoZm4uaW5uZXJIVE1MPXJuLmlubmVySFRNTCksT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudC5wcm90b3R5cGUsXCJjbGFzc05hbWVcIikmJihmbi5jbGFzc05hbWU9ZW4uY2xhc3NOYW1lKTt2YXIgcG49e0V2ZW50VGFyZ2V0OltqZV0sTm9kZTpbWmUsd2luZG93LkV2ZW50VGFyZ2V0P251bGw6amVdLFRleHQ6W1llXSxDb21tZW50OltZZV0sQ0RBVEFTZWN0aW9uOltZZV0sUHJvY2Vzc2luZ0luc3RydWN0aW9uOltZZV0sRWxlbWVudDpbZW4sSmUsWWUsIWF0LkJ8fFwiaW5uZXJIVE1MXCJpbiBFbGVtZW50LnByb3RvdHlwZT9ybjpudWxsLHdpbmRvdy5IVE1MU2xvdEVsZW1lbnQ/bnVsbDpzbl0sSFRNTEVsZW1lbnQ6W2FuLGZuXSxIVE1MU2xvdEVsZW1lbnQ6W3NuXSxEb2N1bWVudEZyYWdtZW50OlskZSxsbl0sRG9jdW1lbnQ6W2huLCRlLGxuLGNuXSxXaW5kb3c6W2RuXX0sX249YXQuQj9udWxsOltcImlubmVySFRNTFwiLFwidGV4dENvbnRlbnRcIl07ZnVuY3Rpb24gbW4odCxlLG4sbyl7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdCYmZSYmTnQodCxlLG4sbyl9KSl9ZnVuY3Rpb24gdm4odCl7dmFyIGUsbj10P251bGw6X247Zm9yKGUgaW4gcG4pbW4od2luZG93W2VdJiZ3aW5kb3dbZV0ucHJvdG90eXBlLHBuW2VdLHQsbil9ZnVuY3Rpb24geW4odCl7cmV0dXJuIHQuX19zaGFkeV9wcm90b0lzUGF0Y2hlZD0hMCxtbih0LHBuLkV2ZW50VGFyZ2V0KSxtbih0LHBuLk5vZGUpLG1uKHQscG4uRWxlbWVudCksbW4odCxwbi5IVE1MRWxlbWVudCksbW4odCxwbi5IVE1MU2xvdEVsZW1lbnQpLHR9W1wiVGV4dFwiLFwiQ29tbWVudFwiLFwiQ0RBVEFTZWN0aW9uXCIsXCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9d2luZG93W3RdLG49T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSk7bi5fX3NoYWR5X3Byb3RvSXNQYXRjaGVkPSEwLG1uKG4scG4uRXZlbnRUYXJnZXQpLG1uKG4scG4uTm9kZSkscG5bdF0mJm1uKG4scG5bdF0pLGUucHJvdG90eXBlLl9fc2hhZHlfcGF0Y2hlZFByb3RvPW59KSk7dmFyIGduPWF0LnVhLGJuPWF0LkI7ZnVuY3Rpb24gd24odCxlKXtpZihnbiYmIXQuX19zaGFkeV9wcm90b0lzUGF0Y2hlZCYmIWN0KHQpKXt2YXIgbj1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCksbz1uLmhhc093blByb3BlcnR5KFwiX19zaGFkeV9wYXRjaGVkUHJvdG9cIikmJm4uX19zaGFkeV9wYXRjaGVkUHJvdG87b3x8KHluKG89T2JqZWN0LmNyZWF0ZShuKSksbi5fX3NoYWR5X3BhdGNoZWRQcm90bz1vKSxPYmplY3Quc2V0UHJvdG90eXBlT2YodCxvKX1ibnx8KDE9PT1lP29lKHQpOjI9PT1lJiZpZSh0KSl9ZnVuY3Rpb24gRW4odCxlLG4sbyl7d24odCwxKSxvPW98fG51bGw7dmFyIGk9aXQodCkscj1vP2l0KG8pOm51bGw7aS5wcmV2aW91c1NpYmxpbmc9bz9yLnByZXZpb3VzU2libGluZzplLl9fc2hhZHlfbGFzdENoaWxkLChyPXJ0KGkucHJldmlvdXNTaWJsaW5nKSkmJihyLm5leHRTaWJsaW5nPXQpLChyPXJ0KGkubmV4dFNpYmxpbmc9bykpJiYoci5wcmV2aW91c1NpYmxpbmc9dCksaS5wYXJlbnROb2RlPWUsbz9vPT09bi5maXJzdENoaWxkJiYobi5maXJzdENoaWxkPXQpOihuLmxhc3RDaGlsZD10LG4uZmlyc3RDaGlsZHx8KG4uZmlyc3RDaGlsZD10KSksbi5jaGlsZE5vZGVzPW51bGx9ZnVuY3Rpb24gTm4odCxlKXt2YXIgbj1pdCh0KTtpZihlfHx2b2lkIDA9PT1uLmZpcnN0Q2hpbGQpe24uY2hpbGROb2Rlcz1udWxsO3ZhciBvPW4uZmlyc3RDaGlsZD10Ll9fc2hhZHlfbmF0aXZlX2ZpcnN0Q2hpbGQ7Zm9yKG4ubGFzdENoaWxkPXQuX19zaGFkeV9uYXRpdmVfbGFzdENoaWxkLHduKHQsMiksbj1vLG89dm9pZCAwO247bj1uLl9fc2hhZHlfbmF0aXZlX25leHRTaWJsaW5nKXt2YXIgaT1pdChuKTtpLnBhcmVudE5vZGU9ZXx8dCxpLm5leHRTaWJsaW5nPW4uX19zaGFkeV9uYXRpdmVfbmV4dFNpYmxpbmcsaS5wcmV2aW91c1NpYmxpbmc9b3x8bnVsbCxvPW4sd24obiwxKX19fXZhciBDbj1TdCh7YWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbih0LGUsbil7XCJvYmplY3RcIiE9dHlwZW9mIG4mJihuPXtjYXB0dXJlOiEhbn0pLG4uTz1uLk98fHRoaXMsdGhpcy5ob3N0Ll9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lcih0LGUsbil9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24odCxlLG4pe1wib2JqZWN0XCIhPXR5cGVvZiBuJiYobj17Y2FwdHVyZTohIW59KSxuLk89bi5PfHx0aGlzLHRoaXMuaG9zdC5fX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIodCxlLG4pfX0pO2Z1bmN0aW9uIFNuKHQsZSl7TnQodCxDbixlKSxOdCh0LGNuLGUpLE50KHQscm4sZSksTnQodCxKZSxlKSxhdC5EJiYhZT8oTnQodCxaZSxlKSxOdCh0LGxuLGUpKTphdC5CfHwoTnQodCxRdCksTnQodCxLdCksTnQodCwkdCkpfXZhciBUbixPbj17fSx4bj1hdC5kZWZlckNvbm5lY3Rpb25DYWxsYmFja3MmJlwibG9hZGluZ1wiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZTtmdW5jdGlvbiBNbih0KXt2YXIgZT1bXTtkb3tlLnVuc2hpZnQodCl9d2hpbGUodD10Ll9fc2hhZHlfcGFyZW50Tm9kZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRG4odCxlLG4pe2lmKHQhPT1Pbil0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3RvclwiKTt0aGlzLmE9bnVsbCxMbih0aGlzLGUsbil9ZnVuY3Rpb24gTG4odCxlLG4pe2lmKHQuaG9zdD1lLHQubW9kZT1uJiZuLm1vZGUsTm4odC5ob3N0KSwoZT1pdCh0Lmhvc3QpKS5yb290PXQsZS5iYj1cImNsb3NlZFwiIT09dC5tb2RlP3Q6bnVsbCwoZT1pdCh0KSkuZmlyc3RDaGlsZD1lLmxhc3RDaGlsZD1lLnBhcmVudE5vZGU9ZS5uZXh0U2libGluZz1lLnByZXZpb3VzU2libGluZz1udWxsLGF0LnByZWZlclBlcmZvcm1hbmNlKWZvcig7ZT10Lmhvc3QuX19zaGFkeV9uYXRpdmVfZmlyc3RDaGlsZDspdC5ob3N0Ll9fc2hhZHlfbmF0aXZlX3JlbW92ZUNoaWxkKGUpO2Vsc2UgQW4odCl9ZnVuY3Rpb24gQW4odCl7dC5UfHwodC5UPSEwLE10KChmdW5jdGlvbigpe3JldHVybiBQbih0KX0pKSl9ZnVuY3Rpb24gUG4odCl7dmFyIGU7aWYoZT10LlQpe2Zvcih2YXIgbjt0Oyl0LlQmJihuPXQpLGN0KHQ9KGU9dCkuaG9zdC5fX3NoYWR5X2dldFJvb3ROb2RlKCkpJiYoZT1ydChlLmhvc3QpKSYmMDxlLmRhfHwodD12b2lkIDApO2U9bn0obj1lKSYmbi5fcmVuZGVyU2VsZigpfWZ1bmN0aW9uIGpuKHQsZSxuKXt2YXIgbz1pdChlKSxpPW8ub2E7by5vYT1udWxsLG58fChuPSh0PXQuYltlLl9fc2hhZHlfc2xvdHx8XCJfX2NhdGNoYWxsXCJdKSYmdFswXSksbj8oaXQobikuYXNzaWduZWROb2Rlcy5wdXNoKGUpLG8uYXNzaWduZWRTbG90PW4pOm8uYXNzaWduZWRTbG90PXZvaWQgMCxpIT09by5hc3NpZ25lZFNsb3QmJm8uYXNzaWduZWRTbG90JiYoaXQoby5hc3NpZ25lZFNsb3QpLnJhPSEwKX1mdW5jdGlvbiBrbih0LGUsbil7Zm9yKHZhciBvPTAsaT12b2lkIDA7bzxuLmxlbmd0aCYmKGk9bltvXSk7bysrKWlmKFwic2xvdFwiPT1pLmxvY2FsTmFtZSl7dmFyIHI9cnQoaSkuYXNzaWduZWROb2RlcztyJiZyLmxlbmd0aCYma24odCxlLHIpfWVsc2UgZS5wdXNoKG5bb10pfWZ1bmN0aW9uIEZuKHQsZSl7ZS5fX3NoYWR5X25hdGl2ZV9kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInNsb3RjaGFuZ2VcIikpLChlPXJ0KGUpKS5hc3NpZ25lZFNsb3QmJkZuKHQsZS5hc3NpZ25lZFNsb3QpfWZ1bmN0aW9uIFJuKHQpe3QuYz10LmN8fFtdLHQuYT10LmF8fFtdLHQuYj10LmJ8fHt9fWZ1bmN0aW9uIFZuKHQpe2lmKHQuYyYmdC5jLmxlbmd0aCl7Zm9yKHZhciBlLG49dC5jLG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtObihpKTt2YXIgcj1pLl9fc2hhZHlfcGFyZW50Tm9kZTtObihyKSwocj1ydChyKSkuZGE9KHIuZGF8fDApKzEscj1JbihpKSx0LmJbcl0/KChlPWV8fHt9KVtyXT0hMCx0LmJbcl0ucHVzaChpKSk6dC5iW3JdPVtpXSx0LmEucHVzaChpKX1pZihlKWZvcih2YXIgYSBpbiBlKXQuYlthXT1Ibih0LmJbYV0pO3QuYz1bXX19ZnVuY3Rpb24gSW4odCl7dmFyIGU9dC5uYW1lfHx0LmdldEF0dHJpYnV0ZShcIm5hbWVcIil8fFwiX19jYXRjaGFsbFwiO3JldHVybiB0LkxhPWV9ZnVuY3Rpb24gSG4odCl7cmV0dXJuIHQuc29ydCgoZnVuY3Rpb24odCxlKXt0PU1uKHQpO2Zvcih2YXIgbj1NbihlKSxvPTA7bzx0Lmxlbmd0aDtvKyspe2U9dFtvXTt2YXIgaT1uW29dO2lmKGUhPT1pKXJldHVybih0PXd0KGUuX19zaGFkeV9wYXJlbnROb2RlKSkuaW5kZXhPZihlKS10LmluZGV4T2YoaSl9fSkpfWZ1bmN0aW9uIFVuKHQpe3JldHVybiBWbih0KSwhKCF0LmF8fCF0LmEubGVuZ3RoKX1pZihEbi5wcm90b3R5cGUuX3JlbmRlclNlbGY9ZnVuY3Rpb24oKXt2YXIgdD14bjtpZih4bj0hMCx0aGlzLlQ9ITEsdGhpcy5hKXtWbih0aGlzKTtmb3IodmFyIGUsbj0wO248dGhpcy5hLmxlbmd0aDtuKyspe3ZhciBvPXJ0KGU9dGhpcy5hW25dKSxpPW8uYXNzaWduZWROb2RlcztpZihvLmFzc2lnbmVkTm9kZXM9W10sby5WPVtdLG8uQmE9aSlmb3Iobz0wO288aS5sZW5ndGg7bysrKXt2YXIgcj1ydChpW29dKTtyLm9hPXIuYXNzaWduZWRTbG90LHIuYXNzaWduZWRTbG90PT09ZSYmKHIuYXNzaWduZWRTbG90PW51bGwpfX1mb3Iobj10aGlzLmhvc3QuX19zaGFkeV9maXJzdENoaWxkO247bj1uLl9fc2hhZHlfbmV4dFNpYmxpbmcpam4odGhpcyxuKTtmb3Iobj0wO248dGhpcy5hLmxlbmd0aDtuKyspe2lmKCEoaT1ydChlPXRoaXMuYVtuXSkpLmFzc2lnbmVkTm9kZXMubGVuZ3RoKWZvcihvPWUuX19zaGFkeV9maXJzdENoaWxkO287bz1vLl9fc2hhZHlfbmV4dFNpYmxpbmcpam4odGhpcyxvLGUpO2lmKChvPShvPXJ0KGUuX19zaGFkeV9wYXJlbnROb2RlKSkmJm8ucm9vdCkmJihVbihvKXx8by5UKSYmby5fcmVuZGVyU2VsZigpLGtuKHRoaXMsaS5WLGkuYXNzaWduZWROb2Rlcyksbz1pLkJhKXtmb3Iocj0wO3I8by5sZW5ndGg7cisrKXJ0KG9bcl0pLm9hPW51bGw7aS5CYT1udWxsLG8ubGVuZ3RoPmkuYXNzaWduZWROb2Rlcy5sZW5ndGgmJihpLnJhPSEwKX1pLnJhJiYoaS5yYT0hMSxGbih0aGlzLGUpKX1mb3IoZT10aGlzLmEsbj1bXSxpPTA7aTxlLmxlbmd0aDtpKyspKHI9cnQobz1lW2ldLl9fc2hhZHlfcGFyZW50Tm9kZSkpJiZyLnJvb3R8fCEoMD5uLmluZGV4T2YobykpfHxuLnB1c2gobyk7Zm9yKGU9MDtlPG4ubGVuZ3RoO2UrKyl7Zm9yKGk9KHI9bltlXSk9PT10aGlzP3RoaXMuaG9zdDpyLG89W10scj1yLl9fc2hhZHlfZmlyc3RDaGlsZDtyO3I9ci5fX3NoYWR5X25leHRTaWJsaW5nKWlmKFwic2xvdFwiPT1yLmxvY2FsTmFtZSlmb3IodmFyIGE9cnQocikuVixzPTA7czxhLmxlbmd0aDtzKyspby5wdXNoKGFbc10pO2Vsc2Ugby5wdXNoKHIpO3I9YnQoaSksYT1BZShvLG8ubGVuZ3RoLHIsci5sZW5ndGgpO2Zvcih2YXIgbD1zPTAsYz12b2lkIDA7czxhLmxlbmd0aCYmKGM9YVtzXSk7cysrKXtmb3IodmFyIHU9MCxoPXZvaWQgMDt1PGMuYmEubGVuZ3RoJiYoaD1jLmJhW3VdKTt1KyspaC5fX3NoYWR5X25hdGl2ZV9wYXJlbnROb2RlPT09aSYmaS5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZChoKSxyLnNwbGljZShjLmluZGV4K2wsMSk7bC09Yy5pYX1mb3IobD0wLGM9dm9pZCAwO2w8YS5sZW5ndGgmJihjPWFbbF0pO2wrKylmb3Iocz1yW2MuaW5kZXhdLHU9Yy5pbmRleDt1PGMuaW5kZXgrYy5pYTt1KyspaD1vW3VdLGkuX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlKGgscyksci5zcGxpY2UodSwwLGgpfX1pZighYXQucHJlZmVyUGVyZm9ybWFuY2UmJiF0aGlzLkFhKWZvcihuPXRoaXMuaG9zdC5fX3NoYWR5X2ZpcnN0Q2hpbGQ7bjtuPW4uX19zaGFkeV9uZXh0U2libGluZyllPXJ0KG4pLG4uX19zaGFkeV9uYXRpdmVfcGFyZW50Tm9kZSE9PXRoaXMuaG9zdHx8XCJzbG90XCIhPT1uLmxvY2FsTmFtZSYmZS5hc3NpZ25lZFNsb3R8fHRoaXMuaG9zdC5fX3NoYWR5X25hdGl2ZV9yZW1vdmVDaGlsZChuKTt0aGlzLkFhPSEwLHhuPXQsVG4mJlRuKCl9LGZ1bmN0aW9uKHQpe3QuX19wcm90b19fPURvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLFNuKHQsXCJfX3NoYWR5X1wiKSxTbih0KSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LHtub2RlVHlwZTp7dmFsdWU6Tm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFLGNvbmZpZ3VyYWJsZTohMH0sbm9kZU5hbWU6e3ZhbHVlOlwiI2RvY3VtZW50LWZyYWdtZW50XCIsY29uZmlndXJhYmxlOiEwfSxub2RlVmFsdWU6e3ZhbHVlOm51bGwsY29uZmlndXJhYmxlOiEwfX0pLFtcImxvY2FsTmFtZVwiLFwibmFtZXNwYWNlVVJJXCIsXCJwcmVmaXhcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6dm9pZCAwLGNvbmZpZ3VyYWJsZTohMH0pfSkpLFtcIm93bmVyRG9jdW1lbnRcIixcImJhc2VVUklcIixcImlzQ29ubmVjdGVkXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhvc3RbZV19LGNvbmZpZ3VyYWJsZTohMH0pfSkpfShEbi5wcm90b3R5cGUpLHdpbmRvdy5jdXN0b21FbGVtZW50cyYmd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSYmYXQuc2EmJiFhdC5wcmVmZXJQZXJmb3JtYW5jZSl7dmFyIEJuPW5ldyBNYXA7VG49ZnVuY3Rpb24oKXt2YXIgdD1bXTtCbi5mb3JFYWNoKChmdW5jdGlvbihlLG4pe3QucHVzaChbbixlXSl9KSksQm4uY2xlYXIoKTtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXVswXTt0W2VdWzFdP24uX19zaGFkeWRvbV9jb25uZWN0ZWRDYWxsYmFjaygpOm4uX19zaGFkeWRvbV9kaXNjb25uZWN0ZWRDYWxsYmFjaygpfX0seG4mJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsKGZ1bmN0aW9uKCl7eG49ITEsVG4oKX0pLHtvbmNlOiEwfSk7dmFyIHpuPXdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUscW49ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjayxvPWUucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrO3puLmNhbGwod2luZG93LmN1c3RvbUVsZW1lbnRzLHQsZnVuY3Rpb24odCxlLG4pe3ZhciBvPTAsaT1cIl9faXNDb25uZWN0ZWRcIitvKys7cmV0dXJuKGV8fG4pJiYodC5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2s9dC5wcm90b3R5cGUuX19zaGFkeWRvbV9jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbigpe3huP0JuLnNldCh0aGlzLCEwKTp0aGlzW2ldfHwodGhpc1tpXT0hMCxlJiZlLmNhbGwodGhpcykpfSx0LnByb3RvdHlwZS5kaXNjb25uZWN0ZWRDYWxsYmFjaz10LnByb3RvdHlwZS5fX3NoYWR5ZG9tX2Rpc2Nvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKCl7eG4/dGhpcy5pc0Nvbm5lY3RlZHx8Qm4uc2V0KHRoaXMsITEpOnRoaXNbaV0mJih0aGlzW2ldPSExLG4mJm4uY2FsbCh0aGlzKSl9KSx0fShlLG4sbykpLGUucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrPW4sZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s9b307d2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZT1xbixPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUsXCJkZWZpbmVcIix7dmFsdWU6cW4sY29uZmlndXJhYmxlOiEwfSl9ZnVuY3Rpb24gV24odCl7aWYoY3QodD10Ll9fc2hhZHlfZ2V0Um9vdE5vZGUoKSkpcmV0dXJuIHR9ZnVuY3Rpb24gR24odCl7dGhpcy5ub2RlPXR9ZnVuY3Rpb24gWm4odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KEduLnByb3RvdHlwZSx0LHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlW1wiX19zaGFkeV9cIit0XX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMubm9kZVtcIl9fc2hhZHlfXCIrdF09ZX0sY29uZmlndXJhYmxlOiEwfSl9KG49R24ucHJvdG90eXBlKS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfYWRkRXZlbnRMaXN0ZW5lcih0LGUsbil9LG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X3JlbW92ZUV2ZW50TGlzdGVuZXIodCxlLG4pfSxuLmFwcGVuZENoaWxkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9hcHBlbmRDaGlsZCh0KX0sbi5pbnNlcnRCZWZvcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfaW5zZXJ0QmVmb3JlKHQsZSl9LG4ucmVtb3ZlQ2hpbGQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X3JlbW92ZUNoaWxkKHQpfSxuLnJlcGxhY2VDaGlsZD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9yZXBsYWNlQ2hpbGQodCxlKX0sbi5jbG9uZU5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2Nsb25lTm9kZSh0KX0sbi5nZXRSb290Tm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfZ2V0Um9vdE5vZGUodCl9LG4uY29udGFpbnM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2NvbnRhaW5zKHQpfSxuLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2Rpc3BhdGNoRXZlbnQodCl9LG4uc2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQsZSl7dGhpcy5ub2RlLl9fc2hhZHlfc2V0QXR0cmlidXRlKHQsZSl9LG4uZ2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9uYXRpdmVfZ2V0QXR0cmlidXRlKHQpfSxuLmhhc0F0dHJpYnV0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfbmF0aXZlX2hhc0F0dHJpYnV0ZSh0KX0sbi5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24odCl7dGhpcy5ub2RlLl9fc2hhZHlfcmVtb3ZlQXR0cmlidXRlKHQpfSxuLmF0dGFjaFNoYWRvdz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfYXR0YWNoU2hhZG93KHQpfSxuLmZvY3VzPWZ1bmN0aW9uKCl7dGhpcy5ub2RlLl9fc2hhZHlfbmF0aXZlX2ZvY3VzKCl9LG4uYmx1cj1mdW5jdGlvbigpe3RoaXMubm9kZS5fX3NoYWR5X2JsdXIoKX0sbi5pbXBvcnROb2RlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5ub2RlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9OT0RFKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9pbXBvcnROb2RlKHQsZSl9LG4uZ2V0RWxlbWVudEJ5SWQ9ZnVuY3Rpb24odCl7aWYodGhpcy5ub2RlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9OT0RFKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9nZXRFbGVtZW50QnlJZCh0KX0sbi5xdWVyeVNlbGVjdG9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9xdWVyeVNlbGVjdG9yKHQpfSxuLnF1ZXJ5U2VsZWN0b3JBbGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfcXVlcnlTZWxlY3RvckFsbCh0LGUpfSxuLmFzc2lnbmVkTm9kZXM9ZnVuY3Rpb24odCl7aWYoXCJzbG90XCI9PT10aGlzLm5vZGUubG9jYWxOYW1lKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9hc3NpZ25lZE5vZGVzKHQpfSxyLk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEduLnByb3RvdHlwZSx7YWN0aXZlRWxlbWVudDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYoY3QodGhpcy5ub2RlKXx8dGhpcy5ub2RlLm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9OT0RFKXJldHVybiB0aGlzLm5vZGUuX19zaGFkeV9hY3RpdmVFbGVtZW50fX0sX2FjdGl2ZUVsZW1lbnQ6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFjdGl2ZUVsZW1lbnR9fSxob3N0Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihjdCh0aGlzLm5vZGUpKXJldHVybiB0aGlzLm5vZGUuaG9zdH19LHBhcmVudE5vZGU6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9wYXJlbnROb2RlfX0sZmlyc3RDaGlsZDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2ZpcnN0Q2hpbGR9fSxsYXN0Q2hpbGQ6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9sYXN0Q2hpbGR9fSxuZXh0U2libGluZzp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X25leHRTaWJsaW5nfX0scHJldmlvdXNTaWJsaW5nOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfcHJldmlvdXNTaWJsaW5nfX0sY2hpbGROb2Rlczp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2NoaWxkTm9kZXN9fSxwYXJlbnRFbGVtZW50Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfcGFyZW50RWxlbWVudH19LGZpcnN0RWxlbWVudENoaWxkOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfZmlyc3RFbGVtZW50Q2hpbGR9fSxsYXN0RWxlbWVudENoaWxkOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfbGFzdEVsZW1lbnRDaGlsZH19LG5leHRFbGVtZW50U2libGluZzp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X25leHRFbGVtZW50U2libGluZ319LHByZXZpb3VzRWxlbWVudFNpYmxpbmc6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9wcmV2aW91c0VsZW1lbnRTaWJsaW5nfX0sY2hpbGRyZW46e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9jaGlsZHJlbn19LGNoaWxkRWxlbWVudENvdW50Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfY2hpbGRFbGVtZW50Q291bnR9fSxzaGFkb3dSb290Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfc2hhZG93Um9vdH19LGFzc2lnbmVkU2xvdDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X2Fzc2lnbmVkU2xvdH19LGlzQ29ubmVjdGVkOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfaXNDb25uZWN0ZWR9fSxpbm5lckhUTUw6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9pbm5lckhUTUx9LHNldDpmdW5jdGlvbih0KXt0aGlzLm5vZGUuX19zaGFkeV9pbm5lckhUTUw9dH19LHRleHRDb250ZW50Ontjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfdGV4dENvbnRlbnR9LHNldDpmdW5jdGlvbih0KXt0aGlzLm5vZGUuX19zaGFkeV90ZXh0Q29udGVudD10fX0sc2xvdDp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZS5fX3NoYWR5X3Nsb3R9LHNldDpmdW5jdGlvbih0KXt0aGlzLm5vZGUuX19zaGFkeV9zbG90PXR9fSxjbGFzc05hbWU6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGUuX19zaGFkeV9jbGFzc05hbWV9LHNldDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlLl9fc2hhZHlfY2xhc3NOYW1lPXR9fX0pLHhlLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBabih0KX0pKSxNZS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gWm4odCl9KSk7dmFyIFluPW5ldyBXZWFrTWFwO2Z1bmN0aW9uIFhuKHQpe2lmKGN0KHQpfHx0IGluc3RhbmNlb2YgR24pcmV0dXJuIHQ7dmFyIGU9WW4uZ2V0KHQpO3JldHVybiBlfHwoZT1uZXcgR24odCksWW4uc2V0KHQsZSkpLGV9aWYoYXQuc2Epe3ZhciBKbj1hdC5CP2Z1bmN0aW9uKHQpe3JldHVybiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gaWUodCksb2UodCksdH0sS249e2luVXNlOmF0LnNhLHBhdGNoOkpuLGlzU2hhZHlSb290OmN0LGVucXVldWU6TXQsZmx1c2g6RHQsZmx1c2hJbml0aWFsOmZ1bmN0aW9uKHQpeyF0LkFhJiZ0LlQmJlBuKHQpfSxzZXR0aW5nczphdCxmaWx0ZXJNdXRhdGlvbnM6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmdldFJvb3ROb2RlKCk7cmV0dXJuIHQubWFwKChmdW5jdGlvbih0KXt2YXIgZT1uPT09dC50YXJnZXQuZ2V0Um9vdE5vZGUoKTtpZihlJiZ0LmFkZGVkTm9kZXMpe2lmKChlPVtdLnNsaWNlLmNhbGwodC5hZGRlZE5vZGVzKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBuPT09dC5nZXRSb290Tm9kZSgpfSkpKS5sZW5ndGgpcmV0dXJuIHQ9T2JqZWN0LmNyZWF0ZSh0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImFkZGVkTm9kZXNcIix7dmFsdWU6ZSxjb25maWd1cmFibGU6ITB9KSx0fWVsc2UgaWYoZSlyZXR1cm4gdH0pKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpfSxvYnNlcnZlQ2hpbGRyZW46ZnVuY3Rpb24odCxlKXt2YXIgbj1pdCh0KTtuLlp8fChuLlo9bmV3IEx0KSxuLlouamEuYWRkKGUpO3ZhciBvPW4uWjtyZXR1cm57TWE6ZSxTOm8sTmE6dCx0YWtlUmVjb3JkczpmdW5jdGlvbigpe3JldHVybiBvLnRha2VSZWNvcmRzKCl9fX0sdW5vYnNlcnZlQ2hpbGRyZW46ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5TO2UmJihlLmphLmRlbGV0ZSh0Lk1hKSxlLmphLnNpemV8fChpdCh0Lk5hKS5aPW51bGwpKX0sZGVmZXJDb25uZWN0aW9uQ2FsbGJhY2tzOmF0LmRlZmVyQ29ubmVjdGlvbkNhbGxiYWNrcyxwcmVmZXJQZXJmb3JtYW5jZTphdC5wcmVmZXJQZXJmb3JtYW5jZSxoYW5kbGVzRHluYW1pY1Njb3Bpbmc6ITAsd3JhcDphdC5EP1huOkpuLHdyYXBJZk5lZWRlZDohMD09PWF0LkQ/WG46ZnVuY3Rpb24odCl7cmV0dXJuIHR9LFdyYXBwZXI6R24sY29tcG9zZWRQYXRoOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fY29tcG9zZWRQYXRofHwodC5fX2NvbXBvc2VkUGF0aD1kZSh0LnRhcmdldCwhMCkpLHQuX19jb21wb3NlZFBhdGh9LG5vUGF0Y2g6YXQuRCxwYXRjaE9uRGVtYW5kOmF0LnVhLG5hdGl2ZU1ldGhvZHM6SHQsbmF0aXZlVHJlZTpVdCxwYXRjaEVsZW1lbnRQcm90bzp5bn07d2luZG93LlNoYWR5RE9NPUtuLGZ1bmN0aW9uKCl7dmFyIHQ9W1wiZGlzcGF0Y2hFdmVudFwiLFwiYWRkRXZlbnRMaXN0ZW5lclwiLFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiXTt3aW5kb3cuRXZlbnRUYXJnZXQ/cXQod2luZG93LkV2ZW50VGFyZ2V0LnByb3RvdHlwZSx0KToocXQoTm9kZS5wcm90b3R5cGUsdCkscXQoV2luZG93LnByb3RvdHlwZSx0KSksSXQ/cXQoTm9kZS5wcm90b3R5cGUsXCJwYXJlbnROb2RlIGZpcnN0Q2hpbGQgbGFzdENoaWxkIHByZXZpb3VzU2libGluZyBuZXh0U2libGluZyBjaGlsZE5vZGVzIHBhcmVudEVsZW1lbnQgdGV4dENvbnRlbnRcIi5zcGxpdChcIiBcIikpOnp0KE5vZGUucHJvdG90eXBlLHtwYXJlbnROb2RlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5wYXJlbnROb2RlKCl9fSxmaXJzdENoaWxkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5maXJzdENoaWxkKCl9fSxsYXN0Q2hpbGQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBXdC5jdXJyZW50Tm9kZT10aGlzLFd0Lmxhc3RDaGlsZCgpfX0scHJldmlvdXNTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5wcmV2aW91c1NpYmxpbmcoKX19LG5leHRTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gV3QuY3VycmVudE5vZGU9dGhpcyxXdC5uZXh0U2libGluZygpfX0sY2hpbGROb2Rlczp7Z2V0OmZ1bmN0aW9uKCl7dmFyIHQ9W107V3QuY3VycmVudE5vZGU9dGhpcztmb3IodmFyIGU9V3QuZmlyc3RDaGlsZCgpO2U7KXQucHVzaChlKSxlPVd0Lm5leHRTaWJsaW5nKCk7cmV0dXJuIHR9fSxwYXJlbnRFbGVtZW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gR3QuY3VycmVudE5vZGU9dGhpcyxHdC5wYXJlbnROb2RlKCl9fSx0ZXh0Q29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Y2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6Zm9yKHZhciB0LGU9ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcih0aGlzLE5vZGVGaWx0ZXIuU0hPV19URVhULG51bGwsITEpLG49XCJcIjt0PWUubmV4dE5vZGUoKTspbis9dC5ub2RlVmFsdWU7cmV0dXJuIG47ZGVmYXVsdDpyZXR1cm4gdGhpcy5ub2RlVmFsdWV9fSxzZXQ6ZnVuY3Rpb24odCl7c3dpdGNoKG51bGw9PXQmJih0PVwiXCIpLHRoaXMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Y2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6WXQodGhpcyksKDA8dC5sZW5ndGh8fHRoaXMubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSkmJnRoaXMuX19zaGFkeV9uYXRpdmVfaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDp0aGlzLm5vZGVWYWx1ZT10fX19fSkscXQoTm9kZS5wcm90b3R5cGUsXCJhcHBlbmRDaGlsZCBpbnNlcnRCZWZvcmUgcmVtb3ZlQ2hpbGQgcmVwbGFjZUNoaWxkIGNsb25lTm9kZSBjb250YWluc1wiLnNwbGl0KFwiIFwiKSkscXQoSFRNTEVsZW1lbnQucHJvdG90eXBlLFtcInBhcmVudEVsZW1lbnRcIixcImNvbnRhaW5zXCJdKSx0PXtmaXJzdEVsZW1lbnRDaGlsZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0LmN1cnJlbnROb2RlPXRoaXMsR3QuZmlyc3RDaGlsZCgpfX0sbGFzdEVsZW1lbnRDaGlsZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0LmN1cnJlbnROb2RlPXRoaXMsR3QubGFzdENoaWxkKCl9fSxjaGlsZHJlbjp7Z2V0OmZ1bmN0aW9uKCl7dmFyIHQ9W107R3QuY3VycmVudE5vZGU9dGhpcztmb3IodmFyIGU9R3QuZmlyc3RDaGlsZCgpO2U7KXQucHVzaChlKSxlPUd0Lm5leHRTaWJsaW5nKCk7cmV0dXJuIGd0KHQpfX0sY2hpbGRFbGVtZW50Q291bnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoaWxkcmVuP3RoaXMuY2hpbGRyZW4ubGVuZ3RoOjB9fX0sSXQ/KHF0KEVsZW1lbnQucHJvdG90eXBlLFh0KSxxdChFbGVtZW50LnByb3RvdHlwZSxbXCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nXCIsXCJuZXh0RWxlbWVudFNpYmxpbmdcIixcImlubmVySFRNTFwiLFwiY2xhc3NOYW1lXCJdKSxxdChIVE1MRWxlbWVudC5wcm90b3R5cGUsW1wiY2hpbGRyZW5cIixcImlubmVySFRNTFwiLFwiY2xhc3NOYW1lXCJdKSk6KHp0KEVsZW1lbnQucHJvdG90eXBlLHQpLHp0KEVsZW1lbnQucHJvdG90eXBlLHtwcmV2aW91c0VsZW1lbnRTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gR3QuY3VycmVudE5vZGU9dGhpcyxHdC5wcmV2aW91c1NpYmxpbmcoKX19LG5leHRFbGVtZW50U2libGluZzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd0LmN1cnJlbnROb2RlPXRoaXMsR3QubmV4dFNpYmxpbmcoKX19LGlubmVySFRNTDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFZ0KHRoaXMsYnQpfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9XCJ0ZW1wbGF0ZVwiPT09dGhpcy5sb2NhbE5hbWU/dGhpcy5jb250ZW50OnRoaXM7WXQoZSk7dmFyIG49dGhpcy5sb2NhbE5hbWV8fFwiZGl2XCI7Zm9yKChuPXRoaXMubmFtZXNwYWNlVVJJJiZ0aGlzLm5hbWVzcGFjZVVSSSE9PVp0Lm5hbWVzcGFjZVVSST9adC5jcmVhdGVFbGVtZW50TlModGhpcy5uYW1lc3BhY2VVUkksbik6WnQuY3JlYXRlRWxlbWVudChuKSkuaW5uZXJIVE1MPXQsdD1cInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZT9uLmNvbnRlbnQ6bjtuPXQuX19zaGFkeV9uYXRpdmVfZmlyc3RDaGlsZDspZS5fX3NoYWR5X25hdGl2ZV9pbnNlcnRCZWZvcmUobix2b2lkIDApfX0sY2xhc3NOYW1lOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIix0KX19fSkpLHF0KEVsZW1lbnQucHJvdG90eXBlLFwic2V0QXR0cmlidXRlIGdldEF0dHJpYnV0ZSBoYXNBdHRyaWJ1dGUgcmVtb3ZlQXR0cmlidXRlIGZvY3VzIGJsdXJcIi5zcGxpdChcIiBcIikpLHF0KEVsZW1lbnQucHJvdG90eXBlLEp0KSxxdChIVE1MRWxlbWVudC5wcm90b3R5cGUsW1wiZm9jdXNcIixcImJsdXJcIl0pLHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50JiZxdCh3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudC5wcm90b3R5cGUsW1wiaW5uZXJIVE1MXCJdKSxJdD9xdChEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSxYdCk6enQoRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsdCkscXQoRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsSnQpLEl0PyhxdChEb2N1bWVudC5wcm90b3R5cGUsWHQpLHF0KERvY3VtZW50LnByb3RvdHlwZSxbXCJhY3RpdmVFbGVtZW50XCJdKSk6enQoRG9jdW1lbnQucHJvdG90eXBlLHQpLHF0KERvY3VtZW50LnByb3RvdHlwZSxbXCJpbXBvcnROb2RlXCIsXCJnZXRFbGVtZW50QnlJZFwiXSkscXQoRG9jdW1lbnQucHJvdG90eXBlLEp0KX0oKSx2bihcIl9fc2hhZHlfXCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCxcIl9hY3RpdmVFbGVtZW50XCIsY24uYWN0aXZlRWxlbWVudCksTnQoV2luZG93LnByb3RvdHlwZSxkbixcIl9fc2hhZHlfXCIpLGF0LkQ/YXQudWEmJk50KEVsZW1lbnQucHJvdG90eXBlLG5uKToodm4oKSxmdW5jdGlvbigpe2lmKCFhZSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFdmVudC5wcm90b3R5cGUsXCJpc1RydXN0ZWRcIikpe3ZhciB0PWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLHtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY29tcG9zZWQ6ITB9KTt0aGlzLl9fc2hhZHlfZGlzcGF0Y2hFdmVudCh0KX07RWxlbWVudC5wcm90b3R5cGUuY2xpY2s/RWxlbWVudC5wcm90b3R5cGUuY2xpY2s9dDpIVE1MRWxlbWVudC5wcm90b3R5cGUuY2xpY2smJihIVE1MRWxlbWVudC5wcm90b3R5cGUuY2xpY2s9dCl9fSgpKSxmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiBfZSl3aW5kb3cuX19zaGFkeV9uYXRpdmVfYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbih0KXt0Ll9fdGFyZ2V0fHwoQ2UodCkseWUodCkpfSksITApfSgpLHdpbmRvdy5FdmVudD1TZSx3aW5kb3cuQ3VzdG9tRXZlbnQ9VGUsd2luZG93Lk1vdXNlRXZlbnQ9T2Usd2luZG93LlNoYWRvd1Jvb3Q9RG59dmFyICRuPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCxRbj13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUyx0bz13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUsZW89d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5wcmVwZW5kLG5vPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuYXBwZW5kLG9vPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5wcmVwZW5kLGlvPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5hcHBlbmQscm89d2luZG93Lk5vZGUucHJvdG90eXBlLmNsb25lTm9kZSxhbz13aW5kb3cuTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQsc289d2luZG93Lk5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSxsbz13aW5kb3cuTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsY289d2luZG93Lk5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCx1bz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5Ob2RlLnByb3RvdHlwZSxcInRleHRDb250ZW50XCIpLGhvPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3csZm89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIikscG89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZSxfbz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLG1vPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUsdm89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5TLHlvPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUyxnbz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlMsYm89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCx3bz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRIVE1MLEVvPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5wcmVwZW5kLE5vPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmQsQ289d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmJlZm9yZSxTbz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYWZ0ZXIsVG89d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoLE9vPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmUseG89d2luZG93LkhUTUxFbGVtZW50LE1vPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSxcImlubmVySFRNTFwiKSxEbz13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCxMbz13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50SFRNTCxBbz1uZXcgU2V0O2Z1bmN0aW9uIFBvKHQpe3ZhciBlPUFvLmhhcyh0KTtyZXR1cm4gdD0vXlthLXpdWy4wLTlfYS16XSotWy0uMC05X2Etel0qJC8udGVzdCh0KSwhZSYmdH1cImFubm90YXRpb24teG1sIGNvbG9yLXByb2ZpbGUgZm9udC1mYWNlIGZvbnQtZmFjZS1zcmMgZm9udC1mYWNlLXVyaSBmb250LWZhY2UtZm9ybWF0IGZvbnQtZmFjZS1uYW1lIG1pc3NpbmctZ2x5cGhcIi5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIEFvLmFkZCh0KX0pKTt2YXIgam89ZG9jdW1lbnQuY29udGFpbnM/ZG9jdW1lbnQuY29udGFpbnMuYmluZChkb2N1bWVudCk6ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zLmJpbmQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtmdW5jdGlvbiBrbyh0KXt2YXIgZT10LmlzQ29ubmVjdGVkO2lmKHZvaWQgMCE9PWUpcmV0dXJuIGU7aWYoam8odCkpcmV0dXJuITA7Zm9yKDt0JiYhKHQuX19DRV9pc0ltcG9ydERvY3VtZW50fHx0IGluc3RhbmNlb2YgRG9jdW1lbnQpOyl0PXQucGFyZW50Tm9kZXx8KHdpbmRvdy5TaGFkb3dSb290JiZ0IGluc3RhbmNlb2YgU2hhZG93Um9vdD90Lmhvc3Q6dm9pZCAwKTtyZXR1cm4hKCF0fHwhKHQuX19DRV9pc0ltcG9ydERvY3VtZW50fHx0IGluc3RhbmNlb2YgRG9jdW1lbnQpKX1mdW5jdGlvbiBGbyh0KXt2YXIgZT10LmNoaWxkcmVuO2lmKGUpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO2ZvcihlPVtdLHQ9dC5maXJzdENoaWxkO3Q7dD10Lm5leHRTaWJsaW5nKXQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmZS5wdXNoKHQpO3JldHVybiBlfWZ1bmN0aW9uIFJvKHQsZSl7Zm9yKDtlJiZlIT09dCYmIWUubmV4dFNpYmxpbmc7KWU9ZS5wYXJlbnROb2RlO3JldHVybiBlJiZlIT09dD9lLm5leHRTaWJsaW5nOm51bGx9ZnVuY3Rpb24gVm8oKXt2YXIgdD0hKG51bGw9PXJpfHwhcmkubm9Eb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyKSxlPSEobnVsbD09cml8fCFyaS5zaGFkeURvbUZhc3RXYWxrKTt0aGlzLlg9W10sdGhpcy5hPVtdLHRoaXMuUj0hMSx0aGlzLnNoYWR5RG9tRmFzdFdhbGs9ZSx0aGlzLmpiPSF0fWZ1bmN0aW9uIElvKHQsZSxuLG8pe3ZhciBpPXdpbmRvdy5TaGFkeURvbTtpZih0LnNoYWR5RG9tRmFzdFdhbGsmJmkmJmkuaW5Vc2Upe2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmbihlKSxlLnF1ZXJ5U2VsZWN0b3JBbGwpZm9yKHQ9aS5uYXRpdmVNZXRob2RzLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlLFwiKlwiKSxlPTA7ZTx0Lmxlbmd0aDtlKyspbih0W2VdKX1lbHNlIWZ1bmN0aW9uIHQoZSxuLG8pe2Zvcih2YXIgaT1lO2k7KXtpZihpLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciByPWk7bihyKTt2YXIgYT1yLmxvY2FsTmFtZTtpZihcImxpbmtcIj09PWEmJlwiaW1wb3J0XCI9PT1yLmdldEF0dHJpYnV0ZShcInJlbFwiKSl7aWYoaT1yLmltcG9ydCx2b2lkIDA9PT1vJiYobz1uZXcgU2V0KSxpIGluc3RhbmNlb2YgTm9kZSYmIW8uaGFzKGkpKWZvcihvLmFkZChpKSxpPWkuZmlyc3RDaGlsZDtpO2k9aS5uZXh0U2libGluZyl0KGksbixvKTtpPVJvKGUscik7Y29udGludWV9aWYoXCJ0ZW1wbGF0ZVwiPT09YSl7aT1SbyhlLHIpO2NvbnRpbnVlfWlmKHI9ci5fX0NFX3NoYWRvd1Jvb3QpZm9yKHI9ci5maXJzdENoaWxkO3I7cj1yLm5leHRTaWJsaW5nKXQocixuLG8pfWk9aS5maXJzdENoaWxkP2kuZmlyc3RDaGlsZDpSbyhlLGkpfX0oZSxuLG8pfWZ1bmN0aW9uIEhvKHQsZSl7dC5SJiZJbyh0LGUsKGZ1bmN0aW9uKGUpe3JldHVybiBVbyh0LGUpfSkpfWZ1bmN0aW9uIFVvKHQsZSl7aWYodC5SJiYhZS5fX0NFX3BhdGNoZWQpe2UuX19DRV9wYXRjaGVkPSEwO2Zvcih2YXIgbj0wO248dC5YLmxlbmd0aDtuKyspdC5YW25dKGUpO2ZvcihuPTA7bjx0LmEubGVuZ3RoO24rKyl0LmFbbl0oZSl9fWZ1bmN0aW9uIEJvKHQsZSl7dmFyIG49W107Zm9yKElvKHQsZSwoZnVuY3Rpb24odCl7cmV0dXJuIG4ucHVzaCh0KX0pKSxlPTA7ZTxuLmxlbmd0aDtlKyspe3ZhciBvPW5bZV07MT09PW8uX19DRV9zdGF0ZT90LmNvbm5lY3RlZENhbGxiYWNrKG8pOldvKHQsbyl9fWZ1bmN0aW9uIHpvKHQsZSl7dmFyIG49W107Zm9yKElvKHQsZSwoZnVuY3Rpb24odCl7cmV0dXJuIG4ucHVzaCh0KX0pKSxlPTA7ZTxuLmxlbmd0aDtlKyspe3ZhciBvPW5bZV07MT09PW8uX19DRV9zdGF0ZSYmdC5kaXNjb25uZWN0ZWRDYWxsYmFjayhvKX19ZnVuY3Rpb24gcW8odCxlLG4pe3ZhciBvPShuPXZvaWQgMD09PW4/e306bikua2IsaT1uLnVwZ3JhZGV8fGZ1bmN0aW9uKGUpe3JldHVybiBXbyh0LGUpfSxyPVtdO2ZvcihJbyh0LGUsKGZ1bmN0aW9uKGUpe2lmKHQuUiYmVW8odCxlKSxcImxpbmtcIj09PWUubG9jYWxOYW1lJiZcImltcG9ydFwiPT09ZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpe3ZhciBuPWUuaW1wb3J0O24gaW5zdGFuY2VvZiBOb2RlJiYobi5fX0NFX2lzSW1wb3J0RG9jdW1lbnQ9ITAsbi5fX0NFX3JlZ2lzdHJ5PWRvY3VtZW50Ll9fQ0VfcmVnaXN0cnkpLG4mJlwiY29tcGxldGVcIj09PW4ucmVhZHlTdGF0ZT9uLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDplLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsKGZ1bmN0aW9uKCl7dmFyIG49ZS5pbXBvcnQ7aWYoIW4uX19DRV9kb2N1bWVudExvYWRIYW5kbGVkKXtuLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDt2YXIgcj1uZXcgU2V0O28mJihvLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiByLmFkZCh0KX0pKSxyLmRlbGV0ZShuKSkscW8odCxuLHtrYjpyLHVwZ3JhZGU6aX0pfX0pKX1lbHNlIHIucHVzaChlKX0pLG8pLGU9MDtlPHIubGVuZ3RoO2UrKylpKHJbZV0pfWZ1bmN0aW9uIFdvKHQsZSl7dHJ5e3ZhciBuPWUub3duZXJEb2N1bWVudCxvPW4uX19DRV9yZWdpc3RyeSxpPW8mJihuLmRlZmF1bHRWaWV3fHxuLl9fQ0VfaXNJbXBvcnREb2N1bWVudCk/ZWkobyxlLmxvY2FsTmFtZSk6dm9pZCAwO2lmKGkmJnZvaWQgMD09PWUuX19DRV9zdGF0ZSl7aS5jb25zdHJ1Y3Rpb25TdGFjay5wdXNoKGUpO3RyeXt0cnl7aWYobmV3IGkuY29uc3RydWN0b3JGdW5jdGlvbiE9PWUpdGhyb3cgRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3IgZGlkIG5vdCBwcm9kdWNlIHRoZSBlbGVtZW50IGJlaW5nIHVwZ3JhZGVkLlwiKX1maW5hbGx5e2kuY29uc3RydWN0aW9uU3RhY2sucG9wKCl9fWNhdGNoKHQpe3Rocm93IGUuX19DRV9zdGF0ZT0yLHR9aWYoZS5fX0NFX3N0YXRlPTEsZS5fX0NFX2RlZmluaXRpb249aSxpLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayYmZS5oYXNBdHRyaWJ1dGVzKCkpe3ZhciByPWkub2JzZXJ2ZWRBdHRyaWJ1dGVzO2ZvcihpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBhPXJbaV0scz1lLmdldEF0dHJpYnV0ZShhKTtudWxsIT09cyYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soZSxhLG51bGwscyxudWxsKX19a28oZSkmJnQuY29ubmVjdGVkQ2FsbGJhY2soZSl9fWNhdGNoKHQpe1pvKHQpfX1mdW5jdGlvbiBHbyh0LGUsbixvKXt2YXIgaT1lLl9fQ0VfcmVnaXN0cnk7aWYoaSYmKG51bGw9PT1vfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PW8pJiYoaT1laShpLG4pKSl0cnl7dmFyIHI9bmV3IGkuY29uc3RydWN0b3JGdW5jdGlvbjtpZih2b2lkIDA9PT1yLl9fQ0Vfc3RhdGV8fHZvaWQgMD09PXIuX19DRV9kZWZpbml0aW9uKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSByZXR1cm5lZCB2YWx1ZSB3YXMgbm90IGNvbnN0cnVjdGVkIHdpdGggdGhlIEhUTUxFbGVtZW50IGNvbnN0cnVjdG9yLlwiKTtpZihcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiE9PXIubmFtZXNwYWNlVVJJKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50J3MgbmFtZXNwYWNlIG11c3QgYmUgdGhlIEhUTUwgbmFtZXNwYWNlLlwiKTtpZihyLmhhc0F0dHJpYnV0ZXMoKSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1wiK24rXCInOiBUaGUgY29uc3RydWN0ZWQgZWxlbWVudCBtdXN0IG5vdCBoYXZlIGFueSBhdHRyaWJ1dGVzLlwiKTtpZihudWxsIT09ci5maXJzdENoaWxkKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50IG11c3Qgbm90IGhhdmUgYW55IGNoaWxkcmVuLlwiKTtpZihudWxsIT09ci5wYXJlbnROb2RlKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50IG11c3Qgbm90IGhhdmUgYSBwYXJlbnQgbm9kZS5cIik7aWYoci5vd25lckRvY3VtZW50IT09ZSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1wiK24rXCInOiBUaGUgY29uc3RydWN0ZWQgZWxlbWVudCdzIG93bmVyIGRvY3VtZW50IGlzIGluY29ycmVjdC5cIik7aWYoci5sb2NhbE5hbWUhPT1uKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnXCIrbitcIic6IFRoZSBjb25zdHJ1Y3RlZCBlbGVtZW50J3MgbG9jYWwgbmFtZSBpcyBpbmNvcnJlY3QuXCIpO3JldHVybiByfWNhdGNoKGkpe3JldHVybiBabyhpKSxlPW51bGw9PT1vPyRuLmNhbGwoZSxuKTpRbi5jYWxsKGUsbyxuKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxIVE1MVW5rbm93bkVsZW1lbnQucHJvdG90eXBlKSxlLl9fQ0Vfc3RhdGU9MixlLl9fQ0VfZGVmaW5pdGlvbj12b2lkIDAsVW8odCxlKSxlfXJldHVybiBVbyh0LGU9bnVsbD09PW8/JG4uY2FsbChlLG4pOlFuLmNhbGwoZSxvLG4pKSxlfWZ1bmN0aW9uIFpvKHQpe3ZhciBlPXQubWVzc2FnZSxuPXQuc291cmNlVVJMfHx0LmZpbGVOYW1lfHxcIlwiLG89dC5saW5lfHx0LmxpbmVOdW1iZXJ8fDAsaT10LmNvbHVtbnx8dC5jb2x1bW5OdW1iZXJ8fDAscj12b2lkIDA7dm9pZCAwPT09RXJyb3JFdmVudC5wcm90b3R5cGUuaW5pdEVycm9yRXZlbnQ/cj1uZXcgRXJyb3JFdmVudChcImVycm9yXCIse2NhbmNlbGFibGU6ITAsbWVzc2FnZTplLGZpbGVuYW1lOm4sbGluZW5vOm8sY29sbm86aSxlcnJvcjp0fSk6KChyPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXJyb3JFdmVudFwiKSkuaW5pdEVycm9yRXZlbnQoXCJlcnJvclwiLCExLCEwLGUsbixvKSxyLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0UHJldmVudGVkXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19KX0pLHZvaWQgMD09PXIuZXJyb3ImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZXJyb3JcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9fSksd2luZG93LmRpc3BhdGNoRXZlbnQociksci5kZWZhdWx0UHJldmVudGVkfHxjb25zb2xlLmVycm9yKHQpfWZ1bmN0aW9uIFlvKCl7dmFyIHQ9dGhpczt0aGlzLkM9dm9pZCAwLHRoaXMuQ2E9bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe3QuYT1lfSkpfWZ1bmN0aW9uIFhvKHQpe3ZhciBlPWRvY3VtZW50O3RoaXMuUz12b2lkIDAsdGhpcy5NPXQsdGhpcy5hPWUscW8odGhpcy5NLHRoaXMuYSksXCJsb2FkaW5nXCI9PT10aGlzLmEucmVhZHlTdGF0ZSYmKHRoaXMuUz1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmIuYmluZCh0aGlzKSksdGhpcy5TLm9ic2VydmUodGhpcy5hLHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0pKX1mdW5jdGlvbiBKbyh0KXt0LlMmJnQuUy5kaXNjb25uZWN0KCl9ZnVuY3Rpb24gS28odCl7dGhpcy5mYT1uZXcgTWFwLHRoaXMuZ2E9bmV3IE1hcCx0aGlzLnhhPW5ldyBNYXAsdGhpcy5uYT0hMSx0aGlzLnFhPW5ldyBNYXAsdGhpcy5lYT1mdW5jdGlvbih0KXtyZXR1cm4gdCgpfSx0aGlzLlA9ITEsdGhpcy5oYT1bXSx0aGlzLk09dCx0aGlzLnlhPXQuamI/bmV3IFhvKHQpOnZvaWQgMH1mdW5jdGlvbiAkbyh0LGUpe2lmKCFQbyhlKSl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgZWxlbWVudCBuYW1lICdcIitlK1wiJyBpcyBub3QgdmFsaWQuXCIpO2lmKGVpKHQsZSkpdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IHdpdGggbmFtZSAnXCIrZStcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtpZih0Lm5hKXRocm93IEVycm9yKFwiQSBjdXN0b20gZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIGRlZmluZWQuXCIpfWZ1bmN0aW9uIFFvKHQsZSxuKXt2YXIgbzt0Lm5hPSEwO3RyeXt2YXIgaT1uLnByb3RvdHlwZTtpZighKGkgaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3IncyBwcm90b3R5cGUgaXMgbm90IGFuIG9iamVjdC5cIik7dmFyIHI9ZnVuY3Rpb24odCl7dmFyIGU9aVt0XTtpZih2b2lkIDAhPT1lJiYhKGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgRXJyb3IoXCJUaGUgJ1wiK3QrXCInIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7cmV0dXJuIGV9LGE9cihcImNvbm5lY3RlZENhbGxiYWNrXCIpLHM9cihcImRpc2Nvbm5lY3RlZENhbGxiYWNrXCIpLGw9cihcImFkb3B0ZWRDYWxsYmFja1wiKSxjPShvPXIoXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIikpJiZuLm9ic2VydmVkQXR0cmlidXRlc3x8W119Y2F0Y2godCl7dGhyb3cgdH1maW5hbGx5e3QubmE9ITF9cmV0dXJuIG49e2xvY2FsTmFtZTplLGNvbnN0cnVjdG9yRnVuY3Rpb246bixjb25uZWN0ZWRDYWxsYmFjazphLGRpc2Nvbm5lY3RlZENhbGxiYWNrOnMsYWRvcHRlZENhbGxiYWNrOmwsYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrOm8sb2JzZXJ2ZWRBdHRyaWJ1dGVzOmMsY29uc3RydWN0aW9uU3RhY2s6W119LHQuZ2Euc2V0KGUsbiksdC54YS5zZXQobi5jb25zdHJ1Y3RvckZ1bmN0aW9uLG4pLG59ZnVuY3Rpb24gdGkodCl7aWYoITEhPT10LlApe3QuUD0hMTtmb3IodmFyIGU9W10sbj10LmhhLG89bmV3IE1hcCxpPTA7aTxuLmxlbmd0aDtpKyspby5zZXQobltpXSxbXSk7Zm9yKHFvKHQuTSxkb2N1bWVudCx7dXBncmFkZTpmdW5jdGlvbihuKXtpZih2b2lkIDA9PT1uLl9fQ0Vfc3RhdGUpe3ZhciBpPW4ubG9jYWxOYW1lLHI9by5nZXQoaSk7cj9yLnB1c2gobik6dC5nYS5oYXMoaSkmJmUucHVzaChuKX19fSksaT0wO2k8ZS5sZW5ndGg7aSsrKVdvKHQuTSxlW2ldKTtmb3IoaT0wO2k8bi5sZW5ndGg7aSsrKXtmb3IodmFyIHI9bltpXSxhPW8uZ2V0KHIpLHM9MDtzPGEubGVuZ3RoO3MrKylXbyh0Lk0sYVtzXSk7KHI9dC5xYS5nZXQocikpJiZyLnJlc29sdmUodm9pZCAwKX1uLmxlbmd0aD0wfX1mdW5jdGlvbiBlaSh0LGUpe3ZhciBuPXQuZ2EuZ2V0KGUpO2lmKG4pcmV0dXJuIG47aWYobj10LmZhLmdldChlKSl7dC5mYS5kZWxldGUoZSk7dHJ5e3JldHVybiBRbyh0LGUsbigpKX1jYXRjaCh0KXtabyh0KX19fWZ1bmN0aW9uIG5pKHQsZSxuKXtmdW5jdGlvbiBvKGUpe3JldHVybiBmdW5jdGlvbihuKXtmb3IodmFyIG89W10saT0wO2k8YXJndW1lbnRzLmxlbmd0aDsrK2kpb1tpXT1hcmd1bWVudHNbaV07aT1bXTtmb3IodmFyIHI9W10sYT0wO2E8by5sZW5ndGg7YSsrKXt2YXIgcz1vW2FdO2lmKHMgaW5zdGFuY2VvZiBFbGVtZW50JiZrbyhzKSYmci5wdXNoKHMpLHMgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihzPXMuZmlyc3RDaGlsZDtzO3M9cy5uZXh0U2libGluZylpLnB1c2gocyk7ZWxzZSBpLnB1c2gocyl9Zm9yKGUuYXBwbHkodGhpcyxvKSxvPTA7bzxyLmxlbmd0aDtvKyspem8odCxyW29dKTtpZihrbyh0aGlzKSlmb3Iobz0wO288aS5sZW5ndGg7bysrKShyPWlbb10paW5zdGFuY2VvZiBFbGVtZW50JiZCbyh0LHIpfX12b2lkIDAhPT1uLnByZXBlbmQmJihlLnByZXBlbmQ9byhuLnByZXBlbmQpKSx2b2lkIDAhPT1uLmFwcGVuZCYmKGUuYXBwZW5kPW8obi5hcHBlbmQpKX1mdW5jdGlvbiBvaSh0KXtmdW5jdGlvbiBlKGUsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpbm5lckhUTUxcIix7ZW51bWVyYWJsZTpuLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpuLmdldCxzZXQ6ZnVuY3Rpb24oZSl7dmFyIG89dGhpcyxpPXZvaWQgMDtpZihrbyh0aGlzKSYmKGk9W10sSW8odCx0aGlzLChmdW5jdGlvbih0KXt0IT09byYmaS5wdXNoKHQpfSkpKSxuLnNldC5jYWxsKHRoaXMsZSksaSlmb3IodmFyIHI9MDtyPGkubGVuZ3RoO3IrKyl7dmFyIGE9aVtyXTsxPT09YS5fX0NFX3N0YXRlJiZ0LmRpc2Nvbm5lY3RlZENhbGxiYWNrKGEpfXJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuX19DRV9yZWdpc3RyeT9xbyh0LHRoaXMpOkhvKHQsdGhpcyksZX19KX1mdW5jdGlvbiBuKGUsbil7ZS5pbnNlcnRBZGphY2VudEVsZW1lbnQ9ZnVuY3Rpb24oZSxvKXt2YXIgaT1rbyhvKTtyZXR1cm4gZT1uLmNhbGwodGhpcyxlLG8pLGkmJnpvKHQsbyksa28oZSkmJkJvKHQsbyksZX19ZnVuY3Rpb24gbyhlLG4pe2Z1bmN0aW9uIG8oZSxuKXtmb3IodmFyIG89W107ZSE9PW47ZT1lLm5leHRTaWJsaW5nKW8ucHVzaChlKTtmb3Iobj0wO248by5sZW5ndGg7bisrKXFvKHQsb1tuXSl9ZS5pbnNlcnRBZGphY2VudEhUTUw9ZnVuY3Rpb24odCxlKXtpZihcImJlZm9yZWJlZ2luXCI9PT0odD10LnRvTG93ZXJDYXNlKCkpKXt2YXIgaT10aGlzLnByZXZpb3VzU2libGluZztuLmNhbGwodGhpcyx0LGUpLG8oaXx8dGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQsdGhpcyl9ZWxzZSBpZihcImFmdGVyYmVnaW5cIj09PXQpaT10aGlzLmZpcnN0Q2hpbGQsbi5jYWxsKHRoaXMsdCxlKSxvKHRoaXMuZmlyc3RDaGlsZCxpKTtlbHNlIGlmKFwiYmVmb3JlZW5kXCI9PT10KWk9dGhpcy5sYXN0Q2hpbGQsbi5jYWxsKHRoaXMsdCxlKSxvKGl8fHRoaXMuZmlyc3RDaGlsZCxudWxsKTtlbHNle2lmKFwiYWZ0ZXJlbmRcIiE9PXQpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHZhbHVlIHByb3ZpZGVkIChcIitTdHJpbmcodCkrXCIpIGlzIG5vdCBvbmUgb2YgJ2JlZm9yZWJlZ2luJywgJ2FmdGVyYmVnaW4nLCAnYmVmb3JlZW5kJywgb3IgJ2FmdGVyZW5kJy5cIik7aT10aGlzLm5leHRTaWJsaW5nLG4uY2FsbCh0aGlzLHQsZSksbyh0aGlzLm5leHRTaWJsaW5nLGkpfX19aG8mJihFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3c9ZnVuY3Rpb24oZSl7aWYoZT1oby5jYWxsKHRoaXMsZSksdC5SJiYhZS5fX0NFX3BhdGNoZWQpe2UuX19DRV9wYXRjaGVkPSEwO2Zvcih2YXIgbj0wO248dC5YLmxlbmd0aDtuKyspdC5YW25dKGUpfXJldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1lfSksZm8mJmZvLmdldD9lKEVsZW1lbnQucHJvdG90eXBlLGZvKTpNbyYmTW8uZ2V0P2UoSFRNTEVsZW1lbnQucHJvdG90eXBlLE1vKTpmdW5jdGlvbih0LGUpe3QuUj0hMCx0LmEucHVzaChlKX0odCwoZnVuY3Rpb24odCl7ZSh0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcm8uY2FsbCh0aGlzLCEwKS5pbm5lckhUTUx9LHNldDpmdW5jdGlvbih0KXt2YXIgZT1cInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZSxuPWU/dGhpcy5jb250ZW50OnRoaXMsbz1Rbi5jYWxsKGRvY3VtZW50LHRoaXMubmFtZXNwYWNlVVJJLHRoaXMubG9jYWxOYW1lKTtmb3Ioby5pbm5lckhUTUw9dDswPG4uY2hpbGROb2Rlcy5sZW5ndGg7KWxvLmNhbGwobixuLmNoaWxkTm9kZXNbMF0pO2Zvcih0PWU/by5jb250ZW50Om87MDx0LmNoaWxkTm9kZXMubGVuZ3RoOylhby5jYWxsKG4sdC5jaGlsZE5vZGVzWzBdKX19KX0pKSxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSxuKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBfby5jYWxsKHRoaXMsZSxuKTt2YXIgbz1wby5jYWxsKHRoaXMsZSk7X28uY2FsbCh0aGlzLGUsbiksbj1wby5jYWxsKHRoaXMsZSksdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxlLG8sbixudWxsKX0sRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTlM9ZnVuY3Rpb24oZSxuLG8pe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIHlvLmNhbGwodGhpcyxlLG4sbyk7dmFyIGk9dm8uY2FsbCh0aGlzLGUsbik7eW8uY2FsbCh0aGlzLGUsbixvKSxvPXZvLmNhbGwodGhpcyxlLG4pLHQuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsbixpLG8sZSl9LEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZT1mdW5jdGlvbihlKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBtby5jYWxsKHRoaXMsZSk7dmFyIG49cG8uY2FsbCh0aGlzLGUpO21vLmNhbGwodGhpcyxlKSxudWxsIT09biYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxlLG4sbnVsbCxudWxsKX0sRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlM9ZnVuY3Rpb24oZSxuKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBnby5jYWxsKHRoaXMsZSxuKTt2YXIgbz12by5jYWxsKHRoaXMsZSxuKTtnby5jYWxsKHRoaXMsZSxuKTt2YXIgaT12by5jYWxsKHRoaXMsZSxuKTtvIT09aSYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxuLG8saSxlKX0sRG8/bihIVE1MRWxlbWVudC5wcm90b3R5cGUsRG8pOmJvJiZuKEVsZW1lbnQucHJvdG90eXBlLGJvKSxMbz9vKEhUTUxFbGVtZW50LnByb3RvdHlwZSxMbyk6d28mJm8oRWxlbWVudC5wcm90b3R5cGUsd28pLG5pKHQsRWxlbWVudC5wcm90b3R5cGUse3ByZXBlbmQ6RW8sYXBwZW5kOk5vfSksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZnVuY3Rpb24obil7Zm9yKHZhciBvPVtdLGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7KytpKW9baV09YXJndW1lbnRzW2ldO2k9W107Zm9yKHZhciByPVtdLGE9MDthPG8ubGVuZ3RoO2ErKyl7dmFyIHM9b1thXTtpZihzIGluc3RhbmNlb2YgRWxlbWVudCYma28ocykmJnIucHVzaChzKSxzIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3Iocz1zLmZpcnN0Q2hpbGQ7cztzPXMubmV4dFNpYmxpbmcpaS5wdXNoKHMpO2Vsc2UgaS5wdXNoKHMpfWZvcihlLmFwcGx5KHRoaXMsbyksbz0wO288ci5sZW5ndGg7bysrKXpvKHQscltvXSk7aWYoa28odGhpcykpZm9yKG89MDtvPGkubGVuZ3RoO28rKykocj1pW29dKWluc3RhbmNlb2YgRWxlbWVudCYmQm8odCxyKX19dmFyIG49RWxlbWVudC5wcm90b3R5cGU7dm9pZCAwIT09Q28mJihuLmJlZm9yZT1lKENvKSksdm9pZCAwIT09U28mJihuLmFmdGVyPWUoU28pKSx2b2lkIDAhPT1UbyYmKG4ucmVwbGFjZVdpdGg9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPVtdLG89MDtvPGFyZ3VtZW50cy5sZW5ndGg7KytvKW5bb109YXJndW1lbnRzW29dO289W107Zm9yKHZhciBpPVtdLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGE9bltyXTtpZihhIGluc3RhbmNlb2YgRWxlbWVudCYma28oYSkmJmkucHVzaChhKSxhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpby5wdXNoKGEpO2Vsc2Ugby5wdXNoKGEpfWZvcihyPWtvKHRoaXMpLFRvLmFwcGx5KHRoaXMsbiksbj0wO248aS5sZW5ndGg7bisrKXpvKHQsaVtuXSk7aWYocilmb3Ioem8odCx0aGlzKSxuPTA7bjxvLmxlbmd0aDtuKyspKGk9b1tuXSlpbnN0YW5jZW9mIEVsZW1lbnQmJkJvKHQsaSl9KSx2b2lkIDAhPT1PbyYmKG4ucmVtb3ZlPWZ1bmN0aW9uKCl7dmFyIGU9a28odGhpcyk7T28uY2FsbCh0aGlzKSxlJiZ6byh0LHRoaXMpfSl9KHQpfVZvLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbih0KXt2YXIgZT10Ll9fQ0VfZGVmaW5pdGlvbjtpZihlLmNvbm5lY3RlZENhbGxiYWNrKXRyeXtlLmNvbm5lY3RlZENhbGxiYWNrLmNhbGwodCl9Y2F0Y2godCl7Wm8odCl9fSxWby5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s9ZnVuY3Rpb24odCl7dmFyIGU9dC5fX0NFX2RlZmluaXRpb247aWYoZS5kaXNjb25uZWN0ZWRDYWxsYmFjayl0cnl7ZS5kaXNjb25uZWN0ZWRDYWxsYmFjay5jYWxsKHQpfWNhdGNoKHQpe1pvKHQpfX0sVm8ucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaz1mdW5jdGlvbih0LGUsbixvLGkpe3ZhciByPXQuX19DRV9kZWZpbml0aW9uO2lmKHIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJiYtMTxyLm9ic2VydmVkQXR0cmlidXRlcy5pbmRleE9mKGUpKXRyeXtyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjay5jYWxsKHQsZSxuLG8saSl9Y2F0Y2godCl7Wm8odCl9fSxZby5wcm90b3R5cGUucmVzb2x2ZT1mdW5jdGlvbih0KXtpZih0aGlzLkMpdGhyb3cgRXJyb3IoXCJBbHJlYWR5IHJlc29sdmVkLlwiKTt0aGlzLkM9dCx0aGlzLmEodCl9LFhvLnByb3RvdHlwZS5iPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYS5yZWFkeVN0YXRlO2ZvcihcImludGVyYWN0aXZlXCIhPT1lJiZcImNvbXBsZXRlXCIhPT1lfHxKbyh0aGlzKSxlPTA7ZTx0Lmxlbmd0aDtlKyspZm9yKHZhciBuPXRbZV0uYWRkZWROb2RlcyxvPTA7bzxuLmxlbmd0aDtvKyspcW8odGhpcy5NLG5bb10pfSwobj1Lby5wcm90b3R5cGUpLiRhPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZighKGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yIGdldHRlcnMgbXVzdCBiZSBmdW5jdGlvbnMuXCIpOyRvKHRoaXMsdCksdGhpcy5mYS5zZXQodCxlKSx0aGlzLmhhLnB1c2godCksdGhpcy5QfHwodGhpcy5QPSEwLHRoaXMuZWEoKGZ1bmN0aW9uKCl7cmV0dXJuIHRpKG4pfSkpKX0sbi5kZWZpbmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2lmKCEoZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3JzIG11c3QgYmUgZnVuY3Rpb25zLlwiKTskbyh0aGlzLHQpLFFvKHRoaXMsdCxlKSx0aGlzLmhhLnB1c2godCksdGhpcy5QfHwodGhpcy5QPSEwLHRoaXMuZWEoKGZ1bmN0aW9uKCl7cmV0dXJuIHRpKG4pfSkpKX0sbi51cGdyYWRlPWZ1bmN0aW9uKHQpe3FvKHRoaXMuTSx0KX0sbi5nZXQ9ZnVuY3Rpb24odCl7aWYodD1laSh0aGlzLHQpKXJldHVybiB0LmNvbnN0cnVjdG9yRnVuY3Rpb259LG4ud2hlbkRlZmluZWQ9ZnVuY3Rpb24odCl7aWYoIVBvKHQpKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgU3ludGF4RXJyb3IoXCInXCIrdCtcIicgaXMgbm90IGEgdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZS5cIikpO3ZhciBlPXRoaXMucWEuZ2V0KHQpO2lmKGUpcmV0dXJuIGUuQ2E7ZT1uZXcgWW8sdGhpcy5xYS5zZXQodCxlKTt2YXIgbj10aGlzLmdhLmhhcyh0KXx8dGhpcy5mYS5oYXModCk7cmV0dXJuIHQ9LTE9PT10aGlzLmhhLmluZGV4T2YodCksbiYmdCYmZS5yZXNvbHZlKHZvaWQgMCksZS5DYX0sbi5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrPWZ1bmN0aW9uKHQpe3RoaXMueWEmJkpvKHRoaXMueWEpO3ZhciBlPXRoaXMuZWE7dGhpcy5lYT1mdW5jdGlvbihuKXtyZXR1cm4gdCgoZnVuY3Rpb24oKXtyZXR1cm4gZShuKX0pKX19LHdpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnk9S28sS28ucHJvdG90eXBlLmRlZmluZT1Lby5wcm90b3R5cGUuZGVmaW5lLEtvLnByb3RvdHlwZS51cGdyYWRlPUtvLnByb3RvdHlwZS51cGdyYWRlLEtvLnByb3RvdHlwZS5nZXQ9S28ucHJvdG90eXBlLmdldCxLby5wcm90b3R5cGUud2hlbkRlZmluZWQ9S28ucHJvdG90eXBlLndoZW5EZWZpbmVkLEtvLnByb3RvdHlwZS5wb2x5ZmlsbERlZmluZUxhenk9S28ucHJvdG90eXBlLiRhLEtvLnByb3RvdHlwZS5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrPUtvLnByb3RvdHlwZS5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrO3ZhciBpaT17fTt2YXIgcmk9d2luZG93LmN1c3RvbUVsZW1lbnRzO2Z1bmN0aW9uIGFpKCl7dmFyIHQ9bmV3IFZvOyFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpcy5jb25zdHJ1Y3RvcixuPWRvY3VtZW50Ll9fQ0VfcmVnaXN0cnkueGEuZ2V0KGUpO2lmKCFuKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCBhIGN1c3RvbSBlbGVtZW50OiBUaGUgY29uc3RydWN0b3Igd2FzIG5vdCByZWdpc3RlcmVkIHdpdGggYGN1c3RvbUVsZW1lbnRzYC5cIik7dmFyIG89bi5jb25zdHJ1Y3Rpb25TdGFjaztpZigwPT09by5sZW5ndGgpcmV0dXJuIG89JG4uY2FsbChkb2N1bWVudCxuLmxvY2FsTmFtZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKG8sZS5wcm90b3R5cGUpLG8uX19DRV9zdGF0ZT0xLG8uX19DRV9kZWZpbml0aW9uPW4sVW8odCxvKSxvO3ZhciBpPW8ubGVuZ3RoLTEscj1vW2ldO2lmKHI9PT1paSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1wiK24ubG9jYWxOYW1lK1wiJzogVGhpcyBlbGVtZW50IHdhcyBhbHJlYWR5IGNvbnN0cnVjdGVkLlwiKTtyZXR1cm4gb1tpXT1paSxPYmplY3Quc2V0UHJvdG90eXBlT2YocixlLnByb3RvdHlwZSksVW8odCxyKSxyfWUucHJvdG90eXBlPXhvLnByb3RvdHlwZSxPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiY29uc3RydWN0b3JcIix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6ZX0pLHdpbmRvdy5IVE1MRWxlbWVudD1lfSh0KSxmdW5jdGlvbih0KXtEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudD1mdW5jdGlvbihlKXtyZXR1cm4gR28odCx0aGlzLGUsbnVsbCl9LERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGU9dG8uY2FsbCh0aGlzLGUsISFuKSx0aGlzLl9fQ0VfcmVnaXN0cnk/cW8odCxlKTpIbyh0LGUpLGV9LERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlM9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gR28odCx0aGlzLG4sZSl9LG5pKHQsRG9jdW1lbnQucHJvdG90eXBlLHtwcmVwZW5kOmVvLGFwcGVuZDpub30pfSh0KSxuaSh0LERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtwcmVwZW5kOm9vLGFwcGVuZDppb30pLGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInRleHRDb250ZW50XCIse2VudW1lcmFibGU6bi5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6bi5nZXQsc2V0OmZ1bmN0aW9uKGUpe2lmKHRoaXMubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERSluLnNldC5jYWxsKHRoaXMsZSk7ZWxzZXt2YXIgbz12b2lkIDA7aWYodGhpcy5maXJzdENoaWxkKXt2YXIgaT10aGlzLmNoaWxkTm9kZXMscj1pLmxlbmd0aDtpZigwPHImJmtvKHRoaXMpKXtvPUFycmF5KHIpO2Zvcih2YXIgYT0wO2E8cjthKyspb1thXT1pW2FdfX1pZihuLnNldC5jYWxsKHRoaXMsZSksbylmb3IoZT0wO2U8by5sZW5ndGg7ZSsrKXpvKHQsb1tlXSl9fX0pfU5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZT1mdW5jdGlvbihlLG4pe2lmKGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgbz1GbyhlKTtpZihlPXNvLmNhbGwodGhpcyxlLG4pLGtvKHRoaXMpKWZvcihuPTA7bjxvLmxlbmd0aDtuKyspQm8odCxvW25dKTtyZXR1cm4gZX1yZXR1cm4gbz1lIGluc3RhbmNlb2YgRWxlbWVudCYma28oZSksbj1zby5jYWxsKHRoaXMsZSxuKSxvJiZ6byh0LGUpLGtvKHRoaXMpJiZCbyh0LGUpLG59LE5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkPWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgbj1GbyhlKTtpZihlPWFvLmNhbGwodGhpcyxlKSxrbyh0aGlzKSlmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKylCbyh0LG5bb10pO3JldHVybiBlfXJldHVybiBuPWUgaW5zdGFuY2VvZiBFbGVtZW50JiZrbyhlKSxvPWFvLmNhbGwodGhpcyxlKSxuJiZ6byh0LGUpLGtvKHRoaXMpJiZCbyh0LGUpLG99LE5vZGUucHJvdG90eXBlLmNsb25lTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gZT1yby5jYWxsKHRoaXMsISFlKSx0aGlzLm93bmVyRG9jdW1lbnQuX19DRV9yZWdpc3RyeT9xbyh0LGUpOkhvKHQsZSksZX0sTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQ9ZnVuY3Rpb24oZSl7dmFyIG49ZSBpbnN0YW5jZW9mIEVsZW1lbnQmJmtvKGUpLG89bG8uY2FsbCh0aGlzLGUpO3JldHVybiBuJiZ6byh0LGUpLG99LE5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZD1mdW5jdGlvbihlLG4pe2lmKGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgbz1GbyhlKTtpZihlPWNvLmNhbGwodGhpcyxlLG4pLGtvKHRoaXMpKWZvcih6byh0LG4pLG49MDtuPG8ubGVuZ3RoO24rKylCbyh0LG9bbl0pO3JldHVybiBlfW89ZSBpbnN0YW5jZW9mIEVsZW1lbnQmJmtvKGUpO3ZhciBpPWNvLmNhbGwodGhpcyxlLG4pLHI9a28odGhpcyk7cmV0dXJuIHImJnpvKHQsbiksbyYmem8odCxlKSxyJiZCbyh0LGUpLGl9LHVvJiZ1by5nZXQ/ZShOb2RlLnByb3RvdHlwZSx1byk6ZnVuY3Rpb24odCxlKXt0LlI9ITAsdC5YLnB1c2goZSl9KHQsKGZ1bmN0aW9uKHQpe2UodCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9dGhpcy5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWUubm9kZVR5cGUhPT1Ob2RlLkNPTU1FTlRfTk9ERSYmdC5wdXNoKGUudGV4dENvbnRlbnQpO3JldHVybiB0LmpvaW4oXCJcIil9LHNldDpmdW5jdGlvbih0KXtmb3IoO3RoaXMuZmlyc3RDaGlsZDspbG8uY2FsbCh0aGlzLHRoaXMuZmlyc3RDaGlsZCk7bnVsbCE9dCYmXCJcIiE9PXQmJmFvLmNhbGwodGhpcyxkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSl9fSl9KSl9KHQpLG9pKHQpLHQ9bmV3IEtvKHQpLGRvY3VtZW50Ll9fQ0VfcmVnaXN0cnk9dCxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LFwiY3VzdG9tRWxlbWVudHNcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6dH0pfWZ1bmN0aW9uIHNpKCl7dGhpcy5lbmQ9dGhpcy5zdGFydD0wLHRoaXMucnVsZXM9dGhpcy5wYXJlbnQ9dGhpcy5wcmV2aW91cz1udWxsLHRoaXMuY3NzVGV4dD10aGlzLnBhcnNlZENzc1RleHQ9XCJcIix0aGlzLmF0UnVsZT0hMSx0aGlzLnR5cGU9MCx0aGlzLnBhcnNlZFNlbGVjdG9yPXRoaXMuc2VsZWN0b3I9dGhpcy5rZXlmcmFtZXNOYW1lPVwiXCJ9ZnVuY3Rpb24gbGkodCl7dmFyIGU9dD10LnJlcGxhY2UoX2ksXCJcIikucmVwbGFjZShtaSxcIlwiKSxuPW5ldyBzaTtuLnN0YXJ0PTAsbi5lbmQ9ZS5sZW5ndGg7Zm9yKHZhciBvPW4saT0wLHI9ZS5sZW5ndGg7aTxyO2krKylpZihcIntcIj09PWVbaV0pe28ucnVsZXN8fChvLnJ1bGVzPVtdKTt2YXIgYT1vLHM9YS5ydWxlc1thLnJ1bGVzLmxlbmd0aC0xXXx8bnVsbDsobz1uZXcgc2kpLnN0YXJ0PWkrMSxvLnBhcmVudD1hLG8ucHJldmlvdXM9cyxhLnJ1bGVzLnB1c2gobyl9ZWxzZVwifVwiPT09ZVtpXSYmKG8uZW5kPWkrMSxvPW8ucGFyZW50fHxuKTtyZXR1cm4gZnVuY3Rpb24gdChlLG4pe3ZhciBvPW4uc3Vic3RyaW5nKGUuc3RhcnQsZS5lbmQtMSk7aWYoZS5wYXJzZWRDc3NUZXh0PWUuY3NzVGV4dD1vLnRyaW0oKSxlLnBhcmVudCYmKG89KG89KG89ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXFxcXChbMC05YS1mXXsxLDZ9KVxccy9naSwoZnVuY3Rpb24odCxlKXtmb3IoZT02LSh0PWUpLmxlbmd0aDtlLS07KXQ9XCIwXCIrdDtyZXR1cm5cIlxcXFxcIit0fSkpfShvPW4uc3Vic3RyaW5nKGUucHJldmlvdXM/ZS5wcmV2aW91cy5lbmQ6ZS5wYXJlbnQuc3RhcnQsZS5zdGFydC0xKSkpLnJlcGxhY2UoRWksXCIgXCIpKS5zdWJzdHJpbmcoby5sYXN0SW5kZXhPZihcIjtcIikrMSksbz1lLnBhcnNlZFNlbGVjdG9yPWUuc2VsZWN0b3I9by50cmltKCksZS5hdFJ1bGU9MD09PW8uaW5kZXhPZihcIkBcIiksZS5hdFJ1bGU/MD09PW8uaW5kZXhPZihcIkBtZWRpYVwiKT9lLnR5cGU9Zmk6by5tYXRjaCh3aSkmJihlLnR5cGU9ZGksZS5rZXlmcmFtZXNOYW1lPWUuc2VsZWN0b3Iuc3BsaXQoRWkpLnBvcCgpKTplLnR5cGU9MD09PW8uaW5kZXhPZihcIi0tXCIpP3BpOmhpKSxvPWUucnVsZXMpZm9yKHZhciBpPTAscj1vLmxlbmd0aCxhPXZvaWQgMDtpPHImJihhPW9baV0pO2krKyl0KGEsbik7cmV0dXJuIGV9KG4sdCl9cmkmJiFyaS5mb3JjZVBvbHlmaWxsJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByaS5kZWZpbmUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHJpLmdldHx8YWkoKSx3aW5kb3cuX19DRV9pbnN0YWxsUG9seWZpbGw9YWk7dmFyIGNpLHVpLGhpPTEsZGk9NyxmaT00LHBpPTFlMyxfaT0vXFwvXFwqW14qXSpcXCorKFteLypdW14qXSpcXCorKSpcXC8vZ2ltLG1pPS9AaW1wb3J0W147XSo7L2dpbSx2aT0vKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qPyg/Ols7XFxuXXwkKS9naW0seWk9Lyg/Ol5bXjtcXC1cXHN9XSspPy0tW147e31dKj86W157fTtdKj97W159XSo/fSg/Ols7XFxuXXwkKT8vZ2ltLGdpPS9AYXBwbHlcXHMqXFwoP1teKTtdKlxcKT9cXHMqKD86WztcXG5dfCQpPy9naW0sYmk9L1teOzpdKj86W147XSo/dmFyXFwoW147XSpcXCkoPzpbO1xcbl18JCk/L2dpbSx3aT0vXkBbXlxcc10qa2V5ZnJhbWVzLyxFaT0vXFxzKy9nLE5pPSEod2luZG93LlNoYWR5RE9NJiZ3aW5kb3cuU2hhZHlET00uaW5Vc2UpO2Z1bmN0aW9uIENpKHQpe2NpPSghdHx8IXQuc2hpbWNzc3Byb3BlcnRpZXMpJiYoTml8fCEobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC82MDF8RWRnZVxcLzE1Lyl8fCF3aW5kb3cuQ1NTfHwhQ1NTLnN1cHBvcnRzfHwhQ1NTLnN1cHBvcnRzKFwiYm94LXNoYWRvd1wiLFwiMCAwIDAgdmFyKC0tZm9vKVwiKSkpfXdpbmRvdy5TaGFkeUNTUyYmdm9pZCAwIT09d2luZG93LlNoYWR5Q1NTLmNzc0J1aWxkJiYodWk9d2luZG93LlNoYWR5Q1NTLmNzc0J1aWxkKTt2YXIgU2k9ISghd2luZG93LlNoYWR5Q1NTfHwhd2luZG93LlNoYWR5Q1NTLmRpc2FibGVSdW50aW1lKTt3aW5kb3cuU2hhZHlDU1MmJnZvaWQgMCE9PXdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3M/Y2k9d2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzczp3aW5kb3cuU2hhZHlDU1M/KENpKHdpbmRvdy5TaGFkeUNTUyksd2luZG93LlNoYWR5Q1NTPXZvaWQgMCk6Q2kod2luZG93LldlYkNvbXBvbmVudHMmJndpbmRvdy5XZWJDb21wb25lbnRzLmZsYWdzKTt2YXIgVGk9Y2ksT2k9Lyg/Ol58WztcXHN7XVxccyopKC0tW1xcdy1dKj8pXFxzKjpcXHMqKD86KCg/OicoPzpcXFxcJ3wuKSo/J3xcIig/OlxcXFxcInwuKSo/XCJ8XFwoW14pXSo/XFwpfFtefTt7XSkrKXxcXHsoW159XSopXFx9KD86KD89WztcXHN9XSl8JCkpL2dpLHhpPS8oPzpefFxcVyspQGFwcGx5XFxzKlxcKD8oW14pO1xcbl0qKVxcKT8vZ2ksTWk9LygtLVtcXHctXSspXFxzKihbOiw7KV18JCkvZ2ksRGk9LyhhbmltYXRpb25cXHMqOil8KGFuaW1hdGlvbi1uYW1lXFxzKjopLyxMaT0vQG1lZGlhXFxzKC4qKS8sQWk9L1xce1tefV0qXFx9L2csUGk9bmV3IFNldDtmdW5jdGlvbiBqaSh0LGUpe3JldHVybiB0PyhcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9bGkodCkpLGUmJlJpKHQsZSksZnVuY3Rpb24gdChlLG4sbyl7bz12b2lkIDA9PT1vP1wiXCI6bzt2YXIgaT1cIlwiO2lmKGUuY3NzVGV4dHx8ZS5ydWxlcyl7dmFyIHIsYT1lLnJ1bGVzO2lmKChyPWEpJiYocj0hKChyPWFbMF0pJiZyLnNlbGVjdG9yJiYwPT09ci5zZWxlY3Rvci5pbmRleE9mKFwiLS1cIikpKSxyKXtyPTA7Zm9yKHZhciBzPWEubGVuZ3RoLGw9dm9pZCAwO3I8cyYmKGw9YVtyXSk7cisrKWk9dChsLG4saSl9ZWxzZSBuP249ZS5jc3NUZXh0Om49KG49KG49ZS5jc3NUZXh0KS5yZXBsYWNlKHZpLFwiXCIpLnJlcGxhY2UoeWksXCJcIikpLnJlcGxhY2UoZ2ksXCJcIikucmVwbGFjZShiaSxcIlwiKSwoaT1uLnRyaW0oKSkmJihpPVwiICBcIitpK1wiXFxuXCIpfXJldHVybiBpJiYoZS5zZWxlY3RvciYmKG8rPWUuc2VsZWN0b3IrXCIge1xcblwiKSxvKz1pLGUuc2VsZWN0b3ImJihvKz1cIn1cXG5cXG5cIikpLG99KHQsVGkpKTpcIlwifWZ1bmN0aW9uIGtpKHQpe3JldHVybiF0Ll9fY3NzUnVsZXMmJnQudGV4dENvbnRlbnQmJih0Ll9fY3NzUnVsZXM9bGkodC50ZXh0Q29udGVudCkpLHQuX19jc3NSdWxlc3x8bnVsbH1mdW5jdGlvbiBGaSh0KXtyZXR1cm4hIXQucGFyZW50JiZ0LnBhcmVudC50eXBlPT09ZGl9ZnVuY3Rpb24gUmkodCxlLG4sbyl7aWYodCl7dmFyIGk9ITEscj10LnR5cGU7aWYobyYmcj09PWZpKXt2YXIgYT10LnNlbGVjdG9yLm1hdGNoKExpKTthJiYod2luZG93Lm1hdGNoTWVkaWEoYVsxXSkubWF0Y2hlc3x8KGk9ITApKX1pZihyPT09aGk/ZSh0KTpuJiZyPT09ZGk/bih0KTpyPT09cGkmJihpPSEwKSwodD10LnJ1bGVzKSYmIWkpZm9yKGk9MCxyPXQubGVuZ3RoLGE9dm9pZCAwO2k8ciYmKGE9dFtpXSk7aSsrKVJpKGEsZSxuLG8pfX1mdW5jdGlvbiBWaSh0LGUsbixvKXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIGUmJmkuc2V0QXR0cmlidXRlKFwic2NvcGVcIixlKSxpLnRleHRDb250ZW50PXQsVWkoaSxuLG8pLGl9dmFyIElpPW51bGw7ZnVuY3Rpb24gSGkodCl7dD1kb2N1bWVudC5jcmVhdGVDb21tZW50KFwiIFNoYWR5IERPTSBzdHlsZXMgZm9yIFwiK3QrXCIgXCIpO3ZhciBlPWRvY3VtZW50LmhlYWQ7cmV0dXJuIGUuaW5zZXJ0QmVmb3JlKHQsKElpP0lpLm5leHRTaWJsaW5nOm51bGwpfHxlLmZpcnN0Q2hpbGQpLElpPXR9ZnVuY3Rpb24gVWkodCxlLG4peyhlPWV8fGRvY3VtZW50LmhlYWQpLmluc2VydEJlZm9yZSh0LG4mJm4ubmV4dFNpYmxpbmd8fGUuZmlyc3RDaGlsZCksSWk/dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihJaSk9PT1Ob2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyYmKElpPXQpOklpPXR9ZnVuY3Rpb24gQmkodCxlKXtmb3IodmFyIG49MCxvPXQubGVuZ3RoO2U8bztlKyspaWYoXCIoXCI9PT10W2VdKW4rKztlbHNlIGlmKFwiKVwiPT09dFtlXSYmMD09LS1uKXJldHVybiBlO3JldHVybi0xfWZ1bmN0aW9uIHppKHQsZSl7Tmk/dC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGUpOndpbmRvdy5TaGFkeURPTS5uYXRpdmVNZXRob2RzLnNldEF0dHJpYnV0ZS5jYWxsKHQsXCJjbGFzc1wiLGUpfXZhciBxaT13aW5kb3cuU2hhZHlET00mJndpbmRvdy5TaGFkeURPTS53cmFwfHxmdW5jdGlvbih0KXtyZXR1cm4gdH07ZnVuY3Rpb24gV2kodCl7dmFyIGU9dC5sb2NhbE5hbWUsbj1cIlwiO3JldHVybiBlPy0xPGUuaW5kZXhPZihcIi1cIil8fChuPWUsZT10LmdldEF0dHJpYnV0ZSYmdC5nZXRBdHRyaWJ1dGUoXCJpc1wiKXx8XCJcIik6KGU9dC5pcyxuPXQuZXh0ZW5kcykse2lzOmUsY2E6bn19ZnVuY3Rpb24gR2kodCl7Zm9yKHZhciBlPVtdLG49XCJcIixvPTA7MDw9byYmbzx0Lmxlbmd0aDtvKyspaWYoXCIoXCI9PT10W29dKXt2YXIgaT1CaSh0LG8pO24rPXQuc2xpY2UobyxpKzEpLG89aX1lbHNlXCIsXCI9PT10W29dPyhlLnB1c2gobiksbj1cIlwiKTpuKz10W29dO3JldHVybiBuJiZlLnB1c2gobiksZX1mdW5jdGlvbiBaaSh0KXtpZih2b2lkIDAhPT11aSlyZXR1cm4gdWk7aWYodm9pZCAwPT09dC5fX2Nzc0J1aWxkKXt2YXIgZT10LmdldEF0dHJpYnV0ZShcImNzcy1idWlsZFwiKTtpZihlKXQuX19jc3NCdWlsZD1lO2Vsc2V7aWYoXCJcIiE9PShlPShlPVwidGVtcGxhdGVcIj09PXQubG9jYWxOYW1lP3QuY29udGVudC5maXJzdENoaWxkOnQuZmlyc3RDaGlsZClpbnN0YW5jZW9mIENvbW1lbnQmJlwiY3NzLWJ1aWxkXCI9PT0oZT1lLnRleHRDb250ZW50LnRyaW0oKS5zcGxpdChcIjpcIikpWzBdP2VbMV06XCJcIikpe3ZhciBuPVwidGVtcGxhdGVcIj09PXQubG9jYWxOYW1lP3QuY29udGVudC5maXJzdENoaWxkOnQuZmlyc3RDaGlsZDtuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobil9dC5fX2Nzc0J1aWxkPWV9fXJldHVybiB0Ll9fY3NzQnVpbGR8fFwiXCJ9ZnVuY3Rpb24gWWkodCl7cmV0dXJuIShcIlwiPT09KHQ9dm9pZCAwPT09dD9cIlwiOnQpfHwhVGkpJiYoTmk/XCJzaGFkb3dcIj09PXQ6XCJzaGFkeVwiPT09dCl9ZnVuY3Rpb24gWGkoKXt9ZnVuY3Rpb24gSmkodCxlLG4pe3ZhciBvO2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmbihlKSxvPVwidGVtcGxhdGVcIj09PWUubG9jYWxOYW1lPyhlLmNvbnRlbnR8fGUuX2NvbnRlbnR8fGUpLmNoaWxkTm9kZXM6ZS5jaGlsZHJlbnx8ZS5jaGlsZE5vZGVzKWZvcihlPTA7ZTxvLmxlbmd0aDtlKyspSmkodCxvW2VdLG4pfWZ1bmN0aW9uIEtpKHQsZSxuKXtpZihlKWlmKHQuY2xhc3NMaXN0KW4/KHQuY2xhc3NMaXN0LnJlbW92ZShcInN0eWxlLXNjb3BlXCIpLHQuY2xhc3NMaXN0LnJlbW92ZShlKSk6KHQuY2xhc3NMaXN0LmFkZChcInN0eWxlLXNjb3BlXCIpLHQuY2xhc3NMaXN0LmFkZChlKSk7ZWxzZSBpZih0LmdldEF0dHJpYnV0ZSl7dmFyIG89dC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtuP28mJnppKHQsZT1vLnJlcGxhY2UoXCJzdHlsZS1zY29wZVwiLFwiXCIpLnJlcGxhY2UoZSxcIlwiKSk6emkodCwobz9vK1wiIFwiOlwiXCIpK1wic3R5bGUtc2NvcGUgXCIrZSl9fWZ1bmN0aW9uICRpKHQsZSxuKXtKaShwcix0LChmdW5jdGlvbih0KXtLaSh0LGUsITApLEtpKHQsbil9KSl9ZnVuY3Rpb24gUWkodCxlKXtKaShwcix0LChmdW5jdGlvbih0KXtLaSh0LGV8fFwiXCIsITApfSkpfWZ1bmN0aW9uIHRyKHQsZSxuLG8saSl7dmFyIHI9cHI7cmV0dXJuXCJcIj09PShpPXZvaWQgMD09PWk/XCJcIjppKSYmKE5pfHxcInNoYWR5XCI9PT0odm9pZCAwPT09bz9cIlwiOm8pP2k9amkoZSxuKTppPWZ1bmN0aW9uKHQsZSxuLG8saSl7dmFyIHI9ZXIobixvKTtyZXR1cm4gbj1uP1wiLlwiK246XCJcIixqaShlLChmdW5jdGlvbihlKXtlLmN8fChlLnNlbGVjdG9yPWUudz1ucih0LGUsdC5iLG4sciksZS5jPSEwKSxpJiZpKGUsbixyKX0pKX0ocixlLCh0PVdpKHQpKS5pcyx0LmNhLG4pK1wiXFxuXFxuXCIpLGkudHJpbSgpfWZ1bmN0aW9uIGVyKHQsZSl7cmV0dXJuIGU/XCJbaXM9XCIrdCtcIl1cIjp0fWZ1bmN0aW9uIG5yKHQsZSxuLG8saSl7dmFyIHI9R2koZS5zZWxlY3Rvcik7aWYoIUZpKGUpKXtlPTA7Zm9yKHZhciBhPXIubGVuZ3RoLHM9dm9pZCAwO2U8YSYmKHM9cltlXSk7ZSsrKXJbZV09bi5jYWxsKHQscyxvLGkpfXJldHVybiByLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuISF0fSkpLmpvaW4oXCIsXCIpfWZ1bmN0aW9uIG9yKHQpe3JldHVybiB0LnJlcGxhY2UoYXIsKGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4tMTxuLmluZGV4T2YoXCIrXCIpP249bi5yZXBsYWNlKC9cXCsvZyxcIl9fX1wiKTotMTxuLmluZGV4T2YoXCJfX19cIikmJihuPW4ucmVwbGFjZSgvX19fL2csXCIrXCIpKSxcIjpcIitlK1wiKFwiK24rXCIpXCJ9KSl9ZnVuY3Rpb24gaXIodCxlKXt0PXQuc3BsaXQoLyhcXFsuKz9cXF0pLyk7Zm9yKHZhciBuPVtdLG89MDtvPHQubGVuZ3RoO28rKylpZigxPT1vJTIpbi5wdXNoKHRbb10pO2Vsc2V7dmFyIGk9dFtvXTtcIlwiPT09aSYmbz09PXQubGVuZ3RoLTF8fCgoaT1pLnNwbGl0KFwiOlwiKSlbMF0rPWUsbi5wdXNoKGkuam9pbihcIjpcIikpKX1yZXR1cm4gbi5qb2luKFwiXCIpfWZ1bmN0aW9uIHJyKHQpe1wiOnJvb3RcIj09PXQuc2VsZWN0b3ImJih0LnNlbGVjdG9yPVwiaHRtbFwiKX1YaS5wcm90b3R5cGUuYj1mdW5jdGlvbih0LGUsbil7dmFyIG89ITE7dD10LnRyaW0oKTt2YXIgaT1hci50ZXN0KHQpO2kmJih0PW9yKHQ9dC5yZXBsYWNlKGFyLChmdW5jdGlvbih0LGUsbil7cmV0dXJuXCI6XCIrZStcIihcIituLnJlcGxhY2UoL1xccy9nLFwiXCIpK1wiKVwifSkpKSk7dmFyIHI9ZnIudGVzdCh0KTtpZihyKXt2YXIgYT1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj1bXTtlPXQubWF0Y2goZnIpOyl7dmFyIG89ZS5pbmRleCxpPUJpKHQsbyk7aWYoLTE9PT1pKXRocm93IEVycm9yKGUuaW5wdXQrXCIgc2VsZWN0b3IgbWlzc2luZyAnKSdcIik7ZT10LnNsaWNlKG8saSsxKSx0PXQucmVwbGFjZShlLFwi7oCAXCIpLG4ucHVzaChlKX1yZXR1cm57d2E6dCxtYXRjaGVzOm59fSh0KTt0PWEud2EsYT1hLm1hdGNoZXN9cmV0dXJuIHQ9KHQ9dC5yZXBsYWNlKGNyLFwiOmhvc3QgJDFcIikpLnJlcGxhY2Uoc3IsKGZ1bmN0aW9uKHQsaSxyKXtyZXR1cm4gb3x8KHQ9ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9dC5pbmRleE9mKFwiOjpzbG90dGVkXCIpO2lmKDA8PXQuaW5kZXhPZihcIjpob3N0XCIpP3Q9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1hdGNoKHVyKTtyZXR1cm4obj1uJiZuWzJdLnRyaW0oKXx8XCJcIik/blswXS5tYXRjaChscik/dC5yZXBsYWNlKHVyLChmdW5jdGlvbih0LG4sbyl7cmV0dXJuIGUrb30pKTpuLnNwbGl0KGxyKVswXT09PWU/bjpcInNob3VsZF9ub3RfbWF0Y2hcIjp0LnJlcGxhY2UoXCI6aG9zdFwiLGUpfSh0LG8pOjAhPT1pJiYodD1uP2lyKHQsbik6dCksbj0hMSwwPD1pJiYoZT1cIlwiLG49ITApLG4pe3ZhciByPSEwO24mJih0PXQucmVwbGFjZShociwoZnVuY3Rpb24odCxlKXtyZXR1cm5cIiA+IFwiK2V9KSkpfXJldHVybnt2YWx1ZTp0LFFhOmUsc3RvcDpyfX0ocixpLGUsbiksbz1vfHx0LnN0b3AsaT10LlFhLHI9dC52YWx1ZSksaStyfSkpLHImJih0PWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5zcGxpdChcIu6AgFwiKTtyZXR1cm4gZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gdCtlK25bbysxXX0pLG5bMF0pfSh0LGEpKSxpJiYodD1vcih0KSksdC5yZXBsYWNlKGRyLChmdW5jdGlvbih0LGUsbixvKXtyZXR1cm4nW2Rpcj1cIicrbisnXCJdICcrZStvK1wiLCBcIitlKydbZGlyPVwiJytuKydcIl0nK299KSl9LFhpLnByb3RvdHlwZS5jPWZ1bmN0aW9uKHQpe3JldHVybiB0Lm1hdGNoKFwiOmhvc3RcIik/XCJcIjp0Lm1hdGNoKFwiOjpzbG90dGVkXCIpP3RoaXMuYih0LFwiOm5vdCguc3R5bGUtc2NvcGUpXCIpOmlyKHQudHJpbSgpLFwiOm5vdCguc3R5bGUtc2NvcGUpXCIpfSxyLk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFhpLnByb3RvdHlwZSx7YTp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJzdHlsZS1zY29wZVwifX19KTt2YXIgYXI9LzoobnRoWy1cXHddKylcXCgoW14pXSspXFwpLyxzcj0vKF58W1xccz4rfl0rKSgoPzpcXFsuKz9cXF18W15cXHM+K349W10pKykvZyxscj0vW1suOiMqXS8sY3I9L14oOjpzbG90dGVkKS8sdXI9Lyg6aG9zdCkoPzpcXCgoKD86XFwoW14pKF0qXFwpfFteKShdKikrPylcXCkpLyxocj0vKD86OjpzbG90dGVkKSg/OlxcKCgoPzpcXChbXikoXSpcXCl8W14pKF0qKSs/KVxcKSkvLGRyPS8oLiopOmRpclxcKCg/OihsdHJ8cnRsKSlcXCkoLiopLyxmcj0vOig/Om1hdGNoZXN8YW55fC0oPzp3ZWJraXR8bW96KS1hbnkpLyxwcj1uZXcgWGk7ZnVuY3Rpb24gX3IodCxlLG4sbyxpKXt0aGlzLkg9dHx8bnVsbCx0aGlzLmI9ZXx8bnVsbCx0aGlzLnRhPW58fFtdLHRoaXMuRj1udWxsLHRoaXMuY3NzQnVpbGQ9aXx8XCJcIix0aGlzLmNhPW98fFwiXCIsdGhpcy5hPXRoaXMuRz10aGlzLkw9bnVsbH1mdW5jdGlvbiBtcih0KXtyZXR1cm4gdD90Ll9fc3R5bGVJbmZvOm51bGx9ZnVuY3Rpb24gdnIodCxlKXtyZXR1cm4gdC5fX3N0eWxlSW5mbz1lfWZ1bmN0aW9uIHlyKHQpe3ZhciBlPXRoaXMubWF0Y2hlc3x8dGhpcy5tYXRjaGVzU2VsZWN0b3J8fHRoaXMubW96TWF0Y2hlc1NlbGVjdG9yfHx0aGlzLm1zTWF0Y2hlc1NlbGVjdG9yfHx0aGlzLm9NYXRjaGVzU2VsZWN0b3J8fHRoaXMud2Via2l0TWF0Y2hlc1NlbGVjdG9yO3JldHVybiBlJiZlLmNhbGwodGhpcyx0KX1fci5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkh9LF9yLnByb3RvdHlwZS5fZ2V0U3R5bGVSdWxlcz1fci5wcm90b3R5cGUuYzt2YXIgZ3I9Lzpob3N0XFxzKj5cXHMqLyxicj1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKFwiVHJpZGVudFwiKTtmdW5jdGlvbiB3cigpe31mdW5jdGlvbiBFcih0KXtpZighdC52KXt2YXIgZT17fSxuPXt9O05yKHQsbikmJihlLks9bix0LnJ1bGVzPW51bGwpLGUuY3NzVGV4dD10LnBhcnNlZENzc1RleHQucmVwbGFjZShBaSxcIlwiKS5yZXBsYWNlKE9pLFwiXCIpLHQudj1lfX1mdW5jdGlvbiBOcih0LGUpe3ZhciBuPXQudjtpZighbil7bj10LnBhcnNlZENzc1RleHQ7Zm9yKHZhciBvO3Q9T2kuZXhlYyhuKTspXCJpbmhlcml0XCI9PT0obz0odFsyXXx8dFszXSkudHJpbSgpKSYmXCJ1bnNldFwiPT09b3x8KGVbdFsxXS50cmltKCldPW8pLG89ITA7cmV0dXJuIG99aWYobi5LKXJldHVybiBPYmplY3QuYXNzaWduKGUsbi5LKSwhMH1mdW5jdGlvbiBDcih0LGUsbil7cmV0dXJuIGUmJihlPTA8PWUuaW5kZXhPZihcIjtcIik/U3IodCxlLG4pOmZ1bmN0aW9uIHQoZSxuKXt2YXIgbz1lLmluZGV4T2YoXCJ2YXIoXCIpO2lmKC0xPT09bylyZXR1cm4gbihlLFwiXCIsXCJcIixcIlwiKTt2YXIgaT1CaShlLG8rMykscj1lLnN1YnN0cmluZyhvKzQsaSk7cmV0dXJuIG89ZS5zdWJzdHJpbmcoMCxvKSxlPXQoZS5zdWJzdHJpbmcoaSsxKSxuKSwtMT09PShpPXIuaW5kZXhPZihcIixcIikpP24obyxyLnRyaW0oKSxcIlwiLGUpOm4obyxyLnN1YnN0cmluZygwLGkpLnRyaW0oKSxyLnN1YnN0cmluZyhpKzEpLnRyaW0oKSxlKX0oZSwoZnVuY3Rpb24oZSxvLGkscil7cmV0dXJuIG8/KChvPUNyKHQsbltvXSxuKSkmJlwiaW5pdGlhbFwiIT09bz9cImFwcGx5LXNoaW0taW5oZXJpdFwiPT09byYmKG89XCJpbmhlcml0XCIpOm89Q3IodCxuW2ldfHxpLG4pfHxpLGUrKG98fFwiXCIpK3IpOmUrcn0pKSksZSYmZS50cmltKCl8fFwiXCJ9ZnVuY3Rpb24gU3IodCxlLG4pe2U9ZS5zcGxpdChcIjtcIik7Zm9yKHZhciBvLGkscj0wO3I8ZS5sZW5ndGg7cisrKWlmKG89ZVtyXSl7aWYoeGkubGFzdEluZGV4PTAsaT14aS5leGVjKG8pKW89Q3IodCxuW2lbMV1dLG4pO2Vsc2UgaWYoLTEhPT0oaT1vLmluZGV4T2YoXCI6XCIpKSl7dmFyIGE9by5zdWJzdHJpbmcoaSk7YT1Dcih0LGE9YS50cmltKCksbil8fGEsbz1vLnN1YnN0cmluZygwLGkpK2F9ZVtyXT1vJiZvLmxhc3RJbmRleE9mKFwiO1wiKT09PW8ubGVuZ3RoLTE/by5zbGljZSgwLC0xKTpvfHxcIlwifXJldHVybiBlLmpvaW4oXCI7XCIpfWZ1bmN0aW9uIFRyKHQsZSxuKXt2YXIgbz17fSxpPXt9O3JldHVybiBSaShlLChmdW5jdGlvbihlKXshZnVuY3Rpb24odCxlLG4sbyl7aWYoZS52fHxFcihlKSxlLnYuSyl7dmFyIGk9V2kodCk7dD1pLmlzLGk9aS5jYSxpPXQ/ZXIodCxpKTpcImh0bWxcIjt2YXIgcj1lLnBhcnNlZFNlbGVjdG9yLGE9ISFyLm1hdGNoKGdyKXx8XCJodG1sXCI9PT1pJiYtMTxyLmluZGV4T2YoXCJodG1sXCIpLHM9MD09PXIuaW5kZXhPZihcIjpob3N0XCIpJiYhYTtcInNoYWR5XCI9PT1uJiYocz0hKGE9cj09PWkrXCIgPiAqLlwiK2l8fC0xIT09ci5pbmRleE9mKFwiaHRtbFwiKSkmJjA9PT1yLmluZGV4T2YoaSkpLChhfHxzKSYmKG49aSxzJiYoZS53fHwoZS53PW5yKHByLGUscHIuYix0P1wiLlwiK3Q6XCJcIixpKSksbj1lLnd8fGkpLGEmJlwiaHRtbFwiPT09aSYmKG49ZS53fHxlLkopLG8oe3dhOm4sWGE6cyxtYjphfSkpfX0odCxlLG4sKGZ1bmN0aW9uKG4pe3lyLmNhbGwodC5fZWxlbWVudHx8dCxuLndhKSYmKG4uWGE/TnIoZSxvKTpOcihlLGkpKX0pKX0pLG51bGwsITApLHtjYjppLFZhOm99fWZ1bmN0aW9uIE9yKHQsZSxuLG8pe3ZhciBpPVdpKGUpLHI9ZXIoaS5pcyxpLmNhKSxhPW5ldyBSZWdFeHAoXCIoPzpefFteLiNbOl0pXCIrKGUuZXh0ZW5kcz9cIlxcXFxcIityLnNsaWNlKDAsLTEpK1wiXFxcXF1cIjpyKStcIigkfFsuOltcXFxccz4rfl0pXCIpLHM9bXIoZSk7aT1zLkgscz1zLmNzc0J1aWxkO3ZhciBsPWZ1bmN0aW9uKHQsZSl7dD10LmI7dmFyIG49e307aWYoIU5pJiZ0KWZvcih2YXIgbz0wLGk9dFtvXTtvPHQubGVuZ3RoO2k9dFsrK29dKXt2YXIgcj1pLGE9ZTtyLmw9bmV3IFJlZ0V4cChcIlxcXFxiXCIrci5rZXlmcmFtZXNOYW1lK1wiKD8hXFxcXEJ8LSlcIixcImdcIiksci5hPXIua2V5ZnJhbWVzTmFtZStcIi1cIithLHIudz1yLnd8fHIuc2VsZWN0b3Isci5zZWxlY3Rvcj1yLncucmVwbGFjZShyLmtleWZyYW1lc05hbWUsci5hKSxuW2kua2V5ZnJhbWVzTmFtZV09eHIoaSl9cmV0dXJuIG59KGksbyk7cmV0dXJuIHRyKGUsaSwoZnVuY3Rpb24oZSl7dmFyIGk9XCJcIjtpZihlLnZ8fEVyKGUpLGUudi5jc3NUZXh0JiYoaT1Tcih0LGUudi5jc3NUZXh0LG4pKSxlLmNzc1RleHQ9aSwhTmkmJiFGaShlKSYmZS5jc3NUZXh0KXt2YXIgcz1pPWUuY3NzVGV4dDtpZihudWxsPT1lLkRhJiYoZS5EYT1EaS50ZXN0KGkpKSxlLkRhKWlmKG51bGw9PWUua2EpZm9yKHZhciBjIGluIGUua2E9W10sbClpIT09KHM9KHM9bFtjXSkoaSkpJiYoaT1zLGUua2EucHVzaChjKSk7ZWxzZXtmb3IoYz0wO2M8ZS5rYS5sZW5ndGg7KytjKWk9KHM9bFtlLmthW2NdXSkoaSk7cz1pfWUuY3NzVGV4dD1zLGUudz1lLnd8fGUuc2VsZWN0b3IsaT1cIi5cIitvLHM9MDtmb3IodmFyIHU9KGM9R2koZS53KSkubGVuZ3RoLGg9dm9pZCAwO3M8dSYmKGg9Y1tzXSk7cysrKWNbc109aC5tYXRjaChhKT9oLnJlcGxhY2UocixpKTppK1wiIFwiK2g7ZS5zZWxlY3Rvcj1jLmpvaW4oXCIsXCIpfX0pLHMpfWZ1bmN0aW9uIHhyKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKHQubCx0LmEpfX1mdW5jdGlvbiBNcih0LGUpe3ZhciBuPURyLG89a2kodCk7dC50ZXh0Q29udGVudD1qaShvLChmdW5jdGlvbih0KXt2YXIgbz10LmNzc1RleHQ9dC5wYXJzZWRDc3NUZXh0O3QudiYmdC52LmNzc1RleHQmJihvPW8ucmVwbGFjZSh2aSxcIlwiKS5yZXBsYWNlKHlpLFwiXCIpLHQuY3NzVGV4dD1TcihuLG8sZSkpfSkpfXIuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3IucHJvdG90eXBlLHthOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIngtc2NvcGVcIn19fSk7dmFyIERyPW5ldyB3cixMcj17fSxBcj13aW5kb3cuY3VzdG9tRWxlbWVudHM7aWYoQXImJiFOaSYmIVNpKXt2YXIgUHI9QXIuZGVmaW5lO0FyLmRlZmluZT1mdW5jdGlvbih0LGUsbil7THJbdF18fChMclt0XT1IaSh0KSksUHIuY2FsbChBcix0LGUsbil9fWZ1bmN0aW9uIGpyKCl7dGhpcy5jYWNoZT17fX1mdW5jdGlvbiBrcigpe31qci5wcm90b3R5cGUuc3RvcmU9ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9dGhpcy5jYWNoZVt0XXx8W107aS5wdXNoKHtLOmUsc3R5bGVFbGVtZW50Om4sRzpvfSksMTAwPGkubGVuZ3RoJiZpLnNoaWZ0KCksdGhpcy5jYWNoZVt0XT1pfTt2YXIgRnI9bmV3IFJlZ0V4cChwci5hK1wiXFxcXHMqKFteXFxcXHNdKilcIik7ZnVuY3Rpb24gUnIodCl7cmV0dXJuKHQ9KHQuY2xhc3NMaXN0JiZ0LmNsYXNzTGlzdC52YWx1ZT90LmNsYXNzTGlzdC52YWx1ZTp0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKS5tYXRjaChGcikpP3RbMV06XCJcIn1mdW5jdGlvbiBWcih0KXt2YXIgZT1xaSh0KS5nZXRSb290Tm9kZSgpO3JldHVybiBlPT09dHx8ZT09PXQub3duZXJEb2N1bWVudD9cIlwiOih0PWUuaG9zdCk/V2kodCkuaXM6XCJcIn1mdW5jdGlvbiBJcih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXTtpZihuLnRhcmdldCE9PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmbi50YXJnZXQhPT1kb2N1bWVudC5oZWFkKWZvcih2YXIgbz0wO288bi5hZGRlZE5vZGVzLmxlbmd0aDtvKyspe3ZhciBpPW4uYWRkZWROb2Rlc1tvXTtpZihpLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciByPWkuZ2V0Um9vdE5vZGUoKSxhPVJyKGkpO2lmKGEmJnI9PT1pLm93bmVyRG9jdW1lbnQmJihcInN0eWxlXCIhPT1pLmxvY2FsTmFtZSYmXCJ0ZW1wbGF0ZVwiIT09aS5sb2NhbE5hbWV8fFwiXCI9PT1aaShpKSkpUWkoaSxhKTtlbHNlIGlmKHIgaW5zdGFuY2VvZiBTaGFkb3dSb290KWZvcigocj1WcihpKSkhPT1hJiYkaShpLGEsciksaT13aW5kb3cuU2hhZHlET00ubmF0aXZlTWV0aG9kcy5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoaSxcIjpub3QoLlwiK3ByLmErXCIpXCIpLGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIHM9VnIocj1pW2FdKTtzJiZLaShyLHMpfX19fX1pZighKE5pfHx3aW5kb3cuU2hhZHlET00mJndpbmRvdy5TaGFkeURPTS5oYW5kbGVzRHluYW1pY1Njb3BpbmcpKXt2YXIgSHI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoSXIpLFVyPWZ1bmN0aW9uKHQpe0hyLm9ic2VydmUodCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX07aWYod2luZG93LmN1c3RvbUVsZW1lbnRzJiYhd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2spVXIoZG9jdW1lbnQpO2Vsc2V7dmFyIEJyPWZ1bmN0aW9uKCl7VXIoZG9jdW1lbnQuYm9keSl9O3dpbmRvdy5IVE1MSW1wb3J0cz93aW5kb3cuSFRNTEltcG9ydHMud2hlblJlYWR5KEJyKTpyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7aWYoXCJsb2FkaW5nXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlKXt2YXIgdD1mdW5jdGlvbigpe0JyKCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIix0KX07ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIix0KX1lbHNlIEJyKCl9KSl9a3I9ZnVuY3Rpb24oKXtJcihIci50YWtlUmVjb3JkcygpKX19dmFyIHpyPXt9LHFyPVByb21pc2UucmVzb2x2ZSgpO2Z1bmN0aW9uIFdyKHQpeyh0PXpyW3RdKSYmKHQuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uPXQuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9ufHwwLHQuX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9uPXQuX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9ufHwwLHQuX2FwcGx5U2hpbU5leHRWZXJzaW9uPSh0Ll9hcHBseVNoaW1OZXh0VmVyc2lvbnx8MCkrMSl9ZnVuY3Rpb24gR3IodCl7cmV0dXJuIHQuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uPT09dC5fYXBwbHlTaGltTmV4dFZlcnNpb259dmFyIFpyPXt9LFlyPW5ldyBqcjtmdW5jdGlvbiBYcigpe3RoaXMuWT17fSx0aGlzLmM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3ZhciB0PW5ldyBzaTt0LnJ1bGVzPVtdLHRoaXMubD12cih0aGlzLmMsbmV3IF9yKHQpKSx0aGlzLko9ITEsdGhpcy5hPXRoaXMuYj1udWxsfWZ1bmN0aW9uIEpyKHQpe3ZhciBlPVdpKHQpLG49ZS5pcztlPWUuY2E7dmFyIG89THJbbl18fG51bGwsaT16cltuXTtpZihpKXJldHVybiB2cih0LGU9bmV3IF9yKG49aS5fc3R5bGVBc3QsbyxpLmEsZSxpPVppKGkpKSksZX1mdW5jdGlvbiBLcih0KXtpZighdC5iJiZ3aW5kb3cuU2hhZHlDU1MmJndpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW0pe3QuYj13aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltLHQuYi5pbnZhbGlkQ2FsbGJhY2s9V3I7dmFyIGU9ITB9ZWxzZSBlPSExO3JldHVybiBmdW5jdGlvbih0KXshdC5hJiZ3aW5kb3cuU2hhZHlDU1MmJndpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSYmKHQuYT13aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UsdC5hLnRyYW5zZm9ybUNhbGxiYWNrPWZ1bmN0aW9uKGUpe3QuSGEoZSl9LHQuYS52YWxpZGF0ZUNhbGxiYWNrPWZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbigpeyh0LmEuZW5xdWV1ZWR8fHQuSikmJnQuZmx1c2hDdXN0b21TdHlsZXMoKX0pKX0pfSh0KSxlfWZ1bmN0aW9uICRyKHQsZSxuKXt2YXIgbz1XaShlKS5pcztpZihuLkYpe3ZhciBpLHI9bi5GO2ZvcihpIGluIHIpbnVsbD09PWk/ZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShpKTplLnN0eWxlLnNldFByb3BlcnR5KGkscltpXSl9IShyPXpyW29dKSYmZSE9PXQuY3x8ciYmXCJcIiE9PVppKHIpfHwhcnx8IXIuX3N0eWxlfHxHcihyKXx8KChHcihyKXx8ci5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb24hPT1yLl9hcHBseVNoaW1OZXh0VmVyc2lvbikmJihLcih0KSx0LmImJnQuYi50cmFuc2Zvcm1SdWxlcyhyLl9zdHlsZUFzdCxvKSxyLl9zdHlsZS50ZXh0Q29udGVudD10cihlLG4uSCksZnVuY3Rpb24odCl7dC5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb249dC5fYXBwbHlTaGltTmV4dFZlcnNpb24sdC5fdmFsaWRhdGluZ3x8KHQuX3ZhbGlkYXRpbmc9ITAscXIudGhlbigoZnVuY3Rpb24oKXt0Ll9hcHBseVNoaW1DdXJyZW50VmVyc2lvbj10Ll9hcHBseVNoaW1OZXh0VmVyc2lvbix0Ll92YWxpZGF0aW5nPSExfSkpKX0ocikpLE5pJiYodD1lLnNoYWRvd1Jvb3QpJiYodD10LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVwiKSkmJih0LnRleHRDb250ZW50PXRyKGUsbi5IKSksbi5IPXIuX3N0eWxlQXN0KX1mdW5jdGlvbiBRcih0LGUpe3JldHVybihlPXFpKGUpLmdldFJvb3ROb2RlKCkuaG9zdCk/bXIoZSl8fEpyKGUpP2U6UXIodCxlKTp0LmN9ZnVuY3Rpb24gdGEodCxlLG4pe3ZhciBvPVFyKHQsZSksaT1tcihvKSxyPWkuTDtmb3IodmFyIGEgaW4gbz09PXQuY3x8cnx8KHRhKHQsbyxpKSxyPWkuTCksdD1PYmplY3QuY3JlYXRlKHJ8fG51bGwpLG89VHIoZSxuLkgsbi5jc3NCdWlsZCksZT1mdW5jdGlvbih0LGUpe3ZhciBuPXt9LG89W107cmV0dXJuIFJpKHQsKGZ1bmN0aW9uKHQpe3Qudnx8RXIodCk7dmFyIGk9dC53fHx0LnBhcnNlZFNlbGVjdG9yO2UmJnQudi5LJiZpJiZ5ci5jYWxsKGUsaSkmJihOcih0LG4pLHQ9dC5pbmRleCxpPXBhcnNlSW50KHQvMzIsMTApLG9baV09KG9baV18fDApfDE8PHQlMzIpfSksbnVsbCwhMCkse0s6bixrZXk6b319KGkuSCxlKS5LLE9iamVjdC5hc3NpZ24odCxvLlZhLGUsby5jYiksZT1uLkYpKChpPWVbYV0pfHwwPT09aSkmJih0W2FdPWkpO2ZvcihhPURyLGU9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksaT0wO2k8ZS5sZW5ndGg7aSsrKXRbbz1lW2ldXT1DcihhLHRbb10sdCk7bi5MPXR9KG49WHIucHJvdG90eXBlKS5mbHVzaD1mdW5jdGlvbigpe2tyKCl9LG4uVGE9ZnVuY3Rpb24odCl7cmV0dXJuIGtpKHQpfSxuLmhiPWZ1bmN0aW9uKHQpe3JldHVybiBqaSh0KX0sbi5wcmVwYXJlVGVtcGxhdGU9ZnVuY3Rpb24odCxlLG4pe3RoaXMucHJlcGFyZVRlbXBsYXRlRG9tKHQsZSksdGhpcy5wcmVwYXJlVGVtcGxhdGVTdHlsZXModCxlLG4pfSxuLnByZXBhcmVUZW1wbGF0ZVN0eWxlcz1mdW5jdGlvbih0LGUsbil7aWYoIXQuX3ByZXBhcmVkJiYhU2kpe05pfHxMcltlXXx8KExyW2VdPUhpKGUpKSx0Ll9wcmVwYXJlZD0hMCx0Lm5hbWU9ZSx0LmV4dGVuZHM9bix6cltlXT10O3ZhciBvPVppKHQpLGk9WWkobyk7bj17aXM6ZSxleHRlbmRzOm59O2Zvcih2YXIgcj1bXSxhPXQuY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVcIikscz0wO3M8YS5sZW5ndGg7cysrKXt2YXIgbD1hW3NdO2lmKGwuaGFzQXR0cmlidXRlKFwic2hhZHktdW5zY29wZWRcIikpe2lmKCFOaSl7dmFyIGM9bC50ZXh0Q29udGVudDtpZighUGkuaGFzKGMpKXtQaS5hZGQoYyk7dmFyIHU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3Uuc2V0QXR0cmlidXRlKFwic2hhZHktdW5zY29wZWRcIixcIlwiKSx1LnRleHRDb250ZW50PWMsZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh1KX1sLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobCl9fWVsc2Ugci5wdXNoKGwudGV4dENvbnRlbnQpLGwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKX1yPXIuam9pbihcIlwiKS50cmltKCkrKFpyW2VdfHxcIlwiKSxLcih0aGlzKSxpfHwoKGE9IW8pJiYoYT14aS50ZXN0KHIpfHxPaS50ZXN0KHIpLHhpLmxhc3RJbmRleD0wLE9pLmxhc3RJbmRleD0wKSxzPWxpKHIpLGEmJlRpJiZ0aGlzLmImJnRoaXMuYi50cmFuc2Zvcm1SdWxlcyhzLGUpLHQuX3N0eWxlQXN0PXMpLGE9W10sVGl8fChhPWZ1bmN0aW9uKHQpe3ZhciBlPXt9LG49W10sbz0wO2Zvcih2YXIgaSBpbiBSaSh0LChmdW5jdGlvbih0KXtFcih0KSx0LmluZGV4PW8rKyx0PXQudi5jc3NUZXh0O2Zvcih2YXIgbjtuPU1pLmV4ZWModCk7KXt2YXIgaT1uWzFdO1wiOlwiIT09blsyXSYmKGVbaV09ITApfX0pLChmdW5jdGlvbih0KXtuLnB1c2godCl9KSksdC5iPW4sdD1bXSxlKXQucHVzaChpKTtyZXR1cm4gdH0odC5fc3R5bGVBc3QpKSxhLmxlbmd0aCYmIVRpfHwocz1OaT90LmNvbnRlbnQ6bnVsbCxlPUxyW2VdfHxudWxsLG89KG89dHIobix0Ll9zdHlsZUFzdCxudWxsLG8saT9yOlwiXCIpKS5sZW5ndGg/VmkobyxuLmlzLHMsZSk6bnVsbCx0Ll9zdHlsZT1vKSx0LmE9YX19LG4uYWI9ZnVuY3Rpb24odCxlKXtacltlXT10LmpvaW4oXCIgXCIpfSxuLnByZXBhcmVUZW1wbGF0ZURvbT1mdW5jdGlvbih0LGUpe2lmKCFTaSl7dmFyIG49WmkodCk7Tml8fFwic2hhZHlcIj09PW58fHQuX2RvbVByZXBhcmVkfHwodC5fZG9tUHJlcGFyZWQ9ITAsZnVuY3Rpb24odCxlKXtKaShwcix0LChmdW5jdGlvbih0KXtLaSh0LGV8fFwiXCIpfSkpfSh0LmNvbnRlbnQsZSkpfX0sbi5mbHVzaEN1c3RvbVN0eWxlcz1mdW5jdGlvbigpe2lmKCFTaSl7dmFyIHQ9S3IodGhpcyk7aWYodGhpcy5hKXt2YXIgZT10aGlzLmEucHJvY2Vzc1N0eWxlcygpO2lmKCh0fHx0aGlzLmEuZW5xdWV1ZWQpJiYhWWkodGhpcy5sLmNzc0J1aWxkKSl7aWYoVGkpe2lmKCF0aGlzLmwuY3NzQnVpbGQpZm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49dGhpcy5hLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoZVt0XSk7aWYobiYmVGkmJnRoaXMuYil7dmFyIG89a2kobik7S3IodGhpcyksdGhpcy5iLnRyYW5zZm9ybVJ1bGVzKG8pLG4udGV4dENvbnRlbnQ9amkobyl9fX1lbHNle2ZvcihmdW5jdGlvbih0LGUpeyhlPWUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdC5hLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoZSl9KSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4hIXR9KSkpLnNvcnQoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuKHQ9ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KSkmTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc/MTp0Jk5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HPy0xOjB9KSksdC5sLkgucnVsZXM9ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBraSh0KX0pKX0odGhpcyxlKSx0YSh0aGlzLHRoaXMuYyx0aGlzLmwpLHQ9MDt0PGUubGVuZ3RoO3QrKykobj10aGlzLmEuZ2V0U3R5bGVGb3JDdXN0b21TdHlsZShlW3RdKSkmJk1yKG4sdGhpcy5sLkwpO3RoaXMuSiYmdGhpcy5zdHlsZURvY3VtZW50KCl9dGhpcy5hLmVucXVldWVkPSExfX19fSxuLnN0eWxlRWxlbWVudD1mdW5jdGlvbih0LGUpe2lmKFNpKXtpZihlKXttcih0KXx8dnIodCxuZXcgX3IobnVsbCkpO3ZhciBuPW1yKHQpO24uRj1uLkZ8fHt9LE9iamVjdC5hc3NpZ24obi5GLGUpLCRyKHRoaXMsdCxuKX19ZWxzZSBpZihuPW1yKHQpfHxKcih0KSlpZih0IT09dGhpcy5jJiYodGhpcy5KPSEwKSxlJiYobi5GPW4uRnx8e30sT2JqZWN0LmFzc2lnbihuLkYsZSkpLFRpKSRyKHRoaXMsdCxuKTtlbHNlIGlmKHRoaXMuZmx1c2goKSx0YSh0aGlzLHQsbiksbi50YSYmbi50YS5sZW5ndGgpe3ZhciBvO2U9V2kodCkuaXM7dDp7aWYobz1Zci5jYWNoZVtlXSlmb3IodmFyIGk9by5sZW5ndGgtMTswPD1pO2ktLSl7dmFyIHI9b1tpXTtlOntmb3IodmFyIGE9bi50YSxzPTA7czxhLmxlbmd0aDtzKyspe3ZhciBsPWFbc107aWYoci5LW2xdIT09bi5MW2xdKXthPSExO2JyZWFrIGV9fWE9ITB9aWYoYSl7bz1yO2JyZWFrIHR9fW89dm9pZCAwfWE9bz9vLnN0eWxlRWxlbWVudDpudWxsLGk9bi5HLChyPW8mJm8uRyl8fChyPWUrXCItXCIrKHI9dGhpcy5ZW2VdPSh0aGlzLllbZV18fDApKzEpKSxuLkc9cixyPW4uRyxzPURyLHM9YT9hLnRleHRDb250ZW50fHxcIlwiOk9yKHMsdCxuLkwscik7dmFyIGM9KGw9bXIodCkpLmE7YyYmIU5pJiZjIT09YSYmKGMuX3VzZUNvdW50LS0sMD49Yy5fdXNlQ291bnQmJmMucGFyZW50Tm9kZSYmYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpKSxOaT9sLmE/KGwuYS50ZXh0Q29udGVudD1zLGE9bC5hKTpzJiYoYT1WaShzLHIsdC5zaGFkb3dSb290LGwuYikpOmE/YS5wYXJlbnROb2RlfHwoYnImJi0xPHMuaW5kZXhPZihcIkBtZWRpYVwiKSYmKGEudGV4dENvbnRlbnQ9cyksVWkoYSxudWxsLGwuYikpOnMmJihhPVZpKHMscixudWxsLGwuYikpLGEmJihhLl91c2VDb3VudD1hLl91c2VDb3VudHx8MCxsLmEhPWEmJmEuX3VzZUNvdW50KyssbC5hPWEpLHI9YSxOaXx8KGE9bi5HLGw9cz10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiLGkmJihsPXMucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHMqeC1zY29wZVxcXFxzKlwiK2krXCJcXFxccypcIixcImdcIiksXCIgXCIpKSxzIT09KGwrPShsP1wiIFwiOlwiXCIpK1wieC1zY29wZSBcIithKSYmemkodCxsKSksb3x8WXIuc3RvcmUoZSxuLkwscixuLkcpfX0sbi5zdHlsZURvY3VtZW50PWZ1bmN0aW9uKHQpe3RoaXMuc3R5bGVTdWJ0cmVlKHRoaXMuYyx0KX0sbi5zdHlsZVN1YnRyZWU9ZnVuY3Rpb24odCxlKXt2YXIgbj1xaSh0KSxvPW4uc2hhZG93Um9vdCxpPXQ9PT10aGlzLmM7aWYoKG98fGkpJiZ0aGlzLnN0eWxlRWxlbWVudCh0LGUpLHQ9aT9uOm8pZm9yKHQ9QXJyYXkuZnJvbSh0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBxaSh0KS5zaGFkb3dSb290fSkpLGU9MDtlPHQubGVuZ3RoO2UrKyl0aGlzLnN0eWxlU3VidHJlZSh0W2VdKX0sbi5IYT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49WmkodCk7aWYobiE9PXRoaXMubC5jc3NCdWlsZCYmKHRoaXMubC5jc3NCdWlsZD1uKSwhWWkobikpe3ZhciBvPWtpKHQpO1JpKG8sKGZ1bmN0aW9uKHQpe2lmKE5pKXJyKHQpO2Vsc2V7dmFyIG89cHI7dC5zZWxlY3Rvcj10LnBhcnNlZFNlbGVjdG9yLHJyKHQpLHQuc2VsZWN0b3I9dC53PW5yKG8sdCxvLmMsdm9pZCAwLHZvaWQgMCl9VGkmJlwiXCI9PT1uJiYoS3IoZSksZS5iJiZlLmIudHJhbnNmb3JtUnVsZSh0KSl9KSksVGk/dC50ZXh0Q29udGVudD1qaShvKTp0aGlzLmwuSC5ydWxlcy5wdXNoKG8pfX0sbi5nZXRDb21wdXRlZFN0eWxlVmFsdWU9ZnVuY3Rpb24odCxlKXt2YXIgbjtyZXR1cm4gVGl8fChuPShtcih0KXx8bXIoUXIodGhpcyx0KSkpLkxbZV0pLChuPW58fHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpLmdldFByb3BlcnR5VmFsdWUoZSkpP24udHJpbSgpOlwiXCJ9LG4uZ2I9ZnVuY3Rpb24odCxlKXt2YXIgbixvPXFpKHQpLmdldFJvb3ROb2RlKCk7aWYobj1lPyhcInN0cmluZ1wiPT10eXBlb2YgZT9lOlN0cmluZyhlKSkuc3BsaXQoL1xccy8pOltdLCEoZT1vLmhvc3QmJm8uaG9zdC5sb2NhbE5hbWUpJiYobz10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpKSl7bz1vLnNwbGl0KC9cXHMvKTtmb3IodmFyIGk9MDtpPG8ubGVuZ3RoO2krKylpZihvW2ldPT09cHIuYSl7ZT1vW2krMV07YnJlYWt9fWUmJm4ucHVzaChwci5hLGUpLFRpfHwoZT1tcih0KSkmJmUuRyYmbi5wdXNoKERyLmEsZS5HKSx6aSh0LG4uam9pbihcIiBcIikpfSxuLk9hPWZ1bmN0aW9uKHQpe3JldHVybiBtcih0KX0sbi5mYj1mdW5jdGlvbih0LGUpe0tpKHQsZSl9LG4uaWI9ZnVuY3Rpb24odCxlKXtLaSh0LGUsITApfSxuLmViPWZ1bmN0aW9uKHQpe3JldHVybiBWcih0KX0sbi5SYT1mdW5jdGlvbih0KXtyZXR1cm4gUnIodCl9LFhyLnByb3RvdHlwZS5mbHVzaD1Yci5wcm90b3R5cGUuZmx1c2gsWHIucHJvdG90eXBlLnByZXBhcmVUZW1wbGF0ZT1Yci5wcm90b3R5cGUucHJlcGFyZVRlbXBsYXRlLFhyLnByb3RvdHlwZS5zdHlsZUVsZW1lbnQ9WHIucHJvdG90eXBlLnN0eWxlRWxlbWVudCxYci5wcm90b3R5cGUuc3R5bGVEb2N1bWVudD1Yci5wcm90b3R5cGUuc3R5bGVEb2N1bWVudCxYci5wcm90b3R5cGUuc3R5bGVTdWJ0cmVlPVhyLnByb3RvdHlwZS5zdHlsZVN1YnRyZWUsWHIucHJvdG90eXBlLmdldENvbXB1dGVkU3R5bGVWYWx1ZT1Yci5wcm90b3R5cGUuZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlLFhyLnByb3RvdHlwZS5zZXRFbGVtZW50Q2xhc3M9WHIucHJvdG90eXBlLmdiLFhyLnByb3RvdHlwZS5fc3R5bGVJbmZvRm9yTm9kZT1Yci5wcm90b3R5cGUuT2EsWHIucHJvdG90eXBlLnRyYW5zZm9ybUN1c3RvbVN0eWxlRm9yRG9jdW1lbnQ9WHIucHJvdG90eXBlLkhhLFhyLnByb3RvdHlwZS5nZXRTdHlsZUFzdD1Yci5wcm90b3R5cGUuVGEsWHIucHJvdG90eXBlLnN0eWxlQXN0VG9TdHJpbmc9WHIucHJvdG90eXBlLmhiLFhyLnByb3RvdHlwZS5mbHVzaEN1c3RvbVN0eWxlcz1Yci5wcm90b3R5cGUuZmx1c2hDdXN0b21TdHlsZXMsWHIucHJvdG90eXBlLnNjb3BlTm9kZT1Yci5wcm90b3R5cGUuZmIsWHIucHJvdG90eXBlLnVuc2NvcGVOb2RlPVhyLnByb3RvdHlwZS5pYixYci5wcm90b3R5cGUuc2NvcGVGb3JOb2RlPVhyLnByb3RvdHlwZS5lYixYci5wcm90b3R5cGUuY3VycmVudFNjb3BlRm9yTm9kZT1Yci5wcm90b3R5cGUuUmEsWHIucHJvdG90eXBlLnByZXBhcmVBZG9wdGVkQ3NzVGV4dD1Yci5wcm90b3R5cGUuYWIsT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoWHIucHJvdG90eXBlLHtuYXRpdmVTaGFkb3c6e2dldDpmdW5jdGlvbigpe3JldHVybiBOaX19LG5hdGl2ZUNzczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFRpfX19KTt2YXIgZWEsbmEsb2E9bmV3IFhyO3dpbmRvdy5TaGFkeUNTUyYmKGVhPXdpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW0sbmE9d2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlKSx3aW5kb3cuU2hhZHlDU1M9e1Njb3BpbmdTaGltOm9hLHByZXBhcmVUZW1wbGF0ZTpmdW5jdGlvbih0LGUsbil7b2EuZmx1c2hDdXN0b21TdHlsZXMoKSxvYS5wcmVwYXJlVGVtcGxhdGUodCxlLG4pfSxwcmVwYXJlVGVtcGxhdGVEb206ZnVuY3Rpb24odCxlKXtvYS5wcmVwYXJlVGVtcGxhdGVEb20odCxlKX0scHJlcGFyZVRlbXBsYXRlU3R5bGVzOmZ1bmN0aW9uKHQsZSxuKXtvYS5mbHVzaEN1c3RvbVN0eWxlcygpLG9hLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0LGUsbil9LHN0eWxlU3VidHJlZTpmdW5jdGlvbih0LGUpe29hLmZsdXNoQ3VzdG9tU3R5bGVzKCksb2Euc3R5bGVTdWJ0cmVlKHQsZSl9LHN0eWxlRWxlbWVudDpmdW5jdGlvbih0KXtvYS5mbHVzaEN1c3RvbVN0eWxlcygpLG9hLnN0eWxlRWxlbWVudCh0KX0sc3R5bGVEb2N1bWVudDpmdW5jdGlvbih0KXtvYS5mbHVzaEN1c3RvbVN0eWxlcygpLG9hLnN0eWxlRG9jdW1lbnQodCl9LGZsdXNoQ3VzdG9tU3R5bGVzOmZ1bmN0aW9uKCl7b2EuZmx1c2hDdXN0b21TdHlsZXMoKX0sZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG9hLmdldENvbXB1dGVkU3R5bGVWYWx1ZSh0LGUpfSxuYXRpdmVDc3M6VGksbmF0aXZlU2hhZG93Ok5pLGNzc0J1aWxkOnVpLGRpc2FibGVSdW50aW1lOlNpfSxlYSYmKHdpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW09ZWEpLG5hJiYod2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlPW5hKSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3JldHVyblwiXCI9PXQmJihyLmNhbGwodGhpcyksdGhpcy5oPSEwKSx0LnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gbih0KXt2YXIgZT10LmNoYXJDb2RlQXQoMCk7cmV0dXJuIDMyPGUmJjEyNz5lJiYtMT09WzM0LDM1LDYwLDYyLDYzLDk2XS5pbmRleE9mKGUpP3Q6ZW5jb2RlVVJJQ29tcG9uZW50KHQpfWZ1bmN0aW9uIG8odCl7dmFyIGU9dC5jaGFyQ29kZUF0KDApO3JldHVybiAzMjxlJiYxMjc+ZSYmLTE9PVszNCwzNSw2MCw2Miw5Nl0uaW5kZXhPZihlKT90OmVuY29kZVVSSUNvbXBvbmVudCh0KX1mdW5jdGlvbiBpKHQsaSxhKXtmdW5jdGlvbiBzKHQpe3YucHVzaCh0KX12YXIgbD1pfHxcInNjaGVtZSBzdGFydFwiLGY9MCxwPVwiXCIsXz0hMSxtPSExLHY9W107dDpmb3IoOyhudWxsIT10W2YtMV18fDA9PWYpJiYhdGhpcy5oOyl7dmFyIHk9dFtmXTtzd2l0Y2gobCl7Y2FzZVwic2NoZW1lIHN0YXJ0XCI6aWYoIXl8fCFoLnRlc3QoeSkpe2lmKGkpe3MoXCJJbnZhbGlkIHNjaGVtZS5cIik7YnJlYWsgdH1wPVwiXCIsbD1cIm5vIHNjaGVtZVwiO2NvbnRpbnVlfXArPXkudG9Mb3dlckNhc2UoKSxsPVwic2NoZW1lXCI7YnJlYWs7Y2FzZVwic2NoZW1lXCI6aWYoeSYmZC50ZXN0KHkpKXArPXkudG9Mb3dlckNhc2UoKTtlbHNle2lmKFwiOlwiIT15KXtpZihpKXtudWxsIT15JiZzKFwiQ29kZSBwb2ludCBub3QgYWxsb3dlZCBpbiBzY2hlbWU6IFwiK3kpO2JyZWFrIHR9cD1cIlwiLGY9MCxsPVwibm8gc2NoZW1lXCI7Y29udGludWV9aWYodGhpcy5nPXAscD1cIlwiLGkpYnJlYWsgdDt2b2lkIDAhPT1jW3RoaXMuZ10mJih0aGlzLkE9ITApLGw9XCJmaWxlXCI9PXRoaXMuZz9cInJlbGF0aXZlXCI6dGhpcy5BJiZhJiZhLmc9PXRoaXMuZz9cInJlbGF0aXZlIG9yIGF1dGhvcml0eVwiOnRoaXMuQT9cImF1dGhvcml0eSBmaXJzdCBzbGFzaFwiOlwic2NoZW1lIGRhdGFcIn1icmVhaztjYXNlXCJzY2hlbWUgZGF0YVwiOlwiP1wiPT15Pyh0aGlzLm89XCI/XCIsbD1cInF1ZXJ5XCIpOlwiI1wiPT15Pyh0aGlzLnU9XCIjXCIsbD1cImZyYWdtZW50XCIpOm51bGwhPXkmJlwiXFx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXkmJih0aGlzLnBhKz1uKHkpKTticmVhaztjYXNlXCJubyBzY2hlbWVcIjppZihhJiZ2b2lkIDAhPT1jW2EuZ10pe2w9XCJyZWxhdGl2ZVwiO2NvbnRpbnVlfXMoXCJNaXNzaW5nIHNjaGVtZS5cIiksci5jYWxsKHRoaXMpLHRoaXMuaD0hMDticmVhaztjYXNlXCJyZWxhdGl2ZSBvciBhdXRob3JpdHlcIjppZihcIi9cIiE9eXx8XCIvXCIhPXRbZisxXSl7cyhcIkV4cGVjdGVkIC8sIGdvdDogXCIreSksbD1cInJlbGF0aXZlXCI7Y29udGludWV9bD1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2JyZWFrO2Nhc2VcInJlbGF0aXZlXCI6aWYodGhpcy5BPSEwLFwiZmlsZVwiIT10aGlzLmcmJih0aGlzLmc9YS5nKSxudWxsPT15KXt0aGlzLmk9YS5pLHRoaXMubT1hLm0sdGhpcy5qPWEuai5zbGljZSgpLHRoaXMubz1hLm8sdGhpcy5zPWEucyx0aGlzLmY9YS5mO2JyZWFrIHR9aWYoXCIvXCI9PXl8fFwiXFxcXFwiPT15KVwiXFxcXFwiPT15JiZzKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGw9XCJyZWxhdGl2ZSBzbGFzaFwiO2Vsc2UgaWYoXCI/XCI9PXkpdGhpcy5pPWEuaSx0aGlzLm09YS5tLHRoaXMuaj1hLmouc2xpY2UoKSx0aGlzLm89XCI/XCIsdGhpcy5zPWEucyx0aGlzLmY9YS5mLGw9XCJxdWVyeVwiO2Vsc2V7aWYoXCIjXCIhPXkpe2w9dFtmKzFdO3ZhciBnPXRbZisyXTsoXCJmaWxlXCIhPXRoaXMuZ3x8IWgudGVzdCh5KXx8XCI6XCIhPWwmJlwifFwiIT1sfHxudWxsIT1nJiZcIi9cIiE9ZyYmXCJcXFxcXCIhPWcmJlwiP1wiIT1nJiZcIiNcIiE9ZykmJih0aGlzLmk9YS5pLHRoaXMubT1hLm0sdGhpcy5zPWEucyx0aGlzLmY9YS5mLHRoaXMuaj1hLmouc2xpY2UoKSx0aGlzLmoucG9wKCkpLGw9XCJyZWxhdGl2ZSBwYXRoXCI7Y29udGludWV9dGhpcy5pPWEuaSx0aGlzLm09YS5tLHRoaXMuaj1hLmouc2xpY2UoKSx0aGlzLm89YS5vLHRoaXMudT1cIiNcIix0aGlzLnM9YS5zLHRoaXMuZj1hLmYsbD1cImZyYWdtZW50XCJ9YnJlYWs7Y2FzZVwicmVsYXRpdmUgc2xhc2hcIjppZihcIi9cIiE9eSYmXCJcXFxcXCIhPXkpe1wiZmlsZVwiIT10aGlzLmcmJih0aGlzLmk9YS5pLHRoaXMubT1hLm0sdGhpcy5zPWEucyx0aGlzLmY9YS5mKSxsPVwicmVsYXRpdmUgcGF0aFwiO2NvbnRpbnVlfVwiXFxcXFwiPT15JiZzKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGw9XCJmaWxlXCI9PXRoaXMuZz9cImZpbGUgaG9zdFwiOlwiYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7YnJlYWs7Y2FzZVwiYXV0aG9yaXR5IGZpcnN0IHNsYXNoXCI6aWYoXCIvXCIhPXkpe3MoXCJFeHBlY3RlZCAnLycsIGdvdDogXCIreSksbD1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2NvbnRpbnVlfWw9XCJhdXRob3JpdHkgc2Vjb25kIHNsYXNoXCI7YnJlYWs7Y2FzZVwiYXV0aG9yaXR5IHNlY29uZCBzbGFzaFwiOmlmKGw9XCJhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIixcIi9cIiE9eSl7cyhcIkV4cGVjdGVkICcvJywgZ290OiBcIit5KTtjb250aW51ZX1icmVhaztjYXNlXCJhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIjppZihcIi9cIiE9eSYmXCJcXFxcXCIhPXkpe2w9XCJhdXRob3JpdHlcIjtjb250aW51ZX1zKFwiRXhwZWN0ZWQgYXV0aG9yaXR5LCBnb3Q6IFwiK3kpO2JyZWFrO2Nhc2VcImF1dGhvcml0eVwiOmlmKFwiQFwiPT15KXtmb3IoXyYmKHMoXCJAIGFscmVhZHkgc2Vlbi5cIikscCs9XCIlNDBcIiksXz0hMCx5PTA7eTxwLmxlbmd0aDt5KyspXCJcXHRcIj09KGc9cFt5XSl8fFwiXFxuXCI9PWd8fFwiXFxyXCI9PWc/cyhcIkludmFsaWQgd2hpdGVzcGFjZSBpbiBhdXRob3JpdHkuXCIpOlwiOlwiPT1nJiZudWxsPT09dGhpcy5mP3RoaXMuZj1cIlwiOihnPW4oZyksbnVsbCE9PXRoaXMuZj90aGlzLmYrPWc6dGhpcy5zKz1nKTtwPVwiXCJ9ZWxzZXtpZihudWxsPT15fHxcIi9cIj09eXx8XCJcXFxcXCI9PXl8fFwiP1wiPT15fHxcIiNcIj09eSl7Zi09cC5sZW5ndGgscD1cIlwiLGw9XCJob3N0XCI7Y29udGludWV9cCs9eX1icmVhaztjYXNlXCJmaWxlIGhvc3RcIjppZihudWxsPT15fHxcIi9cIj09eXx8XCJcXFxcXCI9PXl8fFwiP1wiPT15fHxcIiNcIj09eSl7MiE9cC5sZW5ndGh8fCFoLnRlc3QocFswXSl8fFwiOlwiIT1wWzFdJiZcInxcIiE9cFsxXT8oMCE9cC5sZW5ndGgmJih0aGlzLmk9ZS5jYWxsKHRoaXMscCkscD1cIlwiKSxsPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiKTpsPVwicmVsYXRpdmUgcGF0aFwiO2NvbnRpbnVlfVwiXFx0XCI9PXl8fFwiXFxuXCI9PXl8fFwiXFxyXCI9PXk/cyhcIkludmFsaWQgd2hpdGVzcGFjZSBpbiBmaWxlIGhvc3QuXCIpOnArPXk7YnJlYWs7Y2FzZVwiaG9zdFwiOmNhc2VcImhvc3RuYW1lXCI6aWYoXCI6XCIhPXl8fG0pe2lmKG51bGw9PXl8fFwiL1wiPT15fHxcIlxcXFxcIj09eXx8XCI/XCI9PXl8fFwiI1wiPT15KXtpZih0aGlzLmk9ZS5jYWxsKHRoaXMscCkscD1cIlwiLGw9XCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCIsaSlicmVhayB0O2NvbnRpbnVlfVwiXFx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXk/KFwiW1wiPT15P209ITA6XCJdXCI9PXkmJihtPSExKSxwKz15KTpzKFwiSW52YWxpZCBjb2RlIHBvaW50IGluIGhvc3QvaG9zdG5hbWU6IFwiK3kpfWVsc2UgaWYodGhpcy5pPWUuY2FsbCh0aGlzLHApLHA9XCJcIixsPVwicG9ydFwiLFwiaG9zdG5hbWVcIj09aSlicmVhayB0O2JyZWFrO2Nhc2VcInBvcnRcIjppZigvWzAtOV0vLnRlc3QoeSkpcCs9eTtlbHNle2lmKG51bGw9PXl8fFwiL1wiPT15fHxcIlxcXFxcIj09eXx8XCI/XCI9PXl8fFwiI1wiPT15fHxpKXtpZihcIlwiIT1wJiYoKHA9cGFyc2VJbnQocCwxMCkpIT1jW3RoaXMuZ10mJih0aGlzLm09cCtcIlwiKSxwPVwiXCIpLGkpYnJlYWsgdDtsPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiO2NvbnRpbnVlfVwiXFx0XCI9PXl8fFwiXFxuXCI9PXl8fFwiXFxyXCI9PXk/cyhcIkludmFsaWQgY29kZSBwb2ludCBpbiBwb3J0OiBcIit5KTooci5jYWxsKHRoaXMpLHRoaXMuaD0hMCl9YnJlYWs7Y2FzZVwicmVsYXRpdmUgcGF0aCBzdGFydFwiOmlmKFwiXFxcXFwiPT15JiZzKFwiJ1xcXFwnIG5vdCBhbGxvd2VkIGluIHBhdGguXCIpLGw9XCJyZWxhdGl2ZSBwYXRoXCIsXCIvXCIhPXkmJlwiXFxcXFwiIT15KWNvbnRpbnVlO2JyZWFrO2Nhc2VcInJlbGF0aXZlIHBhdGhcIjpudWxsIT15JiZcIi9cIiE9eSYmXCJcXFxcXCIhPXkmJihpfHxcIj9cIiE9eSYmXCIjXCIhPXkpP1wiXFx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXkmJihwKz1uKHkpKTooXCJcXFxcXCI9PXkmJnMoXCJcXFxcIG5vdCBhbGxvd2VkIGluIHJlbGF0aXZlIHBhdGguXCIpLChnPXVbcC50b0xvd2VyQ2FzZSgpXSkmJihwPWcpLFwiLi5cIj09cD8odGhpcy5qLnBvcCgpLFwiL1wiIT15JiZcIlxcXFxcIiE9eSYmdGhpcy5qLnB1c2goXCJcIikpOlwiLlwiPT1wJiZcIi9cIiE9eSYmXCJcXFxcXCIhPXk/dGhpcy5qLnB1c2goXCJcIik6XCIuXCIhPXAmJihcImZpbGVcIj09dGhpcy5nJiYwPT10aGlzLmoubGVuZ3RoJiYyPT1wLmxlbmd0aCYmaC50ZXN0KHBbMF0pJiZcInxcIj09cFsxXSYmKHA9cFswXStcIjpcIiksdGhpcy5qLnB1c2gocCkpLHA9XCJcIixcIj9cIj09eT8odGhpcy5vPVwiP1wiLGw9XCJxdWVyeVwiKTpcIiNcIj09eSYmKHRoaXMudT1cIiNcIixsPVwiZnJhZ21lbnRcIikpO2JyZWFrO2Nhc2VcInF1ZXJ5XCI6aXx8XCIjXCIhPXk/bnVsbCE9eSYmXCJcXHRcIiE9eSYmXCJcXG5cIiE9eSYmXCJcXHJcIiE9eSYmKHRoaXMubys9byh5KSk6KHRoaXMudT1cIiNcIixsPVwiZnJhZ21lbnRcIik7YnJlYWs7Y2FzZVwiZnJhZ21lbnRcIjpudWxsIT15JiZcIlxcdFwiIT15JiZcIlxcblwiIT15JiZcIlxcclwiIT15JiYodGhpcy51Kz15KX1mKyt9fWZ1bmN0aW9uIHIoKXt0aGlzLnM9dGhpcy5wYT10aGlzLmc9XCJcIix0aGlzLmY9bnVsbCx0aGlzLm09dGhpcy5pPVwiXCIsdGhpcy5qPVtdLHRoaXMudT10aGlzLm89XCJcIix0aGlzLkE9dGhpcy5oPSExfWZ1bmN0aW9uIGEodCxlKXt2b2lkIDA9PT1lfHxlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoU3RyaW5nKGUpKSksdGhpcy5hPXQsci5jYWxsKHRoaXMpLGkuY2FsbCh0aGlzLHRoaXMuYS5yZXBsYWNlKC9eWyBcXHRcXHJcXG5cXGZdK3xbIFxcdFxcclxcblxcZl0rJC9nLFwiXCIpLG51bGwsZSl9dmFyIHM9ITE7dHJ5e3ZhciBsPW5ldyBVUkwoXCJiXCIsXCJodHRwOi8vYVwiKTtsLnBhdGhuYW1lPVwiYyUyMGRcIixzPVwiaHR0cDovL2EvYyUyMGRcIj09PWwuaHJlZn1jYXRjaCh0KXt9aWYoIXMpe3ZhciBjPU9iamVjdC5jcmVhdGUobnVsbCk7Yy5mdHA9MjEsYy5maWxlPTAsYy5nb3BoZXI9NzAsYy5odHRwPTgwLGMuaHR0cHM9NDQzLGMud3M9ODAsYy53c3M9NDQzO3ZhciB1PU9iamVjdC5jcmVhdGUobnVsbCk7dVtcIiUyZVwiXT1cIi5cIix1W1wiLiUyZVwiXT1cIi4uXCIsdVtcIiUyZS5cIl09XCIuLlwiLHVbXCIlMmUlMmVcIl09XCIuLlwiO3ZhciBoPS9bYS16QS1aXS8sZD0vW2EtekEtWjAtOVxcK1xcLVxcLl0vO2EucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhyZWZ9LGdldCBocmVmKCl7aWYodGhpcy5oKXJldHVybiB0aGlzLmE7dmFyIHQ9XCJcIjtyZXR1cm5cIlwiPT10aGlzLnMmJm51bGw9PXRoaXMuZnx8KHQ9dGhpcy5zKyhudWxsIT10aGlzLmY/XCI6XCIrdGhpcy5mOlwiXCIpK1wiQFwiKSx0aGlzLnByb3RvY29sKyh0aGlzLkE/XCIvL1wiK3QrdGhpcy5ob3N0OlwiXCIpK3RoaXMucGF0aG5hbWUrdGhpcy5vK3RoaXMudX0sc2V0IGhyZWYodCl7ci5jYWxsKHRoaXMpLGkuY2FsbCh0aGlzLHQpfSxnZXQgcHJvdG9jb2woKXtyZXR1cm4gdGhpcy5nK1wiOlwifSxzZXQgcHJvdG9jb2wodCl7dGhpcy5ofHxpLmNhbGwodGhpcyx0K1wiOlwiLFwic2NoZW1lIHN0YXJ0XCIpfSxnZXQgaG9zdCgpe3JldHVybiB0aGlzLmg/XCJcIjp0aGlzLm0/dGhpcy5pK1wiOlwiK3RoaXMubTp0aGlzLml9LHNldCBob3N0KHQpeyF0aGlzLmgmJnRoaXMuQSYmaS5jYWxsKHRoaXMsdCxcImhvc3RcIil9LGdldCBob3N0bmFtZSgpe3JldHVybiB0aGlzLml9LHNldCBob3N0bmFtZSh0KXshdGhpcy5oJiZ0aGlzLkEmJmkuY2FsbCh0aGlzLHQsXCJob3N0bmFtZVwiKX0sZ2V0IHBvcnQoKXtyZXR1cm4gdGhpcy5tfSxzZXQgcG9ydCh0KXshdGhpcy5oJiZ0aGlzLkEmJmkuY2FsbCh0aGlzLHQsXCJwb3J0XCIpfSxnZXQgcGF0aG5hbWUoKXtyZXR1cm4gdGhpcy5oP1wiXCI6dGhpcy5BP1wiL1wiK3RoaXMuai5qb2luKFwiL1wiKTp0aGlzLnBhfSxzZXQgcGF0aG5hbWUodCl7IXRoaXMuaCYmdGhpcy5BJiYodGhpcy5qPVtdLGkuY2FsbCh0aGlzLHQsXCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCIpKX0sZ2V0IHNlYXJjaCgpe3JldHVybiB0aGlzLmh8fCF0aGlzLm98fFwiP1wiPT10aGlzLm8/XCJcIjp0aGlzLm99LHNldCBzZWFyY2godCl7IXRoaXMuaCYmdGhpcy5BJiYodGhpcy5vPVwiP1wiLFwiP1wiPT10WzBdJiYodD10LnNsaWNlKDEpKSxpLmNhbGwodGhpcyx0LFwicXVlcnlcIikpfSxnZXQgaGFzaCgpe3JldHVybiB0aGlzLmh8fCF0aGlzLnV8fFwiI1wiPT10aGlzLnU/XCJcIjp0aGlzLnV9LHNldCBoYXNoKHQpe3RoaXMuaHx8KHQ/KHRoaXMudT1cIiNcIixcIiNcIj09dFswXSYmKHQ9dC5zbGljZSgxKSksaS5jYWxsKHRoaXMsdCxcImZyYWdtZW50XCIpKTp0aGlzLnU9XCJcIil9LGdldCBvcmlnaW4oKXt2YXIgdDtpZih0aGlzLmh8fCF0aGlzLmcpcmV0dXJuXCJcIjtzd2l0Y2godGhpcy5nKXtjYXNlXCJkYXRhXCI6Y2FzZVwiZmlsZVwiOmNhc2VcImphdmFzY3JpcHRcIjpjYXNlXCJtYWlsdG9cIjpyZXR1cm5cIm51bGxcIn1yZXR1cm4odD10aGlzLmhvc3QpP3RoaXMuZytcIjovL1wiK3Q6XCJcIn19O3ZhciBmPXQuVVJMO2YmJihhLmNyZWF0ZU9iamVjdFVSTD1mdW5jdGlvbih0KXtyZXR1cm4gZi5jcmVhdGVPYmplY3RVUkwuYXBwbHkoZixhcmd1bWVudHMpfSxhLnJldm9rZU9iamVjdFVSTD1mdW5jdGlvbih0KXtmLnJldm9rZU9iamVjdFVSTCh0KX0pLHQuVVJMPWF9fSh3aW5kb3cpLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsXCJiYXNlVVJJXCIpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsXCJiYXNlVVJJXCIse2dldDpmdW5jdGlvbigpe3ZhciB0PSh0aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMpLnF1ZXJ5U2VsZWN0b3IoXCJiYXNlW2hyZWZdXCIpO3JldHVybiB0JiZ0LmhyZWZ8fHdpbmRvdy5sb2NhdGlvbi5ocmVmfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH0pO3ZhciBpYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7aWEudGV4dENvbnRlbnQ9XCJib2R5IHt0cmFuc2l0aW9uOiBvcGFjaXR5IGVhc2UtaW4gMC4yczsgfSBcXG5ib2R5W3VucmVzb2x2ZWRdIHtvcGFjaXR5OiAwOyBkaXNwbGF5OiBibG9jazsgb3ZlcmZsb3c6IGhpZGRlbjsgcG9zaXRpb246IHJlbGF0aXZlOyB9IFxcblwiO3ZhciByYT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKTtyYS5pbnNlcnRCZWZvcmUoaWEscmEuZmlyc3RDaGlsZCk7dmFyIGFhPXdpbmRvdy5jdXN0b21FbGVtZW50cyxzYT0hMSxsYT1udWxsO2Z1bmN0aW9uIGNhKCl7d2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQuYm9vdHN0cmFwJiZ3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAod2luZG93LmRvY3VtZW50KSxsYSYmbGEoKSxzYT0hMCx3aW5kb3cuV2ViQ29tcG9uZW50cy5yZWFkeT0hMCxkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcIldlYkNvbXBvbmVudHNSZWFkeVwiLHtidWJibGVzOiEwfSkpfWFhLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2smJmFhLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2soKGZ1bmN0aW9uKHQpe2xhPXQsc2EmJnQoKX0pKSxcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlPyh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixjYSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsKGZ1bmN0aW9uKCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsY2EpLGNhKCl9KSkpOmNhKCl9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLG4oMiksbig3KS5zZXRJbW1lZGlhdGUpfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKHQpe3ZhciBvPXZvaWQgMCE9PXQmJnR8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmfHx3aW5kb3csaT1GdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7ZnVuY3Rpb24gcih0LGUpe3RoaXMuX2lkPXQsdGhpcy5fY2xlYXJGbj1lfWUuc2V0VGltZW91dD1mdW5jdGlvbigpe3JldHVybiBuZXcgcihpLmNhbGwoc2V0VGltZW91dCxvLGFyZ3VtZW50cyksY2xlYXJUaW1lb3V0KX0sZS5zZXRJbnRlcnZhbD1mdW5jdGlvbigpe3JldHVybiBuZXcgcihpLmNhbGwoc2V0SW50ZXJ2YWwsbyxhcmd1bWVudHMpLGNsZWFySW50ZXJ2YWwpfSxlLmNsZWFyVGltZW91dD1lLmNsZWFySW50ZXJ2YWw9ZnVuY3Rpb24odCl7dCYmdC5jbG9zZSgpfSxyLnByb3RvdHlwZS51bnJlZj1yLnByb3RvdHlwZS5yZWY9ZnVuY3Rpb24oKXt9LHIucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy5fY2xlYXJGbi5jYWxsKG8sdGhpcy5faWQpfSxlLmVucm9sbD1mdW5jdGlvbih0LGUpe2NsZWFyVGltZW91dCh0Ll9pZGxlVGltZW91dElkKSx0Ll9pZGxlVGltZW91dD1lfSxlLnVuZW5yb2xsPWZ1bmN0aW9uKHQpe2NsZWFyVGltZW91dCh0Ll9pZGxlVGltZW91dElkKSx0Ll9pZGxlVGltZW91dD0tMX0sZS5fdW5yZWZBY3RpdmU9ZS5hY3RpdmU9ZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KHQuX2lkbGVUaW1lb3V0SWQpO3ZhciBlPXQuX2lkbGVUaW1lb3V0O2U+PTAmJih0Ll9pZGxlVGltZW91dElkPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5fb25UaW1lb3V0JiZ0Ll9vblRpbWVvdXQoKX0pLGUpKX0sbig4KSxlLnNldEltbWVkaWF0ZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5zZXRJbW1lZGlhdGV8fHZvaWQgMCE9PXQmJnQuc2V0SW1tZWRpYXRlfHx0aGlzJiZ0aGlzLnNldEltbWVkaWF0ZSxlLmNsZWFySW1tZWRpYXRlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLmNsZWFySW1tZWRpYXRlfHx2b2lkIDAhPT10JiZ0LmNsZWFySW1tZWRpYXRlfHx0aGlzJiZ0aGlzLmNsZWFySW1tZWRpYXRlfSkuY2FsbCh0aGlzLG4oMikpfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKHQsZSl7IWZ1bmN0aW9uKHQsbil7XCJ1c2Ugc3RyaWN0XCI7aWYoIXQuc2V0SW1tZWRpYXRlKXt2YXIgbyxpLHIsYSxzLGw9MSxjPXt9LHU9ITEsaD10LmRvY3VtZW50LGQ9T2JqZWN0LmdldFByb3RvdHlwZU9mJiZPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7ZD1kJiZkLnNldFRpbWVvdXQ/ZDp0LFwiW29iamVjdCBwcm9jZXNzXVwiPT09e30udG9TdHJpbmcuY2FsbCh0LnByb2Nlc3MpP289ZnVuY3Rpb24odCl7ZS5uZXh0VGljaygoZnVuY3Rpb24oKXtwKHQpfSkpfTohZnVuY3Rpb24oKXtpZih0LnBvc3RNZXNzYWdlJiYhdC5pbXBvcnRTY3JpcHRzKXt2YXIgZT0hMCxuPXQub25tZXNzYWdlO3JldHVybiB0Lm9ubWVzc2FnZT1mdW5jdGlvbigpe2U9ITF9LHQucG9zdE1lc3NhZ2UoXCJcIixcIipcIiksdC5vbm1lc3NhZ2U9bixlfX0oKT90Lk1lc3NhZ2VDaGFubmVsPygocj1uZXcgTWVzc2FnZUNoYW5uZWwpLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbih0KXtwKHQuZGF0YSl9LG89ZnVuY3Rpb24odCl7ci5wb3J0Mi5wb3N0TWVzc2FnZSh0KX0pOmgmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBoLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/KGk9aC5kb2N1bWVudEVsZW1lbnQsbz1mdW5jdGlvbih0KXt2YXIgZT1oLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtwKHQpLGUub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsaS5yZW1vdmVDaGlsZChlKSxlPW51bGx9LGkuYXBwZW5kQ2hpbGQoZSl9KTpvPWZ1bmN0aW9uKHQpe3NldFRpbWVvdXQocCwwLHQpfTooYT1cInNldEltbWVkaWF0ZSRcIitNYXRoLnJhbmRvbSgpK1wiJFwiLHM9ZnVuY3Rpb24oZSl7ZS5zb3VyY2U9PT10JiZcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYwPT09ZS5kYXRhLmluZGV4T2YoYSkmJnAoK2UuZGF0YS5zbGljZShhLmxlbmd0aCkpfSx0LmFkZEV2ZW50TGlzdGVuZXI/dC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLHMsITEpOnQuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIixzKSxvPWZ1bmN0aW9uKGUpe3QucG9zdE1lc3NhZ2UoYStlLFwiKlwiKX0pLGQuc2V0SW1tZWRpYXRlPWZ1bmN0aW9uKHQpe1wiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJih0PW5ldyBGdW5jdGlvbihcIlwiK3QpKTtmb3IodmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSksbj0wO248ZS5sZW5ndGg7bisrKWVbbl09YXJndW1lbnRzW24rMV07dmFyIGk9e2NhbGxiYWNrOnQsYXJnczplfTtyZXR1cm4gY1tsXT1pLG8obCksbCsrfSxkLmNsZWFySW1tZWRpYXRlPWZ9ZnVuY3Rpb24gZih0KXtkZWxldGUgY1t0XX1mdW5jdGlvbiBwKHQpe2lmKHUpc2V0VGltZW91dChwLDAsdCk7ZWxzZXt2YXIgZT1jW3RdO2lmKGUpe3U9ITA7dHJ5eyFmdW5jdGlvbih0KXt2YXIgZT10LmNhbGxiYWNrLG49dC5hcmdzO3N3aXRjaChuLmxlbmd0aCl7Y2FzZSAwOmUoKTticmVhaztjYXNlIDE6ZShuWzBdKTticmVhaztjYXNlIDI6ZShuWzBdLG5bMV0pO2JyZWFrO2Nhc2UgMzplKG5bMF0sblsxXSxuWzJdKTticmVhaztkZWZhdWx0OmUuYXBwbHkodm9pZCAwLG4pfX0oZSl9ZmluYWxseXtmKHQpLHU9ITF9fX19fShcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZj92b2lkIDA9PT10P3RoaXM6dDpzZWxmKX0pLmNhbGwodGhpcyxuKDIpLG4oOSkpfSxmdW5jdGlvbih0LGUpe3ZhciBuLG8saT10LmV4cG9ydHM9e307ZnVuY3Rpb24gcigpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gYSgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBzKHQpe2lmKG49PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KHQsMCk7aWYoKG49PT1yfHwhbikmJnNldFRpbWVvdXQpcmV0dXJuIG49c2V0VGltZW91dCxzZXRUaW1lb3V0KHQsMCk7dHJ5e3JldHVybiBuKHQsMCl9Y2F0Y2goZSl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCx0LDApfWNhdGNoKGUpe3JldHVybiBuLmNhbGwodGhpcyx0LDApfX19IWZ1bmN0aW9uKCl7dHJ5e249XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnJ9Y2F0Y2godCl7bj1yfXRyeXtvPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6YX1jYXRjaCh0KXtvPWF9fSgpO3ZhciBsLGM9W10sdT0hMSxoPS0xO2Z1bmN0aW9uIGQoKXt1JiZsJiYodT0hMSxsLmxlbmd0aD9jPWwuY29uY2F0KGMpOmg9LTEsYy5sZW5ndGgmJmYoKSl9ZnVuY3Rpb24gZigpe2lmKCF1KXt2YXIgdD1zKGQpO3U9ITA7Zm9yKHZhciBlPWMubGVuZ3RoO2U7KXtmb3IobD1jLGM9W107KytoPGU7KWwmJmxbaF0ucnVuKCk7aD0tMSxlPWMubGVuZ3RofWw9bnVsbCx1PSExLGZ1bmN0aW9uKHQpe2lmKG89PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dCh0KTtpZigobz09PWF8fCFvKSYmY2xlYXJUaW1lb3V0KXJldHVybiBvPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQodCk7dHJ5e28odCl9Y2F0Y2goZSl7dHJ5e3JldHVybiBvLmNhbGwobnVsbCx0KX1jYXRjaChlKXtyZXR1cm4gby5jYWxsKHRoaXMsdCl9fX0odCl9fWZ1bmN0aW9uIHAodCxlKXt0aGlzLmZ1bj10LHRoaXMuYXJyYXk9ZX1mdW5jdGlvbiBfKCl7fWkubmV4dFRpY2s9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspZVtuLTFdPWFyZ3VtZW50c1tuXTtjLnB1c2gobmV3IHAodCxlKSksMSE9PWMubGVuZ3RofHx1fHxzKGYpfSxwLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxpLnRpdGxlPVwiYnJvd3NlclwiLGkuYnJvd3Nlcj0hMCxpLmVudj17fSxpLmFyZ3Y9W10saS52ZXJzaW9uPVwiXCIsaS52ZXJzaW9ucz17fSxpLm9uPV8saS5hZGRMaXN0ZW5lcj1fLGkub25jZT1fLGkub2ZmPV8saS5yZW1vdmVMaXN0ZW5lcj1fLGkucmVtb3ZlQWxsTGlzdGVuZXJzPV8saS5lbWl0PV8saS5wcmVwZW5kTGlzdGVuZXI9XyxpLnByZXBlbmRPbmNlTGlzdGVuZXI9XyxpLmxpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm5bXX0saS5iaW5kaW5nPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxpLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxpLmNoZGlyPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0saS51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24ucihlKTt2YXIgbz1uKDEpLGk9ZnVuY3Rpb24odCxlLG4sbyl7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKGkscil7ZnVuY3Rpb24gYSh0KXt0cnl7bChvLm5leHQodCkpfWNhdGNoKHQpe3IodCl9fWZ1bmN0aW9uIHModCl7dHJ5e2woby50aHJvdyh0KSl9Y2F0Y2godCl7cih0KX19ZnVuY3Rpb24gbCh0KXt2YXIgZTt0LmRvbmU/aSh0LnZhbHVlKTooZT10LnZhbHVlLGUgaW5zdGFuY2VvZiBuP2U6bmV3IG4oKGZ1bmN0aW9uKHQpe3QoZSl9KSkpLnRoZW4oYSxzKX1sKChvPW8uYXBwbHkodCxlfHxbXSkpLm5leHQoKSl9KSl9LHI9ZnVuY3Rpb24odCxlKXt2YXIgbixvLGkscixhPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiByPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYocltTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxyO2Z1bmN0aW9uIHMocil7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihyKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7YTspdHJ5e2lmKG49MSxvJiYoaT0yJnJbMF0/by5yZXR1cm46clswXT9vLnRocm93fHwoKGk9by5yZXR1cm4pJiZpLmNhbGwobyksMCk6by5uZXh0KSYmIShpPWkuY2FsbChvLHJbMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChvPTAsaSYmKHI9WzImclswXSxpLnZhbHVlXSksclswXSl7Y2FzZSAwOmNhc2UgMTppPXI7YnJlYWs7Y2FzZSA0OnJldHVybiBhLmxhYmVsKysse3ZhbHVlOnJbMV0sZG9uZTohMX07Y2FzZSA1OmEubGFiZWwrKyxvPXJbMV0scj1bMF07Y29udGludWU7Y2FzZSA3OnI9YS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPWEudHJ5cywoaT1pLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKXx8NiE9PXJbMF0mJjIhPT1yWzBdKSl7YT0wO2NvbnRpbnVlfWlmKDM9PT1yWzBdJiYoIWl8fHJbMV0+aVswXSYmclsxXTxpWzNdKSl7YS5sYWJlbD1yWzFdO2JyZWFrfWlmKDY9PT1yWzBdJiZhLmxhYmVsPGlbMV0pe2EubGFiZWw9aVsxXSxpPXI7YnJlYWt9aWYoaSYmYS5sYWJlbDxpWzJdKXthLmxhYmVsPWlbMl0sYS5vcHMucHVzaChyKTticmVha31pWzJdJiZhLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWV9cj1lLmNhbGwodCxhKX1jYXRjaCh0KXtyPVs2LHRdLG89MH1maW5hbGx5e249aT0wfWlmKDUmclswXSl0aHJvdyByWzFdO3JldHVybnt2YWx1ZTpyWzBdP3JbMV06dm9pZCAwLGRvbmU6ITB9fShbcixzXSl9fX0sYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5fbWluVmFsdWU9MCx0aGlzLl9tYXhWYWx1ZT0xMDAsdGhpcy5fdmFsdWVGcm9tPTAsdGhpcy5fdmFsdWVUbz0xMDAsdGhpcy5fc3RlcFNpemU9MSx0aGlzLl9vblJhbmdlPSExLHRoaXMuX29uVG9vbHRpcD0hMSx0aGlzLl9vblZlcnRpY2FsPSExLHRoaXMuX29uU2NhbGU9ITEsdGhpcy5fc2VydmVyVVJMPVwiaHR0cDovL2xvY2FsaG9zdDo5MDAwL3NsaWRlclwiLHRoaXMuX29ic2VydmVyPXR9cmV0dXJuIHQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD90aGlzLmluaXRNb2RlbEZyb21FbGVtZW50KHQpOnQgaW5zdGFuY2VvZiBGb3JtRGF0YT90aGlzLmluaXRNb2RlbEZyb21TZXJ2ZXIodCk6dGhpcy5pbml0TW9kZWxGcm9tT2JqZWN0KHQpfSx0LnByb3RvdHlwZS5pbml0TW9kZWxGcm9tU2VydmVyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuc2VydmVyVVJMPXQuZ2V0KFwidXJpXCIpLGZldGNoKHRoaXMuc2VydmVyVVJMLHttZXRob2Q6XCJQT1NUXCIsYm9keTp0fSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQuanNvbigpfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBlLmluaXRNb2RlbEZyb21PYmplY3QodCl9KSl9LHQucHJvdG90eXBlLmluaXRNb2RlbEZyb21PYmplY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9zZXJ2ZXJVUkw9dC5zZXJ2ZXJVUkwsdGhpcy5fb2JzZXJ2ZXIoXCJzZXJ2ZXJVUkxcIix0aGlzLl9zZXJ2ZXJVUkwpLHRoaXMuX29uVmVydGljYWw9dC5vblZlcnRpY2FsLHRoaXMuX29ic2VydmVyKFwib25WZXJ0aWNhbFwiLHRoaXMuX29uVmVydGljYWwpLHRoaXMuX29uUmFuZ2U9dC5vblJhbmdlLHRoaXMuX29ic2VydmVyKFwib25SYW5nZVwiLHRoaXMuX29uUmFuZ2UpLHRoaXMuX29uVG9vbHRpcD10Lm9uVG9vbHRpcCx0aGlzLl9vYnNlcnZlcihcIm9uVG9vbHRpcFwiLHRoaXMuX29uVG9vbHRpcCksdGhpcy5fb25TY2FsZT10Lm9uU2NhbGUsdGhpcy5fb2JzZXJ2ZXIoXCJvblNjYWxlXCIsdGhpcy5fb25TY2FsZSksdC5taW5WYWx1ZT90aGlzLl9taW5WYWx1ZT10Lm1pblZhbHVlOnRoaXMuX21pblZhbHVlPTAsdGhpcy5fb2JzZXJ2ZXIoXCJtaW5WYWx1ZVwiLHRoaXMuX21pblZhbHVlKSx0LnN0ZXBTaXplPU1hdGgucm91bmQoTWF0aC5hYnModC5zdGVwU2l6ZSkpLHQuc3RlcFNpemU+MD90aGlzLl9zdGVwU2l6ZT10LnN0ZXBTaXplOnRoaXMuX3N0ZXBTaXplPTEsdGhpcy5fb2JzZXJ2ZXIoXCJzdGVwU2l6ZVwiLHRoaXMuX3N0ZXBTaXplKSx0Lm1heFZhbHVlPnRoaXMuX21pblZhbHVlK3RoaXMuX3N0ZXBTaXplP3RoaXMuX21heFZhbHVlPU1hdGgucm91bmQoKHQubWF4VmFsdWUtdGhpcy5fbWluVmFsdWUpL3RoaXMuX3N0ZXBTaXplKSp0aGlzLl9zdGVwU2l6ZSt0aGlzLl9taW5WYWx1ZTp0aGlzLl9tYXhWYWx1ZT10aGlzLl9zdGVwU2l6ZSt0aGlzLl9taW5WYWx1ZSx0aGlzLl9vYnNlcnZlcihcIm1heFZhbHVlXCIsdGhpcy5fbWF4VmFsdWUpLHQudmFsdWVGcm9tPnRoaXMuX21pblZhbHVlJiZ0LnZhbHVlRnJvbTx0aGlzLl9tYXhWYWx1ZT90aGlzLl92YWx1ZUZyb209TWF0aC5yb3VuZCgodC52YWx1ZUZyb20tdGhpcy5fbWluVmFsdWUpL3RoaXMuX3N0ZXBTaXplKSp0aGlzLl9zdGVwU2l6ZSt0aGlzLl9taW5WYWx1ZTp0LnZhbHVlRnJvbT49dGhpcy5fbWF4VmFsdWU/dGhpcy5fdmFsdWVGcm9tPXRoaXMuX21heFZhbHVlOnRoaXMuX3ZhbHVlRnJvbT10aGlzLl9taW5WYWx1ZSx0aGlzLl9vYnNlcnZlcihcInZhbHVlRnJvbVwiLHRoaXMuX3ZhbHVlRnJvbSksdC52YWx1ZVRvPnRoaXMuX3ZhbHVlRnJvbSYmdC52YWx1ZVRvPHRoaXMuX21heFZhbHVlP3RoaXMuX3ZhbHVlVG89TWF0aC5yb3VuZCgodC52YWx1ZVRvLXRoaXMuX21pblZhbHVlKS90aGlzLl9zdGVwU2l6ZSkqdGhpcy5fc3RlcFNpemUrdGhpcy5fbWluVmFsdWU6dC52YWx1ZVRvPj10aGlzLl9tYXhWYWx1ZT90aGlzLl92YWx1ZVRvPXRoaXMuX21heFZhbHVlOnRoaXMuX3ZhbHVlVG89dGhpcy5fdmFsdWVGcm9tLHRoaXMuX29ic2VydmVyKFwidmFsdWVUb1wiLHRoaXMuX3ZhbHVlVG8pLFsyLCEwXX0pKX0pKX0sdC5wcm90b3R5cGUuaW5pdE1vZGVsRnJvbUVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3JldHVybiBlPXtvblZlcnRpY2FsOlwidHJ1ZVwiPT09dC5kYXRhc2V0Lm9uVmVydGljYWwsb25SYW5nZTpcInRydWVcIj09PXQuZGF0YXNldC5vblJhbmdlLG9uVG9vbHRpcDpcInRydWVcIj09PXQuZGF0YXNldC5vblRvb2x0aXAsb25TY2FsZTpcInRydWVcIj09PXQuZGF0YXNldC5vblNjYWxlLG1pblZhbHVlOk51bWJlcih0LmRhdGFzZXQubWluVmFsdWUpLG1heFZhbHVlOk51bWJlcih0LmRhdGFzZXQubWF4VmFsdWUpLHZhbHVlRnJvbTpOdW1iZXIodC5kYXRhc2V0LnZhbHVlRnJvbSksdmFsdWVUbzpOdW1iZXIodC5kYXRhc2V0LnZhbHVlVG8pLHN0ZXBTaXplOk51bWJlcih0LmRhdGFzZXQuc3RlcFNpemUpLHNlcnZlclVSTDpTdHJpbmcodC5kYXRhc2V0LnNlcnZlclVSTCl9LFsyLHRoaXMuaW5pdE1vZGVsRnJvbU9iamVjdChlKV19KSl9KSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm1pblZhbHVlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9taW5WYWx1ZX0sc2V0OmZ1bmN0aW9uKHQpe3Q8dGhpcy5fdmFsdWVGcm9tP3RoaXMuX21pblZhbHVlPXRoaXMuX3ZhbHVlRnJvbS1NYXRoLnJvdW5kKCh0aGlzLl92YWx1ZUZyb20tdCkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplOnRoaXMuX21pblZhbHVlPXRoaXMuX3ZhbHVlRnJvbSx0aGlzLl9taW5WYWx1ZT09PXRoaXMuX21heFZhbHVlJiYodGhpcy5fbWluVmFsdWU9dGhpcy5fbWluVmFsdWUtdGhpcy5fc3RlcFNpemUpLHRoaXMuX29ic2VydmVyKFwibWluVmFsdWVcIix0aGlzLl9taW5WYWx1ZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibWF4VmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heFZhbHVlfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25SYW5nZSYmdDw9dGhpcy5fdmFsdWVUbz90aGlzLl9tYXhWYWx1ZT10aGlzLl92YWx1ZVRvOnQ8PXRoaXMuX3ZhbHVlRnJvbT90aGlzLl9tYXhWYWx1ZT10aGlzLl92YWx1ZUZyb206dGhpcy5fbWF4VmFsdWU9TWF0aC5yb3VuZCgodC10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlLHRoaXMuX21heFZhbHVlPT09dGhpcy5fbWluVmFsdWUmJih0aGlzLl9tYXhWYWx1ZT10aGlzLl9tYXhWYWx1ZSt0aGlzLl9zdGVwU2l6ZSksdGhpcy5fb2JzZXJ2ZXIoXCJtYXhWYWx1ZVwiLHRoaXMuX21heFZhbHVlKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ2YWx1ZUZyb21cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZhbHVlRnJvbX0sc2V0OmZ1bmN0aW9uKHQpe3Q8PXRoaXMuX21pblZhbHVlP3RoaXMuX3ZhbHVlRnJvbT10aGlzLl9taW5WYWx1ZTp0aGlzLl9vblJhbmdlJiZ0Pj10aGlzLl92YWx1ZVRvP3RoaXMuX3ZhbHVlRnJvbT10aGlzLl92YWx1ZVRvOnQ+PXRoaXMuX21heFZhbHVlP3RoaXMuX3ZhbHVlRnJvbT10aGlzLl9tYXhWYWx1ZTp0aGlzLl92YWx1ZUZyb209TWF0aC5yb3VuZCgodC10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlLHRoaXMuX29ic2VydmVyKFwidmFsdWVGcm9tXCIsdGhpcy5fdmFsdWVGcm9tKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ2YWx1ZVRvXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl92YWx1ZVRvfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25SYW5nZSYmKHQ+dGhpcy5fdmFsdWVGcm9tJiZ0PHRoaXMuX21heFZhbHVlP3RoaXMuX3ZhbHVlVG89TWF0aC5yb3VuZCgodC10aGlzLl92YWx1ZUZyb20pL3RoaXMuX3N0ZXBTaXplKSp0aGlzLl9zdGVwU2l6ZSt0aGlzLl92YWx1ZUZyb206dD49dGhpcy5fbWF4VmFsdWU/dGhpcy5fdmFsdWVUbz10aGlzLl9tYXhWYWx1ZTp0aGlzLl92YWx1ZVRvPXRoaXMuX3ZhbHVlRnJvbSx0aGlzLl9vYnNlcnZlcihcInZhbHVlVG9cIix0aGlzLl92YWx1ZVRvKSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwic3RlcFNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0ZXBTaXplfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9TWF0aC5hYnModGhpcy5fbWF4VmFsdWUtdGhpcy5fbWluVmFsdWUpO3RoaXMuX3N0ZXBTaXplPXQ8ZSYmdD4wP01hdGgucm91bmQodCk6dD49ZT9lOjEsdGhpcy5fb2JzZXJ2ZXIoXCJzdGVwU2l6ZVwiLHRoaXMuX3N0ZXBTaXplKSx0aGlzLl92YWx1ZUZyb20+dGhpcy5fbWluVmFsdWU/dGhpcy5fdmFsdWVGcm9tPU1hdGgucm91bmQoKHRoaXMuX3ZhbHVlRnJvbS10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlOnRoaXMuX3ZhbHVlRnJvbT10aGlzLl9taW5WYWx1ZSx0aGlzLl9vYnNlcnZlcihcInZhbHVlRnJvbVwiLHRoaXMuX3ZhbHVlRnJvbSksdGhpcy5fb25SYW5nZSYmKHRoaXMuX3ZhbHVlVG8+dGhpcy5fdmFsdWVGcm9tP3RoaXMuX3ZhbHVlVG89TWF0aC5yb3VuZCgodGhpcy5fdmFsdWVUby10aGlzLl9taW5WYWx1ZSkvdGhpcy5fc3RlcFNpemUpKnRoaXMuX3N0ZXBTaXplK3RoaXMuX21pblZhbHVlOnRoaXMuX3ZhbHVlVG89dGhpcy5fdmFsdWVGcm9tLHRoaXMuX29ic2VydmVyKFwidmFsdWVUb1wiLHRoaXMuX3ZhbHVlVG8pKSx0aGlzLm1heFZhbHVlPXRoaXMubWF4VmFsdWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwib25WZXJ0aWNhbFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25WZXJ0aWNhbH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX29uVmVydGljYWw9dCx0aGlzLl9vYnNlcnZlcihcIm9uVmVydGljYWxcIix0aGlzLl9vblZlcnRpY2FsKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJvblJhbmdlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vblJhbmdlfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25SYW5nZT10LHRoaXMuX29ic2VydmVyKFwib25SYW5nZVwiLHRoaXMuX29uUmFuZ2UpLHRoaXMudmFsdWVUbz10aGlzLl92YWx1ZVRvfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm9uVG9vbHRpcFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25Ub29sdGlwfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb25Ub29sdGlwPXQsdGhpcy5fb2JzZXJ2ZXIoXCJvblRvb2x0aXBcIix0aGlzLl9vblRvb2x0aXApfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm9uU2NhbGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29uU2NhbGV9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9vblNjYWxlPXQsdGhpcy5fb2JzZXJ2ZXIoXCJvblNjYWxlXCIsdGhpcy5fb25TY2FsZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwic2VydmVyVVJMXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXJ2ZXJVUkx9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9zZXJ2ZXJVUkw9dCx0aGlzLl9vYnNlcnZlcihcInNlcnZlclVSTFwiLHRoaXMuX3NlcnZlclVSTCl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksdH0oKSxzPShuKDQpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuX21vZGVsPW5ldyBhKHRoaXMub2JzZXJ2ZXIuYmluZCh0aGlzKSksdGhpcy52aWV3PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dC1zbGlkZXJcIiksdGhpcy52aWV3LnByZXNlbnRlcj10aGlzLHRoaXMudmlldy5hZGRFdmVudExpc3RlbmVyKFwic2xpZGVyLXZpZXdcIix0aGlzLmhhbmRsZVZpZXdFdmVudHMuYmluZCh0aGlzKSl9cmV0dXJuIHQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCl7dGhpcy5fbW9kZWwuaW5pdCh0KS50aGVuKChmdW5jdGlvbigpe3JldHVybiBjb25zb2xlLmxvZyhcImluaXRpYWxpemF0aW9uIE1vZGVsIHN1Y2Nlc3NmdWxcIiksITB9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3JldHVybiBjb25zb2xlLmxvZyhcIkVycm9yIG1vZGVsIGluaXRpYWxpemF0aW9uLlwiLHQpLCExfSkpfSx0LnByb3RvdHlwZS5zZXRQcm9wcz1mdW5jdGlvbih0LGUpe3RoaXMuX21vZGVsW3RdPWV9LHQucHJvdG90eXBlLmdldFByb3BzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9tb2RlbFt0XX0sdC5wcm90b3R5cGUuaGFuZGxlVmlld0V2ZW50cz1mdW5jdGlvbih0KXtzd2l0Y2godC5zdG9wUHJvcGFnYXRpb24oKSx0LmRldGFpbC5uYW1lKXtjYXNlXCJ2YWx1ZUZyb21cIjpjYXNlXCJ2YWx1ZVRvXCI6dGhpcy5zZXRQcm9wcyh0LmRldGFpbC5uYW1lLHRoaXMuY2FsY0Zyb21Ub1ZhbHVlcyh0KSl9fSx0LnByb3RvdHlwZS5jYWxjRnJvbVRvVmFsdWVzPWZ1bmN0aW9uKHQpe3ZhciBlPSh0aGlzLl9tb2RlbC5tYXhWYWx1ZS10aGlzLl9tb2RlbC5taW5WYWx1ZSkvMTAwLG49dGhpcy5fbW9kZWwuc3RlcFNpemUvZTtyZXR1cm4gZT1lKihuPU1hdGgucm91bmQodC5kZXRhaWwudmFsdWUvbikqbikrdGhpcy5fbW9kZWwubWluVmFsdWUsTWF0aC5yb3VuZChlKX0sdC5wcm90b3R5cGUub2JzZXJ2ZXI9ZnVuY3Rpb24odCxlKXt0aGlzLnZpZXcuc2V0TW9kZWxEYXRhKHQsZSksdGhpcy52aWV3LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwic2xpZGVyLWRhdGFcIix7YnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNvbXBvc2VkOiEwLGRldGFpbDp7bmFtZTp0LHZhbHVlOmV9fSkpfSx0fSgpKTshZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXtyZXR1cm5cInByZXNlbnRlclwiaW4gdH10LmZuLnNsaWRlcj1mdW5jdGlvbihuLG8pe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm4gdGhpczt2YXIgaT1bXTtpZih2b2lkIDA9PT1uKXJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7ZSh0aGlzKSYmaS5wdXNoKHRoaXMpfSkpLHQoKS5wdXNoU3RhY2soaSk7aWYoXCJpbml0XCI9PT1uKXJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7aWYoZSh0aGlzKSlvJiZ0aGlzLnByZXNlbnRlciYmdGhpcy5wcmVzZW50ZXIuaW5pdChvKSxpLnB1c2godGhpcyk7ZWxzZXt2YXIgdD1uZXcgczt0LnZpZXcuY2xhc3NOYW1lPXRoaXMuY2xhc3NOYW1lLHRoaXMucmVwbGFjZVdpdGgodC52aWV3KSxpLnB1c2godC52aWV3KSx2b2lkIDA9PT1vP3QuaW5pdCh0aGlzKTp0LmluaXQobyl9fSkpLHQoKS5wdXNoU3RhY2soaSk7aWYobil7aWYodm9pZCAwIT09b3x8IWUodGhpc1swXSkpcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtpZihlKHRoaXMpJiZ0aGlzLnByZXNlbnRlcilyZXR1cm4gdGhpcy5wcmVzZW50ZXIuc2V0UHJvcHMobixvKX0pKSx0aGlzO2lmKHRoaXNbMF0ucHJlc2VudGVyKXJldHVybiB0aGlzWzBdLnByZXNlbnRlci5nZXRQcm9wcyhuKX19fShvKX1dKTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9yYW5nZS1zbGlkZXIuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vZGF0ZS1maWx0ZXIuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4uL2NoZWNrYm94L2NoZWNrYm94JztcclxuaW1wb3J0ICcuL2NoZWNrYm94LWxpc3Quc2Fzcyc7XHJcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2NoZWNrYm94LnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2NoZWNrYm94LWxpc3Quc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vY2hlY2tib3gtZ3JvdXAuc2Fzcyc7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vY2hlY2tib3gtZ3JvdXAuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgJy4vcGFnaW5hdGlvbi5zYXNzJzsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9wYWdpbmF0aW9uLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0ICcuLi9jaGVja2JveC9jaGVja2JveCc7XHJcbmltcG9ydCAnLi9jaGVja2JveC1yaWNoLnNhc3MnO1xyXG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9jaGVja2JveC1yaWNoLnNhc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL2NhcmQtcm9vbS5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCAnLi4vcGFnaW5hdGlvbi1jYXJkcy9wYWdpbmF0aW9uLWNhcmRzJztcclxuaW1wb3J0ICcuLi9maWx0ZXIvZmlsdGVyJztcclxuaW1wb3J0ICcuLi90ZW1wbGF0ZS1zaXRlL3RlbXBsYXRlLXNpdGUnO1xyXG5pbXBvcnQgJy4vcGFnZS1yb29tLXNlYXJjaC5zYXNzJztcclxuXHJcbiIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0IENhcmRSb29tIGZyb20gJy4uL2NhcmQtcm9vbS9jYXJkLXJvb20nO1xyXG5pbXBvcnQgcm9vbURhdGEgZnJvbSAnLi4vY2FyZC1yb29tL2NhcmQtcm9vbS5qc29uJztcclxuaW1wb3J0ICcuLi9wYWdpbmF0aW9uL3BhZ2luYXRpb24nO1xyXG5pbXBvcnQgJy4vcGFnaW5hdGlvbi1jYXJkcy5zYXNzJztcclxuXHJcblxyXG5jb25zdCAkcGFnaW5hdGlvbkNhcmRzID0gJCgnLnBhZ2luYXRpb24tY2FyZHMnKTtcclxuY29uc3QgJHJvb21DYXJkcyA9ICRwYWdpbmF0aW9uQ2FyZHMuZmluZCgnLmNhcmQtcm9vbScpO1xyXG5cclxuJHJvb21DYXJkcy5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgbmV3IENhcmRSb29tKCQodGhpcyksIHJvb21EYXRhW2ldKTtcclxufSlcclxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vcGFnaW5hdGlvbi1jYXJkcy5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCBEYXRlRmlsdGVyIGZyb20gJy4uL2RhdGUtZmlsdGVyL2RhdGUtZmlsdGVyJztcclxuaW1wb3J0IERyb3Bkb3duUXVhbnRpdHkgZnJvbSAnLi4vZHJvcGRvd24tcXVhbnRpdHkvZHJvcGRvd24tcXVhbnRpdHknO1xyXG5pbXBvcnQgUmFuZ2VTbGlkZXIgZnJvbSAnLi4vcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlcic7XHJcbmltcG9ydCAnLi4vY2hlY2tib3gtZ3JvdXAvY2hlY2tib3gtZ3JvdXAnO1xyXG5pbXBvcnQgJy4uL2NoZWNrYm94LXJpY2gvY2hlY2tib3gtcmljaCc7XHJcbmltcG9ydCAnLi4vY2hlY2tib3gtbGlzdC9jaGVja2JveC1saXN0JztcclxuaW1wb3J0ICcuL2ZpbHRlci5zYXNzJztcclxuXHJcblxyXG5sZXQgJGZpbHRlciA9ICQoJy5maWx0ZXInKTtcclxubGV0ICRyYW5nZVNsaWRlciA9ICRmaWx0ZXIuZmluZCgnLnJhbmdlLXNsaWRlcicpO1xyXG5sZXQgJGRhdGVGaWx0ZXIgPSAkZmlsdGVyLmZpbmQoJy5kYXRlLWZpbHRlcicpO1xyXG5sZXQgJGRyb3Bkb3duUXVhbnRpdHkgPSAkZmlsdGVyLmZpbmQoJy5kcm9wZG93bi1xdWFudGl0eScpO1xyXG5cclxubmV3IERhdGVGaWx0ZXIoJGRhdGVGaWx0ZXIuZXEoMCkpO1xyXG5uZXcgUmFuZ2VTbGlkZXIoJHJhbmdlU2xpZGVyKTtcclxubmV3IERyb3Bkb3duUXVhbnRpdHkoJGRyb3Bkb3duUXVhbnRpdHkuZXEoMCkpO1xyXG5uZXcgRHJvcGRvd25RdWFudGl0eSgkZHJvcGRvd25RdWFudGl0eS5lcSgxKSwgJ3Jvb20nKTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTQhLi9maWx0ZXIuc2Fzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vcGFnZS1yb29tLXNlYXJjaC5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwic291cmNlUm9vdCI6IiJ9